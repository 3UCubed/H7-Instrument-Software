
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc08  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fea0  0800fea0  0001fea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fef8  0800fef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ff00  0800ff00  0001ff00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ff04  0800ff04  0001ff04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  0800ff08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b8  24000040  0800ff40  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240005f8  0800ff40  000205f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023983  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035e5  00000000  00000000  000439e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  00046fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a8  00000000  00000000  00048ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  0004a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000239e9  00000000  00000000  000851f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ff57  00000000  00000000  000a8be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228b39  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007530  00000000  00000000  00228b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fe88 	.word	0x0800fe88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800fe88 	.word	0x0800fe88

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a9c      	ldr	r2, [pc, #624]	; (8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 833d 	bne.w	8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4b9b      	ldr	r3, [pc, #620]	; (8000888 <HAL_TIM_OC_DelayElapsedCallback+0x280>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 80c3 	beq.w	80007aa <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4898      	ldr	r0, [pc, #608]	; (800088c <HAL_TIM_OC_DelayElapsedCallback+0x284>)
 800062c:	f007 f9f0 	bl	8007a10 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	4995      	ldr	r1, [pc, #596]	; (8000890 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 800063c:	4895      	ldr	r0, [pc, #596]	; (8000894 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 800063e:	f00b fa65 	bl	800bb0c <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4b91      	ldr	r3, [pc, #580]	; (8000890 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4b90      	ldr	r3, [pc, #576]	; (8000894 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b8f      	ldr	r3, [pc, #572]	; (8000894 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		uint32_t current_step = DAC_OUT[step];
 8000660:	4b8d      	ldr	r3, [pc, #564]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b8d      	ldr	r3, [pc, #564]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800066e:	4b8a      	ldr	r3, [pc, #552]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b89      	ldr	r3, [pc, #548]	; (800089c <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4888      	ldr	r0, [pc, #544]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 8000680:	f004 f885 	bl	800478e <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4886      	ldr	r0, [pc, #536]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 8000688:	f004 f82f 	bl	80046ea <HAL_DAC_Start>

		if (auto_sweep) {
 800068c:	4b85      	ldr	r3, [pc, #532]	; (80008a4 <HAL_TIM_OC_DelayElapsedCallback+0x29c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01f      	beq.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0xcc>
			if (step == 7) {
 8000694:	4b80      	ldr	r3, [pc, #512]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d103      	bne.n	80006a4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>
				is_increasing = 0;
 800069c:	4b82      	ldr	r3, [pc, #520]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e006      	b.n	80006b2 <HAL_TIM_OC_DelayElapsedCallback+0xaa>
			} else if (step == 0) {
 80006a4:	4b7c      	ldr	r3, [pc, #496]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <HAL_TIM_OC_DelayElapsedCallback+0xaa>
				is_increasing = 1;
 80006ac:	4b7e      	ldr	r3, [pc, #504]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
			}

			if (is_increasing) {
 80006b2:	4b7d      	ldr	r3, [pc, #500]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
				step++;
 80006ba:	4b77      	ldr	r3, [pc, #476]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b75      	ldr	r3, [pc, #468]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e005      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0xcc>
			} else {
				step--;
 80006c8:	4b73      	ldr	r3, [pc, #460]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b71      	ldr	r3, [pc, #452]	; (8000898 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 80006d2:	701a      	strb	r2, [r3, #0]
			}
		}



        HAL_ADC_Stop_DMA(&hadc1);
 80006d4:	4875      	ldr	r0, [pc, #468]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 80006d6:	f002 fe3b 	bl	8003350 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 80006da:	2220      	movs	r2, #32
 80006dc:	4974      	ldr	r1, [pc, #464]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80006de:	4873      	ldr	r0, [pc, #460]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 80006e0:	f002 fd72 	bl	80031c8 <HAL_ADC_Start_DMA>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_TIM_OC_DelayElapsedCallback+0xe6>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 80006ea:	f001 fbaf 	bl	8001e4c <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 80006ee:	4b70      	ldr	r3, [pc, #448]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80006f0:	8b5b      	ldrh	r3, [r3, #26]
 80006f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 80006f4:	4b6e      	ldr	r3, [pc, #440]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80006f6:	8b9b      	ldrh	r3, [r3, #28]
 80006f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 80006fa:	4b6d      	ldr	r3, [pc, #436]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80006fc:	8bdb      	ldrh	r3, [r3, #30]
 80006fe:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 8000700:	4b6b      	ldr	r3, [pc, #428]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	853b      	strh	r3, [r7, #40]	; 0x28

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000706:	22aa      	movs	r2, #170	; 0xaa
 8000708:	4b6a      	ldr	r3, [pc, #424]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800070a:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800070c:	22aa      	movs	r2, #170	; 0xaa
 800070e:	4b69      	ldr	r3, [pc, #420]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000710:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000712:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b65      	ldr	r3, [pc, #404]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800071e:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000720:	4b65      	ldr	r3, [pc, #404]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b63      	ldr	r3, [pc, #396]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000728:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800072a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b60      	ldr	r3, [pc, #384]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000734:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 8000736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b5e      	ldr	r3, [pc, #376]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800073c:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 800073e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29b      	uxth	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000748:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 800074a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000750:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800075c:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 800075e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000764:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000770:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000778:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 800077a:	4a4e      	ldr	r2, [pc, #312]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800077c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000780:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000784:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000788:	7353      	strb	r3, [r2, #13]


		erpa_seq++;
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000794:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000796:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <HAL_TIM_OC_DelayElapsedCallback+0x280>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d005      	beq.n	80007aa <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	220e      	movs	r2, #14
 80007a2:	4944      	ldr	r1, [pc, #272]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007a4:	4845      	ldr	r0, [pc, #276]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 80007a6:	f00c ff7b 	bl	800d6a0 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 80007aa:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 82bc 	beq.w	8000d2c <HAL_TIM_OC_DelayElapsedCallback+0x724>
      {
        if (hk_counter == HK_CADENCE)
 80007b4:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2201      	movs	r2, #1
 80007ba:	4293      	cmp	r3, r2
 80007bc:	f040 8252 	bne.w	8000c64 <HAL_TIM_OC_DelayElapsedCallback+0x65c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 80007c0:	2300      	movs	r3, #0
 80007c2:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	b299      	uxth	r1, r3
 80007c8:	f107 0208 	add.w	r2, r7, #8
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	483c      	ldr	r0, [pc, #240]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 80007d6:	f007 f9dd 	bl	8007b94 <HAL_I2C_Master_Transmit>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          if (ret != HAL_OK)
 80007e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d009      	beq.n	80007fc <HAL_TIM_OC_DelayElapsedCallback+0x1f4>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4a37      	ldr	r2, [pc, #220]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80007ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f0:	c303      	stmia	r3!, {r0, r1}
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	3302      	adds	r3, #2
 80007f6:	0c12      	lsrs	r2, r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e024      	b.n	8000846 <HAL_TIM_OC_DelayElapsedCallback+0x23e>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	b299      	uxth	r1, r3
 8000800:	f107 0208 	add.w	r2, r7, #8
 8000804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2302      	movs	r3, #2
 800080c:	482e      	ldr	r0, [pc, #184]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800080e:	f007 fab5 	bl	8007d7c <HAL_I2C_Master_Receive>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <HAL_TIM_OC_DelayElapsedCallback+0x22c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000826:	ca07      	ldmia	r2, {r0, r1, r2}
 8000828:	c303      	stmia	r3!, {r0, r1}
 800082a:	801a      	strh	r2, [r3, #0]
 800082c:	3302      	adds	r3, #2
 800082e:	0c12      	lsrs	r2, r2, #16
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e008      	b.n	8000846 <HAL_TIM_OC_DelayElapsedCallback+0x23e>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 8000834:	7a3b      	ldrb	r3, [r7, #8]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 800083a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800083e:	7a7a      	ldrb	r2, [r7, #9]
 8000840:	4313      	orrs	r3, r2
 8000842:	10db      	asrs	r3, r3, #3
 8000844:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 8000846:	2300      	movs	r3, #0
 8000848:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 800084a:	2394      	movs	r3, #148	; 0x94
 800084c:	b299      	uxth	r1, r3
 800084e:	f107 0208 	add.w	r2, r7, #8
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800085c:	f007 f99a 	bl	8007b94 <HAL_I2C_Master_Transmit>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086a:	2b00      	cmp	r3, #0
 800086c:	d032      	beq.n	80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	c303      	stmia	r3!, {r0, r1}
 8000878:	801a      	strh	r2, [r3, #0]
 800087a:	3302      	adds	r3, #2
 800087c:	0c12      	lsrs	r2, r2, #16
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e04d      	b.n	800091e <HAL_TIM_OC_DelayElapsedCallback+0x316>
 8000882:	bf00      	nop
 8000884:	240003d0 	.word	0x240003d0
 8000888:	24000025 	.word	0x24000025
 800088c:	58020400 	.word	0x58020400
 8000890:	240005ac 	.word	0x240005ac
 8000894:	240002fc 	.word	0x240002fc
 8000898:	240005a0 	.word	0x240005a0
 800089c:	24000000 	.word	0x24000000
 80008a0:	24000214 	.word	0x24000214
 80008a4:	240005a4 	.word	0x240005a4
 80008a8:	24000020 	.word	0x24000020
 80008ac:	2400005c 	.word	0x2400005c
 80008b0:	24000520 	.word	0x24000520
 80008b4:	240005b0 	.word	0x240005b0
 80008b8:	240005be 	.word	0x240005be
 80008bc:	2400041c 	.word	0x2400041c
 80008c0:	24000026 	.word	0x24000026
 80008c4:	240005f0 	.word	0x240005f0
 80008c8:	24000228 	.word	0x24000228
 80008cc:	0800fea0 	.word	0x0800fea0
 80008d0:	0800feac 	.word	0x0800feac
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 80008d4:	2394      	movs	r3, #148	; 0x94
 80008d6:	b299      	uxth	r1, r3
 80008d8:	f107 0208 	add.w	r2, r7, #8
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	484c      	ldr	r0, [pc, #304]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 80008e6:	f007 fa49 	bl	8007d7c <HAL_I2C_Master_Receive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80008f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d009      	beq.n	800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <HAL_TIM_OC_DelayElapsedCallback+0x414>)
 80008fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000900:	c303      	stmia	r3!, {r0, r1}
 8000902:	801a      	strh	r2, [r3, #0]
 8000904:	3302      	adds	r3, #2
 8000906:	0c12      	lsrs	r2, r2, #16
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	e008      	b.n	800091e <HAL_TIM_OC_DelayElapsedCallback+0x316>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800090c:	7a3b      	ldrb	r3, [r7, #8]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000912:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000916:	7a7a      	ldrb	r2, [r7, #9]
 8000918:	4313      	orrs	r3, r2
 800091a:	10db      	asrs	r3, r3, #3
 800091c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800091e:	2300      	movs	r3, #0
 8000920:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000922:	2392      	movs	r3, #146	; 0x92
 8000924:	b299      	uxth	r1, r3
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	4839      	ldr	r0, [pc, #228]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 8000934:	f007 f92e 	bl	8007b94 <HAL_I2C_Master_Transmit>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800093e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000942:	2b00      	cmp	r3, #0
 8000944:	d009      	beq.n	800095a <HAL_TIM_OC_DelayElapsedCallback+0x352>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4a35      	ldr	r2, [pc, #212]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x418>)
 800094c:	ca07      	ldmia	r2, {r0, r1, r2}
 800094e:	c303      	stmia	r3!, {r0, r1}
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	3302      	adds	r3, #2
 8000954:	0c12      	lsrs	r2, r2, #16
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e024      	b.n	80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800095a:	2392      	movs	r3, #146	; 0x92
 800095c:	b299      	uxth	r1, r3
 800095e:	f107 0208 	add.w	r2, r7, #8
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2302      	movs	r3, #2
 800096a:	482b      	ldr	r0, [pc, #172]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 800096c:	f007 fa06 	bl	8007d7c <HAL_I2C_Master_Receive>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097a:	2b00      	cmp	r3, #0
 800097c:	d009      	beq.n	8000992 <HAL_TIM_OC_DelayElapsedCallback+0x38a>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_TIM_OC_DelayElapsedCallback+0x414>)
 8000984:	ca07      	ldmia	r2, {r0, r1, r2}
 8000986:	c303      	stmia	r3!, {r0, r1}
 8000988:	801a      	strh	r2, [r3, #0]
 800098a:	3302      	adds	r3, #2
 800098c:	0c12      	lsrs	r2, r2, #16
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e008      	b.n	80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000992:	7a3b      	ldrb	r3, [r7, #8]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 8000998:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800099c:	7a7a      	ldrb	r2, [r7, #9]
 800099e:	4313      	orrs	r3, r2
 80009a0:	10db      	asrs	r3, r3, #3
 80009a2:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 80009a4:	2300      	movs	r3, #0
 80009a6:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 80009a8:	2396      	movs	r3, #150	; 0x96
 80009aa:	b299      	uxth	r1, r3
 80009ac:	f107 0208 	add.w	r2, r7, #8
 80009b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2301      	movs	r3, #1
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 80009ba:	f007 f8eb 	bl	8007b94 <HAL_I2C_Master_Transmit>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80009c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x3d8>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_TIM_OC_DelayElapsedCallback+0x418>)
 80009d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d4:	c303      	stmia	r3!, {r0, r1}
 80009d6:	801a      	strh	r2, [r3, #0]
 80009d8:	3302      	adds	r3, #2
 80009da:	0c12      	lsrs	r2, r2, #16
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e02a      	b.n	8000a36 <HAL_TIM_OC_DelayElapsedCallback+0x42e>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80009e0:	2396      	movs	r3, #150	; 0x96
 80009e2:	b299      	uxth	r1, r3
 80009e4:	f107 0208 	add.w	r2, r7, #8
 80009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2302      	movs	r3, #2
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_TIM_OC_DelayElapsedCallback+0x410>)
 80009f2:	f007 f9c3 	bl	8007d7c <HAL_I2C_Master_Receive>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80009fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00f      	beq.n	8000a24 <HAL_TIM_OC_DelayElapsedCallback+0x41c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_OC_DelayElapsedCallback+0x414>)
 8000a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a0c:	c303      	stmia	r3!, {r0, r1}
 8000a0e:	801a      	strh	r2, [r3, #0]
 8000a10:	3302      	adds	r3, #2
 8000a12:	0c12      	lsrs	r2, r2, #16
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e00e      	b.n	8000a36 <HAL_TIM_OC_DelayElapsedCallback+0x42e>
 8000a18:	24000228 	.word	0x24000228
 8000a1c:	0800feac 	.word	0x0800feac
 8000a20:	0800fea0 	.word	0x0800fea0
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 8000a2a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000a2e:	7a7a      	ldrb	r2, [r7, #9]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	10db      	asrs	r3, r3, #3
 8000a34:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Stop_DMA(&hadc3);
 8000a36:	488e      	ldr	r0, [pc, #568]	; (8000c70 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000a38:	f002 fc8a 	bl	8003350 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc3,
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	498d      	ldr	r1, [pc, #564]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000a40:	488b      	ldr	r0, [pc, #556]	; (8000c70 <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 8000a42:	f002 fbc1 	bl	80031c8 <HAL_ADC_Start_DMA>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0x448>
          (uint32_t *)aADC3ConvertedData,
          ADC_CONVERTED_DATA_BUFFER_SIZE)
          != HAL_OK) {
             Error_Handler();
 8000a4c:	f001 f9fe 	bl	8001e4c <Error_Handler>
          }

          uint16_t vrefint = aADC3ConvertedData[1];
 8000a50:	4b88      	ldr	r3, [pc, #544]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000a52:	885b      	ldrh	r3, [r3, #2]
 8000a54:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t vsense = aADC3ConvertedData[2];
 8000a56:	4b87      	ldr	r3, [pc, #540]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PF9 = aADC3ConvertedData[0];
 8000a5c:	4b85      	ldr	r3, [pc, #532]	; (8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	843b      	strh	r3, [r7, #32]


          HAL_ADC_Stop_DMA(&hadc1);
 8000a62:	4885      	ldr	r0, [pc, #532]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000a64:	f002 fc74 	bl	8003350 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 8000a68:	2220      	movs	r2, #32
 8000a6a:	4984      	ldr	r1, [pc, #528]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a6c:	4882      	ldr	r0, [pc, #520]	; (8000c78 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000a6e:	f002 fbab 	bl	80031c8 <HAL_ADC_Start_DMA>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x474>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 8000a78:	f001 f9e8 	bl	8001e4c <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 8000a7c:	4b7f      	ldr	r3, [pc, #508]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a7e:	889b      	ldrh	r3, [r3, #4]
 8000a80:	83fb      	strh	r3, [r7, #30]
          uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000a82:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a84:	885b      	ldrh	r3, [r3, #2]
 8000a86:	83bb      	strh	r3, [r7, #28]
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000a88:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a8a:	891b      	ldrh	r3, [r3, #8]
 8000a8c:	837b      	strh	r3, [r7, #26]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a90:	895b      	ldrh	r3, [r3, #10]
 8000a92:	833b      	strh	r3, [r7, #24]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 8000a94:	4b79      	ldr	r3, [pc, #484]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a96:	899b      	ldrh	r3, [r3, #12]
 8000a98:	82fb      	strh	r3, [r7, #22]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 8000a9a:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000a9c:	89db      	ldrh	r3, [r3, #14]
 8000a9e:	82bb      	strh	r3, [r7, #20]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 8000aa0:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000aa2:	8a1b      	ldrh	r3, [r3, #16]
 8000aa4:	827b      	strh	r3, [r7, #18]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 8000aa6:	4b75      	ldr	r3, [pc, #468]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000aa8:	8a5b      	ldrh	r3, [r3, #18]
 8000aaa:	823b      	strh	r3, [r7, #16]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 8000aac:	4b73      	ldr	r3, [pc, #460]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000aae:	8a9b      	ldrh	r3, [r3, #20]
 8000ab0:	81fb      	strh	r3, [r7, #14]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000ab2:	4b72      	ldr	r3, [pc, #456]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000ab4:	8adb      	ldrh	r3, [r3, #22]
 8000ab6:	81bb      	strh	r3, [r7, #12]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000ab8:	22cc      	movs	r2, #204	; 0xcc
 8000aba:	4b71      	ldr	r3, [pc, #452]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000abc:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000abe:	22cc      	movs	r2, #204	; 0xcc
 8000ac0:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000ac2:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000ac4:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b6c      	ldr	r3, [pc, #432]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000ad0:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000ad2:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000ada:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 8000adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000ae6:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000aee:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000afa:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 8000afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b02:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000b04:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000b08:	121b      	asrs	r3, r3, #8
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b5c      	ldr	r3, [pc, #368]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b0e:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000b10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b16:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000b18:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000b1c:	121b      	asrs	r3, r3, #8
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b22:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000b24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b2a:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000b2c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000b30:	121b      	asrs	r3, r3, #8
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b36:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b3e:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000b40:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000b44:	121b      	asrs	r3, r3, #8
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b4a:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000b4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b52:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000b54:	8bfb      	ldrh	r3, [r7, #30]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b5e:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000b60:	8bfb      	ldrh	r3, [r7, #30]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b66:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000b68:	8bbb      	ldrh	r3, [r7, #28]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b72:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000b74:	8bbb      	ldrh	r3, [r7, #28]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b7a:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000b7c:	8b7b      	ldrh	r3, [r7, #26]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b86:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000b88:	8b7b      	ldrh	r3, [r7, #26]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b8e:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000b90:	8b3b      	ldrh	r3, [r7, #24]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000b9a:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000b9c:	8b3b      	ldrh	r3, [r7, #24]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000ba2:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000ba4:	8afb      	ldrh	r3, [r7, #22]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bae:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000bb0:	8afb      	ldrh	r3, [r7, #22]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bb6:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000bb8:	8abb      	ldrh	r3, [r7, #20]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bc2:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000bc4:	8abb      	ldrh	r3, [r7, #20]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bca:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000bcc:	8a7b      	ldrh	r3, [r7, #18]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bd6:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000bd8:	8a7b      	ldrh	r3, [r7, #18]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bde:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000be0:	8a3b      	ldrh	r3, [r7, #16]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bea:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000bec:	8a3b      	ldrh	r3, [r7, #16]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bf2:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000c0c:	89bb      	ldrh	r3, [r7, #12]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000c1a:	89bb      	ldrh	r3, [r7, #12]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c20:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PF9 & 0xFF00) >> 8);
 8000c24:	8c3b      	ldrh	r3, [r7, #32]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PF9 & 0xFF);
 8000c32:	8c3b      	ldrh	r3, [r7, #32]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d005      	beq.n	8000c50 <HAL_TIM_OC_DelayElapsedCallback+0x648>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	2226      	movs	r2, #38	; 0x26
 8000c48:	490d      	ldr	r1, [pc, #52]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 8000c4c:	f00c fd28 	bl	800d6a0 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000c60:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000c62:	e063      	b.n	8000d2c <HAL_TIM_OC_DelayElapsedCallback+0x724>
          hk_counter++;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	e05d      	b.n	8000d2c <HAL_TIM_OC_DelayElapsedCallback+0x724>
 8000c70:	240000c0 	.word	0x240000c0
 8000c74:	24000560 	.word	0x24000560
 8000c78:	2400005c 	.word	0x2400005c
 8000c7c:	24000520 	.word	0x24000520
 8000c80:	240005c8 	.word	0x240005c8
 8000c84:	240005ee 	.word	0x240005ee
 8000c88:	24000026 	.word	0x24000026
 8000c8c:	2400041c 	.word	0x2400041c
 8000c90:	240005f0 	.word	0x240005f0
  else if (htim == &htim1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <HAL_TIM_OC_DelayElapsedCallback+0x72c>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d147      	bne.n	8000d2c <HAL_TIM_OC_DelayElapsedCallback+0x724>
      if (PMT_ON)
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d043      	beq.n	8000d2c <HAL_TIM_OC_DelayElapsedCallback+0x724>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000ca4:	bf00      	nop
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000cac:	f006 feb0 	bl	8007a10 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f7      	bne.n	8000ca6 <HAL_TIM_OC_DelayElapsedCallback+0x69e>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4921      	ldr	r1, [pc, #132]	; (8000d40 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000cbc:	4821      	ldr	r0, [pc, #132]	; (8000d44 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000cbe:	f00a ff25 	bl	800bb0c <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cde:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000ce0:	22bb      	movs	r2, #187	; 0xbb
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000ce4:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000ce6:	22bb      	movs	r2, #187	; 0xbb
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000cea:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000cf8:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000d02:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000d06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d0a:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d12:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000d1e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2206      	movs	r2, #6
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 8000d28:	f00c fcba 	bl	800d6a0 <HAL_UART_Transmit>
}
 8000d2c:	bf00      	nop
 8000d2e:	3740      	adds	r7, #64	; 0x40
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	24000384 	.word	0x24000384
 8000d38:	24000024 	.word	0x24000024
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	240005a8 	.word	0x240005a8
 8000d44:	24000274 	.word	0x24000274
 8000d48:	240005c0 	.word	0x240005c0
 8000d4c:	240005c6 	.word	0x240005c6
 8000d50:	2400041c 	.word	0x2400041c

08000d54 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4998      	ldr	r1, [pc, #608]	; (8000fc0 <HAL_UART_RxCpltCallback+0x26c>)
 8000d60:	4898      	ldr	r0, [pc, #608]	; (8000fc4 <HAL_UART_RxCpltCallback+0x270>)
 8000d62:	f00c fd33 	bl	800d7cc <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000d66:	4b96      	ldr	r3, [pc, #600]	; (8000fc0 <HAL_UART_RxCpltCallback+0x26c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b1d      	cmp	r3, #29
 8000d70:	f200 8121 	bhi.w	8000fb6 <HAL_UART_RxCpltCallback+0x262>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <HAL_UART_RxCpltCallback+0x28>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000e81 	.word	0x08000e81
 8000d80:	08000e9d 	.word	0x08000e9d
 8000d84:	08000eb9 	.word	0x08000eb9
 8000d88:	08000ed9 	.word	0x08000ed9
 8000d8c:	08000ef9 	.word	0x08000ef9
 8000d90:	08000f15 	.word	0x08000f15
 8000d94:	08000f35 	.word	0x08000f35
 8000d98:	08000f55 	.word	0x08000f55
 8000d9c:	08000e11 	.word	0x08000e11
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e03 	.word	0x08000e03
 8000da8:	08000df5 	.word	0x08000df5
 8000dac:	08000f71 	.word	0x08000f71
 8000db0:	08000f81 	.word	0x08000f81
 8000db4:	08000f91 	.word	0x08000f91
 8000db8:	08000fa1 	.word	0x08000fa1
 8000dbc:	08000f89 	.word	0x08000f89
 8000dc0:	08000f99 	.word	0x08000f99
 8000dc4:	08000fa9 	.word	0x08000fa9
 8000dc8:	08000e8f 	.word	0x08000e8f
 8000dcc:	08000eab 	.word	0x08000eab
 8000dd0:	08000ec9 	.word	0x08000ec9
 8000dd4:	08000ee9 	.word	0x08000ee9
 8000dd8:	08000f07 	.word	0x08000f07
 8000ddc:	08000f25 	.word	0x08000f25
 8000de0:	08000f45 	.word	0x08000f45
 8000de4:	08000f63 	.word	0x08000f63
 8000de8:	08000e2d 	.word	0x08000e2d
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e5d 	.word	0x08000e5d
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000df4:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <HAL_UART_RxCpltCallback+0x274>)
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 fe20 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e00:	e0d9      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <HAL_UART_RxCpltCallback+0x274>)
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	2200      	movs	r2, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 fe19 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e0e:	e0d2      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000e10:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <HAL_UART_RxCpltCallback+0x274>)
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	2201      	movs	r2, #1
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 fe12 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e1c:	e0cb      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <HAL_UART_RxCpltCallback+0x274>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	2200      	movs	r2, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f006 fe0b 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e2a:	e0c4      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000e2c:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	f200 80bd 	bhi.w	8000fb0 <HAL_UART_RxCpltCallback+0x25c>
    {
      step++;
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b63      	ldr	r3, [pc, #396]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e40:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000e42:	e0b5      	b.n	8000fb0 <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000e44:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80b3 	beq.w	8000fb4 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e58:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000e5a:	e0ab      	b.n	8000fb4 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000e5c:	4b5c      	ldr	r3, [pc, #368]	; (8000fd0 <HAL_UART_RxCpltCallback+0x27c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000e64:	4b5a      	ldr	r3, [pc, #360]	; (8000fd0 <HAL_UART_RxCpltCallback+0x27c>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
		step = 0;
 8000e6a:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000e70:	e0a1      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000e72:	4b57      	ldr	r3, [pc, #348]	; (8000fd0 <HAL_UART_RxCpltCallback+0x27c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
		step = 0;
 8000e78:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <HAL_UART_RxCpltCallback+0x278>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  	break;
 8000e7e:	e09a      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e80:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_UART_RxCpltCallback+0x280>)
 8000e82:	2120      	movs	r1, #32
 8000e84:	2201      	movs	r2, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fdda 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e8c:	e093      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_UART_RxCpltCallback+0x280>)
 8000e90:	2120      	movs	r1, #32
 8000e92:	2200      	movs	r2, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fdd3 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000e9a:	e08c      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <HAL_UART_RxCpltCallback+0x280>)
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f006 fdcc 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000ea8:	e085      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <HAL_UART_RxCpltCallback+0x280>)
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fdc5 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000eb6:	e07e      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000eb8:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f006 fdbd 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000ec6:	e076      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f006 fdb5 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000ed6:	e06e      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ed8:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fdad 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000ee6:	e066      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fda5 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000ef6:	e05e      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	2201      	movs	r2, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f006 fd9e 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f04:	e057      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fd97 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f12:	e050      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 fd8f 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f22:	e048      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 fd87 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f32:	e040      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fd7f 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f42:	e038      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fd77 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f52:	e030      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fd70 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f60:	e029      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_UART_RxCpltCallback+0x284>)
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	2200      	movs	r2, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 fd69 	bl	8007a40 <HAL_GPIO_WritePin>
    break;
 8000f6e:	e022      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000f70:	f001 fd34 	bl	80029dc <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f74:	2101      	movs	r1, #1
 8000f76:	2001      	movs	r0, #1
 8000f78:	f007 fb06 	bl	8008588 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000f7c:	f7ff fb2e 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_UART_RxCpltCallback+0x288>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
    break;
 8000f86:	e016      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_UART_RxCpltCallback+0x288>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
    break;
 8000f8e:	e012      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_UART_RxCpltCallback+0x28c>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
    break;
 8000f96:	e00e      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_UART_RxCpltCallback+0x28c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
    break;
 8000f9e:	e00a      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_UART_RxCpltCallback+0x290>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    break;
 8000fa6:	e006      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_UART_RxCpltCallback+0x290>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
    break;
 8000fae:	e002      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000fb0:	bf00      	nop
 8000fb2:	e000      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x262>
    break;
 8000fb4:	bf00      	nop
  }
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240004ac 	.word	0x240004ac
 8000fc4:	2400041c 	.word	0x2400041c
 8000fc8:	58021400 	.word	0x58021400
 8000fcc:	240005a0 	.word	0x240005a0
 8000fd0:	240005a4 	.word	0x240005a4
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58020800 	.word	0x58020800
 8000fdc:	24000024 	.word	0x24000024
 8000fe0:	24000025 	.word	0x24000025
 8000fe4:	24000026 	.word	0x24000026

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f001 fc40 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f87e 	bl	80010f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff4:	f000 f902 	bl	80011fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 fd90 	bl	8001b1c <MX_GPIO_Init>
  MX_DAC1_Init();
 8000ffc:	f000 fb04 	bl	8001608 <MX_DAC1_Init>
  MX_TIM1_Init();
 8001000:	f000 fc2e 	bl	8001860 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001004:	f000 fcbc 	bl	8001980 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001008:	f000 fb3a 	bl	8001680 <MX_I2C1_Init>
  MX_SPI1_Init();
 800100c:	f000 fb78 	bl	8001700 <MX_SPI1_Init>
  MX_DMA_Init();
 8001010:	f000 fd5c 	bl	8001acc <MX_DMA_Init>
  MX_ADC1_Init();
 8001014:	f000 f920 	bl	8001258 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001018:	f000 fd0c 	bl	8001a34 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 800101c:	f000 fa70 	bl	8001500 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001020:	f000 fbc6 	bl	80017b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8001024:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800102c:	4829      	ldr	r0, [pc, #164]	; (80010d4 <main+0xec>)
 800102e:	f003 f8e9 	bl	8004204 <HAL_ADCEx_Calibration_Start>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8001038:	f000 ff08 	bl	8001e4c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800103c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001044:	4824      	ldr	r0, [pc, #144]	; (80010d8 <main+0xf0>)
 8001046:	f003 f8dd 	bl	8004204 <HAL_ADCEx_Calibration_Start>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 8001050:	f000 fefc 	bl	8001e4c <Error_Handler>
  }

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	4821      	ldr	r0, [pc, #132]	; (80010dc <main+0xf4>)
 8001058:	f00b fa06 	bl	800c468 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800105c:	210c      	movs	r1, #12
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <main+0xf8>)
 8001060:	f00b fa02 	bl	800c468 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001064:	bf00      	nop
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <main+0xfc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d0f7      	beq.n	8001066 <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001076:	bf00      	nop
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <main+0xfc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001086:	d1f7      	bne.n	8001078 <main+0x90>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <main+0x100>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <main+0x100>)
 8001090:	2210      	movs	r2, #16
 8001092:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <main+0x100>)
 8001096:	225b      	movs	r2, #91	; 0x5b
 8001098:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0x100>)
 800109c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <main+0xfc>)
 80010a2:	f00e fd11 	bl	800fac8 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <main+0xc8>
      Error_Handler();
 80010ac:	f000 fece 	bl	8001e4c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <main+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <main+0xfc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80010be:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <main+0xfc>)
 80010c2:	f00e fd5c 	bl	800fb7e <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	; (80010ec <main+0x104>)
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <main+0xfc>)
 80010cc:	f00c fb7e 	bl	800d7cc <HAL_UART_Receive_IT>
 80010d0:	e7f9      	b.n	80010c6 <main+0xde>
 80010d2:	bf00      	nop
 80010d4:	2400005c 	.word	0x2400005c
 80010d8:	240000c0 	.word	0x240000c0
 80010dc:	24000384 	.word	0x24000384
 80010e0:	240003d0 	.word	0x240003d0
 80010e4:	2400041c 	.word	0x2400041c
 80010e8:	24000510 	.word	0x24000510
 80010ec:	240004ac 	.word	0x240004ac

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09c      	sub	sp, #112	; 0x70
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	224c      	movs	r2, #76	; 0x4c
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00e feba 	bl	800fe78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2220      	movs	r2, #32
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f00e feb4 	bl	800fe78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001110:	2002      	movs	r0, #2
 8001112:	f007 fa75 	bl	8008600 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <SystemClock_Config+0x100>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	4a34      	ldr	r2, [pc, #208]	; (80011f0 <SystemClock_Config+0x100>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <SystemClock_Config+0x100>)
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <SystemClock_Config+0x104>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001138:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <SystemClock_Config+0x104>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <SystemClock_Config+0x104>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800114c:	bf00      	nop
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <SystemClock_Config+0x104>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800115a:	d1f8      	bne.n	800114e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <SystemClock_Config+0x108>)
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <SystemClock_Config+0x108>)
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800116c:	2301      	movs	r3, #1
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2340      	movs	r3, #64	; 0x40
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001180:	230c      	movs	r3, #12
 8001182:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001190:	230c      	movs	r3, #12
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001194:	2300      	movs	r3, #0
 8001196:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 fa67 	bl	8008674 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ac:	f000 fe4e 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	233f      	movs	r3, #63	; 0x3f
 80011b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80011b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fe7a 	bl	8008ed0 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011e2:	f000 fe33 	bl	8001e4c <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3770      	adds	r7, #112	; 0x70
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	58000400 	.word	0x58000400
 80011f4:	58024800 	.word	0x58024800
 80011f8:	58024400 	.word	0x58024400

080011fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0b0      	sub	sp, #192	; 0xc0
 8001200:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	22bc      	movs	r2, #188	; 0xbc
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f00e fe35 	bl	800fe78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800120e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001212:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001218:	2309      	movs	r3, #9
 800121a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800122c:	2320      	movs	r3, #32
 800122e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001230:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4618      	mov	r0, r3
 8001240:	f008 f9d2 	bl	80095e8 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800124a:	f000 fdff 	bl	8001e4c <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	37c0      	adds	r7, #192	; 0xc0
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800127c:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <MX_ADC1_Init+0x268>)
 800127e:	4a91      	ldr	r2, [pc, #580]	; (80014c4 <MX_ADC1_Init+0x26c>)
 8001280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001282:	4b8f      	ldr	r3, [pc, #572]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001284:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001288:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128a:	4b8d      	ldr	r3, [pc, #564]	; (80014c0 <MX_ADC1_Init+0x268>)
 800128c:	2208      	movs	r2, #8
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001292:	2201      	movs	r2, #1
 8001294:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001296:	4b8a      	ldr	r3, [pc, #552]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001298:	2204      	movs	r2, #4
 800129a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <MX_ADC1_Init+0x268>)
 800129e:	2200      	movs	r2, #0
 80012a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a2:	4b87      	ldr	r3, [pc, #540]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012aa:	220e      	movs	r2, #14
 80012ac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ae:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b4:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ba:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012c6:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ce:	4b7c      	ldr	r3, [pc, #496]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012d4:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012dc:	4878      	ldr	r0, [pc, #480]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012de:	f001 fdd1 	bl	8002e84 <HAL_ADC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012e8:	f000 fdb0 	bl	8001e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4872      	ldr	r0, [pc, #456]	; (80014c0 <MX_ADC1_Init+0x268>)
 80012f8:	f002 ffe8 	bl	80042cc <HAL_ADCEx_MultiModeConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001302:	f000 fda3 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <MX_ADC1_Init+0x270>)
 8001308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130a:	2306      	movs	r3, #6
 800130c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800130e:	2307      	movs	r3, #7
 8001310:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001312:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001316:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001318:	2304      	movs	r3, #4
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4865      	ldr	r0, [pc, #404]	; (80014c0 <MX_ADC1_Init+0x268>)
 800132a:	f002 f87d 	bl	8003428 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001334:	f000 fd8a 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001338:	4b64      	ldr	r3, [pc, #400]	; (80014cc <MX_ADC1_Init+0x274>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800133c:	230c      	movs	r3, #12
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	485e      	ldr	r0, [pc, #376]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001346:	f002 f86f 	bl	8003428 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001350:	f000 fd7c 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001354:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <MX_ADC1_Init+0x278>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001358:	2312      	movs	r3, #18
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4857      	ldr	r0, [pc, #348]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001362:	f002 f861 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800136c:	f000 fd6e 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001370:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <MX_ADC1_Init+0x27c>)
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001374:	2318      	movs	r3, #24
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4850      	ldr	r0, [pc, #320]	; (80014c0 <MX_ADC1_Init+0x268>)
 800137e:	f002 f853 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001388:	f000 fd60 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800138c:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <MX_ADC1_Init+0x280>)
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4849      	ldr	r0, [pc, #292]	; (80014c0 <MX_ADC1_Init+0x268>)
 800139c:	f002 f844 	bl	8003428 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013a6:	f000 fd51 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <MX_ADC1_Init+0x284>)
 80013ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013ae:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4841      	ldr	r0, [pc, #260]	; (80014c0 <MX_ADC1_Init+0x268>)
 80013ba:	f002 f835 	bl	8003428 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013c4:	f000 fd42 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013c8:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <MX_ADC1_Init+0x288>)
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013cc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	483a      	ldr	r0, [pc, #232]	; (80014c0 <MX_ADC1_Init+0x268>)
 80013d8:	f002 f826 	bl	8003428 <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013e2:	f000 fd33 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <MX_ADC1_Init+0x28c>)
 80013e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013ea:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_ADC1_Init+0x268>)
 80013f6:	f002 f817 	bl	8003428 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001400:	f000 fd24 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001404:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <MX_ADC1_Init+0x290>)
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001408:	f44f 738c 	mov.w	r3, #280	; 0x118
 800140c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	482b      	ldr	r0, [pc, #172]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001414:	f002 f808 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800141e:	f000 fd15 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <MX_ADC1_Init+0x294>)
 8001424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4823      	ldr	r0, [pc, #140]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001432:	f001 fff9 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800143c:	f000 fd06 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_ADC1_Init+0x298>)
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001444:	f240 2306 	movw	r3, #518	; 0x206
 8001448:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_ADC1_Init+0x268>)
 8001450:	f001 ffea 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800145a:	f000 fcf7 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_ADC1_Init+0x29c>)
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001462:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_ADC1_Init+0x268>)
 800146e:	f001 ffdb 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001478:	f000 fce8 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_ADC1_Init+0x2a0>)
 800147e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001480:	f240 2312 	movw	r3, #530	; 0x212
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_ADC1_Init+0x268>)
 800148c:	f001 ffcc 	bl	8003428 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8001496:	f000 fcd9 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_ADC1_Init+0x2a4>)
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800149e:	f44f 7306 	mov.w	r3, #536	; 0x218
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_ADC1_Init+0x268>)
 80014aa:	f001 ffbd 	bl	8003428 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 80014b4:	f000 fcca 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2400005c 	.word	0x2400005c
 80014c4:	40022000 	.word	0x40022000
 80014c8:	08600004 	.word	0x08600004
 80014cc:	0c900008 	.word	0x0c900008
 80014d0:	10c00010 	.word	0x10c00010
 80014d4:	14f00020 	.word	0x14f00020
 80014d8:	19200040 	.word	0x19200040
 80014dc:	1d500080 	.word	0x1d500080
 80014e0:	21800100 	.word	0x21800100
 80014e4:	25b00200 	.word	0x25b00200
 80014e8:	2a000400 	.word	0x2a000400
 80014ec:	2e300800 	.word	0x2e300800
 80014f0:	3ac04000 	.word	0x3ac04000
 80014f4:	3ef08000 	.word	0x3ef08000
 80014f8:	43210000 	.word	0x43210000
 80014fc:	47520000 	.word	0x47520000

08001500 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800151a:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <MX_ADC3_Init+0xf8>)
 800151c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001520:	2208      	movs	r2, #8
 8001522:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001526:	2201      	movs	r2, #1
 8001528:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800152c:	2204      	movs	r2, #4
 800152e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001532:	2200      	movs	r2, #0
 8001534:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001538:	2201      	movs	r2, #1
 800153a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800153e:	2203      	movs	r2, #3
 8001540:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001544:	2200      	movs	r2, #0
 8001546:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001556:	2203      	movs	r2, #3
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800155c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_ADC3_Init+0xf4>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001570:	4820      	ldr	r0, [pc, #128]	; (80015f4 <MX_ADC3_Init+0xf4>)
 8001572:	f001 fc87 	bl	8002e84 <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800157c:	f000 fc66 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_ADC3_Init+0xfc>)
 8001582:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001584:	2306      	movs	r3, #6
 8001586:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001588:	2307      	movs	r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001590:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001592:	2304      	movs	r3, #4
 8001594:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_ADC3_Init+0xf4>)
 80015a4:	f001 ff40 	bl	8003428 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f000 fc4d 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_ADC3_Init+0x100>)
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015b6:	230c      	movs	r3, #12
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_ADC3_Init+0xf4>)
 80015c0:	f001 ff32 	bl	8003428 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ca:	f000 fc3f 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_ADC3_Init+0x104>)
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d2:	2312      	movs	r3, #18
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC3_Init+0xf4>)
 80015dc:	f001 ff24 	bl	8003428 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015e6:	f000 fc31 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240000c0 	.word	0x240000c0
 80015f8:	58026000 	.word	0x58026000
 80015fc:	cfb80000 	.word	0xcfb80000
 8001600:	cb840000 	.word	0xcb840000
 8001604:	08600004 	.word	0x08600004

08001608 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2224      	movs	r2, #36	; 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00e fc2f 	bl	800fe78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_DAC1_Init+0x70>)
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <MX_DAC1_Init+0x74>)
 800161e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001620:	4815      	ldr	r0, [pc, #84]	; (8001678 <MX_DAC1_Init+0x70>)
 8001622:	f003 f840 	bl	80046a6 <HAL_DAC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800162c:	f000 fc0e 	bl	8001e4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <MX_DAC1_Init+0x70>)
 800164c:	f003 f8c4 	bl	80047d8 <HAL_DAC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001656:	f000 fbf9 	bl	8001e4c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2210      	movs	r2, #16
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_DAC1_Init+0x70>)
 8001662:	f003 f8b9 	bl	80047d8 <HAL_DAC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800166c:	f000 fbee 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000214 	.word	0x24000214
 800167c:	40007400 	.word	0x40007400

08001680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_I2C1_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_I2C1_Init+0x74>)
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_I2C1_Init+0x7c>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016bc:	f006 f9da 	bl	8007a74 <HAL_I2C_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 fbc1 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016ce:	f006 fec3 	bl	8008458 <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 fbb8 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016e0:	f006 ff05 	bl	80084ee <HAL_I2CEx_ConfigDigitalFilter>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 fbaf 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000228 	.word	0x24000228
 80016f8:	40005400 	.word	0x40005400
 80016fc:	20303e5d 	.word	0x20303e5d

08001700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <MX_SPI1_Init+0xac>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001714:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001718:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800171c:	220f      	movs	r2, #15
 800171e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800172e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001736:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001794:	f00a f8b4 	bl	800b900 <HAL_SPI_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800179e:	f000 fb55 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000274 	.word	0x24000274
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017b6:	4a29      	ldr	r2, [pc, #164]	; (800185c <MX_SPI2_Init+0xac>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017cc:	220f      	movs	r2, #15
 80017ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017e6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI2_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI2_Init+0xa8>)
 800183e:	2200      	movs	r2, #0
 8001840:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_SPI2_Init+0xa8>)
 8001844:	f00a f85c 	bl	800b900 <HAL_SPI_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800184e:	f000 fafd 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240002fc 	.word	0x240002fc
 800185c:	40003800 	.word	0x40003800

08001860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	; 0x58
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	222c      	movs	r2, #44	; 0x2c
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00e faf3 	bl	800fe78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <MX_TIM1_Init+0x118>)
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <MX_TIM1_Init+0x11c>)
 8001896:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <MX_TIM1_Init+0x118>)
 800189a:	2263      	movs	r2, #99	; 0x63
 800189c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <MX_TIM1_Init+0x118>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <MX_TIM1_Init+0x118>)
 80018a6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <MX_TIM1_Init+0x118>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <MX_TIM1_Init+0x118>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <MX_TIM1_Init+0x118>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018be:	482e      	ldr	r0, [pc, #184]	; (8001978 <MX_TIM1_Init+0x118>)
 80018c0:	f00a ff2c 	bl	800c71c <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 fabf 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018de:	4619      	mov	r1, r3
 80018e0:	4825      	ldr	r0, [pc, #148]	; (8001978 <MX_TIM1_Init+0x118>)
 80018e2:	f00b fd63 	bl	800d3ac <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018ec:	f000 faae 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80018f4:	f240 13df 	movw	r3, #479	; 0x1df
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fe:	2300      	movs	r3, #0
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	4818      	ldr	r0, [pc, #96]	; (8001978 <MX_TIM1_Init+0x118>)
 8001918:	f00b f876 	bl	800ca08 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001922:	f000 fa93 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <MX_TIM1_Init+0x118>)
 800195c:	f00b fdb4 	bl	800d4c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001966:	f000 fa71 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_TIM1_Init+0x118>)
 800196c:	f000 fd82 	bl	8002474 <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3758      	adds	r7, #88	; 0x58
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24000384 	.word	0x24000384
 800197c:	40010000 	.word	0x40010000

08001980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019ae:	2263      	movs	r2, #99	; 0x63
 80019b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019ba:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80019be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019ce:	f00a fea5 	bl	800c71c <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019d8:	f000 fa38 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM2_Init+0xb0>)
 80019ec:	f00b fcde 	bl	800d3ac <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80019f6:	f000 fa29 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80019fe:	f240 13df 	movw	r3, #479	; 0x1df
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	220c      	movs	r2, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM2_Init+0xb0>)
 8001a14:	f00a fff8 	bl	800ca08 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a1e:	f000 fa15 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM2_Init+0xb0>)
 8001a24:	f000 fd26 	bl	8002474 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	240003d0 	.word	0x240003d0

08001a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <MX_USART1_UART_Init+0x94>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a40:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a7c:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a7e:	f00b fdbf 	bl	800d600 <HAL_UART_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a88:	f000 f9e0 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001a90:	f00e f8e1 	bl	800fc56 <HAL_UARTEx_SetTxFifoThreshold>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a9a:	f000 f9d7 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001aa2:	f00e f916 	bl	800fcd2 <HAL_UARTEx_SetRxFifoThreshold>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aac:	f000 f9ce 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_USART1_UART_Init+0x90>)
 8001ab2:	f00e f897 	bl	800fbe4 <HAL_UARTEx_DisableFifoMode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001abc:	f000 f9c6 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2400041c 	.word	0x2400041c
 8001ac8:	40011000 	.word	0x40011000

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_DMA_Init+0x4c>)
 8001ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <MX_DMA_Init+0x4c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <MX_DMA_Init+0x4c>)
 8001ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	200b      	movs	r0, #11
 8001af6:	f002 fda2 	bl	800463e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001afa:	200b      	movs	r0, #11
 8001afc:	f002 fdb9 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	200c      	movs	r0, #12
 8001b06:	f002 fd9a 	bl	800463e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f002 fdb1 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	58024400 	.word	0x58024400

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b58:	f043 0320 	orr.w	r3, r3, #32
 8001b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <MX_GPIO_Init+0x168>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	21c0      	movs	r1, #192	; 0xc0
 8001bea:	4827      	ldr	r0, [pc, #156]	; (8001c88 <MX_GPIO_Init+0x16c>)
 8001bec:	f005 ff28 	bl	8007a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001bf6:	4825      	ldr	r0, [pc, #148]	; (8001c8c <MX_GPIO_Init+0x170>)
 8001bf8:	f005 ff22 	bl	8007a40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2160      	movs	r1, #96	; 0x60
 8001c00:	4823      	ldr	r0, [pc, #140]	; (8001c90 <MX_GPIO_Init+0x174>)
 8001c02:	f005 ff1d 	bl	8007a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481a      	ldr	r0, [pc, #104]	; (8001c88 <MX_GPIO_Init+0x16c>)
 8001c1e:	f005 fd47 	bl	80076b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c22:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <MX_GPIO_Init+0x170>)
 8001c3c:	f005 fd38 	bl	80076b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c40:	2360      	movs	r3, #96	; 0x60
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c50:	2307      	movs	r3, #7
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_GPIO_Init+0x178>)
 8001c5c:	f005 fd28 	bl	80076b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c60:	2360      	movs	r3, #96	; 0x60
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <MX_GPIO_Init+0x174>)
 8001c78:	f005 fd1a 	bl	80076b0 <HAL_GPIO_Init>

}
 8001c7c:	bf00      	nop
 8001c7e:	3730      	adds	r7, #48	; 0x30
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58021400 	.word	0x58021400
 8001c8c:	58020800 	.word	0x58020800
 8001c90:	58020400 	.word	0x58020400
 8001c94:	58020c00 	.word	0x58020c00

08001c98 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d129      	bne.n	8001cfc <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	2320      	movs	r3, #32
 8001cae:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	dd1d      	ble.n	8001cf2 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
}
 8001cca:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b20      	subs	r3, #32
 8001cde:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dcf2      	bgt.n	8001ccc <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce6:	f3bf 8f4f 	dsb	sy
}
 8001cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cec:	f3bf 8f6f 	isb	sy
}
 8001cf0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001cf2:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001cf4:	481a      	ldr	r0, [pc, #104]	; (8001d60 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001cf6:	f001 fb2b 	bl	8003350 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001cfa:	e02c      	b.n	8001d56 <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d128      	bne.n	8001d56 <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	2320      	movs	r3, #32
 8001d0a:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dd1d      	ble.n	8001d4e <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d22:	f3bf 8f4f 	dsb	sy
}
 8001d26:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3320      	adds	r3, #32
 8001d34:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3b20      	subs	r3, #32
 8001d3a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dcf2      	bgt.n	8001d28 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d42:	f3bf 8f4f 	dsb	sy
}
 8001d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d48:	f3bf 8f6f 	isb	sy
}
 8001d4c:	bf00      	nop
}
 8001d4e:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001d52:	f001 fafd 	bl	8003350 <HAL_ADC_Stop_DMA>
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2400005c 	.word	0x2400005c
 8001d64:	24000520 	.word	0x24000520
 8001d68:	e000ed00 	.word	0xe000ed00
 8001d6c:	240000c0 	.word	0x240000c0

08001d70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d129      	bne.n	8001dd4 <HAL_ADC_ConvCpltCallback+0x64>
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	2320      	movs	r3, #32
 8001d86:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dd1d      	ble.n	8001dca <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	4413      	add	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
}
 8001da2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3320      	adds	r3, #32
 8001db0:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b20      	subs	r3, #32
 8001db6:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	dcf2      	bgt.n	8001da4 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dbe:	f3bf 8f4f 	dsb	sy
}
 8001dc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc4:	f3bf 8f6f 	isb	sy
}
 8001dc8:	bf00      	nop
}
 8001dca:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001dcc:	481a      	ldr	r0, [pc, #104]	; (8001e38 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001dce:	f001 fabf 	bl	8003350 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001dd2:	e02c      	b.n	8001e2e <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d128      	bne.n	8001e2e <HAL_ADC_ConvCpltCallback+0xbe>
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	2320      	movs	r3, #32
 8001de2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dd1d      	ble.n	8001e26 <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dfa:	f3bf 8f4f 	dsb	sy
}
 8001dfe:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b20      	subs	r3, #32
 8001e12:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dcf2      	bgt.n	8001e00 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1a:	f3bf 8f4f 	dsb	sy
}
 8001e1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e20:	f3bf 8f6f 	isb	sy
}
 8001e24:	bf00      	nop
}
 8001e26:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001e2a:	f001 fa91 	bl	8003350 <HAL_ADC_Stop_DMA>
}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2400005c 	.word	0x2400005c
 8001e3c:	24000540 	.word	0x24000540
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	240000c0 	.word	0x240000c0
 8001e48:	24000580 	.word	0x24000580

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_MspInit+0x30>)
 8001e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_MspInit+0x30>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_MspInit+0x30>)
 8001e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58024400 	.word	0x58024400

08001e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <HAL_ADC_MspInit+0x248>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 80ad 	bne.w	800200a <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001eb0:	4b89      	ldr	r3, [pc, #548]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eb6:	4a88      	ldr	r2, [pc, #544]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ec0:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ede:	4b7e      	ldr	r3, [pc, #504]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	4a79      	ldr	r2, [pc, #484]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efc:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f10:	4a71      	ldr	r2, [pc, #452]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2e:	4a6a      	ldr	r2, [pc, #424]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f46:	2333      	movs	r3, #51	; 0x33
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	4619      	mov	r1, r3
 8001f58:	4860      	ldr	r0, [pc, #384]	; (80020dc <HAL_ADC_MspInit+0x250>)
 8001f5a:	f005 fba9 	bl	80076b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f5e:	23cf      	movs	r3, #207	; 0xcf
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	485b      	ldr	r0, [pc, #364]	; (80020e0 <HAL_ADC_MspInit+0x254>)
 8001f72:	f005 fb9d 	bl	80076b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f76:	2303      	movs	r3, #3
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4856      	ldr	r0, [pc, #344]	; (80020e4 <HAL_ADC_MspInit+0x258>)
 8001f8a:	f005 fb91 	bl	80076b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4851      	ldr	r0, [pc, #324]	; (80020e8 <HAL_ADC_MspInit+0x25c>)
 8001fa4:	f005 fb84 	bl	80076b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001faa:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_ADC_MspInit+0x264>)
 8001fac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fb0:	2209      	movs	r2, #9
 8001fb2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fec:	483f      	ldr	r0, [pc, #252]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8001fee:	f002 fd23 	bl	8004a38 <HAL_DMA_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001ff8:	f7ff ff28 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
 8002002:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <HAL_ADC_MspInit+0x260>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002008:	e05f      	b.n	80020ca <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_ADC_MspInit+0x268>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d15a      	bne.n	80020ca <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 800201c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_ADC_MspInit+0x24c>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002056:	2303      	movs	r3, #3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	4820      	ldr	r0, [pc, #128]	; (80020e8 <HAL_ADC_MspInit+0x25c>)
 8002066:	f005 fb23 	bl	80076b0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_ADC_MspInit+0x270>)
 800206e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 8002072:	2273      	movs	r2, #115	; 0x73
 8002074:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 8002084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002088:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 800208c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002090:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 8002094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002098:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 800209c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 80020b0:	f002 fcc2 	bl	8004a38 <HAL_DMA_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_ADC_MspInit+0x232>
      Error_Handler();
 80020ba:	f7ff fec7 	bl	8001e4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_ADC_MspInit+0x26c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020ca:	bf00      	nop
 80020cc:	3738      	adds	r7, #56	; 0x38
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000
 80020d8:	58024400 	.word	0x58024400
 80020dc:	58020800 	.word	0x58020800
 80020e0:	58020000 	.word	0x58020000
 80020e4:	58020400 	.word	0x58020400
 80020e8:	58021400 	.word	0x58021400
 80020ec:	24000124 	.word	0x24000124
 80020f0:	40020010 	.word	0x40020010
 80020f4:	58026000 	.word	0x58026000
 80020f8:	2400019c 	.word	0x2400019c
 80020fc:	40020028 	.word	0x40020028

08002100 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_DAC_MspInit+0x80>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d129      	bne.n	8002176 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_DAC_MspInit+0x84>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	4a16      	ldr	r2, [pc, #88]	; (8002184 <HAL_DAC_MspInit+0x84>)
 800212a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_DAC_MspInit+0x84>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_DAC_MspInit+0x84>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_DAC_MspInit+0x84>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_DAC_MspInit+0x84>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800215e:	2330      	movs	r3, #48	; 0x30
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002162:	2303      	movs	r3, #3
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_DAC_MspInit+0x88>)
 8002172:	f005 fa9d 	bl	80076b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40007400 	.word	0x40007400
 8002184:	58024400 	.word	0x58024400
 8002188:	58020000 	.word	0x58020000

0800218c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0b8      	sub	sp, #224	; 0xe0
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	22bc      	movs	r2, #188	; 0xbc
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00d fe63 	bl	800fe78 <memset>
  if(hi2c->Instance==I2C1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_I2C_MspInit+0xc0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d142      	bne.n	8002242 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021bc:	2308      	movs	r3, #8
 80021be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4618      	mov	r0, r3
 80021cc:	f007 fa0c 	bl	80095e8 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021d6:	f7ff fe39 	bl	8001e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002200:	2312      	movs	r3, #18
 8002202:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002212:	2304      	movs	r3, #4
 8002214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800221c:	4619      	mov	r1, r3
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <HAL_I2C_MspInit+0xc8>)
 8002220:	f005 fa46 	bl	80076b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 8002226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 800222c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_I2C_MspInit+0xc4>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	37e0      	adds	r7, #224	; 0xe0
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40005400 	.word	0x40005400
 8002250:	58024400 	.word	0x58024400
 8002254:	58020400 	.word	0x58020400

08002258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0ba      	sub	sp, #232	; 0xe8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	22bc      	movs	r2, #188	; 0xbc
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f00d fdfd 	bl	800fe78 <memset>
  if(hspi->Instance==SPI1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a49      	ldr	r2, [pc, #292]	; (80023a8 <HAL_SPI_MspInit+0x150>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d142      	bne.n	800230e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	4618      	mov	r0, r3
 8002298:	f007 f9a6 	bl	80095e8 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022a2:	f7ff fdd3 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ac:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80022e2:	2318      	movs	r3, #24
 80022e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fa:	2305      	movs	r3, #5
 80022fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002304:	4619      	mov	r1, r3
 8002306:	482a      	ldr	r0, [pc, #168]	; (80023b0 <HAL_SPI_MspInit+0x158>)
 8002308:	f005 f9d2 	bl	80076b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800230c:	e047      	b.n	800239e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_SPI_MspInit+0x15c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d142      	bne.n	800239e <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800231e:	2300      	movs	r3, #0
 8002320:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	4618      	mov	r0, r3
 8002328:	f007 f95e 	bl	80095e8 <HAL_RCCEx_PeriphCLKConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8002332:	f7ff fd8b 	bl	8001e4c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_SPI_MspInit+0x154>)
 800233e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <HAL_SPI_MspInit+0x154>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002372:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238c:	2305      	movs	r3, #5
 800238e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_SPI_MspInit+0x158>)
 800239a:	f005 f989 	bl	80076b0 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	37e8      	adds	r7, #232	; 0xe8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40013000 	.word	0x40013000
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58020400 	.word	0x58020400
 80023b4:	40003800 	.word	0x40003800

080023b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_TIM_PWM_MspInit+0xb4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12f      	bne.n	800242a <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 80023cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 80023dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2018      	movs	r0, #24
 80023ee:	f002 f926 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80023f2:	2018      	movs	r0, #24
 80023f4:	f002 f93d 	bl	8004672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	2019      	movs	r0, #25
 80023fe:	f002 f91e 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002402:	2019      	movs	r0, #25
 8002404:	f002 f935 	bl	8004672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	201a      	movs	r0, #26
 800240e:	f002 f916 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002412:	201a      	movs	r0, #26
 8002414:	f002 f92d 	bl	8004672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	201b      	movs	r0, #27
 800241e:	f002 f90e 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002422:	201b      	movs	r0, #27
 8002424:	f002 f925 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002428:	e01b      	b.n	8002462 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002432:	d116      	bne.n	8002462 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 8002436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243a:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_TIM_PWM_MspInit+0xb8>)
 8002446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	201c      	movs	r0, #28
 8002458:	f002 f8f1 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800245c:	201c      	movs	r0, #28
 800245e:	f002 f908 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000
 8002470:	58024400 	.word	0x58024400

08002474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_TIM_MspPostInit+0xb8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d120      	bne.n	80024d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4818      	ldr	r0, [pc, #96]	; (8002534 <HAL_TIM_MspPostInit+0xc0>)
 80024d2:	f005 f8ed 	bl	80076b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024d6:	e024      	b.n	8002522 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d11f      	bne.n	8002522 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_TIM_MspPostInit+0xbc>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <HAL_TIM_MspPostInit+0xc4>)
 800251e:	f005 f8c7 	bl	80076b0 <HAL_GPIO_Init>
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	58024400 	.word	0x58024400
 8002534:	58020000 	.word	0x58020000
 8002538:	58020400 	.word	0x58020400

0800253c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0b8      	sub	sp, #224	; 0xe0
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	22bc      	movs	r2, #188	; 0xbc
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f00d fc8b 	bl	800fe78 <memset>
  if(huart->Instance==USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a29      	ldr	r2, [pc, #164]	; (800260c <HAL_UART_MspInit+0xd0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d14a      	bne.n	8002602 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256c:	2301      	movs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4618      	mov	r0, r3
 800257c:	f007 f834 	bl	80095e8 <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002586:	f7ff fc61 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_UART_MspInit+0xd4>)
 800258c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_UART_MspInit+0xd4>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_UART_MspInit+0xd4>)
 800259c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_UART_MspInit+0xd4>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_UART_MspInit+0xd4>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_UART_MspInit+0xd4>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e0:	2307      	movs	r3, #7
 80025e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <HAL_UART_MspInit+0xd8>)
 80025ee:	f005 f85f 	bl	80076b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2025      	movs	r0, #37	; 0x25
 80025f8:	f002 f821 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025fc:	2025      	movs	r0, #37	; 0x25
 80025fe:	f002 f838 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	37e0      	adds	r7, #224	; 0xe0
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40011000 	.word	0x40011000
 8002610:	58024400 	.word	0x58024400
 8002614:	58020000 	.word	0x58020000

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 f976 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <DMA1_Stream0_IRQHandler+0x10>)
 8002672:	f003 fd0b 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000124 	.word	0x24000124

08002680 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <DMA1_Stream1_IRQHandler+0x10>)
 8002686:	f003 fd01 	bl	800608c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2400019c 	.word	0x2400019c

08002694 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <TIM1_BRK_IRQHandler+0x10>)
 800269a:	f00a f896 	bl	800c7ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	24000384 	.word	0x24000384

080026a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <TIM1_UP_IRQHandler+0x10>)
 80026ae:	f00a f88c 	bl	800c7ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	24000384 	.word	0x24000384

080026bc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM1_TRG_COM_IRQHandler+0x10>)
 80026c2:	f00a f882 	bl	800c7ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	24000384 	.word	0x24000384

080026d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <TIM1_CC_IRQHandler+0x10>)
 80026d6:	f00a f878 	bl	800c7ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	24000384 	.word	0x24000384

080026e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM2_IRQHandler+0x10>)
 80026ea:	f00a f86e 	bl	800c7ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	240003d0 	.word	0x240003d0

080026f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <USART1_IRQHandler+0x10>)
 80026fe:	f00b f8bb 	bl	800d878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2400041c 	.word	0x2400041c

0800270c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <SystemInit+0xe4>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a36      	ldr	r2, [pc, #216]	; (80027f0 <SystemInit+0xe4>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <SystemInit+0xe8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2b06      	cmp	r3, #6
 800272a:	d807      	bhi.n	800273c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <SystemInit+0xe8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 030f 	bic.w	r3, r3, #15
 8002734:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <SystemInit+0xe8>)
 8002736:	f043 0307 	orr.w	r3, r3, #7
 800273a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <SystemInit+0xec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <SystemInit+0xec>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <SystemInit+0xec>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <SystemInit+0xec>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4929      	ldr	r1, [pc, #164]	; (80027f8 <SystemInit+0xec>)
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <SystemInit+0xf0>)
 8002756:	4013      	ands	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <SystemInit+0xe8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <SystemInit+0xe8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 030f 	bic.w	r3, r3, #15
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <SystemInit+0xe8>)
 8002770:	f043 0307 	orr.w	r3, r3, #7
 8002774:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <SystemInit+0xec>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <SystemInit+0xec>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <SystemInit+0xec>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <SystemInit+0xec>)
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <SystemInit+0xf4>)
 800278c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <SystemInit+0xec>)
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <SystemInit+0xf8>)
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <SystemInit+0xec>)
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <SystemInit+0xfc>)
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <SystemInit+0xec>)
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <SystemInit+0xec>)
 80027a2:	4a19      	ldr	r2, [pc, #100]	; (8002808 <SystemInit+0xfc>)
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <SystemInit+0xec>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <SystemInit+0xec>)
 80027ae:	4a16      	ldr	r2, [pc, #88]	; (8002808 <SystemInit+0xfc>)
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <SystemInit+0xec>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <SystemInit+0xec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <SystemInit+0xec>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <SystemInit+0xec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <SystemInit+0x100>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <SystemInit+0x104>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d6:	d202      	bcs.n	80027de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <SystemInit+0x108>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <SystemInit+0x10c>)
 80027e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	52002000 	.word	0x52002000
 80027f8:	58024400 	.word	0x58024400
 80027fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002800:	02020200 	.word	0x02020200
 8002804:	01ff0000 	.word	0x01ff0000
 8002808:	01010280 	.word	0x01010280
 800280c:	5c001000 	.word	0x5c001000
 8002810:	ffff0000 	.word	0xffff0000
 8002814:	51008108 	.word	0x51008108
 8002818:	52004000 	.word	0x52004000

0800281c <Reset_Handler>:
 800281c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002854 <LoopFillZerobss+0xe>
 8002820:	f7ff ff74 	bl	800270c <SystemInit>
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <LoopFillZerobss+0x12>)
 8002826:	490d      	ldr	r1, [pc, #52]	; (800285c <LoopFillZerobss+0x16>)
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <LoopFillZerobss+0x1a>)
 800282a:	2300      	movs	r3, #0
 800282c:	e002      	b.n	8002834 <LoopCopyDataInit>

0800282e <CopyDataInit>:
 800282e:	58d4      	ldr	r4, [r2, r3]
 8002830:	50c4      	str	r4, [r0, r3]
 8002832:	3304      	adds	r3, #4

08002834 <LoopCopyDataInit>:
 8002834:	18c4      	adds	r4, r0, r3
 8002836:	428c      	cmp	r4, r1
 8002838:	d3f9      	bcc.n	800282e <CopyDataInit>
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <LoopFillZerobss+0x1e>)
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <LoopFillZerobss+0x22>)
 800283e:	2300      	movs	r3, #0
 8002840:	e001      	b.n	8002846 <LoopFillZerobss>

08002842 <FillZerobss>:
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	3204      	adds	r2, #4

08002846 <LoopFillZerobss>:
 8002846:	42a2      	cmp	r2, r4
 8002848:	d3fb      	bcc.n	8002842 <FillZerobss>
 800284a:	f00d faf1 	bl	800fe30 <__libc_init_array>
 800284e:	f7fe fbcb 	bl	8000fe8 <main>
 8002852:	4770      	bx	lr
 8002854:	24080000 	.word	0x24080000
 8002858:	24000000 	.word	0x24000000
 800285c:	24000038 	.word	0x24000038
 8002860:	0800ff08 	.word	0x0800ff08
 8002864:	24000040 	.word	0x24000040
 8002868:	240005f8 	.word	0x240005f8

0800286c <ADC3_IRQHandler>:
 800286c:	e7fe      	b.n	800286c <ADC3_IRQHandler>
	...

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002876:	2003      	movs	r0, #3
 8002878:	f001 fed6 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800287c:	f006 fcde 	bl	800923c <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_Init+0x68>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4913      	ldr	r1, [pc, #76]	; (80028dc <HAL_Init+0x6c>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_Init+0x68>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_Init+0x6c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_Init+0x70>)
 80028b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_Init+0x74>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ba:	200f      	movs	r0, #15
 80028bc:	f000 f814 	bl	80028e8 <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e002      	b.n	80028d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ca:	f7ff fac5 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	0800feb8 	.word	0x0800feb8
 80028e0:	2400002c 	.word	0x2400002c
 80028e4:	24000028 	.word	0x24000028

080028e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_InitTick+0x60>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e021      	b.n	8002940 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_InitTick+0x64>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_InitTick+0x60>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f001 febb 	bl	800468e <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	f001 fe85 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x68>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	24000034 	.word	0x24000034
 800294c:	24000028 	.word	0x24000028
 8002950:	24000030 	.word	0x24000030

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	24000034 	.word	0x24000034
 8002978:	240005f4 	.word	0x240005f4

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	240005f4 	.word	0x240005f4

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	24000034 	.word	0x24000034

080029dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_SuspendTick+0x1c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_SuspendTick+0x1c>)
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetREVID+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0c1b      	lsrs	r3, r3, #16
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	5c001000 	.word	0x5c001000

08002a14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	611a      	str	r2, [r3, #16]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]
  }
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3330      	adds	r3, #48	; 0x30
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	211f      	movs	r1, #31
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 011f 	and.w	r1, r3, #31
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f023 0203 	bic.w	r2, r3, #3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0e5b      	lsrs	r3, r3, #25
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	4413      	add	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	0d1b      	lsrs	r3, r3, #20
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2107      	movs	r1, #7
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	0d1b      	lsrs	r3, r3, #20
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0318 	and.w	r3, r3, #24
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c44:	40d9      	lsrs	r1, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	400b      	ands	r3, r1
 8002c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	000fffff 	.word	0x000fffff

08002c68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 031f 	and.w	r3, r3, #31
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6093      	str	r3, [r2, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	5fffffc0 	.word	0x5fffffc0

08002ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	6fffffc0 	.word	0x6fffffc0

08002cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <LL_ADC_Enable+0x24>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	7fffffc0 	.word	0x7fffffc0

08002d48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_ADC_Disable+0x24>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	7fffffc0 	.word	0x7fffffc0

08002d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsEnabled+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsEnabled+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d101      	bne.n	8002dae <LL_ADC_IsDisableOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_IsDisableOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <LL_ADC_REG_StartConversion+0x24>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	7fffffc0 	.word	0x7fffffc0

08002de4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <LL_ADC_REG_StopConversion+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <LL_ADC_INJ_StopConversion+0x24>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	7fffffc0 	.word	0x7fffffc0

08002e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e18f      	b.n	80031be <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe ffed 	bl	8001e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff feef 	bl	8002ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fed5 	bl	8002c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff0a 	bl	8002cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d114      	bne.n	8002f14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff feee 	bl	8002cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef4:	4b87      	ldr	r3, [pc, #540]	; (8003114 <HAL_ADC_Init+0x290>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_ADC_Init+0x294>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff feed 	bl	8002cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff61 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8002f4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 8129 	bne.w	80031ac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 8125 	bne.w	80031ac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fefa 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d136      	bne.n	8002ff0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_ADC_Init+0x298>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_Init+0x112>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a63      	ldr	r2, [pc, #396]	; (8003120 <HAL_ADC_Init+0x29c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10e      	bne.n	8002fb4 <HAL_ADC_Init+0x130>
 8002f96:	4861      	ldr	r0, [pc, #388]	; (800311c <HAL_ADC_Init+0x298>)
 8002f98:	f7ff feea 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4860      	ldr	r0, [pc, #384]	; (8003120 <HAL_ADC_Init+0x29c>)
 8002fa0:	f7ff fee6 	bl	8002d70 <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e008      	b.n	8002fc6 <HAL_ADC_Init+0x142>
 8002fb4:	485b      	ldr	r0, [pc, #364]	; (8003124 <HAL_ADC_Init+0x2a0>)
 8002fb6:	f7ff fedb 	bl	8002d70 <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_ADC_Init+0x298>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_Init+0x15a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_ADC_Init+0x29c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Init+0x15e>
 8002fde:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_ADC_Init+0x2a4>)
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Init+0x160>
 8002fe2:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_ADC_Init+0x2a8>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7ff fd12 	bl	8002a14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ff0:	f7ff fd04 	bl	80029fc <HAL_GetREVID>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d914      	bls.n	8003028 <HAL_ADC_Init+0x1a4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b10      	cmp	r3, #16
 8003004:	d110      	bne.n	8003028 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7d5b      	ldrb	r3, [r3, #21]
 800300a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003010:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003016:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7f1b      	ldrb	r3, [r3, #28]
 800301c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800301e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003020:	f043 030c 	orr.w	r3, r3, #12
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e00d      	b.n	8003044 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7d5b      	ldrb	r3, [r3, #21]
 800302c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003032:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003038:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7f1b      	ldrb	r3, [r3, #28]
 800303e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7f1b      	ldrb	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	3b01      	subs	r3, #1
 8003052:	045b      	lsls	r3, r3, #17
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_ADC_Init+0x2ac>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff febc 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8003094:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fede 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 80030a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d15f      	bne.n	8003168 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d15c      	bne.n	8003168 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7d1b      	ldrb	r3, [r3, #20]
 80030b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_ADC_Init+0x2b0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	69b9      	ldr	r1, [r7, #24]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d130      	bne.n	800313c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_ADC_Init+0x2b4>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0411      	lsls	r1, r2, #16
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003102:	430a      	orrs	r2, r1
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	611a      	str	r2, [r3, #16]
 8003110:	e01c      	b.n	800314c <HAL_ADC_Init+0x2c8>
 8003112:	bf00      	nop
 8003114:	24000028 	.word	0x24000028
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	40022000 	.word	0x40022000
 8003120:	40022100 	.word	0x40022100
 8003124:	58026000 	.word	0x58026000
 8003128:	40022300 	.word	0x40022300
 800312c:	58026300 	.word	0x58026300
 8003130:	fff0c003 	.word	0xfff0c003
 8003134:	ffffbffc 	.word	0xffffbffc
 8003138:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 feea 	bl	8003f3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10c      	bne.n	800318a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f023 010f 	bic.w	r1, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
 8003188:	e007      	b.n	800319a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 020f 	bic.w	r2, r2, #15
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
 80031aa:	e007      	b.n	80031bc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	bf00      	nop

080031c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_ADC_Start_DMA+0x168>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_ADC_Start_DMA+0x20>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_ADC_Start_DMA+0x16c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_Start_DMA+0x24>
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_ADC_Start_DMA+0x170>)
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Start_DMA+0x26>
 80031ec:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_ADC_Start_DMA+0x174>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd3a 	bl	8002c68 <LL_ADC_GetMultimode>
 80031f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fe06 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 808c 	bne.w	8003320 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Start_DMA+0x4e>
 8003212:	2302      	movs	r3, #2
 8003214:	e087      	b.n	8003326 <HAL_ADC_Start_DMA+0x15e>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d002      	beq.n	8003230 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b09      	cmp	r3, #9
 800322e:	d170      	bne.n	8003312 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fd05 	bl	8003c40 <ADC_Enable>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d163      	bne.n	8003308 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_ADC_Start_DMA+0x178>)
 8003246:	4013      	ands	r3, r2
 8003248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_ADC_Start_DMA+0x16c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d002      	beq.n	8003260 <HAL_ADC_Start_DMA+0x98>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e000      	b.n	8003262 <HAL_ADC_Start_DMA+0x9a>
 8003260:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_ADC_Start_DMA+0x168>)
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4293      	cmp	r3, r2
 8003268:	d002      	beq.n	8003270 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f023 0206 	bic.w	r2, r3, #6
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e002      	b.n	800329c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <HAL_ADC_Start_DMA+0x17c>)
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <HAL_ADC_Start_DMA+0x180>)
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_ADC_Start_DMA+0x184>)
 80032b2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	221c      	movs	r2, #28
 80032ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0210 	orr.w	r2, r2, #16
 80032d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7ff fc5f 	bl	8002ba2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3340      	adds	r3, #64	; 0x40
 80032ee:	4619      	mov	r1, r3
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f001 fefc 	bl	80050f0 <HAL_DMA_Start_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fd5b 	bl	8002dbc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003306:	e00d      	b.n	8003324 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003310:	e008      	b.n	8003324 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800331e:	e001      	b.n	8003324 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003320:	2302      	movs	r3, #2
 8003322:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40022000 	.word	0x40022000
 8003334:	40022100 	.word	0x40022100
 8003338:	40022300 	.word	0x40022300
 800333c:	58026300 	.word	0x58026300
 8003340:	fffff0fe 	.word	0xfffff0fe
 8003344:	08003e13 	.word	0x08003e13
 8003348:	08003eeb 	.word	0x08003eeb
 800334c:	08003f07 	.word	0x08003f07

08003350 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Stop_DMA+0x16>
 8003362:	2302      	movs	r3, #2
 8003364:	e04f      	b.n	8003406 <HAL_ADC_Stop_DMA+0xb6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800336e:	2103      	movs	r1, #3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fba9 	bl	8003ac8 <ADC_ConversionStop>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13d      	bne.n	80033fc <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0203 	bic.w	r2, r2, #3
 800338e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d10f      	bne.n	80033be <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 f90e 	bl	80055c4 <HAL_DMA_Abort>
 80033a8:	4603      	mov	r3, r0
 80033aa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fcbd 	bl	8003d54 <ADC_Disable>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	e002      	b.n	80033e6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fcb7 	bl	8003d54 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_ADC_Stop_DMA+0xc0>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	ffffeefe 	.word	0xffffeefe

08003414 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b0a1      	sub	sp, #132	; 0x84
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a9d      	ldr	r2, [pc, #628]	; (80036b8 <HAL_ADC_ConfigChannel+0x290>)
 8003442:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x2a>
 800344e:	2302      	movs	r3, #2
 8003450:	e321      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x66e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fcd4 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8306 	bne.w	8003a78 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <HAL_ADC_ConfigChannel+0x62>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	e016      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x90>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800349a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800349c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e003      	b.n	80034ae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80034a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2201      	movs	r2, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	69d1      	ldr	r1, [r2, #28]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff fb39 	bl	8002b4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fc95 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 80034e2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fcb7 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 80034ee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 80b3 	bne.w	800365e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80af 	bne.w	800365e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	461a      	mov	r2, r3
 800350e:	f7ff fb5b 	bl	8002bc8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003512:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <HAL_ADC_ConfigChannel+0x294>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800351a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351e:	d10b      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x110>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	e01d      	b.n	8003574 <HAL_ADC_ConfigChannel+0x14c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_ADC_ConfigChannel+0x136>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	e00a      	b.n	8003574 <HAL_ADC_ConfigChannel+0x14c>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d027      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6919      	ldr	r1, [r3, #16]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800358c:	f7ff fa76 	bl	8002a7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6919      	ldr	r1, [r3, #16]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	7e5b      	ldrb	r3, [r3, #25]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x17e>
 80035a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x180>
 80035a6:	2300      	movs	r3, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	f7ff faa0 	bl	8002aee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	7e1b      	ldrb	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x19c>
 80035be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x19e>
 80035c4:	2300      	movs	r3, #0
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7ff fa78 	bl	8002abc <LL_ADC_SetDataRightShift>
 80035cc:	e047      	b.n	800365e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	069b      	lsls	r3, r3, #26
 80035de:	429a      	cmp	r2, r3
 80035e0:	d107      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	069b      	lsls	r3, r3, #26
 8003602:	429a      	cmp	r2, r3
 8003604:	d107      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003614:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	069b      	lsls	r3, r3, #26
 8003626:	429a      	cmp	r2, r3
 8003628:	d107      	bne.n	800363a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003638:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	429a      	cmp	r2, r3
 800364c:	d107      	bne.n	800365e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800365c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fb84 	bl	8002d70 <LL_ADC_IsEnabled>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 820d 	bne.w	8003a8a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	461a      	mov	r2, r3
 800367e:	f7ff facf 	bl	8002c20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4a0c      	ldr	r2, [pc, #48]	; (80036b8 <HAL_ADC_ConfigChannel+0x290>)
 8003688:	4293      	cmp	r3, r2
 800368a:	f040 8133 	bne.w	80038f4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369a:	2b00      	cmp	r3, #0
 800369c:	d110      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x298>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	bf94      	ite	ls
 80036ae:	2301      	movls	r3, #1
 80036b0:	2300      	movhi	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e01e      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x2cc>
 80036b6:	bf00      	nop
 80036b8:	47ff0000 	.word	0x47ff0000
 80036bc:	5c001000 	.word	0x5c001000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80036dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2b09      	cmp	r3, #9
 80036ec:	bf94      	ite	ls
 80036ee:	2301      	movls	r3, #1
 80036f0:	2300      	movhi	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d079      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x2ec>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	3301      	adds	r3, #1
 800370c:	069b      	lsls	r3, r3, #26
 800370e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003712:	e015      	b.n	8003740 <HAL_ADC_ConfigChannel+0x318>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800372c:	2320      	movs	r3, #32
 800372e:	e003      	b.n	8003738 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	069b      	lsls	r3, r3, #26
 800373c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x338>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	3301      	adds	r3, #1
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	e017      	b.n	8003790 <HAL_ADC_ConfigChannel+0x368>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003778:	2320      	movs	r3, #32
 800377a:	e003      	b.n	8003784 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	ea42 0103 	orr.w	r1, r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x38e>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0e9b      	lsrs	r3, r3, #26
 80037a6:	3301      	adds	r3, #1
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	051b      	lsls	r3, r3, #20
 80037b4:	e018      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x3c0>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e003      	b.n	80037da <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e8:	430b      	orrs	r3, r1
 80037ea:	e07e      	b.n	80038ea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x3e0>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0e9b      	lsrs	r3, r3, #26
 80037fe:	3301      	adds	r3, #1
 8003800:	069b      	lsls	r3, r3, #26
 8003802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003806:	e015      	b.n	8003834 <HAL_ADC_ConfigChannel+0x40c>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e003      	b.n	800382c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3301      	adds	r3, #1
 800382e:	069b      	lsls	r3, r3, #26
 8003830:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x42c>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	e017      	b.n	8003884 <HAL_ADC_ConfigChannel+0x45c>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	61bb      	str	r3, [r7, #24]
  return result;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e003      	b.n	8003878 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x488>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0e9b      	lsrs	r3, r3, #26
 800389a:	3301      	adds	r3, #1
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	3b1e      	subs	r3, #30
 80038a8:	051b      	lsls	r3, r3, #20
 80038aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ae:	e01b      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x4c0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	60fb      	str	r3, [r7, #12]
  return result;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80038c8:	2320      	movs	r3, #32
 80038ca:	e003      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 021f 	and.w	r2, r3, #31
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	3b1e      	subs	r3, #30
 80038e2:	051b      	lsls	r3, r3, #20
 80038e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e8:	430b      	orrs	r3, r1
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	6892      	ldr	r2, [r2, #8]
 80038ee:	4619      	mov	r1, r3
 80038f0:	f7ff f96a 	bl	8002bc8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f280 80c6 	bge.w	8003a8a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a67      	ldr	r2, [pc, #412]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x4ea>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a65      	ldr	r2, [pc, #404]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x4ee>
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <HAL_ADC_ConfigChannel+0x680>)
 8003914:	e000      	b.n	8003918 <HAL_ADC_ConfigChannel+0x4f0>
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_ADC_ConfigChannel+0x684>)
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f8a1 	bl	8002a60 <LL_ADC_GetCommonPathInternalCh>
 800391e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x50c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10e      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x52a>
 8003934:	485a      	ldr	r0, [pc, #360]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 8003936:	f7ff fa1b 	bl	8002d70 <LL_ADC_IsEnabled>
 800393a:	4604      	mov	r4, r0
 800393c:	4859      	ldr	r0, [pc, #356]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 800393e:	f7ff fa17 	bl	8002d70 <LL_ADC_IsEnabled>
 8003942:	4603      	mov	r3, r0
 8003944:	4323      	orrs	r3, r4
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e008      	b.n	8003964 <HAL_ADC_ConfigChannel+0x53c>
 8003952:	4857      	ldr	r0, [pc, #348]	; (8003ab0 <HAL_ADC_ConfigChannel+0x688>)
 8003954:	f7ff fa0c 	bl	8002d70 <LL_ADC_IsEnabled>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf0c      	ite	eq
 800395e:	2301      	moveq	r3, #1
 8003960:	2300      	movne	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d07d      	beq.n	8003a64 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a51      	ldr	r2, [pc, #324]	; (8003ab4 <HAL_ADC_ConfigChannel+0x68c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d130      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x5ac>
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d12b      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a4b      	ldr	r2, [pc, #300]	; (8003ab0 <HAL_ADC_ConfigChannel+0x688>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f040 8081 	bne.w	8003a8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a44      	ldr	r2, [pc, #272]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_ADC_ConfigChannel+0x574>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x578>
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_ADC_ConfigChannel+0x680>)
 800399e:	e000      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x57a>
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_ADC_ConfigChannel+0x684>)
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f7ff f845 	bl	8002a3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <HAL_ADC_ConfigChannel+0x690>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	4a41      	ldr	r2, [pc, #260]	; (8003abc <HAL_ADC_ConfigChannel+0x694>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039c4:	e002      	b.n	80039cc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d2:	e05a      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <HAL_ADC_ConfigChannel+0x698>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d11e      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5f4>
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d119      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <HAL_ADC_ConfigChannel+0x688>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d14b      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_ADC_ConfigChannel+0x5de>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x5e2>
 8003a06:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <HAL_ADC_ConfigChannel+0x680>)
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x5e4>
 8003a0a:	4a28      	ldr	r2, [pc, #160]	; (8003aac <HAL_ADC_ConfigChannel+0x684>)
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7ff f810 	bl	8002a3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a1a:	e036      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_ADC_ConfigChannel+0x69c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d131      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d12c      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_ADC_ConfigChannel+0x688>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d127      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_ADC_ConfigChannel+0x678>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x626>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_ADC_ConfigChannel+0x67c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x62a>
 8003a4e:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_ADC_ConfigChannel+0x680>)
 8003a50:	e000      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x62c>
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_ADC_ConfigChannel+0x684>)
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f7fe ffec 	bl	8002a3a <LL_ADC_SetCommonPathInternalCh>
 8003a62:	e012      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a76:	e008      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3784      	adds	r7, #132	; 0x84
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000
 8003aa4:	40022100 	.word	0x40022100
 8003aa8:	40022300 	.word	0x40022300
 8003aac:	58026300 	.word	0x58026300
 8003ab0:	58026000 	.word	0x58026000
 8003ab4:	cb840000 	.word	0xcb840000
 8003ab8:	24000028 	.word	0x24000028
 8003abc:	053e2d63 	.word	0x053e2d63
 8003ac0:	c7520000 	.word	0xc7520000
 8003ac4:	cfb80000 	.word	0xcfb80000

08003ac8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f994 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8003ae4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f9b6 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003af0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8098 	beq.w	8003c30 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02a      	beq.n	8003b64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7d5b      	ldrb	r3, [r3, #21]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d126      	bne.n	8003b64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7d1b      	ldrb	r3, [r3, #20]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d122      	bne.n	8003b64 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b22:	e014      	b.n	8003b4e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4a45      	ldr	r2, [pc, #276]	; (8003c3c <ADC_ConversionStop+0x174>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d90d      	bls.n	8003b48 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f043 0210 	orr.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e074      	b.n	8003c32 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d1e3      	bne.n	8003b24 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d014      	beq.n	8003b94 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f94c 	bl	8002e0c <LL_ADC_REG_IsConversionOngoing>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f909 	bl	8002d96 <LL_ADC_IsDisableOngoing>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f928 	bl	8002de4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d014      	beq.n	8003bc4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff f95c 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f8f1 	bl	8002d96 <LL_ADC_IsDisableOngoing>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f938 	bl	8002e34 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d005      	beq.n	8003bd6 <ADC_ConversionStop+0x10e>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d105      	bne.n	8003bdc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	617b      	str	r3, [r7, #20]
        break;
 8003bd4:	e005      	b.n	8003be2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	617b      	str	r3, [r7, #20]
        break;
 8003bda:	e002      	b.n	8003be2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003bdc:	2304      	movs	r3, #4
 8003bde:	617b      	str	r3, [r7, #20]
        break;
 8003be0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003be2:	f7fe fecb 	bl	800297c <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003be8:	e01b      	b.n	8003c22 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bea:	f7fe fec7 	bl	800297c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d914      	bls.n	8003c22 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0210 	orr.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e007      	b.n	8003c32 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1dc      	bne.n	8003bea <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	000cdbff 	.word	0x000cdbff

08003c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff f88f 	bl	8002d70 <LL_ADC_IsEnabled>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d16e      	bne.n	8003d36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <ADC_Enable+0x100>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e05a      	b.n	8003d38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f84a 	bl	8002d20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c8c:	f7fe fe76 	bl	800297c <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <ADC_Enable+0x104>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <ADC_Enable+0x66>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <ADC_Enable+0x108>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <ADC_Enable+0x6a>
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <ADC_Enable+0x10c>)
 8003ca8:	e000      	b.n	8003cac <ADC_Enable+0x6c>
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <ADC_Enable+0x110>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe ffdb 	bl	8002c68 <LL_ADC_GetMultimode>
 8003cb2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <ADC_Enable+0x108>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d002      	beq.n	8003cc4 <ADC_Enable+0x84>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e000      	b.n	8003cc6 <ADC_Enable+0x86>
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <ADC_Enable+0x104>)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d130      	bne.n	8003d36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cd4:	e028      	b.n	8003d28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f848 	bl	8002d70 <LL_ADC_IsEnabled>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f818 	bl	8002d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf0:	f7fe fe44 	bl	800297c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d914      	bls.n	8003d28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d00d      	beq.n	8003d28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d1cf      	bne.n	8003cd6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	8000003f 	.word	0x8000003f
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022100 	.word	0x40022100
 8003d4c:	40022300 	.word	0x40022300
 8003d50:	58026300 	.word	0x58026300

08003d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f818 	bl	8002d96 <LL_ADC_IsDisableOngoing>
 8003d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe ffff 	bl	8002d70 <LL_ADC_IsEnabled>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d047      	beq.n	8003e08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d144      	bne.n	8003e08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030d 	and.w	r3, r3, #13
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe ffd9 	bl	8002d48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d9e:	f7fe fded 	bl	800297c <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003da4:	e029      	b.n	8003dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f043 0210 	orr.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e023      	b.n	8003e0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dc2:	f7fe fddb 	bl	800297c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d914      	bls.n	8003dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0210 	orr.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e007      	b.n	8003e0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1dc      	bne.n	8003dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d14b      	bne.n	8003ec4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d021      	beq.n	8003e8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fe6a 	bl	8002b24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d032      	beq.n	8003ebc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d12b      	bne.n	8003ebc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11f      	bne.n	8003ebc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
 8003e88:	e018      	b.n	8003ebc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7fd ff57 	bl	8001d70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ec2:	e00e      	b.n	8003ee2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fa9f 	bl	8003414 <HAL_ADC_ErrorCallback>
}
 8003ed6:	e004      	b.n	8003ee2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7fd fecd 	bl	8001c98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff fa71 	bl	8003414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a79      	ldr	r2, [pc, #484]	; (8004130 <ADC_ConfigureBoostMode+0x1f4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <ADC_ConfigureBoostMode+0x1c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a78      	ldr	r2, [pc, #480]	; (8004134 <ADC_ConfigureBoostMode+0x1f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <ADC_ConfigureBoostMode+0x30>
 8003f58:	4b77      	ldr	r3, [pc, #476]	; (8004138 <ADC_ConfigureBoostMode+0x1fc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e008      	b.n	8003f7e <ADC_ConfigureBoostMode+0x42>
 8003f6c:	4b73      	ldr	r3, [pc, #460]	; (800413c <ADC_ConfigureBoostMode+0x200>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01c      	beq.n	8003fbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f82:	f005 fad5 	bl	8009530 <HAL_RCC_GetHCLKFreq>
 8003f86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f90:	d010      	beq.n	8003fb4 <ADC_ConfigureBoostMode+0x78>
 8003f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f96:	d871      	bhi.n	800407c <ADC_ConfigureBoostMode+0x140>
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d002      	beq.n	8003fa4 <ADC_ConfigureBoostMode+0x68>
 8003f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa2:	d16b      	bne.n	800407c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
        break;
 8003fb2:	e066      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	60fb      	str	r3, [r7, #12]
        break;
 8003fba:	e062      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003fc0:	f006 fa58 	bl	800a474 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003fce:	d051      	beq.n	8004074 <ADC_ConfigureBoostMode+0x138>
 8003fd0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003fd4:	d854      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8003fd6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003fda:	d047      	beq.n	800406c <ADC_ConfigureBoostMode+0x130>
 8003fdc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003fe0:	d84e      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8003fe2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003fe6:	d03d      	beq.n	8004064 <ADC_ConfigureBoostMode+0x128>
 8003fe8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003fec:	d848      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8003fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff2:	d033      	beq.n	800405c <ADC_ConfigureBoostMode+0x120>
 8003ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff8:	d842      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8003ffa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ffe:	d029      	beq.n	8004054 <ADC_ConfigureBoostMode+0x118>
 8004000:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004004:	d83c      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8004006:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800400a:	d01a      	beq.n	8004042 <ADC_ConfigureBoostMode+0x106>
 800400c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004010:	d836      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8004012:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004016:	d014      	beq.n	8004042 <ADC_ConfigureBoostMode+0x106>
 8004018:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800401c:	d830      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004022:	d00e      	beq.n	8004042 <ADC_ConfigureBoostMode+0x106>
 8004024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004028:	d82a      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 800402a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800402e:	d008      	beq.n	8004042 <ADC_ConfigureBoostMode+0x106>
 8004030:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004034:	d824      	bhi.n	8004080 <ADC_ConfigureBoostMode+0x144>
 8004036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800403a:	d002      	beq.n	8004042 <ADC_ConfigureBoostMode+0x106>
 800403c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004040:	d11e      	bne.n	8004080 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	60fb      	str	r3, [r7, #12]
        break;
 8004052:	e016      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
        break;
 800405a:	e012      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	60fb      	str	r3, [r7, #12]
        break;
 8004062:	e00e      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	60fb      	str	r3, [r7, #12]
        break;
 800406a:	e00a      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	09db      	lsrs	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
        break;
 8004072:	e006      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	60fb      	str	r3, [r7, #12]
        break;
 800407a:	e002      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004080:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004082:	f7fe fcbb 	bl	80029fc <HAL_GetREVID>
 8004086:	4603      	mov	r3, r0
 8004088:	f241 0203 	movw	r2, #4099	; 0x1003
 800408c:	4293      	cmp	r3, r2
 800408e:	d815      	bhi.n	80040bc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <ADC_ConfigureBoostMode+0x204>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d908      	bls.n	80040aa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80040a8:	e03e      	b.n	8004128 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b8:	609a      	str	r2, [r3, #8]
}
 80040ba:	e035      	b.n	8004128 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <ADC_ConfigureBoostMode+0x208>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d808      	bhi.n	80040dc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	e025      	b.n	8004128 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <ADC_ConfigureBoostMode+0x20c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d80a      	bhi.n	80040fa <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	e016      	b.n	8004128 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <ADC_ConfigureBoostMode+0x210>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d80a      	bhi.n	8004118 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004114:	609a      	str	r2, [r3, #8]
}
 8004116:	e007      	b.n	8004128 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40022000 	.word	0x40022000
 8004134:	40022100 	.word	0x40022100
 8004138:	40022300 	.word	0x40022300
 800413c:	58026300 	.word	0x58026300
 8004140:	01312d00 	.word	0x01312d00
 8004144:	005f5e10 	.word	0x005f5e10
 8004148:	00bebc20 	.word	0x00bebc20
 800414c:	017d7840 	.word	0x017d7840

08004150 <LL_ADC_IsEnabled>:
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <LL_ADC_IsEnabled+0x18>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <LL_ADC_IsEnabled+0x1a>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <LL_ADC_StartCalibration>:
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <LL_ADC_StartCalibration+0x38>)
 800418a:	4013      	ands	r3, r2
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004198:	430a      	orrs	r2, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	3ffeffc0 	.word	0x3ffeffc0

080041b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c8:	d101      	bne.n	80041ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_REG_IsConversionOngoing>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d101      	bne.n	80041f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADCEx_Calibration_Start+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e04c      	b.n	80042bc <HAL_ADCEx_Calibration_Start+0xb8>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fd92 	bl	8003d54 <ADC_Disable>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d135      	bne.n	80042a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004240:	4013      	ands	r3, r2
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff90 	bl	8004178 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004258:	e014      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3301      	adds	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d30d      	bcc.n	8004284 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f023 0312 	bic.w	r3, r3, #18
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e01b      	b.n	80042bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff93 	bl	80041b4 <LL_ADC_IsCalibrationOnGoing>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e2      	bne.n	800425a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	f043 0201 	orr.w	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
 80042a4:	e005      	b.n	80042b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	ffffeefd 	.word	0xffffeefd
 80042c8:	25c3f800 	.word	0x25c3f800

080042cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b09f      	sub	sp, #124	; 0x7c
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e0be      	b.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a5c      	ldr	r2, [pc, #368]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d102      	bne.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004304:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	e001      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e09d      	b.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff54 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 8004334:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff4e 	bl	80041dc <LL_ADC_REG_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d17f      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004348:	2b00      	cmp	r3, #0
 800434a:	d17c      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a47      	ldr	r2, [pc, #284]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a46      	ldr	r2, [pc, #280]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d101      	bne.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004360:	4b45      	ldr	r3, [pc, #276]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004362:	e000      	b.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004366:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d039      	beq.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	431a      	orrs	r2, r3
 800437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004380:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a38      	ldr	r2, [pc, #224]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10e      	bne.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004396:	4836      	ldr	r0, [pc, #216]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004398:	f7ff feda 	bl	8004150 <LL_ADC_IsEnabled>
 800439c:	4604      	mov	r4, r0
 800439e:	4835      	ldr	r0, [pc, #212]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043a0:	f7ff fed6 	bl	8004150 <LL_ADC_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e008      	b.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80043b4:	4832      	ldr	r0, [pc, #200]	; (8004480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043b6:	f7ff fecb 	bl	8004150 <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	6892      	ldr	r2, [r2, #8]
 80043da:	430a      	orrs	r2, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e2:	e03a      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80043e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10e      	bne.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004404:	481a      	ldr	r0, [pc, #104]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004406:	f7ff fea3 	bl	8004150 <LL_ADC_IsEnabled>
 800440a:	4604      	mov	r4, r0
 800440c:	4819      	ldr	r0, [pc, #100]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800440e:	f7ff fe9f 	bl	8004150 <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	4323      	orrs	r3, r4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e008      	b.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004422:	4817      	ldr	r0, [pc, #92]	; (8004480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004424:	f7ff fe94 	bl	8004150 <LL_ADC_IsEnabled>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800443e:	4013      	ands	r3, r2
 8004440:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004442:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004444:	e009      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004458:	e000      	b.n	800445c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800445a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004464:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004468:	4618      	mov	r0, r3
 800446a:	377c      	adds	r7, #124	; 0x7c
 800446c:	46bd      	mov	sp, r7
 800446e:	bd90      	pop	{r4, r7, pc}
 8004470:	40022000 	.word	0x40022000
 8004474:	40022100 	.word	0x40022100
 8004478:	40022300 	.word	0x40022300
 800447c:	58026300 	.word	0x58026300
 8004480:	58026000 	.word	0x58026000
 8004484:	fffff0e0 	.word	0xfffff0e0

08004488 <__NVIC_SetPriorityGrouping>:
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <__NVIC_SetPriorityGrouping+0x40>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x40>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	05fa0000 	.word	0x05fa0000

080044d0 <__NVIC_GetPriorityGrouping>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_EnableIRQ+0x38>)
 8004506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004608:	f7ff ff8e 	bl	8004528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff29 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800464c:	f7ff ff40 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 8004650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7ff ff90 	bl	800457c <NVIC_EncodePriority>
 800465c:	4602      	mov	r2, r0
 800465e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff5f 	bl	8004528 <__NVIC_SetPriority>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff33 	bl	80044ec <__NVIC_EnableIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffa4 	bl	80045e4 <SysTick_Config>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e014      	b.n	80046e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd fd19 	bl	8002100 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	795b      	ldrb	r3, [r3, #5]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_DAC_Start+0x16>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e040      	b.n	8004782 <HAL_DAC_Start+0x98>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2201      	movs	r2, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004734:	2b02      	cmp	r3, #2
 8004736:	d11d      	bne.n	8004774 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	e014      	b.n	8004774 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2102      	movs	r1, #2
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0202 	orr.w	r2, r2, #2
 8004772:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800478e:	b480      	push	{r7}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3308      	adds	r3, #8
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e004      	b.n	80047c2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	3314      	adds	r3, #20
 80047c0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	461a      	mov	r2, r3
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	795b      	ldrb	r3, [r3, #5]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_DAC_ConfigChannel+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e11d      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x254>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2202      	movs	r2, #2
 80047fa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d174      	bne.n	80048ee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004804:	f7fe f8ba 	bl	800297c <HAL_GetTick>
 8004808:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d134      	bne.n	800487a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004810:	e011      	b.n	8004836 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004812:	f7fe f8b3 	bl	800297c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d90a      	bls.n	8004836 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f043 0208 	orr.w	r2, r3, #8
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2203      	movs	r2, #3
 8004830:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0fa      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483c:	4b7d      	ldr	r3, [pc, #500]	; (8004a34 <HAL_DAC_ConfigChannel+0x25c>)
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004844:	2001      	movs	r0, #1
 8004846:	f7fe f8a5 	bl	8002994 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	6992      	ldr	r2, [r2, #24]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
 8004854:	e01e      	b.n	8004894 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004856:	f7fe f891 	bl	800297c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d90a      	bls.n	800487a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f043 0208 	orr.w	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2203      	movs	r2, #3
 8004874:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0d8      	b.n	8004a2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	dbe8      	blt.n	8004856 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004884:	2001      	movs	r0, #1
 8004886:	f7fe f885 	bl	8002994 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	6992      	ldr	r2, [r2, #24]
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	ea02 0103 	and.w	r1, r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	21ff      	movs	r1, #255	; 0xff
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	ea02 0103 	and.w	r1, r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	409a      	lsls	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d11d      	bne.n	8004932 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	221f      	movs	r2, #31
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4013      	ands	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2207      	movs	r2, #7
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4013      	ands	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d102      	bne.n	800495c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e00f      	b.n	800497c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d102      	bne.n	800496a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004964:	2301      	movs	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e008      	b.n	800497c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004972:	2301      	movs	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e001      	b.n	800497c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43da      	mvns	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4013      	ands	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	22c0      	movs	r2, #192	; 0xc0
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43da      	mvns	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20008000 	.word	0x20008000

08004a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a40:	f7fd ff9c 	bl	800297c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e316      	b.n	800507e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a66      	ldr	r2, [pc, #408]	; (8004bf0 <HAL_DMA_Init+0x1b8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04a      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_DMA_Init+0x1bc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d045      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a63      	ldr	r2, [pc, #396]	; (8004bf8 <HAL_DMA_Init+0x1c0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d040      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a62      	ldr	r2, [pc, #392]	; (8004bfc <HAL_DMA_Init+0x1c4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d03b      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a60      	ldr	r2, [pc, #384]	; (8004c00 <HAL_DMA_Init+0x1c8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d036      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5f      	ldr	r2, [pc, #380]	; (8004c04 <HAL_DMA_Init+0x1cc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d031      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a5d      	ldr	r2, [pc, #372]	; (8004c08 <HAL_DMA_Init+0x1d0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d02c      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a5c      	ldr	r2, [pc, #368]	; (8004c0c <HAL_DMA_Init+0x1d4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d027      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a5a      	ldr	r2, [pc, #360]	; (8004c10 <HAL_DMA_Init+0x1d8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a59      	ldr	r2, [pc, #356]	; (8004c14 <HAL_DMA_Init+0x1dc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01d      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a57      	ldr	r2, [pc, #348]	; (8004c18 <HAL_DMA_Init+0x1e0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d018      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_DMA_Init+0x1e4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a54      	ldr	r2, [pc, #336]	; (8004c20 <HAL_DMA_Init+0x1e8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a53      	ldr	r2, [pc, #332]	; (8004c24 <HAL_DMA_Init+0x1ec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a51      	ldr	r2, [pc, #324]	; (8004c28 <HAL_DMA_Init+0x1f0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_DMA_Init+0xb8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a50      	ldr	r2, [pc, #320]	; (8004c2c <HAL_DMA_Init+0x1f4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Init+0xbc>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_DMA_Init+0xbe>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 813b 	beq.w	8004d72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a37      	ldr	r2, [pc, #220]	; (8004bf0 <HAL_DMA_Init+0x1b8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a36      	ldr	r2, [pc, #216]	; (8004bf4 <HAL_DMA_Init+0x1bc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d045      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a34      	ldr	r2, [pc, #208]	; (8004bf8 <HAL_DMA_Init+0x1c0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d040      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a33      	ldr	r2, [pc, #204]	; (8004bfc <HAL_DMA_Init+0x1c4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d03b      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a31      	ldr	r2, [pc, #196]	; (8004c00 <HAL_DMA_Init+0x1c8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d036      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <HAL_DMA_Init+0x1cc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <HAL_DMA_Init+0x1d0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_DMA_Init+0x1d4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <HAL_DMA_Init+0x1d8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <HAL_DMA_Init+0x1dc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <HAL_DMA_Init+0x1e0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <HAL_DMA_Init+0x1e4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <HAL_DMA_Init+0x1e8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <HAL_DMA_Init+0x1ec>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_DMA_Init+0x1f0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_Init+0x174>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_DMA_Init+0x1f4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <HAL_DMA_Init+0x186>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e007      	b.n	8004bce <HAL_DMA_Init+0x196>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bce:	e02f      	b.n	8004c30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd0:	f7fd fed4 	bl	800297c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d928      	bls.n	8004c30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e246      	b.n	800507e <HAL_DMA_Init+0x646>
 8004bf0:	40020010 	.word	0x40020010
 8004bf4:	40020028 	.word	0x40020028
 8004bf8:	40020040 	.word	0x40020040
 8004bfc:	40020058 	.word	0x40020058
 8004c00:	40020070 	.word	0x40020070
 8004c04:	40020088 	.word	0x40020088
 8004c08:	400200a0 	.word	0x400200a0
 8004c0c:	400200b8 	.word	0x400200b8
 8004c10:	40020410 	.word	0x40020410
 8004c14:	40020428 	.word	0x40020428
 8004c18:	40020440 	.word	0x40020440
 8004c1c:	40020458 	.word	0x40020458
 8004c20:	40020470 	.word	0x40020470
 8004c24:	40020488 	.word	0x40020488
 8004c28:	400204a0 	.word	0x400204a0
 8004c2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1c8      	bne.n	8004bd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4b83      	ldr	r3, [pc, #524]	; (8004e58 <HAL_DMA_Init+0x420>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c94:	4b71      	ldr	r3, [pc, #452]	; (8004e5c <HAL_DMA_Init+0x424>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b71      	ldr	r3, [pc, #452]	; (8004e60 <HAL_DMA_Init+0x428>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca0:	d328      	bcc.n	8004cf4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b28      	cmp	r3, #40	; 0x28
 8004ca8:	d903      	bls.n	8004cb2 <HAL_DMA_Init+0x27a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b2e      	cmp	r3, #46	; 0x2e
 8004cb0:	d917      	bls.n	8004ce2 <HAL_DMA_Init+0x2aa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb8:	d903      	bls.n	8004cc2 <HAL_DMA_Init+0x28a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b42      	cmp	r3, #66	; 0x42
 8004cc0:	d90f      	bls.n	8004ce2 <HAL_DMA_Init+0x2aa>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b46      	cmp	r3, #70	; 0x46
 8004cc8:	d903      	bls.n	8004cd2 <HAL_DMA_Init+0x29a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b48      	cmp	r3, #72	; 0x48
 8004cd0:	d907      	bls.n	8004ce2 <HAL_DMA_Init+0x2aa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8004cd8:	d905      	bls.n	8004ce6 <HAL_DMA_Init+0x2ae>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b52      	cmp	r3, #82	; 0x52
 8004ce0:	d801      	bhi.n	8004ce6 <HAL_DMA_Init+0x2ae>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_DMA_Init+0x2b0>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d117      	bne.n	8004d4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00e      	beq.n	8004d4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f002 fb33 	bl	800739c <DMA_CheckFifoParam>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2240      	movs	r2, #64	; 0x40
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e197      	b.n	800507e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f002 fa6e 	bl	8007238 <DMA_CalcBaseAndBitshift>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e0cd      	b.n	8004f0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <HAL_DMA_Init+0x42c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_DMA_Init+0x430>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01d      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <HAL_DMA_Init+0x434>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_DMA_Init+0x438>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a35      	ldr	r2, [pc, #212]	; (8004e74 <HAL_DMA_Init+0x43c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <HAL_DMA_Init+0x440>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a32      	ldr	r2, [pc, #200]	; (8004e7c <HAL_DMA_Init+0x444>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_DMA_Init+0x38a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_DMA_Init+0x448>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_DMA_Init+0x38e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_DMA_Init+0x390>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8097 	beq.w	8004efc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <HAL_DMA_Init+0x42c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d021      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <HAL_DMA_Init+0x430>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01c      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <HAL_DMA_Init+0x434>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d017      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_DMA_Init+0x438>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d012      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <HAL_DMA_Init+0x43c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00d      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <HAL_DMA_Init+0x440>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d008      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_DMA_Init+0x444>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <HAL_DMA_Init+0x3e4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_DMA_Init+0x448>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_DMA_Init+0x44c>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d020      	beq.n	8004e88 <HAL_DMA_Init+0x450>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d102      	bne.n	8004e54 <HAL_DMA_Init+0x41c>
 8004e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e52:	e01a      	b.n	8004e8a <HAL_DMA_Init+0x452>
 8004e54:	2300      	movs	r3, #0
 8004e56:	e018      	b.n	8004e8a <HAL_DMA_Init+0x452>
 8004e58:	fe10803f 	.word	0xfe10803f
 8004e5c:	5c001000 	.word	0x5c001000
 8004e60:	ffff0000 	.word	0xffff0000
 8004e64:	58025408 	.word	0x58025408
 8004e68:	5802541c 	.word	0x5802541c
 8004e6c:	58025430 	.word	0x58025430
 8004e70:	58025444 	.word	0x58025444
 8004e74:	58025458 	.word	0x58025458
 8004e78:	5802546c 	.word	0x5802546c
 8004e7c:	58025480 	.word	0x58025480
 8004e80:	58025494 	.word	0x58025494
 8004e84:	fffe000f 	.word	0xfffe000f
 8004e88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68d2      	ldr	r2, [r2, #12]
 8004e8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4b6e      	ldr	r3, [pc, #440]	; (8005088 <HAL_DMA_Init+0x650>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4a6e      	ldr	r2, [pc, #440]	; (800508c <HAL_DMA_Init+0x654>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f002 f9a9 	bl	8007238 <DMA_CalcBaseAndBitshift>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e008      	b.n	8004f0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0b7      	b.n	800507e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5f      	ldr	r2, [pc, #380]	; (8005090 <HAL_DMA_Init+0x658>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d072      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <HAL_DMA_Init+0x65c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d06d      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5c      	ldr	r2, [pc, #368]	; (8005098 <HAL_DMA_Init+0x660>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d068      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5a      	ldr	r2, [pc, #360]	; (800509c <HAL_DMA_Init+0x664>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d063      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a59      	ldr	r2, [pc, #356]	; (80050a0 <HAL_DMA_Init+0x668>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d05e      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <HAL_DMA_Init+0x66c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d059      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a56      	ldr	r2, [pc, #344]	; (80050a8 <HAL_DMA_Init+0x670>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d054      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a54      	ldr	r2, [pc, #336]	; (80050ac <HAL_DMA_Init+0x674>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d04f      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a53      	ldr	r2, [pc, #332]	; (80050b0 <HAL_DMA_Init+0x678>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_DMA_Init+0x67c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <HAL_DMA_Init+0x680>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <HAL_DMA_Init+0x684>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a4d      	ldr	r2, [pc, #308]	; (80050c0 <HAL_DMA_Init+0x688>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4b      	ldr	r2, [pc, #300]	; (80050c4 <HAL_DMA_Init+0x68c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4a      	ldr	r2, [pc, #296]	; (80050c8 <HAL_DMA_Init+0x690>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a48      	ldr	r2, [pc, #288]	; (80050cc <HAL_DMA_Init+0x694>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a47      	ldr	r2, [pc, #284]	; (80050d0 <HAL_DMA_Init+0x698>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a45      	ldr	r2, [pc, #276]	; (80050d4 <HAL_DMA_Init+0x69c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a44      	ldr	r2, [pc, #272]	; (80050d8 <HAL_DMA_Init+0x6a0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a42      	ldr	r2, [pc, #264]	; (80050dc <HAL_DMA_Init+0x6a4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a41      	ldr	r2, [pc, #260]	; (80050e0 <HAL_DMA_Init+0x6a8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a3f      	ldr	r2, [pc, #252]	; (80050e4 <HAL_DMA_Init+0x6ac>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3e      	ldr	r2, [pc, #248]	; (80050e8 <HAL_DMA_Init+0x6b0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_Init+0x5c6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3c      	ldr	r2, [pc, #240]	; (80050ec <HAL_DMA_Init+0x6b4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <HAL_DMA_Init+0x5ca>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_DMA_Init+0x5cc>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d032      	beq.n	800506e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f002 fa43 	bl	8007494 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d102      	bne.n	800501c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005030:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <HAL_DMA_Init+0x624>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b08      	cmp	r3, #8
 8005040:	d80c      	bhi.n	800505c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 fac0 	bl	80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e008      	b.n	800506e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	a7fdabf8 	.word	0xa7fdabf8
 800508c:	cccccccd 	.word	0xcccccccd
 8005090:	40020010 	.word	0x40020010
 8005094:	40020028 	.word	0x40020028
 8005098:	40020040 	.word	0x40020040
 800509c:	40020058 	.word	0x40020058
 80050a0:	40020070 	.word	0x40020070
 80050a4:	40020088 	.word	0x40020088
 80050a8:	400200a0 	.word	0x400200a0
 80050ac:	400200b8 	.word	0x400200b8
 80050b0:	40020410 	.word	0x40020410
 80050b4:	40020428 	.word	0x40020428
 80050b8:	40020440 	.word	0x40020440
 80050bc:	40020458 	.word	0x40020458
 80050c0:	40020470 	.word	0x40020470
 80050c4:	40020488 	.word	0x40020488
 80050c8:	400204a0 	.word	0x400204a0
 80050cc:	400204b8 	.word	0x400204b8
 80050d0:	58025408 	.word	0x58025408
 80050d4:	5802541c 	.word	0x5802541c
 80050d8:	58025430 	.word	0x58025430
 80050dc:	58025444 	.word	0x58025444
 80050e0:	58025458 	.word	0x58025458
 80050e4:	5802546c 	.word	0x5802546c
 80050e8:	58025480 	.word	0x58025480
 80050ec:	58025494 	.word	0x58025494

080050f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e226      	b.n	800555a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_DMA_Start_IT+0x2a>
 8005116:	2302      	movs	r3, #2
 8005118:	e21f      	b.n	800555a <HAL_DMA_Start_IT+0x46a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	f040 820a 	bne.w	8005544 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a68      	ldr	r2, [pc, #416]	; (80052e4 <HAL_DMA_Start_IT+0x1f4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a66      	ldr	r2, [pc, #408]	; (80052e8 <HAL_DMA_Start_IT+0x1f8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a65      	ldr	r2, [pc, #404]	; (80052ec <HAL_DMA_Start_IT+0x1fc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a63      	ldr	r2, [pc, #396]	; (80052f0 <HAL_DMA_Start_IT+0x200>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a62      	ldr	r2, [pc, #392]	; (80052f4 <HAL_DMA_Start_IT+0x204>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a60      	ldr	r2, [pc, #384]	; (80052f8 <HAL_DMA_Start_IT+0x208>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5f      	ldr	r2, [pc, #380]	; (80052fc <HAL_DMA_Start_IT+0x20c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_DMA_Start_IT+0x210>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_DMA_Start_IT+0x214>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_DMA_Start_IT+0x218>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a59      	ldr	r2, [pc, #356]	; (800530c <HAL_DMA_Start_IT+0x21c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_DMA_Start_IT+0x220>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a56      	ldr	r2, [pc, #344]	; (8005314 <HAL_DMA_Start_IT+0x224>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a54      	ldr	r2, [pc, #336]	; (8005318 <HAL_DMA_Start_IT+0x228>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a53      	ldr	r2, [pc, #332]	; (800531c <HAL_DMA_Start_IT+0x22c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_Start_IT+0xee>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a51      	ldr	r2, [pc, #324]	; (8005320 <HAL_DMA_Start_IT+0x230>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <HAL_DMA_Start_IT+0x100>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e007      	b.n	8005200 <HAL_DMA_Start_IT+0x110>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f001 fe6a 	bl	8006ee0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a34      	ldr	r2, [pc, #208]	; (80052e4 <HAL_DMA_Start_IT+0x1f4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d04a      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a33      	ldr	r2, [pc, #204]	; (80052e8 <HAL_DMA_Start_IT+0x1f8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d045      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a31      	ldr	r2, [pc, #196]	; (80052ec <HAL_DMA_Start_IT+0x1fc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d040      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <HAL_DMA_Start_IT+0x200>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d03b      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2e      	ldr	r2, [pc, #184]	; (80052f4 <HAL_DMA_Start_IT+0x204>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d036      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <HAL_DMA_Start_IT+0x208>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d031      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_DMA_Start_IT+0x20c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02c      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <HAL_DMA_Start_IT+0x210>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d027      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a28      	ldr	r2, [pc, #160]	; (8005304 <HAL_DMA_Start_IT+0x214>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d022      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_DMA_Start_IT+0x218>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d01d      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <HAL_DMA_Start_IT+0x21c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d018      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a24      	ldr	r2, [pc, #144]	; (8005310 <HAL_DMA_Start_IT+0x220>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	; (8005314 <HAL_DMA_Start_IT+0x224>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	; (8005318 <HAL_DMA_Start_IT+0x228>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_DMA_Start_IT+0x22c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_DMA_Start_IT+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_DMA_Start_IT+0x230>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d101      	bne.n	80052b0 <HAL_DMA_Start_IT+0x1c0>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <HAL_DMA_Start_IT+0x1c2>
 80052b0:	2300      	movs	r3, #0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d036      	beq.n	8005324 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 021e 	bic.w	r2, r3, #30
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0216 	orr.w	r2, r2, #22
 80052c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d03e      	beq.n	8005350 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e035      	b.n	8005350 <HAL_DMA_Start_IT+0x260>
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 020e 	bic.w	r2, r3, #14
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 020a 	orr.w	r2, r2, #10
 8005336:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0204 	orr.w	r2, r2, #4
 800534e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a83      	ldr	r2, [pc, #524]	; (8005564 <HAL_DMA_Start_IT+0x474>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d072      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a82      	ldr	r2, [pc, #520]	; (8005568 <HAL_DMA_Start_IT+0x478>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d06d      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a80      	ldr	r2, [pc, #512]	; (800556c <HAL_DMA_Start_IT+0x47c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d068      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7f      	ldr	r2, [pc, #508]	; (8005570 <HAL_DMA_Start_IT+0x480>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d063      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a7d      	ldr	r2, [pc, #500]	; (8005574 <HAL_DMA_Start_IT+0x484>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d05e      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7c      	ldr	r2, [pc, #496]	; (8005578 <HAL_DMA_Start_IT+0x488>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d059      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7a      	ldr	r2, [pc, #488]	; (800557c <HAL_DMA_Start_IT+0x48c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d054      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a79      	ldr	r2, [pc, #484]	; (8005580 <HAL_DMA_Start_IT+0x490>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04f      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a77      	ldr	r2, [pc, #476]	; (8005584 <HAL_DMA_Start_IT+0x494>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a76      	ldr	r2, [pc, #472]	; (8005588 <HAL_DMA_Start_IT+0x498>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a74      	ldr	r2, [pc, #464]	; (800558c <HAL_DMA_Start_IT+0x49c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a73      	ldr	r2, [pc, #460]	; (8005590 <HAL_DMA_Start_IT+0x4a0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a71      	ldr	r2, [pc, #452]	; (8005594 <HAL_DMA_Start_IT+0x4a4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a70      	ldr	r2, [pc, #448]	; (8005598 <HAL_DMA_Start_IT+0x4a8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_DMA_Start_IT+0x4ac>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6d      	ldr	r2, [pc, #436]	; (80055a0 <HAL_DMA_Start_IT+0x4b0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6b      	ldr	r2, [pc, #428]	; (80055a4 <HAL_DMA_Start_IT+0x4b4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6a      	ldr	r2, [pc, #424]	; (80055a8 <HAL_DMA_Start_IT+0x4b8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a68      	ldr	r2, [pc, #416]	; (80055ac <HAL_DMA_Start_IT+0x4bc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a67      	ldr	r2, [pc, #412]	; (80055b0 <HAL_DMA_Start_IT+0x4c0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a65      	ldr	r2, [pc, #404]	; (80055b4 <HAL_DMA_Start_IT+0x4c4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a64      	ldr	r2, [pc, #400]	; (80055b8 <HAL_DMA_Start_IT+0x4c8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a62      	ldr	r2, [pc, #392]	; (80055bc <HAL_DMA_Start_IT+0x4cc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_Start_IT+0x350>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a61      	ldr	r2, [pc, #388]	; (80055c0 <HAL_DMA_Start_IT+0x4d0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_DMA_Start_IT+0x354>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_DMA_Start_IT+0x356>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01a      	beq.n	8005480 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005466:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a37      	ldr	r2, [pc, #220]	; (8005564 <HAL_DMA_Start_IT+0x474>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d04a      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a36      	ldr	r2, [pc, #216]	; (8005568 <HAL_DMA_Start_IT+0x478>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d045      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a34      	ldr	r2, [pc, #208]	; (800556c <HAL_DMA_Start_IT+0x47c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d040      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a33      	ldr	r2, [pc, #204]	; (8005570 <HAL_DMA_Start_IT+0x480>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d03b      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_DMA_Start_IT+0x484>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d036      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_DMA_Start_IT+0x488>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d031      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	; (800557c <HAL_DMA_Start_IT+0x48c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02c      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_DMA_Start_IT+0x490>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d027      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_Start_IT+0x494>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_Start_IT+0x498>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d01d      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_Start_IT+0x49c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_DMA_Start_IT+0x4a0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_Start_IT+0x4a4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_DMA_Start_IT+0x4a8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_Start_IT+0x4ac>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_DMA_Start_IT+0x430>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_DMA_Start_IT+0x4b0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <HAL_DMA_Start_IT+0x442>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e012      	b.n	8005558 <HAL_DMA_Start_IT+0x468>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e009      	b.n	8005558 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800554a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020040 	.word	0x40020040
 8005570:	40020058 	.word	0x40020058
 8005574:	40020070 	.word	0x40020070
 8005578:	40020088 	.word	0x40020088
 800557c:	400200a0 	.word	0x400200a0
 8005580:	400200b8 	.word	0x400200b8
 8005584:	40020410 	.word	0x40020410
 8005588:	40020428 	.word	0x40020428
 800558c:	40020440 	.word	0x40020440
 8005590:	40020458 	.word	0x40020458
 8005594:	40020470 	.word	0x40020470
 8005598:	40020488 	.word	0x40020488
 800559c:	400204a0 	.word	0x400204a0
 80055a0:	400204b8 	.word	0x400204b8
 80055a4:	58025408 	.word	0x58025408
 80055a8:	5802541c 	.word	0x5802541c
 80055ac:	58025430 	.word	0x58025430
 80055b0:	58025444 	.word	0x58025444
 80055b4:	58025458 	.word	0x58025458
 80055b8:	5802546c 	.word	0x5802546c
 80055bc:	58025480 	.word	0x58025480
 80055c0:	58025494 	.word	0x58025494

080055c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7fd f9d6 	bl	800297c <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2dc      	b.n	8005b96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d008      	beq.n	80055fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e2cd      	b.n	8005b96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a76      	ldr	r2, [pc, #472]	; (80057d8 <HAL_DMA_Abort+0x214>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d04a      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a74      	ldr	r2, [pc, #464]	; (80057dc <HAL_DMA_Abort+0x218>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d045      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a73      	ldr	r2, [pc, #460]	; (80057e0 <HAL_DMA_Abort+0x21c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d040      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a71      	ldr	r2, [pc, #452]	; (80057e4 <HAL_DMA_Abort+0x220>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d03b      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a70      	ldr	r2, [pc, #448]	; (80057e8 <HAL_DMA_Abort+0x224>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d036      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a6e      	ldr	r2, [pc, #440]	; (80057ec <HAL_DMA_Abort+0x228>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d031      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a6d      	ldr	r2, [pc, #436]	; (80057f0 <HAL_DMA_Abort+0x22c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d02c      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6b      	ldr	r2, [pc, #428]	; (80057f4 <HAL_DMA_Abort+0x230>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d027      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a6a      	ldr	r2, [pc, #424]	; (80057f8 <HAL_DMA_Abort+0x234>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a68      	ldr	r2, [pc, #416]	; (80057fc <HAL_DMA_Abort+0x238>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01d      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a67      	ldr	r2, [pc, #412]	; (8005800 <HAL_DMA_Abort+0x23c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a65      	ldr	r2, [pc, #404]	; (8005804 <HAL_DMA_Abort+0x240>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a64      	ldr	r2, [pc, #400]	; (8005808 <HAL_DMA_Abort+0x244>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a62      	ldr	r2, [pc, #392]	; (800580c <HAL_DMA_Abort+0x248>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a61      	ldr	r2, [pc, #388]	; (8005810 <HAL_DMA_Abort+0x24c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_DMA_Abort+0xd6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <HAL_DMA_Abort+0x250>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_DMA_Abort+0xda>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_DMA_Abort+0xdc>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 021e 	bic.w	r2, r2, #30
 80056b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e00a      	b.n	80056e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 020e 	bic.w	r2, r2, #14
 80056da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <HAL_DMA_Abort+0x214>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d072      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <HAL_DMA_Abort+0x218>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d06d      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a39      	ldr	r2, [pc, #228]	; (80057e0 <HAL_DMA_Abort+0x21c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d068      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <HAL_DMA_Abort+0x220>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d063      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a36      	ldr	r2, [pc, #216]	; (80057e8 <HAL_DMA_Abort+0x224>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d05e      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a34      	ldr	r2, [pc, #208]	; (80057ec <HAL_DMA_Abort+0x228>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d059      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <HAL_DMA_Abort+0x22c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d054      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a31      	ldr	r2, [pc, #196]	; (80057f4 <HAL_DMA_Abort+0x230>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d04f      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <HAL_DMA_Abort+0x234>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <HAL_DMA_Abort+0x238>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <HAL_DMA_Abort+0x23c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <HAL_DMA_Abort+0x240>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_DMA_Abort+0x244>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a28      	ldr	r2, [pc, #160]	; (800580c <HAL_DMA_Abort+0x248>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a27      	ldr	r2, [pc, #156]	; (8005810 <HAL_DMA_Abort+0x24c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a25      	ldr	r2, [pc, #148]	; (8005814 <HAL_DMA_Abort+0x250>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a24      	ldr	r2, [pc, #144]	; (8005818 <HAL_DMA_Abort+0x254>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_DMA_Abort+0x258>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_DMA_Abort+0x25c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_DMA_Abort+0x260>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_DMA_Abort+0x264>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_DMA_Abort+0x268>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_DMA_Abort+0x26c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_Abort+0x20e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_DMA_Abort+0x270>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d132      	bne.n	8005838 <HAL_DMA_Abort+0x274>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e031      	b.n	800583a <HAL_DMA_Abort+0x276>
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6d      	ldr	r2, [pc, #436]	; (8005a08 <HAL_DMA_Abort+0x444>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6b      	ldr	r2, [pc, #428]	; (8005a0c <HAL_DMA_Abort+0x448>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6a      	ldr	r2, [pc, #424]	; (8005a10 <HAL_DMA_Abort+0x44c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a68      	ldr	r2, [pc, #416]	; (8005a14 <HAL_DMA_Abort+0x450>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <HAL_DMA_Abort+0x454>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <HAL_DMA_Abort+0x458>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a64      	ldr	r2, [pc, #400]	; (8005a20 <HAL_DMA_Abort+0x45c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a62      	ldr	r2, [pc, #392]	; (8005a24 <HAL_DMA_Abort+0x460>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a61      	ldr	r2, [pc, #388]	; (8005a28 <HAL_DMA_Abort+0x464>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5f      	ldr	r2, [pc, #380]	; (8005a2c <HAL_DMA_Abort+0x468>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5e      	ldr	r2, [pc, #376]	; (8005a30 <HAL_DMA_Abort+0x46c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5c      	ldr	r2, [pc, #368]	; (8005a34 <HAL_DMA_Abort+0x470>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5b      	ldr	r2, [pc, #364]	; (8005a38 <HAL_DMA_Abort+0x474>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a59      	ldr	r2, [pc, #356]	; (8005a3c <HAL_DMA_Abort+0x478>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a58      	ldr	r2, [pc, #352]	; (8005a40 <HAL_DMA_Abort+0x47c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_Abort+0x32a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a56      	ldr	r2, [pc, #344]	; (8005a44 <HAL_DMA_Abort+0x480>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d108      	bne.n	8005900 <HAL_DMA_Abort+0x33c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e007      	b.n	8005910 <HAL_DMA_Abort+0x34c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005910:	e013      	b.n	800593a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005912:	f7fd f833 	bl	800297c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b05      	cmp	r3, #5
 800591e:	d90c      	bls.n	800593a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2203      	movs	r2, #3
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e12d      	b.n	8005b96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <HAL_DMA_Abort+0x444>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2d      	ldr	r2, [pc, #180]	; (8005a0c <HAL_DMA_Abort+0x448>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <HAL_DMA_Abort+0x44c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <HAL_DMA_Abort+0x450>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <HAL_DMA_Abort+0x454>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <HAL_DMA_Abort+0x458>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <HAL_DMA_Abort+0x45c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_DMA_Abort+0x460>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <HAL_DMA_Abort+0x464>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_DMA_Abort+0x468>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <HAL_DMA_Abort+0x46c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <HAL_DMA_Abort+0x470>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <HAL_DMA_Abort+0x474>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <HAL_DMA_Abort+0x478>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_DMA_Abort+0x47c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_Abort+0x422>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_DMA_Abort+0x480>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Abort+0x426>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_DMA_Abort+0x428>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02b      	beq.n	8005a48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	223f      	movs	r2, #63	; 0x3f
 8005a00:	409a      	lsls	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	609a      	str	r2, [r3, #8]
 8005a06:	e02a      	b.n	8005a5e <HAL_DMA_Abort+0x49a>
 8005a08:	40020010 	.word	0x40020010
 8005a0c:	40020028 	.word	0x40020028
 8005a10:	40020040 	.word	0x40020040
 8005a14:	40020058 	.word	0x40020058
 8005a18:	40020070 	.word	0x40020070
 8005a1c:	40020088 	.word	0x40020088
 8005a20:	400200a0 	.word	0x400200a0
 8005a24:	400200b8 	.word	0x400200b8
 8005a28:	40020410 	.word	0x40020410
 8005a2c:	40020428 	.word	0x40020428
 8005a30:	40020440 	.word	0x40020440
 8005a34:	40020458 	.word	0x40020458
 8005a38:	40020470 	.word	0x40020470
 8005a3c:	40020488 	.word	0x40020488
 8005a40:	400204a0 	.word	0x400204a0
 8005a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2201      	movs	r2, #1
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a4f      	ldr	r2, [pc, #316]	; (8005ba0 <HAL_DMA_Abort+0x5dc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d072      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ba4 <HAL_DMA_Abort+0x5e0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d06d      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4c      	ldr	r2, [pc, #304]	; (8005ba8 <HAL_DMA_Abort+0x5e4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d068      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a4a      	ldr	r2, [pc, #296]	; (8005bac <HAL_DMA_Abort+0x5e8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d063      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a49      	ldr	r2, [pc, #292]	; (8005bb0 <HAL_DMA_Abort+0x5ec>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d05e      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a47      	ldr	r2, [pc, #284]	; (8005bb4 <HAL_DMA_Abort+0x5f0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d059      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a46      	ldr	r2, [pc, #280]	; (8005bb8 <HAL_DMA_Abort+0x5f4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d054      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a44      	ldr	r2, [pc, #272]	; (8005bbc <HAL_DMA_Abort+0x5f8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d04f      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a43      	ldr	r2, [pc, #268]	; (8005bc0 <HAL_DMA_Abort+0x5fc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d04a      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a41      	ldr	r2, [pc, #260]	; (8005bc4 <HAL_DMA_Abort+0x600>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d045      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <HAL_DMA_Abort+0x604>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d040      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3e      	ldr	r2, [pc, #248]	; (8005bcc <HAL_DMA_Abort+0x608>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d03b      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <HAL_DMA_Abort+0x60c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d036      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a3b      	ldr	r2, [pc, #236]	; (8005bd4 <HAL_DMA_Abort+0x610>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d031      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3a      	ldr	r2, [pc, #232]	; (8005bd8 <HAL_DMA_Abort+0x614>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d02c      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <HAL_DMA_Abort+0x618>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d027      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <HAL_DMA_Abort+0x61c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a35      	ldr	r2, [pc, #212]	; (8005be4 <HAL_DMA_Abort+0x620>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01d      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <HAL_DMA_Abort+0x624>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a32      	ldr	r2, [pc, #200]	; (8005bec <HAL_DMA_Abort+0x628>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a31      	ldr	r2, [pc, #196]	; (8005bf0 <HAL_DMA_Abort+0x62c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	; (8005bf4 <HAL_DMA_Abort+0x630>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <HAL_DMA_Abort+0x634>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_DMA_Abort+0x58a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <HAL_DMA_Abort+0x638>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_DMA_Abort+0x58e>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_DMA_Abort+0x590>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d015      	beq.n	8005b84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40020010 	.word	0x40020010
 8005ba4:	40020028 	.word	0x40020028
 8005ba8:	40020040 	.word	0x40020040
 8005bac:	40020058 	.word	0x40020058
 8005bb0:	40020070 	.word	0x40020070
 8005bb4:	40020088 	.word	0x40020088
 8005bb8:	400200a0 	.word	0x400200a0
 8005bbc:	400200b8 	.word	0x400200b8
 8005bc0:	40020410 	.word	0x40020410
 8005bc4:	40020428 	.word	0x40020428
 8005bc8:	40020440 	.word	0x40020440
 8005bcc:	40020458 	.word	0x40020458
 8005bd0:	40020470 	.word	0x40020470
 8005bd4:	40020488 	.word	0x40020488
 8005bd8:	400204a0 	.word	0x400204a0
 8005bdc:	400204b8 	.word	0x400204b8
 8005be0:	58025408 	.word	0x58025408
 8005be4:	5802541c 	.word	0x5802541c
 8005be8:	58025430 	.word	0x58025430
 8005bec:	58025444 	.word	0x58025444
 8005bf0:	58025458 	.word	0x58025458
 8005bf4:	5802546c 	.word	0x5802546c
 8005bf8:	58025480 	.word	0x58025480
 8005bfc:	58025494 	.word	0x58025494

08005c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e237      	b.n	8006082 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d004      	beq.n	8005c28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e22c      	b.n	8006082 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5c      	ldr	r2, [pc, #368]	; (8005da0 <HAL_DMA_Abort_IT+0x1a0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d04a      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a5b      	ldr	r2, [pc, #364]	; (8005da4 <HAL_DMA_Abort_IT+0x1a4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d045      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a59      	ldr	r2, [pc, #356]	; (8005da8 <HAL_DMA_Abort_IT+0x1a8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d040      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_DMA_Abort_IT+0x1ac>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d03b      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a56      	ldr	r2, [pc, #344]	; (8005db0 <HAL_DMA_Abort_IT+0x1b0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d036      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a55      	ldr	r2, [pc, #340]	; (8005db4 <HAL_DMA_Abort_IT+0x1b4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d031      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a53      	ldr	r2, [pc, #332]	; (8005db8 <HAL_DMA_Abort_IT+0x1b8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02c      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_DMA_Abort_IT+0x1bc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d027      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a50      	ldr	r2, [pc, #320]	; (8005dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4f      	ldr	r2, [pc, #316]	; (8005dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a4d      	ldr	r2, [pc, #308]	; (8005dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4c      	ldr	r2, [pc, #304]	; (8005dcc <HAL_DMA_Abort_IT+0x1cc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a49      	ldr	r2, [pc, #292]	; (8005dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a47      	ldr	r2, [pc, #284]	; (8005dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a46      	ldr	r2, [pc, #280]	; (8005ddc <HAL_DMA_Abort_IT+0x1dc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_DMA_Abort_IT+0xcc>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_DMA_Abort_IT+0xce>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8086 	beq.w	8005de0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <HAL_DMA_Abort_IT+0x1a0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d04a      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <HAL_DMA_Abort_IT+0x1a4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d045      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2c      	ldr	r2, [pc, #176]	; (8005da8 <HAL_DMA_Abort_IT+0x1a8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d040      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <HAL_DMA_Abort_IT+0x1ac>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d03b      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <HAL_DMA_Abort_IT+0x1b0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d036      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_DMA_Abort_IT+0x1b4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d031      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <HAL_DMA_Abort_IT+0x1b8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02c      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_DMA_Abort_IT+0x1bc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d027      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01d      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <HAL_DMA_Abort_IT+0x1cc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x17c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <HAL_DMA_Abort_IT+0x1dc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <HAL_DMA_Abort_IT+0x18e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e178      	b.n	8006080 <HAL_DMA_Abort_IT+0x480>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e16f      	b.n	8006080 <HAL_DMA_Abort_IT+0x480>
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020028 	.word	0x40020028
 8005da8:	40020040 	.word	0x40020040
 8005dac:	40020058 	.word	0x40020058
 8005db0:	40020070 	.word	0x40020070
 8005db4:	40020088 	.word	0x40020088
 8005db8:	400200a0 	.word	0x400200a0
 8005dbc:	400200b8 	.word	0x400200b8
 8005dc0:	40020410 	.word	0x40020410
 8005dc4:	40020428 	.word	0x40020428
 8005dc8:	40020440 	.word	0x40020440
 8005dcc:	40020458 	.word	0x40020458
 8005dd0:	40020470 	.word	0x40020470
 8005dd4:	40020488 	.word	0x40020488
 8005dd8:	400204a0 	.word	0x400204a0
 8005ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 020e 	bic.w	r2, r2, #14
 8005dee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6c      	ldr	r2, [pc, #432]	; (8005fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d04a      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6b      	ldr	r2, [pc, #428]	; (8005fac <HAL_DMA_Abort_IT+0x3ac>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d045      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a69      	ldr	r2, [pc, #420]	; (8005fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d040      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a68      	ldr	r2, [pc, #416]	; (8005fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d03b      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a66      	ldr	r2, [pc, #408]	; (8005fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d036      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a65      	ldr	r2, [pc, #404]	; (8005fbc <HAL_DMA_Abort_IT+0x3bc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d031      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a63      	ldr	r2, [pc, #396]	; (8005fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02c      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a62      	ldr	r2, [pc, #392]	; (8005fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d027      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a60      	ldr	r2, [pc, #384]	; (8005fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a5f      	ldr	r2, [pc, #380]	; (8005fcc <HAL_DMA_Abort_IT+0x3cc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01d      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5d      	ldr	r2, [pc, #372]	; (8005fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5c      	ldr	r2, [pc, #368]	; (8005fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5a      	ldr	r2, [pc, #360]	; (8005fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a59      	ldr	r2, [pc, #356]	; (8005fdc <HAL_DMA_Abort_IT+0x3dc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a57      	ldr	r2, [pc, #348]	; (8005fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x290>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a56      	ldr	r2, [pc, #344]	; (8005fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <HAL_DMA_Abort_IT+0x2a2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e007      	b.n	8005eb2 <HAL_DMA_Abort_IT+0x2b2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a3c      	ldr	r2, [pc, #240]	; (8005fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d072      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a3a      	ldr	r2, [pc, #232]	; (8005fac <HAL_DMA_Abort_IT+0x3ac>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d06d      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a39      	ldr	r2, [pc, #228]	; (8005fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d068      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a37      	ldr	r2, [pc, #220]	; (8005fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d063      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a36      	ldr	r2, [pc, #216]	; (8005fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d05e      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a34      	ldr	r2, [pc, #208]	; (8005fbc <HAL_DMA_Abort_IT+0x3bc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d059      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a33      	ldr	r2, [pc, #204]	; (8005fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d054      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a31      	ldr	r2, [pc, #196]	; (8005fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04f      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a30      	ldr	r2, [pc, #192]	; (8005fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2e      	ldr	r2, [pc, #184]	; (8005fcc <HAL_DMA_Abort_IT+0x3cc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2d      	ldr	r2, [pc, #180]	; (8005fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2b      	ldr	r2, [pc, #172]	; (8005fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <HAL_DMA_Abort_IT+0x3dc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a25      	ldr	r2, [pc, #148]	; (8005fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <HAL_DMA_Abort_IT+0x3e8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a22      	ldr	r2, [pc, #136]	; (8005fec <HAL_DMA_Abort_IT+0x3ec>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a21      	ldr	r2, [pc, #132]	; (8005ff0 <HAL_DMA_Abort_IT+0x3f0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <HAL_DMA_Abort_IT+0x3f4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <HAL_DMA_Abort_IT+0x3f8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <HAL_DMA_Abort_IT+0x3fc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <HAL_DMA_Abort_IT+0x400>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_Abort_IT+0x3a2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a19      	ldr	r2, [pc, #100]	; (8006004 <HAL_DMA_Abort_IT+0x404>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d132      	bne.n	8006008 <HAL_DMA_Abort_IT+0x408>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e031      	b.n	800600a <HAL_DMA_Abort_IT+0x40a>
 8005fa6:	bf00      	nop
 8005fa8:	40020010 	.word	0x40020010
 8005fac:	40020028 	.word	0x40020028
 8005fb0:	40020040 	.word	0x40020040
 8005fb4:	40020058 	.word	0x40020058
 8005fb8:	40020070 	.word	0x40020070
 8005fbc:	40020088 	.word	0x40020088
 8005fc0:	400200a0 	.word	0x400200a0
 8005fc4:	400200b8 	.word	0x400200b8
 8005fc8:	40020410 	.word	0x40020410
 8005fcc:	40020428 	.word	0x40020428
 8005fd0:	40020440 	.word	0x40020440
 8005fd4:	40020458 	.word	0x40020458
 8005fd8:	40020470 	.word	0x40020470
 8005fdc:	40020488 	.word	0x40020488
 8005fe0:	400204a0 	.word	0x400204a0
 8005fe4:	400204b8 	.word	0x400204b8
 8005fe8:	58025408 	.word	0x58025408
 8005fec:	5802541c 	.word	0x5802541c
 8005ff0:	58025430 	.word	0x58025430
 8005ff4:	58025444 	.word	0x58025444
 8005ff8:	58025458 	.word	0x58025458
 8005ffc:	5802546c 	.word	0x5802546c
 8006000:	58025480 	.word	0x58025480
 8006004:	58025494 	.word	0x58025494
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d028      	beq.n	8006060 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800601c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800603c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006054:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800605e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop

0800608c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006098:	4b67      	ldr	r3, [pc, #412]	; (8006238 <HAL_DMA_IRQHandler+0x1ac>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a67      	ldr	r2, [pc, #412]	; (800623c <HAL_DMA_IRQHandler+0x1b0>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	0a9b      	lsrs	r3, r3, #10
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5f      	ldr	r2, [pc, #380]	; (8006240 <HAL_DMA_IRQHandler+0x1b4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5d      	ldr	r2, [pc, #372]	; (8006244 <HAL_DMA_IRQHandler+0x1b8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a5c      	ldr	r2, [pc, #368]	; (8006248 <HAL_DMA_IRQHandler+0x1bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5a      	ldr	r2, [pc, #360]	; (800624c <HAL_DMA_IRQHandler+0x1c0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a59      	ldr	r2, [pc, #356]	; (8006250 <HAL_DMA_IRQHandler+0x1c4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_DMA_IRQHandler+0x1c8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a56      	ldr	r2, [pc, #344]	; (8006258 <HAL_DMA_IRQHandler+0x1cc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a54      	ldr	r2, [pc, #336]	; (800625c <HAL_DMA_IRQHandler+0x1d0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a53      	ldr	r2, [pc, #332]	; (8006260 <HAL_DMA_IRQHandler+0x1d4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a51      	ldr	r2, [pc, #324]	; (8006264 <HAL_DMA_IRQHandler+0x1d8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a50      	ldr	r2, [pc, #320]	; (8006268 <HAL_DMA_IRQHandler+0x1dc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a4e      	ldr	r2, [pc, #312]	; (800626c <HAL_DMA_IRQHandler+0x1e0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a4d      	ldr	r2, [pc, #308]	; (8006270 <HAL_DMA_IRQHandler+0x1e4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a4b      	ldr	r2, [pc, #300]	; (8006274 <HAL_DMA_IRQHandler+0x1e8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4a      	ldr	r2, [pc, #296]	; (8006278 <HAL_DMA_IRQHandler+0x1ec>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_IRQHandler+0xd2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a48      	ldr	r2, [pc, #288]	; (800627c <HAL_DMA_IRQHandler+0x1f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <HAL_DMA_IRQHandler+0xd6>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <HAL_DMA_IRQHandler+0xd8>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 842b 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2208      	movs	r2, #8
 8006174:	409a      	lsls	r2, r3
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80a2 	beq.w	80062c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <HAL_DMA_IRQHandler+0x1b4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d04a      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_IRQHandler+0x1b8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d045      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2b      	ldr	r2, [pc, #172]	; (8006248 <HAL_DMA_IRQHandler+0x1bc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d040      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_IRQHandler+0x1c0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d03b      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_DMA_IRQHandler+0x1c4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d036      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_DMA_IRQHandler+0x1c8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d031      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_DMA_IRQHandler+0x1cc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d02c      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DMA_IRQHandler+0x1d0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d027      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_DMA_IRQHandler+0x1d4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d022      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_DMA_IRQHandler+0x1d8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01d      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <HAL_DMA_IRQHandler+0x1dc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_DMA_IRQHandler+0x1e0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <HAL_DMA_IRQHandler+0x1e4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_DMA_IRQHandler+0x1e8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a19      	ldr	r2, [pc, #100]	; (8006278 <HAL_DMA_IRQHandler+0x1ec>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_DMA_IRQHandler+0x194>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_DMA_IRQHandler+0x1f0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d12f      	bne.n	8006280 <HAL_DMA_IRQHandler+0x1f4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf14      	ite	ne
 800622e:	2301      	movne	r3, #1
 8006230:	2300      	moveq	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e02e      	b.n	8006294 <HAL_DMA_IRQHandler+0x208>
 8006236:	bf00      	nop
 8006238:	24000028 	.word	0x24000028
 800623c:	1b4e81b5 	.word	0x1b4e81b5
 8006240:	40020010 	.word	0x40020010
 8006244:	40020028 	.word	0x40020028
 8006248:	40020040 	.word	0x40020040
 800624c:	40020058 	.word	0x40020058
 8006250:	40020070 	.word	0x40020070
 8006254:	40020088 	.word	0x40020088
 8006258:	400200a0 	.word	0x400200a0
 800625c:	400200b8 	.word	0x400200b8
 8006260:	40020410 	.word	0x40020410
 8006264:	40020428 	.word	0x40020428
 8006268:	40020440 	.word	0x40020440
 800626c:	40020458 	.word	0x40020458
 8006270:	40020470 	.word	0x40020470
 8006274:	40020488 	.word	0x40020488
 8006278:	400204a0 	.word	0x400204a0
 800627c:	400204b8 	.word	0x400204b8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	bf14      	ite	ne
 800628e:	2301      	movne	r3, #1
 8006290:	2300      	moveq	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d015      	beq.n	80062c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2208      	movs	r2, #8
 80062b2:	409a      	lsls	r2, r3
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	f043 0201 	orr.w	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d06e      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a69      	ldr	r2, [pc, #420]	; (8006484 <HAL_DMA_IRQHandler+0x3f8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d04a      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a67      	ldr	r2, [pc, #412]	; (8006488 <HAL_DMA_IRQHandler+0x3fc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d045      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a66      	ldr	r2, [pc, #408]	; (800648c <HAL_DMA_IRQHandler+0x400>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d040      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a64      	ldr	r2, [pc, #400]	; (8006490 <HAL_DMA_IRQHandler+0x404>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d03b      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a63      	ldr	r2, [pc, #396]	; (8006494 <HAL_DMA_IRQHandler+0x408>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d036      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a61      	ldr	r2, [pc, #388]	; (8006498 <HAL_DMA_IRQHandler+0x40c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a60      	ldr	r2, [pc, #384]	; (800649c <HAL_DMA_IRQHandler+0x410>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d02c      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5e      	ldr	r2, [pc, #376]	; (80064a0 <HAL_DMA_IRQHandler+0x414>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d027      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5d      	ldr	r2, [pc, #372]	; (80064a4 <HAL_DMA_IRQHandler+0x418>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5b      	ldr	r2, [pc, #364]	; (80064a8 <HAL_DMA_IRQHandler+0x41c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a5a      	ldr	r2, [pc, #360]	; (80064ac <HAL_DMA_IRQHandler+0x420>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a58      	ldr	r2, [pc, #352]	; (80064b0 <HAL_DMA_IRQHandler+0x424>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a57      	ldr	r2, [pc, #348]	; (80064b4 <HAL_DMA_IRQHandler+0x428>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a55      	ldr	r2, [pc, #340]	; (80064b8 <HAL_DMA_IRQHandler+0x42c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a54      	ldr	r2, [pc, #336]	; (80064bc <HAL_DMA_IRQHandler+0x430>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_DMA_IRQHandler+0x2ee>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a52      	ldr	r2, [pc, #328]	; (80064c0 <HAL_DMA_IRQHandler+0x434>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10a      	bne.n	8006390 <HAL_DMA_IRQHandler+0x304>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e003      	b.n	8006398 <HAL_DMA_IRQHandler+0x30c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2201      	movs	r2, #1
 80063a6:	409a      	lsls	r2, r3
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	f043 0202 	orr.w	r2, r3, #2
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2204      	movs	r2, #4
 80063c2:	409a      	lsls	r2, r3
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 808f 	beq.w	80064ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <HAL_DMA_IRQHandler+0x3f8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d04a      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2a      	ldr	r2, [pc, #168]	; (8006488 <HAL_DMA_IRQHandler+0x3fc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d045      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a29      	ldr	r2, [pc, #164]	; (800648c <HAL_DMA_IRQHandler+0x400>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d040      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a27      	ldr	r2, [pc, #156]	; (8006490 <HAL_DMA_IRQHandler+0x404>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03b      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a26      	ldr	r2, [pc, #152]	; (8006494 <HAL_DMA_IRQHandler+0x408>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d036      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a24      	ldr	r2, [pc, #144]	; (8006498 <HAL_DMA_IRQHandler+0x40c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d031      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a23      	ldr	r2, [pc, #140]	; (800649c <HAL_DMA_IRQHandler+0x410>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d02c      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <HAL_DMA_IRQHandler+0x414>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d027      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <HAL_DMA_IRQHandler+0x418>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <HAL_DMA_IRQHandler+0x41c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01d      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_DMA_IRQHandler+0x420>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_DMA_IRQHandler+0x424>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <HAL_DMA_IRQHandler+0x428>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_DMA_IRQHandler+0x42c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <HAL_DMA_IRQHandler+0x430>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_DMA_IRQHandler+0x3e2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_DMA_IRQHandler+0x434>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d12a      	bne.n	80064c4 <HAL_DMA_IRQHandler+0x438>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	e023      	b.n	80064cc <HAL_DMA_IRQHandler+0x440>
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2204      	movs	r2, #4
 80064da:	409a      	lsls	r2, r3
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	f043 0204 	orr.w	r2, r3, #4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2210      	movs	r2, #16
 80064f6:	409a      	lsls	r2, r3
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80a6 	beq.w	800664e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a85      	ldr	r2, [pc, #532]	; (800671c <HAL_DMA_IRQHandler+0x690>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a83      	ldr	r2, [pc, #524]	; (8006720 <HAL_DMA_IRQHandler+0x694>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a82      	ldr	r2, [pc, #520]	; (8006724 <HAL_DMA_IRQHandler+0x698>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a80      	ldr	r2, [pc, #512]	; (8006728 <HAL_DMA_IRQHandler+0x69c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7f      	ldr	r2, [pc, #508]	; (800672c <HAL_DMA_IRQHandler+0x6a0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a7d      	ldr	r2, [pc, #500]	; (8006730 <HAL_DMA_IRQHandler+0x6a4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a7c      	ldr	r2, [pc, #496]	; (8006734 <HAL_DMA_IRQHandler+0x6a8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a7a      	ldr	r2, [pc, #488]	; (8006738 <HAL_DMA_IRQHandler+0x6ac>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a79      	ldr	r2, [pc, #484]	; (800673c <HAL_DMA_IRQHandler+0x6b0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a77      	ldr	r2, [pc, #476]	; (8006740 <HAL_DMA_IRQHandler+0x6b4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a76      	ldr	r2, [pc, #472]	; (8006744 <HAL_DMA_IRQHandler+0x6b8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a74      	ldr	r2, [pc, #464]	; (8006748 <HAL_DMA_IRQHandler+0x6bc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a73      	ldr	r2, [pc, #460]	; (800674c <HAL_DMA_IRQHandler+0x6c0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a71      	ldr	r2, [pc, #452]	; (8006750 <HAL_DMA_IRQHandler+0x6c4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a70      	ldr	r2, [pc, #448]	; (8006754 <HAL_DMA_IRQHandler+0x6c8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x516>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a6e      	ldr	r2, [pc, #440]	; (8006758 <HAL_DMA_IRQHandler+0x6cc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10a      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x52c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e009      	b.n	80065cc <HAL_DMA_IRQHandler+0x540>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03e      	beq.n	800664e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2210      	movs	r2, #16
 80065da:	409a      	lsls	r2, r3
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d024      	beq.n	800664e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	e01f      	b.n	800664e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01b      	beq.n	800664e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
 800661e:	e016      	b.n	800664e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0208 	bic.w	r2, r2, #8
 800663c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2220      	movs	r2, #32
 8006658:	409a      	lsls	r2, r3
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8110 	beq.w	8006884 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2c      	ldr	r2, [pc, #176]	; (800671c <HAL_DMA_IRQHandler+0x690>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04a      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2b      	ldr	r2, [pc, #172]	; (8006720 <HAL_DMA_IRQHandler+0x694>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d045      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a29      	ldr	r2, [pc, #164]	; (8006724 <HAL_DMA_IRQHandler+0x698>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d040      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a28      	ldr	r2, [pc, #160]	; (8006728 <HAL_DMA_IRQHandler+0x69c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d03b      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <HAL_DMA_IRQHandler+0x6a0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d036      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a25      	ldr	r2, [pc, #148]	; (8006730 <HAL_DMA_IRQHandler+0x6a4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d031      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a23      	ldr	r2, [pc, #140]	; (8006734 <HAL_DMA_IRQHandler+0x6a8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02c      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a22      	ldr	r2, [pc, #136]	; (8006738 <HAL_DMA_IRQHandler+0x6ac>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d027      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a20      	ldr	r2, [pc, #128]	; (800673c <HAL_DMA_IRQHandler+0x6b0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <HAL_DMA_IRQHandler+0x6b4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <HAL_DMA_IRQHandler+0x6b8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_DMA_IRQHandler+0x6bc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1a      	ldr	r2, [pc, #104]	; (800674c <HAL_DMA_IRQHandler+0x6c0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_DMA_IRQHandler+0x6c4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a17      	ldr	r2, [pc, #92]	; (8006754 <HAL_DMA_IRQHandler+0x6c8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_DMA_IRQHandler+0x678>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_DMA_IRQHandler+0x6cc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d12b      	bne.n	800675c <HAL_DMA_IRQHandler+0x6d0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf14      	ite	ne
 8006712:	2301      	movne	r3, #1
 8006714:	2300      	moveq	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	e02a      	b.n	8006770 <HAL_DMA_IRQHandler+0x6e4>
 800671a:	bf00      	nop
 800671c:	40020010 	.word	0x40020010
 8006720:	40020028 	.word	0x40020028
 8006724:	40020040 	.word	0x40020040
 8006728:	40020058 	.word	0x40020058
 800672c:	40020070 	.word	0x40020070
 8006730:	40020088 	.word	0x40020088
 8006734:	400200a0 	.word	0x400200a0
 8006738:	400200b8 	.word	0x400200b8
 800673c:	40020410 	.word	0x40020410
 8006740:	40020428 	.word	0x40020428
 8006744:	40020440 	.word	0x40020440
 8006748:	40020458 	.word	0x40020458
 800674c:	40020470 	.word	0x40020470
 8006750:	40020488 	.word	0x40020488
 8006754:	400204a0 	.word	0x400204a0
 8006758:	400204b8 	.word	0x400204b8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8087 	beq.w	8006884 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2220      	movs	r2, #32
 8006780:	409a      	lsls	r2, r3
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b04      	cmp	r3, #4
 8006790:	d139      	bne.n	8006806 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0216 	bic.w	r2, r2, #22
 80067a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_DMA_IRQHandler+0x736>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0208 	bic.w	r2, r2, #8
 80067d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	223f      	movs	r2, #63	; 0x3f
 80067dc:	409a      	lsls	r2, r3
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 834a 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
          }
          return;
 8006804:	e344      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d018      	beq.n	8006846 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d108      	bne.n	8006834 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02c      	beq.n	8006884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
 8006832:	e027      	b.n	8006884 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d023      	beq.n	8006884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
 8006844:	e01e      	b.n	8006884 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10f      	bne.n	8006874 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0210 	bic.w	r2, r2, #16
 8006862:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8306 	beq.w	8006e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8088 	beq.w	80069ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2204      	movs	r2, #4
 80068a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7a      	ldr	r2, [pc, #488]	; (8006a94 <HAL_DMA_IRQHandler+0xa08>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04a      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a79      	ldr	r2, [pc, #484]	; (8006a98 <HAL_DMA_IRQHandler+0xa0c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d045      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a77      	ldr	r2, [pc, #476]	; (8006a9c <HAL_DMA_IRQHandler+0xa10>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d040      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a76      	ldr	r2, [pc, #472]	; (8006aa0 <HAL_DMA_IRQHandler+0xa14>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d03b      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a74      	ldr	r2, [pc, #464]	; (8006aa4 <HAL_DMA_IRQHandler+0xa18>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d036      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a73      	ldr	r2, [pc, #460]	; (8006aa8 <HAL_DMA_IRQHandler+0xa1c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d031      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a71      	ldr	r2, [pc, #452]	; (8006aac <HAL_DMA_IRQHandler+0xa20>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02c      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a70      	ldr	r2, [pc, #448]	; (8006ab0 <HAL_DMA_IRQHandler+0xa24>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d027      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a6e      	ldr	r2, [pc, #440]	; (8006ab4 <HAL_DMA_IRQHandler+0xa28>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a6d      	ldr	r2, [pc, #436]	; (8006ab8 <HAL_DMA_IRQHandler+0xa2c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6b      	ldr	r2, [pc, #428]	; (8006abc <HAL_DMA_IRQHandler+0xa30>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6a      	ldr	r2, [pc, #424]	; (8006ac0 <HAL_DMA_IRQHandler+0xa34>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a68      	ldr	r2, [pc, #416]	; (8006ac4 <HAL_DMA_IRQHandler+0xa38>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a67      	ldr	r2, [pc, #412]	; (8006ac8 <HAL_DMA_IRQHandler+0xa3c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a65      	ldr	r2, [pc, #404]	; (8006acc <HAL_DMA_IRQHandler+0xa40>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_DMA_IRQHandler+0x8b8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a64      	ldr	r2, [pc, #400]	; (8006ad0 <HAL_DMA_IRQHandler+0xa44>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d108      	bne.n	8006956 <HAL_DMA_IRQHandler+0x8ca>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e007      	b.n	8006966 <HAL_DMA_IRQHandler+0x8da>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	429a      	cmp	r2, r3
 8006970:	d307      	bcc.n	8006982 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f2      	bne.n	8006966 <HAL_DMA_IRQHandler+0x8da>
 8006980:	e000      	b.n	8006984 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006982:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800699a:	e003      	b.n	80069a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8272 	beq.w	8006e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	e26c      	b.n	8006e9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a43      	ldr	r2, [pc, #268]	; (8006ad4 <HAL_DMA_IRQHandler+0xa48>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d022      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a42      	ldr	r2, [pc, #264]	; (8006ad8 <HAL_DMA_IRQHandler+0xa4c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01d      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a40      	ldr	r2, [pc, #256]	; (8006adc <HAL_DMA_IRQHandler+0xa50>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d018      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a3f      	ldr	r2, [pc, #252]	; (8006ae0 <HAL_DMA_IRQHandler+0xa54>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3d      	ldr	r2, [pc, #244]	; (8006ae4 <HAL_DMA_IRQHandler+0xa58>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3c      	ldr	r2, [pc, #240]	; (8006ae8 <HAL_DMA_IRQHandler+0xa5c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a3a      	ldr	r2, [pc, #232]	; (8006aec <HAL_DMA_IRQHandler+0xa60>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x984>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <HAL_DMA_IRQHandler+0xa64>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d101      	bne.n	8006a14 <HAL_DMA_IRQHandler+0x988>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_DMA_IRQHandler+0x98a>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 823f 	beq.w	8006e9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80cd 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xb48>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80c7 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	2204      	movs	r2, #4
 8006a50:	409a      	lsls	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d049      	beq.n	8006af4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8210 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a7c:	e20a      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8206 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a90:	e200      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe08>
 8006a92:	bf00      	nop
 8006a94:	40020010 	.word	0x40020010
 8006a98:	40020028 	.word	0x40020028
 8006a9c:	40020040 	.word	0x40020040
 8006aa0:	40020058 	.word	0x40020058
 8006aa4:	40020070 	.word	0x40020070
 8006aa8:	40020088 	.word	0x40020088
 8006aac:	400200a0 	.word	0x400200a0
 8006ab0:	400200b8 	.word	0x400200b8
 8006ab4:	40020410 	.word	0x40020410
 8006ab8:	40020428 	.word	0x40020428
 8006abc:	40020440 	.word	0x40020440
 8006ac0:	40020458 	.word	0x40020458
 8006ac4:	40020470 	.word	0x40020470
 8006ac8:	40020488 	.word	0x40020488
 8006acc:	400204a0 	.word	0x400204a0
 8006ad0:	400204b8 	.word	0x400204b8
 8006ad4:	58025408 	.word	0x58025408
 8006ad8:	5802541c 	.word	0x5802541c
 8006adc:	58025430 	.word	0x58025430
 8006ae0:	58025444 	.word	0x58025444
 8006ae4:	58025458 	.word	0x58025458
 8006ae8:	5802546c 	.word	0x5802546c
 8006aec:	58025480 	.word	0x58025480
 8006af0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d160      	bne.n	8006bc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7f      	ldr	r2, [pc, #508]	; (8006d00 <HAL_DMA_IRQHandler+0xc74>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d04a      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7d      	ldr	r2, [pc, #500]	; (8006d04 <HAL_DMA_IRQHandler+0xc78>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d045      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7c      	ldr	r2, [pc, #496]	; (8006d08 <HAL_DMA_IRQHandler+0xc7c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d040      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7a      	ldr	r2, [pc, #488]	; (8006d0c <HAL_DMA_IRQHandler+0xc80>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d03b      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a79      	ldr	r2, [pc, #484]	; (8006d10 <HAL_DMA_IRQHandler+0xc84>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d036      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a77      	ldr	r2, [pc, #476]	; (8006d14 <HAL_DMA_IRQHandler+0xc88>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d031      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a76      	ldr	r2, [pc, #472]	; (8006d18 <HAL_DMA_IRQHandler+0xc8c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d02c      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a74      	ldr	r2, [pc, #464]	; (8006d1c <HAL_DMA_IRQHandler+0xc90>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d027      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a73      	ldr	r2, [pc, #460]	; (8006d20 <HAL_DMA_IRQHandler+0xc94>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a71      	ldr	r2, [pc, #452]	; (8006d24 <HAL_DMA_IRQHandler+0xc98>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a70      	ldr	r2, [pc, #448]	; (8006d28 <HAL_DMA_IRQHandler+0xc9c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6e      	ldr	r2, [pc, #440]	; (8006d2c <HAL_DMA_IRQHandler+0xca0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6d      	ldr	r2, [pc, #436]	; (8006d30 <HAL_DMA_IRQHandler+0xca4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6b      	ldr	r2, [pc, #428]	; (8006d34 <HAL_DMA_IRQHandler+0xca8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6a      	ldr	r2, [pc, #424]	; (8006d38 <HAL_DMA_IRQHandler+0xcac>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xb12>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a68      	ldr	r2, [pc, #416]	; (8006d3c <HAL_DMA_IRQHandler+0xcb0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <HAL_DMA_IRQHandler+0xb24>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0208 	bic.w	r2, r2, #8
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e007      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xb34>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8165 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd2:	e15f      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2202      	movs	r2, #2
 8006bde:	409a      	lsls	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80c5 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xce8>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80bf 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2202      	movs	r2, #2
 8006c00:	409a      	lsls	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d018      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 813a 	beq.w	8006e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c2c:	e134      	b.n	8006e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8130 	beq.w	8006e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c40:	e12a      	b.n	8006e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 8089 	bne.w	8006d60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <HAL_DMA_IRQHandler+0xc74>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <HAL_DMA_IRQHandler+0xc78>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <HAL_DMA_IRQHandler+0xc7c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a26      	ldr	r2, [pc, #152]	; (8006d0c <HAL_DMA_IRQHandler+0xc80>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <HAL_DMA_IRQHandler+0xc84>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <HAL_DMA_IRQHandler+0xc88>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <HAL_DMA_IRQHandler+0xc8c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <HAL_DMA_IRQHandler+0xc90>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_DMA_IRQHandler+0xc94>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <HAL_DMA_IRQHandler+0xc98>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_DMA_IRQHandler+0xc9c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1a      	ldr	r2, [pc, #104]	; (8006d2c <HAL_DMA_IRQHandler+0xca0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_DMA_IRQHandler+0xca4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_DMA_IRQHandler+0xca8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <HAL_DMA_IRQHandler+0xcac>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_IRQHandler+0xc62>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a14      	ldr	r2, [pc, #80]	; (8006d3c <HAL_DMA_IRQHandler+0xcb0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d128      	bne.n	8006d40 <HAL_DMA_IRQHandler+0xcb4>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0214 	bic.w	r2, r2, #20
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e027      	b.n	8006d50 <HAL_DMA_IRQHandler+0xcc4>
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 020a 	bic.w	r2, r2, #10
 8006d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8097 	beq.w	8006e98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d72:	e091      	b.n	8006e98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8088 	beq.w	8006e9a <HAL_DMA_IRQHandler+0xe0e>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8082 	beq.w	8006e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a41      	ldr	r2, [pc, #260]	; (8006ea0 <HAL_DMA_IRQHandler+0xe14>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3f      	ldr	r2, [pc, #252]	; (8006ea4 <HAL_DMA_IRQHandler+0xe18>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a3e      	ldr	r2, [pc, #248]	; (8006ea8 <HAL_DMA_IRQHandler+0xe1c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3c      	ldr	r2, [pc, #240]	; (8006eac <HAL_DMA_IRQHandler+0xe20>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3b      	ldr	r2, [pc, #236]	; (8006eb0 <HAL_DMA_IRQHandler+0xe24>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a39      	ldr	r2, [pc, #228]	; (8006eb4 <HAL_DMA_IRQHandler+0xe28>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <HAL_DMA_IRQHandler+0xe2c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a36      	ldr	r2, [pc, #216]	; (8006ebc <HAL_DMA_IRQHandler+0xe30>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a35      	ldr	r2, [pc, #212]	; (8006ec0 <HAL_DMA_IRQHandler+0xe34>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a33      	ldr	r2, [pc, #204]	; (8006ec4 <HAL_DMA_IRQHandler+0xe38>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a32      	ldr	r2, [pc, #200]	; (8006ec8 <HAL_DMA_IRQHandler+0xe3c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <HAL_DMA_IRQHandler+0xe40>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2f      	ldr	r2, [pc, #188]	; (8006ed0 <HAL_DMA_IRQHandler+0xe44>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2d      	ldr	r2, [pc, #180]	; (8006ed4 <HAL_DMA_IRQHandler+0xe48>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2c      	ldr	r2, [pc, #176]	; (8006ed8 <HAL_DMA_IRQHandler+0xe4c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xdaa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <HAL_DMA_IRQHandler+0xe50>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d108      	bne.n	8006e48 <HAL_DMA_IRQHandler+0xdbc>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 021c 	bic.w	r2, r2, #28
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e007      	b.n	8006e58 <HAL_DMA_IRQHandler+0xdcc>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 020e 	bic.w	r2, r2, #14
 8006e56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2201      	movs	r2, #1
 8006e62:	409a      	lsls	r2, r3
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
 8006e8e:	e004      	b.n	8006e9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e90:	bf00      	nop
 8006e92:	e002      	b.n	8006e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e94:	bf00      	nop
 8006e96:	e000      	b.n	8006e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40020010 	.word	0x40020010
 8006ea4:	40020028 	.word	0x40020028
 8006ea8:	40020040 	.word	0x40020040
 8006eac:	40020058 	.word	0x40020058
 8006eb0:	40020070 	.word	0x40020070
 8006eb4:	40020088 	.word	0x40020088
 8006eb8:	400200a0 	.word	0x400200a0
 8006ebc:	400200b8 	.word	0x400200b8
 8006ec0:	40020410 	.word	0x40020410
 8006ec4:	40020428 	.word	0x40020428
 8006ec8:	40020440 	.word	0x40020440
 8006ecc:	40020458 	.word	0x40020458
 8006ed0:	40020470 	.word	0x40020470
 8006ed4:	40020488 	.word	0x40020488
 8006ed8:	400204a0 	.word	0x400204a0
 8006edc:	400204b8 	.word	0x400204b8

08006ee0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a7f      	ldr	r2, [pc, #508]	; (80070fc <DMA_SetConfig+0x21c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d072      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a7d      	ldr	r2, [pc, #500]	; (8007100 <DMA_SetConfig+0x220>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d06d      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a7c      	ldr	r2, [pc, #496]	; (8007104 <DMA_SetConfig+0x224>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d068      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a7a      	ldr	r2, [pc, #488]	; (8007108 <DMA_SetConfig+0x228>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d063      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a79      	ldr	r2, [pc, #484]	; (800710c <DMA_SetConfig+0x22c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d05e      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a77      	ldr	r2, [pc, #476]	; (8007110 <DMA_SetConfig+0x230>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d059      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a76      	ldr	r2, [pc, #472]	; (8007114 <DMA_SetConfig+0x234>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d054      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a74      	ldr	r2, [pc, #464]	; (8007118 <DMA_SetConfig+0x238>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d04f      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a73      	ldr	r2, [pc, #460]	; (800711c <DMA_SetConfig+0x23c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d04a      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a71      	ldr	r2, [pc, #452]	; (8007120 <DMA_SetConfig+0x240>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d045      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a70      	ldr	r2, [pc, #448]	; (8007124 <DMA_SetConfig+0x244>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d040      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	; (8007128 <DMA_SetConfig+0x248>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d03b      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6d      	ldr	r2, [pc, #436]	; (800712c <DMA_SetConfig+0x24c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d036      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6b      	ldr	r2, [pc, #428]	; (8007130 <DMA_SetConfig+0x250>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d031      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6a      	ldr	r2, [pc, #424]	; (8007134 <DMA_SetConfig+0x254>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d02c      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a68      	ldr	r2, [pc, #416]	; (8007138 <DMA_SetConfig+0x258>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d027      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a67      	ldr	r2, [pc, #412]	; (800713c <DMA_SetConfig+0x25c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a65      	ldr	r2, [pc, #404]	; (8007140 <DMA_SetConfig+0x260>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01d      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a64      	ldr	r2, [pc, #400]	; (8007144 <DMA_SetConfig+0x264>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a62      	ldr	r2, [pc, #392]	; (8007148 <DMA_SetConfig+0x268>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a61      	ldr	r2, [pc, #388]	; (800714c <DMA_SetConfig+0x26c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5f      	ldr	r2, [pc, #380]	; (8007150 <DMA_SetConfig+0x270>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <DMA_SetConfig+0x274>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a5c      	ldr	r2, [pc, #368]	; (8007158 <DMA_SetConfig+0x278>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <DMA_SetConfig+0x10e>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <DMA_SetConfig+0x110>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00d      	beq.n	8007010 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ffc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800700e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a39      	ldr	r2, [pc, #228]	; (80070fc <DMA_SetConfig+0x21c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d04a      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a38      	ldr	r2, [pc, #224]	; (8007100 <DMA_SetConfig+0x220>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d045      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a36      	ldr	r2, [pc, #216]	; (8007104 <DMA_SetConfig+0x224>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d040      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a35      	ldr	r2, [pc, #212]	; (8007108 <DMA_SetConfig+0x228>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d03b      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a33      	ldr	r2, [pc, #204]	; (800710c <DMA_SetConfig+0x22c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d036      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a32      	ldr	r2, [pc, #200]	; (8007110 <DMA_SetConfig+0x230>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d031      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a30      	ldr	r2, [pc, #192]	; (8007114 <DMA_SetConfig+0x234>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d02c      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <DMA_SetConfig+0x238>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d027      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a2d      	ldr	r2, [pc, #180]	; (800711c <DMA_SetConfig+0x23c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d022      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <DMA_SetConfig+0x240>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d01d      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <DMA_SetConfig+0x244>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d018      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a29      	ldr	r2, [pc, #164]	; (8007128 <DMA_SetConfig+0x248>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a27      	ldr	r2, [pc, #156]	; (800712c <DMA_SetConfig+0x24c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00e      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a26      	ldr	r2, [pc, #152]	; (8007130 <DMA_SetConfig+0x250>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d009      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a24      	ldr	r2, [pc, #144]	; (8007134 <DMA_SetConfig+0x254>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d004      	beq.n	80070b0 <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a23      	ldr	r2, [pc, #140]	; (8007138 <DMA_SetConfig+0x258>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <DMA_SetConfig+0x1d4>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <DMA_SetConfig+0x1d6>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d059      	beq.n	800716e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	223f      	movs	r2, #63	; 0x3f
 80070c4:	409a      	lsls	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d138      	bne.n	800715c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070fa:	e086      	b.n	800720a <DMA_SetConfig+0x32a>
 80070fc:	40020010 	.word	0x40020010
 8007100:	40020028 	.word	0x40020028
 8007104:	40020040 	.word	0x40020040
 8007108:	40020058 	.word	0x40020058
 800710c:	40020070 	.word	0x40020070
 8007110:	40020088 	.word	0x40020088
 8007114:	400200a0 	.word	0x400200a0
 8007118:	400200b8 	.word	0x400200b8
 800711c:	40020410 	.word	0x40020410
 8007120:	40020428 	.word	0x40020428
 8007124:	40020440 	.word	0x40020440
 8007128:	40020458 	.word	0x40020458
 800712c:	40020470 	.word	0x40020470
 8007130:	40020488 	.word	0x40020488
 8007134:	400204a0 	.word	0x400204a0
 8007138:	400204b8 	.word	0x400204b8
 800713c:	58025408 	.word	0x58025408
 8007140:	5802541c 	.word	0x5802541c
 8007144:	58025430 	.word	0x58025430
 8007148:	58025444 	.word	0x58025444
 800714c:	58025458 	.word	0x58025458
 8007150:	5802546c 	.word	0x5802546c
 8007154:	58025480 	.word	0x58025480
 8007158:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	60da      	str	r2, [r3, #12]
}
 800716c:	e04d      	b.n	800720a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a29      	ldr	r2, [pc, #164]	; (8007218 <DMA_SetConfig+0x338>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d022      	beq.n	80071be <DMA_SetConfig+0x2de>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <DMA_SetConfig+0x33c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01d      	beq.n	80071be <DMA_SetConfig+0x2de>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a26      	ldr	r2, [pc, #152]	; (8007220 <DMA_SetConfig+0x340>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d018      	beq.n	80071be <DMA_SetConfig+0x2de>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a24      	ldr	r2, [pc, #144]	; (8007224 <DMA_SetConfig+0x344>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <DMA_SetConfig+0x2de>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a23      	ldr	r2, [pc, #140]	; (8007228 <DMA_SetConfig+0x348>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00e      	beq.n	80071be <DMA_SetConfig+0x2de>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a21      	ldr	r2, [pc, #132]	; (800722c <DMA_SetConfig+0x34c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d009      	beq.n	80071be <DMA_SetConfig+0x2de>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a20      	ldr	r2, [pc, #128]	; (8007230 <DMA_SetConfig+0x350>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d004      	beq.n	80071be <DMA_SetConfig+0x2de>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <DMA_SetConfig+0x354>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <DMA_SetConfig+0x2e2>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <DMA_SetConfig+0x2e4>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d020      	beq.n	800720a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	2201      	movs	r2, #1
 80071d2:	409a      	lsls	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d108      	bne.n	80071fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	60da      	str	r2, [r3, #12]
}
 80071f8:	e007      	b.n	800720a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	60da      	str	r2, [r3, #12]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	58025408 	.word	0x58025408
 800721c:	5802541c 	.word	0x5802541c
 8007220:	58025430 	.word	0x58025430
 8007224:	58025444 	.word	0x58025444
 8007228:	58025458 	.word	0x58025458
 800722c:	5802546c 	.word	0x5802546c
 8007230:	58025480 	.word	0x58025480
 8007234:	58025494 	.word	0x58025494

08007238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a42      	ldr	r2, [pc, #264]	; (8007350 <DMA_CalcBaseAndBitshift+0x118>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d04a      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a41      	ldr	r2, [pc, #260]	; (8007354 <DMA_CalcBaseAndBitshift+0x11c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d045      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a3f      	ldr	r2, [pc, #252]	; (8007358 <DMA_CalcBaseAndBitshift+0x120>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d040      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a3e      	ldr	r2, [pc, #248]	; (800735c <DMA_CalcBaseAndBitshift+0x124>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d03b      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a3c      	ldr	r2, [pc, #240]	; (8007360 <DMA_CalcBaseAndBitshift+0x128>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d036      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3b      	ldr	r2, [pc, #236]	; (8007364 <DMA_CalcBaseAndBitshift+0x12c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d031      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a39      	ldr	r2, [pc, #228]	; (8007368 <DMA_CalcBaseAndBitshift+0x130>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d02c      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a38      	ldr	r2, [pc, #224]	; (800736c <DMA_CalcBaseAndBitshift+0x134>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d027      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a36      	ldr	r2, [pc, #216]	; (8007370 <DMA_CalcBaseAndBitshift+0x138>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d022      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a35      	ldr	r2, [pc, #212]	; (8007374 <DMA_CalcBaseAndBitshift+0x13c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d01d      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a33      	ldr	r2, [pc, #204]	; (8007378 <DMA_CalcBaseAndBitshift+0x140>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d018      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a32      	ldr	r2, [pc, #200]	; (800737c <DMA_CalcBaseAndBitshift+0x144>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	; (8007380 <DMA_CalcBaseAndBitshift+0x148>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00e      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2f      	ldr	r2, [pc, #188]	; (8007384 <DMA_CalcBaseAndBitshift+0x14c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d009      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <DMA_CalcBaseAndBitshift+0x150>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d004      	beq.n	80072e0 <DMA_CalcBaseAndBitshift+0xa8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2c      	ldr	r2, [pc, #176]	; (800738c <DMA_CalcBaseAndBitshift+0x154>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d101      	bne.n	80072e4 <DMA_CalcBaseAndBitshift+0xac>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <DMA_CalcBaseAndBitshift+0xae>
 80072e4:	2300      	movs	r3, #0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d024      	beq.n	8007334 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	3b10      	subs	r3, #16
 80072f2:	4a27      	ldr	r2, [pc, #156]	; (8007390 <DMA_CalcBaseAndBitshift+0x158>)
 80072f4:	fba2 2303 	umull	r2, r3, r2, r3
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	4a24      	ldr	r2, [pc, #144]	; (8007394 <DMA_CalcBaseAndBitshift+0x15c>)
 8007304:	5cd3      	ldrb	r3, [r2, r3]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d908      	bls.n	8007324 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4b1f      	ldr	r3, [pc, #124]	; (8007398 <DMA_CalcBaseAndBitshift+0x160>)
 800731a:	4013      	ands	r3, r2
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	659a      	str	r2, [r3, #88]	; 0x58
 8007322:	e00d      	b.n	8007340 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <DMA_CalcBaseAndBitshift+0x160>)
 800732c:	4013      	ands	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6593      	str	r3, [r2, #88]	; 0x58
 8007332:	e005      	b.n	8007340 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40020010 	.word	0x40020010
 8007354:	40020028 	.word	0x40020028
 8007358:	40020040 	.word	0x40020040
 800735c:	40020058 	.word	0x40020058
 8007360:	40020070 	.word	0x40020070
 8007364:	40020088 	.word	0x40020088
 8007368:	400200a0 	.word	0x400200a0
 800736c:	400200b8 	.word	0x400200b8
 8007370:	40020410 	.word	0x40020410
 8007374:	40020428 	.word	0x40020428
 8007378:	40020440 	.word	0x40020440
 800737c:	40020458 	.word	0x40020458
 8007380:	40020470 	.word	0x40020470
 8007384:	40020488 	.word	0x40020488
 8007388:	400204a0 	.word	0x400204a0
 800738c:	400204b8 	.word	0x400204b8
 8007390:	aaaaaaab 	.word	0xaaaaaaab
 8007394:	0800fec8 	.word	0x0800fec8
 8007398:	fffffc00 	.word	0xfffffc00

0800739c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d120      	bne.n	80073f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d858      	bhi.n	800746a <DMA_CheckFifoParam+0xce>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <DMA_CheckFifoParam+0x24>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073d1 	.word	0x080073d1
 80073c4:	080073e3 	.word	0x080073e3
 80073c8:	080073d1 	.word	0x080073d1
 80073cc:	0800746b 	.word	0x0800746b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d048      	beq.n	800746e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073e0:	e045      	b.n	800746e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ea:	d142      	bne.n	8007472 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073f0:	e03f      	b.n	8007472 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fa:	d123      	bne.n	8007444 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	2b03      	cmp	r3, #3
 8007402:	d838      	bhi.n	8007476 <DMA_CheckFifoParam+0xda>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <DMA_CheckFifoParam+0x70>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	0800741d 	.word	0x0800741d
 8007410:	08007423 	.word	0x08007423
 8007414:	0800741d 	.word	0x0800741d
 8007418:	08007435 	.word	0x08007435
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
        break;
 8007420:	e030      	b.n	8007484 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d025      	beq.n	800747a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007432:	e022      	b.n	800747a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800743c:	d11f      	bne.n	800747e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007442:	e01c      	b.n	800747e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	2b02      	cmp	r3, #2
 800744a:	d902      	bls.n	8007452 <DMA_CheckFifoParam+0xb6>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d003      	beq.n	8007458 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007450:	e018      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
        break;
 8007456:	e015      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	73fb      	strb	r3, [r7, #15]
    break;
 8007468:	e00b      	b.n	8007482 <DMA_CheckFifoParam+0xe6>
        break;
 800746a:	bf00      	nop
 800746c:	e00a      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        break;
 800746e:	bf00      	nop
 8007470:	e008      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        break;
 8007472:	bf00      	nop
 8007474:	e006      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        break;
 8007476:	bf00      	nop
 8007478:	e004      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        break;
 800747a:	bf00      	nop
 800747c:	e002      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
        break;
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <DMA_CheckFifoParam+0xe8>
    break;
 8007482:	bf00      	nop
    }
  }

  return status;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop

08007494 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a38      	ldr	r2, [pc, #224]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a36      	ldr	r2, [pc, #216]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a35      	ldr	r2, [pc, #212]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a33      	ldr	r2, [pc, #204]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a32      	ldr	r2, [pc, #200]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a30      	ldr	r2, [pc, #192]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2f      	ldr	r2, [pc, #188]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2d      	ldr	r2, [pc, #180]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01a      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3b08      	subs	r3, #8
 8007504:	4a28      	ldr	r2, [pc, #160]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4b26      	ldr	r3, [pc, #152]	; (80075ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007520:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2201      	movs	r2, #1
 800752a:	409a      	lsls	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007530:	e024      	b.n	800757c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	3b10      	subs	r3, #16
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d806      	bhi.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d902      	bls.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3308      	adds	r3, #8
 8007558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a16      	ldr	r2, [pc, #88]	; (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800756c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2201      	movs	r2, #1
 8007576:	409a      	lsls	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	58025408 	.word	0x58025408
 800758c:	5802541c 	.word	0x5802541c
 8007590:	58025430 	.word	0x58025430
 8007594:	58025444 	.word	0x58025444
 8007598:	58025458 	.word	0x58025458
 800759c:	5802546c 	.word	0x5802546c
 80075a0:	58025480 	.word	0x58025480
 80075a4:	58025494 	.word	0x58025494
 80075a8:	cccccccd 	.word	0xcccccccd
 80075ac:	16009600 	.word	0x16009600
 80075b0:	58025880 	.word	0x58025880
 80075b4:	aaaaaaab 	.word	0xaaaaaaab
 80075b8:	400204b8 	.word	0x400204b8
 80075bc:	4002040f 	.word	0x4002040f
 80075c0:	10008200 	.word	0x10008200
 80075c4:	40020880 	.word	0x40020880

080075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04a      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d847      	bhi.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a25      	ldr	r2, [pc, #148]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a24      	ldr	r2, [pc, #144]	; (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d01d      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a22      	ldr	r2, [pc, #136]	; (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a21      	ldr	r2, [pc, #132]	; (800768c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1b      	ldr	r2, [pc, #108]	; (800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4b17      	ldr	r3, [pc, #92]	; (80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007650:	671a      	str	r2, [r3, #112]	; 0x70
 8007652:	e009      	b.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a11      	ldr	r2, [pc, #68]	; (80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007666:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	58025408 	.word	0x58025408
 8007684:	5802541c 	.word	0x5802541c
 8007688:	58025430 	.word	0x58025430
 800768c:	58025444 	.word	0x58025444
 8007690:	58025458 	.word	0x58025458
 8007694:	5802546c 	.word	0x5802546c
 8007698:	58025480 	.word	0x58025480
 800769c:	58025494 	.word	0x58025494
 80076a0:	1600963f 	.word	0x1600963f
 80076a4:	58025940 	.word	0x58025940
 80076a8:	1000823f 	.word	0x1000823f
 80076ac:	40020940 	.word	0x40020940

080076b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076be:	4b89      	ldr	r3, [pc, #548]	; (80078e4 <HAL_GPIO_Init+0x234>)
 80076c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076c2:	e194      	b.n	80079ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2101      	movs	r1, #1
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	4013      	ands	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8186 	beq.w	80079e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d005      	beq.n	80076f4 <HAL_GPIO_Init+0x44>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d130      	bne.n	8007756 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	2203      	movs	r2, #3
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	43db      	mvns	r3, r3
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	4013      	ands	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4313      	orrs	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800772a:	2201      	movs	r2, #1
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	43db      	mvns	r3, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4013      	ands	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 0201 	and.w	r2, r3, #1
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	4313      	orrs	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d017      	beq.n	8007792 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d123      	bne.n	80077e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	08da      	lsrs	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3208      	adds	r2, #8
 80077a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	220f      	movs	r2, #15
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	43db      	mvns	r3, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	4013      	ands	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	08da      	lsrs	r2, r3, #3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3208      	adds	r2, #8
 80077e0:	69b9      	ldr	r1, [r7, #24]
 80077e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	2203      	movs	r2, #3
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	4013      	ands	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 0203 	and.w	r2, r3, #3
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80e0 	beq.w	80079e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007828:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <HAL_GPIO_Init+0x238>)
 800782a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800782e:	4a2e      	ldr	r2, [pc, #184]	; (80078e8 <HAL_GPIO_Init+0x238>)
 8007830:	f043 0302 	orr.w	r3, r3, #2
 8007834:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007838:	4b2b      	ldr	r3, [pc, #172]	; (80078e8 <HAL_GPIO_Init+0x238>)
 800783a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007846:	4a29      	ldr	r2, [pc, #164]	; (80078ec <HAL_GPIO_Init+0x23c>)
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	089b      	lsrs	r3, r3, #2
 800784c:	3302      	adds	r3, #2
 800784e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	220f      	movs	r2, #15
 800785e:	fa02 f303 	lsl.w	r3, r2, r3
 8007862:	43db      	mvns	r3, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	4013      	ands	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a20      	ldr	r2, [pc, #128]	; (80078f0 <HAL_GPIO_Init+0x240>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d052      	beq.n	8007918 <HAL_GPIO_Init+0x268>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1f      	ldr	r2, [pc, #124]	; (80078f4 <HAL_GPIO_Init+0x244>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d031      	beq.n	80078de <HAL_GPIO_Init+0x22e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <HAL_GPIO_Init+0x248>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02b      	beq.n	80078da <HAL_GPIO_Init+0x22a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <HAL_GPIO_Init+0x24c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d025      	beq.n	80078d6 <HAL_GPIO_Init+0x226>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <HAL_GPIO_Init+0x250>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01f      	beq.n	80078d2 <HAL_GPIO_Init+0x222>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <HAL_GPIO_Init+0x254>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d019      	beq.n	80078ce <HAL_GPIO_Init+0x21e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <HAL_GPIO_Init+0x258>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <HAL_GPIO_Init+0x21a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <HAL_GPIO_Init+0x25c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00d      	beq.n	80078c6 <HAL_GPIO_Init+0x216>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a18      	ldr	r2, [pc, #96]	; (8007910 <HAL_GPIO_Init+0x260>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <HAL_GPIO_Init+0x212>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a17      	ldr	r2, [pc, #92]	; (8007914 <HAL_GPIO_Init+0x264>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d101      	bne.n	80078be <HAL_GPIO_Init+0x20e>
 80078ba:	2309      	movs	r3, #9
 80078bc:	e02d      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078be:	230a      	movs	r3, #10
 80078c0:	e02b      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078c2:	2308      	movs	r3, #8
 80078c4:	e029      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078c6:	2307      	movs	r3, #7
 80078c8:	e027      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e025      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078ce:	2305      	movs	r3, #5
 80078d0:	e023      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078d2:	2304      	movs	r3, #4
 80078d4:	e021      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078d6:	2303      	movs	r3, #3
 80078d8:	e01f      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078da:	2302      	movs	r3, #2
 80078dc:	e01d      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078de:	2301      	movs	r3, #1
 80078e0:	e01b      	b.n	800791a <HAL_GPIO_Init+0x26a>
 80078e2:	bf00      	nop
 80078e4:	58000080 	.word	0x58000080
 80078e8:	58024400 	.word	0x58024400
 80078ec:	58000400 	.word	0x58000400
 80078f0:	58020000 	.word	0x58020000
 80078f4:	58020400 	.word	0x58020400
 80078f8:	58020800 	.word	0x58020800
 80078fc:	58020c00 	.word	0x58020c00
 8007900:	58021000 	.word	0x58021000
 8007904:	58021400 	.word	0x58021400
 8007908:	58021800 	.word	0x58021800
 800790c:	58021c00 	.word	0x58021c00
 8007910:	58022000 	.word	0x58022000
 8007914:	58022400 	.word	0x58022400
 8007918:	2300      	movs	r3, #0
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	f002 0203 	and.w	r2, r2, #3
 8007920:	0092      	lsls	r2, r2, #2
 8007922:	4093      	lsls	r3, r2
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	4313      	orrs	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800792a:	4938      	ldr	r1, [pc, #224]	; (8007a0c <HAL_GPIO_Init+0x35c>)
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	3302      	adds	r3, #2
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	43db      	mvns	r3, r3
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	4013      	ands	r3, r2
 8007948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800795e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	43db      	mvns	r3, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4013      	ands	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800798c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	43db      	mvns	r3, r3
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	4013      	ands	r3, r2
 80079a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	43db      	mvns	r3, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4013      	ands	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f47f ae63 	bne.w	80076c4 <HAL_GPIO_Init+0x14>
  }
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	3724      	adds	r7, #36	; 0x24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	58000400 	.word	0x58000400

08007a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	887b      	ldrh	r3, [r7, #2]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
 8007a2c:	e001      	b.n	8007a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a50:	787b      	ldrb	r3, [r7, #1]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a56:	887a      	ldrh	r2, [r7, #2]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a5c:	e003      	b.n	8007a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	041a      	lsls	r2, r3, #16
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	619a      	str	r2, [r3, #24]
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
	...

08007a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e07f      	b.n	8007b86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fa fb76 	bl	800218c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d107      	bne.n	8007aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	e006      	b.n	8007afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d104      	bne.n	8007b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <HAL_I2C_Init+0x11c>)
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69d9      	ldr	r1, [r3, #28]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1a      	ldr	r2, [r3, #32]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	02008000 	.word	0x02008000

08007b94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	817b      	strh	r3, [r7, #10]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	f040 80da 	bne.w	8007d6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_I2C_Master_Transmit+0x30>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e0d3      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bcc:	f7fa fed6 	bl	800297c <HAL_GetTick>
 8007bd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2319      	movs	r3, #25
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f9e6 	bl	8007fb0 <I2C_WaitOnFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e0be      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2221      	movs	r2, #33	; 0x21
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	893a      	ldrh	r2, [r7, #8]
 8007c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2bff      	cmp	r3, #255	; 0xff
 8007c1e:	d90e      	bls.n	8007c3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22ff      	movs	r2, #255	; 0xff
 8007c24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	8979      	ldrh	r1, [r7, #10]
 8007c2e:	4b51      	ldr	r3, [pc, #324]	; (8007d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fbdc 	bl	80083f4 <I2C_TransferConfig>
 8007c3c:	e06c      	b.n	8007d18 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	8979      	ldrh	r1, [r7, #10]
 8007c50:	4b48      	ldr	r3, [pc, #288]	; (8007d74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fbcb 	bl	80083f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007c5e:	e05b      	b.n	8007d18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	6a39      	ldr	r1, [r7, #32]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f9e3 	bl	8008030 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e07b      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d034      	beq.n	8007d18 <HAL_I2C_Master_Transmit+0x184>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d130      	bne.n	8007d18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f975 	bl	8007fb0 <I2C_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e04d      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2bff      	cmp	r3, #255	; 0xff
 8007cd8:	d90e      	bls.n	8007cf8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	22ff      	movs	r2, #255	; 0xff
 8007cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	8979      	ldrh	r1, [r7, #10]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fb7f 	bl	80083f4 <I2C_TransferConfig>
 8007cf6:	e00f      	b.n	8007d18 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	8979      	ldrh	r1, [r7, #10]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fb6e 	bl	80083f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d19e      	bne.n	8007c60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	6a39      	ldr	r1, [r7, #32]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f9c2 	bl	80080b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e01a      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <HAL_I2C_Master_Transmit+0x1e4>)
 8007d4a:	400b      	ands	r3, r1
 8007d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007d6a:	2302      	movs	r3, #2
  }
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	80002000 	.word	0x80002000
 8007d78:	fe00e800 	.word	0xfe00e800

08007d7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	461a      	mov	r2, r3
 8007d88:	460b      	mov	r3, r1
 8007d8a:	817b      	strh	r3, [r7, #10]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	f040 80db 	bne.w	8007f54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_I2C_Master_Receive+0x30>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e0d4      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007db4:	f7fa fde2 	bl	800297c <HAL_GetTick>
 8007db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2319      	movs	r3, #25
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f8f2 	bl	8007fb0 <I2C_WaitOnFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e0bf      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2222      	movs	r2, #34	; 0x22
 8007dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2210      	movs	r2, #16
 8007de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	893a      	ldrh	r2, [r7, #8]
 8007df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2bff      	cmp	r3, #255	; 0xff
 8007e06:	d90e      	bls.n	8007e26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	22ff      	movs	r2, #255	; 0xff
 8007e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	8979      	ldrh	r1, [r7, #10]
 8007e16:	4b52      	ldr	r3, [pc, #328]	; (8007f60 <HAL_I2C_Master_Receive+0x1e4>)
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fae8 	bl	80083f4 <I2C_TransferConfig>
 8007e24:	e06d      	b.n	8007f02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	8979      	ldrh	r1, [r7, #10]
 8007e38:	4b49      	ldr	r3, [pc, #292]	; (8007f60 <HAL_I2C_Master_Receive+0x1e4>)
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fad7 	bl	80083f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007e46:	e05c      	b.n	8007f02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	6a39      	ldr	r1, [r7, #32]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f96b 	bl	8008128 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e07c      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d034      	beq.n	8007f02 <HAL_I2C_Master_Receive+0x186>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d130      	bne.n	8007f02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f880 	bl	8007fb0 <I2C_WaitOnFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e04d      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	d90e      	bls.n	8007ee2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	8979      	ldrh	r1, [r7, #10]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fa8a 	bl	80083f4 <I2C_TransferConfig>
 8007ee0:	e00f      	b.n	8007f02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	8979      	ldrh	r1, [r7, #10]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fa79 	bl	80083f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d19d      	bne.n	8007e48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f8cd 	bl	80080b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e01a      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2220      	movs	r2, #32
 8007f26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6859      	ldr	r1, [r3, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <HAL_I2C_Master_Receive+0x1e8>)
 8007f34:	400b      	ands	r3, r1
 8007f36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	80002400 	.word	0x80002400
 8007f64:	fe00e800 	.word	0xfe00e800

08007f68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d103      	bne.n	8007f86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d007      	beq.n	8007fa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	619a      	str	r2, [r3, #24]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fc0:	e022      	b.n	8008008 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc8:	d01e      	beq.n	8008008 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7fa fcd7 	bl	800297c <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d113      	bne.n	8008008 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	f043 0220 	orr.w	r2, r3, #32
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e00f      	b.n	8008028 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699a      	ldr	r2, [r3, #24]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4013      	ands	r3, r2
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	429a      	cmp	r2, r3
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	429a      	cmp	r2, r3
 8008024:	d0cd      	beq.n	8007fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800803c:	e02c      	b.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f8ea 	bl	800821c <I2C_IsErrorOccurred>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e02a      	b.n	80080a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008058:	d01e      	beq.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800805a:	f7fa fc8f 	bl	800297c <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	d302      	bcc.n	8008070 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d113      	bne.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008074:	f043 0220 	orr.w	r2, r3, #32
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e007      	b.n	80080a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d1cb      	bne.n	800803e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080bc:	e028      	b.n	8008110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f8aa 	bl	800821c <I2C_IsErrorOccurred>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e026      	b.n	8008120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fa fc53 	bl	800297c <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d113      	bne.n	8008110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e007      	b.n	8008120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b20      	cmp	r3, #32
 800811c:	d1cf      	bne.n	80080be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008134:	e064      	b.n	8008200 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f86e 	bl	800821c <I2C_IsErrorOccurred>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e062      	b.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b20      	cmp	r3, #32
 8008156:	d138      	bne.n	80081ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d105      	bne.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	e04e      	b.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b10      	cmp	r3, #16
 800817e:	d107      	bne.n	8008190 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2210      	movs	r2, #16
 8008186:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2204      	movs	r2, #4
 800818c:	645a      	str	r2, [r3, #68]	; 0x44
 800818e:	e002      	b.n	8008196 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2220      	movs	r2, #32
 800819c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6859      	ldr	r1, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80081aa:	400b      	ands	r3, r1
 80081ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e022      	b.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ca:	f7fa fbd7 	bl	800297c <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d302      	bcc.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10f      	bne.n	8008200 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e4:	f043 0220 	orr.w	r2, r3, #32
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e007      	b.n	8008210 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b04      	cmp	r3, #4
 800820c:	d193      	bne.n	8008136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	fe00e800 	.word	0xfe00e800

0800821c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	f003 0310 	and.w	r3, r3, #16
 8008244:	2b00      	cmp	r3, #0
 8008246:	d075      	beq.n	8008334 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2210      	movs	r2, #16
 800824e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008250:	e056      	b.n	8008300 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008258:	d052      	beq.n	8008300 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800825a:	f7fa fb8f 	bl	800297c <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <I2C_IsErrorOccurred+0x54>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d147      	bne.n	8008300 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008282:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008292:	d12e      	bne.n	80082f2 <I2C_IsErrorOccurred+0xd6>
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800829a:	d02a      	beq.n	80082f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800829c:	7cfb      	ldrb	r3, [r7, #19]
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d027      	beq.n	80082f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082b0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80082b2:	f7fa fb63 	bl	800297c <HAL_GetTick>
 80082b6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b8:	e01b      	b.n	80082f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80082ba:	f7fa fb5f 	bl	800297c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b19      	cmp	r3, #25
 80082c6:	d914      	bls.n	80082f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d1dc      	bne.n	80082ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b20      	cmp	r3, #32
 800830c:	d003      	beq.n	8008316 <I2C_IsErrorOccurred+0xfa>
 800830e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008312:	2b00      	cmp	r3, #0
 8008314:	d09d      	beq.n	8008252 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2220      	movs	r2, #32
 8008324:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f043 0304 	orr.w	r3, r3, #4
 800832c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f043 0308 	orr.w	r3, r3, #8
 800836e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f043 0302 	orr.w	r3, r3, #2
 8008390:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800839a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80083a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01c      	beq.n	80083e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fddc 	bl	8007f68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <I2C_IsErrorOccurred+0x1d4>)
 80083bc:	400b      	ands	r3, r1
 80083be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80083e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3728      	adds	r7, #40	; 0x28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	fe00e800 	.word	0xfe00e800

080083f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	817b      	strh	r3, [r7, #10]
 8008402:	4613      	mov	r3, r2
 8008404:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008406:	897b      	ldrh	r3, [r7, #10]
 8008408:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800840c:	7a7b      	ldrb	r3, [r7, #9]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008414:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	4313      	orrs	r3, r2
 800841e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008422:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	0d5b      	lsrs	r3, r3, #21
 800842e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <I2C_TransferConfig+0x60>)
 8008434:	430b      	orrs	r3, r1
 8008436:	43db      	mvns	r3, r3
 8008438:	ea02 0103 	and.w	r1, r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	03ff63ff 	.word	0x03ff63ff

08008458 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b20      	cmp	r3, #32
 800846c:	d138      	bne.n	80084e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008478:	2302      	movs	r3, #2
 800847a:	e032      	b.n	80084e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2224      	movs	r2, #36	; 0x24
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6819      	ldr	r1, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	e000      	b.n	80084e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
  }
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b20      	cmp	r3, #32
 8008502:	d139      	bne.n	8008578 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800850e:	2302      	movs	r3, #2
 8008510:	e033      	b.n	800857a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	; 0x24
 800851e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008540:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008594:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f023 0201 	bic.w	r2, r3, #1
 800859c:	4916      	ldr	r1, [pc, #88]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80085a4:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80085aa:	f023 0305 	bic.w	r3, r3, #5
 80085ae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	4a10      	ldr	r2, [pc, #64]	; (80085f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80085b6:	f023 0302 	bic.w	r3, r3, #2
 80085ba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <HAL_PWR_EnterSTOPMode+0x74>)
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <HAL_PWR_EnterSTOPMode+0x74>)
 80085c2:	f043 0304 	orr.w	r3, r3, #4
 80085c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80085c8:	f3bf 8f4f 	dsb	sy
}
 80085cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085ce:	f3bf 8f6f 	isb	sy
}
 80085d2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80085da:	bf30      	wfi
 80085dc:	e000      	b.n	80085e0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80085de:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80085e0:	4b06      	ldr	r3, [pc, #24]	; (80085fc <HAL_PWR_EnterSTOPMode+0x74>)
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	4a05      	ldr	r2, [pc, #20]	; (80085fc <HAL_PWR_EnterSTOPMode+0x74>)
 80085e6:	f023 0304 	bic.w	r3, r3, #4
 80085ea:	6113      	str	r3, [r2, #16]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	58024800 	.word	0x58024800
 80085fc:	e000ed00 	.word	0xe000ed00

08008600 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008608:	4b19      	ldr	r3, [pc, #100]	; (8008670 <HAL_PWREx_ConfigSupply+0x70>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b04      	cmp	r3, #4
 8008612:	d00a      	beq.n	800862a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008614:	4b16      	ldr	r3, [pc, #88]	; (8008670 <HAL_PWREx_ConfigSupply+0x70>)
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d001      	beq.n	8008626 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e01f      	b.n	8008666 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	e01d      	b.n	8008666 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800862a:	4b11      	ldr	r3, [pc, #68]	; (8008670 <HAL_PWREx_ConfigSupply+0x70>)
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f023 0207 	bic.w	r2, r3, #7
 8008632:	490f      	ldr	r1, [pc, #60]	; (8008670 <HAL_PWREx_ConfigSupply+0x70>)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4313      	orrs	r3, r2
 8008638:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800863a:	f7fa f99f 	bl	800297c <HAL_GetTick>
 800863e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008640:	e009      	b.n	8008656 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008642:	f7fa f99b 	bl	800297c <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008650:	d901      	bls.n	8008656 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e007      	b.n	8008666 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <HAL_PWREx_ConfigSupply+0x70>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008662:	d1ee      	bne.n	8008642 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	58024800 	.word	0x58024800

08008674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f000 bc1d 	b.w	8008ec2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 8087 	beq.w	80087a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008696:	4b99      	ldr	r3, [pc, #612]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086a0:	4b96      	ldr	r3, [pc, #600]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d007      	beq.n	80086bc <HAL_RCC_OscConfig+0x48>
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2b18      	cmp	r3, #24
 80086b0:	d110      	bne.n	80086d4 <HAL_RCC_OscConfig+0x60>
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d10b      	bne.n	80086d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086bc:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d06c      	beq.n	80087a2 <HAL_RCC_OscConfig+0x12e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d168      	bne.n	80087a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e3f6      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d106      	bne.n	80086ec <HAL_RCC_OscConfig+0x78>
 80086de:	4b87      	ldr	r3, [pc, #540]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a86      	ldr	r2, [pc, #536]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	e02e      	b.n	800874a <HAL_RCC_OscConfig+0xd6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <HAL_RCC_OscConfig+0x9a>
 80086f4:	4b81      	ldr	r3, [pc, #516]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a80      	ldr	r2, [pc, #512]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4b7e      	ldr	r3, [pc, #504]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a7d      	ldr	r2, [pc, #500]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	e01d      	b.n	800874a <HAL_RCC_OscConfig+0xd6>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008716:	d10c      	bne.n	8008732 <HAL_RCC_OscConfig+0xbe>
 8008718:	4b78      	ldr	r3, [pc, #480]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a77      	ldr	r2, [pc, #476]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 800871e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	4b75      	ldr	r3, [pc, #468]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a74      	ldr	r2, [pc, #464]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 800872a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	e00b      	b.n	800874a <HAL_RCC_OscConfig+0xd6>
 8008732:	4b72      	ldr	r3, [pc, #456]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a71      	ldr	r2, [pc, #452]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4b6f      	ldr	r3, [pc, #444]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a6e      	ldr	r2, [pc, #440]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008748:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d013      	beq.n	800877a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008752:	f7fa f913 	bl	800297c <HAL_GetTick>
 8008756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800875a:	f7fa f90f 	bl	800297c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b64      	cmp	r3, #100	; 0x64
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e3aa      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800876c:	4b63      	ldr	r3, [pc, #396]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0f0      	beq.n	800875a <HAL_RCC_OscConfig+0xe6>
 8008778:	e014      	b.n	80087a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877a:	f7fa f8ff 	bl	800297c <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008782:	f7fa f8fb 	bl	800297c <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b64      	cmp	r3, #100	; 0x64
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e396      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008794:	4b59      	ldr	r3, [pc, #356]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <HAL_RCC_OscConfig+0x10e>
 80087a0:	e000      	b.n	80087a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80cb 	beq.w	8008948 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b2:	4b52      	ldr	r3, [pc, #328]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087bc:	4b4f      	ldr	r3, [pc, #316]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d007      	beq.n	80087d8 <HAL_RCC_OscConfig+0x164>
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	2b18      	cmp	r3, #24
 80087cc:	d156      	bne.n	800887c <HAL_RCC_OscConfig+0x208>
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d151      	bne.n	800887c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087d8:	4b48      	ldr	r3, [pc, #288]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_OscConfig+0x17c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e368      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087f0:	4b42      	ldr	r3, [pc, #264]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f023 0219 	bic.w	r2, r3, #25
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	493f      	ldr	r1, [pc, #252]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008802:	f7fa f8bb 	bl	800297c <HAL_GetTick>
 8008806:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800880a:	f7fa f8b7 	bl	800297c <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e352      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800881c:	4b37      	ldr	r3, [pc, #220]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008828:	f7fa f8e8 	bl	80029fc <HAL_GetREVID>
 800882c:	4603      	mov	r3, r0
 800882e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008832:	4293      	cmp	r3, r2
 8008834:	d817      	bhi.n	8008866 <HAL_RCC_OscConfig+0x1f2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	d108      	bne.n	8008850 <HAL_RCC_OscConfig+0x1dc>
 800883e:	4b2f      	ldr	r3, [pc, #188]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008846:	4a2d      	ldr	r2, [pc, #180]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800884c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800884e:	e07b      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008850:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	031b      	lsls	r3, r3, #12
 800885e:	4927      	ldr	r1, [pc, #156]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008860:	4313      	orrs	r3, r2
 8008862:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008864:	e070      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008866:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	061b      	lsls	r3, r3, #24
 8008874:	4921      	ldr	r1, [pc, #132]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008876:	4313      	orrs	r3, r2
 8008878:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800887a:	e065      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d048      	beq.n	8008916 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f023 0219 	bic.w	r2, r3, #25
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	491a      	ldr	r1, [pc, #104]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 8008892:	4313      	orrs	r3, r2
 8008894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008896:	f7fa f871 	bl	800297c <HAL_GetTick>
 800889a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800889c:	e008      	b.n	80088b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800889e:	f7fa f86d 	bl	800297c <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d901      	bls.n	80088b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e308      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0f0      	beq.n	800889e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088bc:	f7fa f89e 	bl	80029fc <HAL_GetREVID>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d81a      	bhi.n	8008900 <HAL_RCC_OscConfig+0x28c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d108      	bne.n	80088e4 <HAL_RCC_OscConfig+0x270>
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088da:	4a08      	ldr	r2, [pc, #32]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80088dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e0:	6053      	str	r3, [r2, #4]
 80088e2:	e031      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	031b      	lsls	r3, r3, #12
 80088f2:	4902      	ldr	r1, [pc, #8]	; (80088fc <HAL_RCC_OscConfig+0x288>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	604b      	str	r3, [r1, #4]
 80088f8:	e026      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
 8008900:	4b9a      	ldr	r3, [pc, #616]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	061b      	lsls	r3, r3, #24
 800890e:	4997      	ldr	r1, [pc, #604]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008910:	4313      	orrs	r3, r2
 8008912:	604b      	str	r3, [r1, #4]
 8008914:	e018      	b.n	8008948 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008916:	4b95      	ldr	r3, [pc, #596]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a94      	ldr	r2, [pc, #592]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008922:	f7fa f82b 	bl	800297c <HAL_GetTick>
 8008926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800892a:	f7fa f827 	bl	800297c <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e2c2      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800893c:	4b8b      	ldr	r3, [pc, #556]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f0      	bne.n	800892a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80a9 	beq.w	8008aa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008956:	4b85      	ldr	r3, [pc, #532]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800895e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008960:	4b82      	ldr	r3, [pc, #520]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b08      	cmp	r3, #8
 800896a:	d007      	beq.n	800897c <HAL_RCC_OscConfig+0x308>
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b18      	cmp	r3, #24
 8008970:	d13a      	bne.n	80089e8 <HAL_RCC_OscConfig+0x374>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	2b01      	cmp	r3, #1
 800897a:	d135      	bne.n	80089e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800897c:	4b7b      	ldr	r3, [pc, #492]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_RCC_OscConfig+0x320>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	2b80      	cmp	r3, #128	; 0x80
 800898e:	d001      	beq.n	8008994 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e296      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008994:	f7fa f832 	bl	80029fc <HAL_GetREVID>
 8008998:	4603      	mov	r3, r0
 800899a:	f241 0203 	movw	r2, #4099	; 0x1003
 800899e:	4293      	cmp	r3, r2
 80089a0:	d817      	bhi.n	80089d2 <HAL_RCC_OscConfig+0x35e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d108      	bne.n	80089bc <HAL_RCC_OscConfig+0x348>
 80089aa:	4b70      	ldr	r3, [pc, #448]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089b2:	4a6e      	ldr	r2, [pc, #440]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ba:	e075      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089bc:	4b6b      	ldr	r3, [pc, #428]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	069b      	lsls	r3, r3, #26
 80089ca:	4968      	ldr	r1, [pc, #416]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089d0:	e06a      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089d2:	4b66      	ldr	r3, [pc, #408]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	4962      	ldr	r1, [pc, #392]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089e6:	e05f      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d042      	beq.n	8008a76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089f0:	4b5e      	ldr	r3, [pc, #376]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a5d      	ldr	r2, [pc, #372]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fc:	f7f9 ffbe 	bl	800297c <HAL_GetTick>
 8008a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a04:	f7f9 ffba 	bl	800297c <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e255      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a16:	4b55      	ldr	r3, [pc, #340]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0f0      	beq.n	8008a04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a22:	f7f9 ffeb 	bl	80029fc <HAL_GetREVID>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d817      	bhi.n	8008a60 <HAL_RCC_OscConfig+0x3ec>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d108      	bne.n	8008a4a <HAL_RCC_OscConfig+0x3d6>
 8008a38:	4b4c      	ldr	r3, [pc, #304]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a40:	4a4a      	ldr	r2, [pc, #296]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a46:	6053      	str	r3, [r2, #4]
 8008a48:	e02e      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
 8008a4a:	4b48      	ldr	r3, [pc, #288]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	069b      	lsls	r3, r3, #26
 8008a58:	4944      	ldr	r1, [pc, #272]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	604b      	str	r3, [r1, #4]
 8008a5e:	e023      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
 8008a60:	4b42      	ldr	r3, [pc, #264]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	061b      	lsls	r3, r3, #24
 8008a6e:	493f      	ldr	r1, [pc, #252]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60cb      	str	r3, [r1, #12]
 8008a74:	e018      	b.n	8008aa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a76:	4b3d      	ldr	r3, [pc, #244]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a3c      	ldr	r2, [pc, #240]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a82:	f7f9 ff7b 	bl	800297c <HAL_GetTick>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a88:	e008      	b.n	8008a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a8a:	f7f9 ff77 	bl	800297c <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e212      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a9c:	4b33      	ldr	r3, [pc, #204]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f0      	bne.n	8008a8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d036      	beq.n	8008b22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d019      	beq.n	8008af0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008abc:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac0:	4a2a      	ldr	r2, [pc, #168]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac8:	f7f9 ff58 	bl	800297c <HAL_GetTick>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad0:	f7f9 ff54 	bl	800297c <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e1ef      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ae2:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f0      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x45c>
 8008aee:	e018      	b.n	8008b22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008af0:	4b1e      	ldr	r3, [pc, #120]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af4:	4a1d      	ldr	r2, [pc, #116]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008af6:	f023 0301 	bic.w	r3, r3, #1
 8008afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afc:	f7f9 ff3e 	bl	800297c <HAL_GetTick>
 8008b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b02:	e008      	b.n	8008b16 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b04:	f7f9 ff3a 	bl	800297c <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e1d5      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b16:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f0      	bne.n	8008b04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d039      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d01c      	beq.n	8008b70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b42:	f7f9 ff1b 	bl	800297c <HAL_GetTick>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b48:	e008      	b.n	8008b5c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008b4a:	f7f9 ff17 	bl	800297c <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e1b2      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b5c:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <HAL_RCC_OscConfig+0x4f8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0f0      	beq.n	8008b4a <HAL_RCC_OscConfig+0x4d6>
 8008b68:	e01b      	b.n	8008ba2 <HAL_RCC_OscConfig+0x52e>
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b70:	4b9b      	ldr	r3, [pc, #620]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a9a      	ldr	r2, [pc, #616]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b7c:	f7f9 fefe 	bl	800297c <HAL_GetTick>
 8008b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008b84:	f7f9 fefa 	bl	800297c <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e195      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b96:	4b92      	ldr	r3, [pc, #584]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f0      	bne.n	8008b84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8081 	beq.w	8008cb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bb0:	4b8c      	ldr	r3, [pc, #560]	; (8008de4 <HAL_RCC_OscConfig+0x770>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a8b      	ldr	r2, [pc, #556]	; (8008de4 <HAL_RCC_OscConfig+0x770>)
 8008bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bbc:	f7f9 fede 	bl	800297c <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008bc4:	f7f9 feda 	bl	800297c <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b64      	cmp	r3, #100	; 0x64
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e175      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bd6:	4b83      	ldr	r3, [pc, #524]	; (8008de4 <HAL_RCC_OscConfig+0x770>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d106      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x584>
 8008bea:	4b7d      	ldr	r3, [pc, #500]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	4a7c      	ldr	r2, [pc, #496]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008bf0:	f043 0301 	orr.w	r3, r3, #1
 8008bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf6:	e02d      	b.n	8008c54 <HAL_RCC_OscConfig+0x5e0>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10c      	bne.n	8008c1a <HAL_RCC_OscConfig+0x5a6>
 8008c00:	4b77      	ldr	r3, [pc, #476]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c04:	4a76      	ldr	r2, [pc, #472]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c0c:	4b74      	ldr	r3, [pc, #464]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c10:	4a73      	ldr	r2, [pc, #460]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c12:	f023 0304 	bic.w	r3, r3, #4
 8008c16:	6713      	str	r3, [r2, #112]	; 0x70
 8008c18:	e01c      	b.n	8008c54 <HAL_RCC_OscConfig+0x5e0>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d10c      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5c8>
 8008c22:	4b6f      	ldr	r3, [pc, #444]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c26:	4a6e      	ldr	r2, [pc, #440]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c28:	f043 0304 	orr.w	r3, r3, #4
 8008c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c2e:	4b6c      	ldr	r3, [pc, #432]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	4a6b      	ldr	r2, [pc, #428]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	6713      	str	r3, [r2, #112]	; 0x70
 8008c3a:	e00b      	b.n	8008c54 <HAL_RCC_OscConfig+0x5e0>
 8008c3c:	4b68      	ldr	r3, [pc, #416]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c40:	4a67      	ldr	r2, [pc, #412]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	6713      	str	r3, [r2, #112]	; 0x70
 8008c48:	4b65      	ldr	r3, [pc, #404]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	4a64      	ldr	r2, [pc, #400]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c4e:	f023 0304 	bic.w	r3, r3, #4
 8008c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d015      	beq.n	8008c88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5c:	f7f9 fe8e 	bl	800297c <HAL_GetTick>
 8008c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c62:	e00a      	b.n	8008c7a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c64:	f7f9 fe8a 	bl	800297c <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e123      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c7a:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0ee      	beq.n	8008c64 <HAL_RCC_OscConfig+0x5f0>
 8008c86:	e014      	b.n	8008cb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c88:	f7f9 fe78 	bl	800297c <HAL_GetTick>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c8e:	e00a      	b.n	8008ca6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c90:	f7f9 fe74 	bl	800297c <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e10d      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ca6:	4b4e      	ldr	r3, [pc, #312]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1ee      	bne.n	8008c90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 8102 	beq.w	8008ec0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008cbc:	4b48      	ldr	r3, [pc, #288]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cc4:	2b18      	cmp	r3, #24
 8008cc6:	f000 80bd 	beq.w	8008e44 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	f040 809e 	bne.w	8008e10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cd4:	4b42      	ldr	r3, [pc, #264]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a41      	ldr	r2, [pc, #260]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce0:	f7f9 fe4c 	bl	800297c <HAL_GetTick>
 8008ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ce8:	f7f9 fe48 	bl	800297c <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e0e3      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cfa:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d06:	4b36      	ldr	r3, [pc, #216]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d0a:	4b37      	ldr	r3, [pc, #220]	; (8008de8 <HAL_RCC_OscConfig+0x774>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d16:	0112      	lsls	r2, r2, #4
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	4931      	ldr	r1, [pc, #196]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	025b      	lsls	r3, r3, #9
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	061b      	lsls	r3, r3, #24
 8008d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d50:	4923      	ldr	r1, [pc, #140]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008d56:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	4a21      	ldr	r2, [pc, #132]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d62:	4b1f      	ldr	r3, [pc, #124]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d66:	4b21      	ldr	r3, [pc, #132]	; (8008dec <HAL_RCC_OscConfig+0x778>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d6e:	00d2      	lsls	r2, r2, #3
 8008d70:	491b      	ldr	r1, [pc, #108]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d76:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	f023 020c 	bic.w	r2, r3, #12
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	4917      	ldr	r1, [pc, #92]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d88:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f023 0202 	bic.w	r2, r3, #2
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d94:	4912      	ldr	r1, [pc, #72]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d9a:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da6:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	4a0d      	ldr	r2, [pc, #52]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008db2:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	4a07      	ldr	r2, [pc, #28]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008dc4:	f043 0301 	orr.w	r3, r3, #1
 8008dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a04      	ldr	r2, [pc, #16]	; (8008de0 <HAL_RCC_OscConfig+0x76c>)
 8008dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd6:	f7f9 fdd1 	bl	800297c <HAL_GetTick>
 8008dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ddc:	e011      	b.n	8008e02 <HAL_RCC_OscConfig+0x78e>
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
 8008de4:	58024800 	.word	0x58024800
 8008de8:	fffffc0c 	.word	0xfffffc0c
 8008dec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008df0:	f7f9 fdc4 	bl	800297c <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e05f      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e02:	4b32      	ldr	r3, [pc, #200]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f0      	beq.n	8008df0 <HAL_RCC_OscConfig+0x77c>
 8008e0e:	e057      	b.n	8008ec0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e10:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a2d      	ldr	r2, [pc, #180]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1c:	f7f9 fdae 	bl	800297c <HAL_GetTick>
 8008e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e22:	e008      	b.n	8008e36 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e24:	f7f9 fdaa 	bl	800297c <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e045      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e36:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f0      	bne.n	8008e24 <HAL_RCC_OscConfig+0x7b0>
 8008e42:	e03d      	b.n	8008ec0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e44:	4b21      	ldr	r3, [pc, #132]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e4a:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <HAL_RCC_OscConfig+0x858>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d031      	beq.n	8008ebc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f003 0203 	and.w	r2, r3, #3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d12a      	bne.n	8008ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	091b      	lsrs	r3, r3, #4
 8008e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d122      	bne.n	8008ebc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d11a      	bne.n	8008ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	0a5b      	lsrs	r3, r3, #9
 8008e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d111      	bne.n	8008ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	0c1b      	lsrs	r3, r3, #16
 8008e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d108      	bne.n	8008ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d001      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3730      	adds	r7, #48	; 0x30
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400

08008ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e19c      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ee4:	4b8a      	ldr	r3, [pc, #552]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d910      	bls.n	8008f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef2:	4b87      	ldr	r3, [pc, #540]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f023 020f 	bic.w	r2, r3, #15
 8008efa:	4985      	ldr	r1, [pc, #532]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f02:	4b83      	ldr	r3, [pc, #524]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 030f 	and.w	r3, r3, #15
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d001      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e184      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d010      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691a      	ldr	r2, [r3, #16]
 8008f24:	4b7b      	ldr	r3, [pc, #492]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d908      	bls.n	8008f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f30:	4b78      	ldr	r3, [pc, #480]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	4975      	ldr	r1, [pc, #468]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d010      	beq.n	8008f70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	4b70      	ldr	r3, [pc, #448]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d908      	bls.n	8008f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f5e:	4b6d      	ldr	r3, [pc, #436]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	496a      	ldr	r1, [pc, #424]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d010      	beq.n	8008f9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	4b64      	ldr	r3, [pc, #400]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d908      	bls.n	8008f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f8c:	4b61      	ldr	r3, [pc, #388]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	495e      	ldr	r1, [pc, #376]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d010      	beq.n	8008fcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69da      	ldr	r2, [r3, #28]
 8008fae:	4b59      	ldr	r3, [pc, #356]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d908      	bls.n	8008fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008fba:	4b56      	ldr	r3, [pc, #344]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	4953      	ldr	r1, [pc, #332]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d010      	beq.n	8008ffa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	4b4d      	ldr	r3, [pc, #308]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d908      	bls.n	8008ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fe8:	4b4a      	ldr	r3, [pc, #296]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f023 020f 	bic.w	r2, r3, #15
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	4947      	ldr	r1, [pc, #284]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d055      	beq.n	80090b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009006:	4b43      	ldr	r3, [pc, #268]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	4940      	ldr	r1, [pc, #256]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009014:	4313      	orrs	r3, r2
 8009016:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d107      	bne.n	8009030 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009020:	4b3c      	ldr	r3, [pc, #240]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d121      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e0f6      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b03      	cmp	r3, #3
 8009036:	d107      	bne.n	8009048 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009038:	4b36      	ldr	r3, [pc, #216]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d115      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0ea      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d107      	bne.n	8009060 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009050:	4b30      	ldr	r3, [pc, #192]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e0de      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009060:	4b2c      	ldr	r3, [pc, #176]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e0d6      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009070:	4b28      	ldr	r3, [pc, #160]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f023 0207 	bic.w	r2, r3, #7
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4925      	ldr	r1, [pc, #148]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 800907e:	4313      	orrs	r3, r2
 8009080:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009082:	f7f9 fc7b 	bl	800297c <HAL_GetTick>
 8009086:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009088:	e00a      	b.n	80090a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800908a:	f7f9 fc77 	bl	800297c <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	f241 3288 	movw	r2, #5000	; 0x1388
 8009098:	4293      	cmp	r3, r2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e0be      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090a0:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d1eb      	bne.n	800908a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d010      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	4b14      	ldr	r3, [pc, #80]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d208      	bcs.n	80090e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ce:	4b11      	ldr	r3, [pc, #68]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f023 020f 	bic.w	r2, r3, #15
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	490e      	ldr	r1, [pc, #56]	; (8009114 <HAL_RCC_ClockConfig+0x244>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090e0:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d214      	bcs.n	8009118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ee:	4b08      	ldr	r3, [pc, #32]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f023 020f 	bic.w	r2, r3, #15
 80090f6:	4906      	ldr	r1, [pc, #24]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090fe:	4b04      	ldr	r3, [pc, #16]	; (8009110 <HAL_RCC_ClockConfig+0x240>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d005      	beq.n	8009118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e086      	b.n	800921e <HAL_RCC_ClockConfig+0x34e>
 8009110:	52002000 	.word	0x52002000
 8009114:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d010      	beq.n	8009146 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009130:	429a      	cmp	r2, r3
 8009132:	d208      	bcs.n	8009146 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009134:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	4939      	ldr	r1, [pc, #228]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009142:	4313      	orrs	r3, r2
 8009144:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d010      	beq.n	8009174 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	4b34      	ldr	r3, [pc, #208]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800915e:	429a      	cmp	r2, r3
 8009160:	d208      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009162:	4b31      	ldr	r3, [pc, #196]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	492e      	ldr	r1, [pc, #184]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009170:	4313      	orrs	r3, r2
 8009172:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	d010      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699a      	ldr	r2, [r3, #24]
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800918c:	429a      	cmp	r2, r3
 800918e:	d208      	bcs.n	80091a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	4922      	ldr	r1, [pc, #136]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d010      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d208      	bcs.n	80091d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80091be:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	4917      	ldr	r1, [pc, #92]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091d0:	f000 f834 	bl	800923c <HAL_RCC_GetSysClockFreq>
 80091d4:	4602      	mov	r2, r0
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	4912      	ldr	r1, [pc, #72]	; (800922c <HAL_RCC_ClockConfig+0x35c>)
 80091e2:	5ccb      	ldrb	r3, [r1, r3]
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <HAL_RCC_ClockConfig+0x358>)
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	4a0d      	ldr	r2, [pc, #52]	; (800922c <HAL_RCC_ClockConfig+0x35c>)
 80091f8:	5cd3      	ldrb	r3, [r2, r3]
 80091fa:	f003 031f 	and.w	r3, r3, #31
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	fa22 f303 	lsr.w	r3, r2, r3
 8009204:	4a0a      	ldr	r2, [pc, #40]	; (8009230 <HAL_RCC_ClockConfig+0x360>)
 8009206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009208:	4a0a      	ldr	r2, [pc, #40]	; (8009234 <HAL_RCC_ClockConfig+0x364>)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800920e:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <HAL_RCC_ClockConfig+0x368>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4618      	mov	r0, r3
 8009214:	f7f9 fb68 	bl	80028e8 <HAL_InitTick>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	58024400 	.word	0x58024400
 800922c:	0800feb8 	.word	0x0800feb8
 8009230:	2400002c 	.word	0x2400002c
 8009234:	24000028 	.word	0x24000028
 8009238:	24000030 	.word	0x24000030

0800923c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800923c:	b480      	push	{r7}
 800923e:	b089      	sub	sp, #36	; 0x24
 8009240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009242:	4bb3      	ldr	r3, [pc, #716]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800924a:	2b18      	cmp	r3, #24
 800924c:	f200 8155 	bhi.w	80094fa <HAL_RCC_GetSysClockFreq+0x2be>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	080092bd 	.word	0x080092bd
 800925c:	080094fb 	.word	0x080094fb
 8009260:	080094fb 	.word	0x080094fb
 8009264:	080094fb 	.word	0x080094fb
 8009268:	080094fb 	.word	0x080094fb
 800926c:	080094fb 	.word	0x080094fb
 8009270:	080094fb 	.word	0x080094fb
 8009274:	080094fb 	.word	0x080094fb
 8009278:	080092e3 	.word	0x080092e3
 800927c:	080094fb 	.word	0x080094fb
 8009280:	080094fb 	.word	0x080094fb
 8009284:	080094fb 	.word	0x080094fb
 8009288:	080094fb 	.word	0x080094fb
 800928c:	080094fb 	.word	0x080094fb
 8009290:	080094fb 	.word	0x080094fb
 8009294:	080094fb 	.word	0x080094fb
 8009298:	080092e9 	.word	0x080092e9
 800929c:	080094fb 	.word	0x080094fb
 80092a0:	080094fb 	.word	0x080094fb
 80092a4:	080094fb 	.word	0x080094fb
 80092a8:	080094fb 	.word	0x080094fb
 80092ac:	080094fb 	.word	0x080094fb
 80092b0:	080094fb 	.word	0x080094fb
 80092b4:	080094fb 	.word	0x080094fb
 80092b8:	080092ef 	.word	0x080092ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092bc:	4b94      	ldr	r3, [pc, #592]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d009      	beq.n	80092dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092c8:	4b91      	ldr	r3, [pc, #580]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	08db      	lsrs	r3, r3, #3
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	4a90      	ldr	r2, [pc, #576]	; (8009514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092d4:	fa22 f303 	lsr.w	r3, r2, r3
 80092d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80092da:	e111      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092dc:	4b8d      	ldr	r3, [pc, #564]	; (8009514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092de:	61bb      	str	r3, [r7, #24]
    break;
 80092e0:	e10e      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80092e2:	4b8d      	ldr	r3, [pc, #564]	; (8009518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092e4:	61bb      	str	r3, [r7, #24]
    break;
 80092e6:	e10b      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80092e8:	4b8c      	ldr	r3, [pc, #560]	; (800951c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092ea:	61bb      	str	r3, [r7, #24]
    break;
 80092ec:	e108      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092ee:	4b88      	ldr	r3, [pc, #544]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80092f8:	4b85      	ldr	r3, [pc, #532]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009302:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009304:	4b82      	ldr	r3, [pc, #520]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800930e:	4b80      	ldr	r3, [pc, #512]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009312:	08db      	lsrs	r3, r3, #3
 8009314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	fb02 f303 	mul.w	r3, r2, r3
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80e1 	beq.w	80094f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f000 8083 	beq.w	8009440 <HAL_RCC_GetSysClockFreq+0x204>
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b02      	cmp	r3, #2
 800933e:	f200 80a1 	bhi.w	8009484 <HAL_RCC_GetSysClockFreq+0x248>
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCC_GetSysClockFreq+0x114>
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d056      	beq.n	80093fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800934e:	e099      	b.n	8009484 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009350:	4b6f      	ldr	r3, [pc, #444]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d02d      	beq.n	80093b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800935c:	4b6c      	ldr	r3, [pc, #432]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a6b      	ldr	r2, [pc, #428]	; (8009514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009386:	4b62      	ldr	r3, [pc, #392]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009396:	ed97 6a02 	vldr	s12, [r7, #8]
 800939a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800939e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80093b6:	e087      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b51      	ldr	r3, [pc, #324]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a02 	vldr	s12, [r7, #8]
 80093de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fa:	e065      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b40      	ldr	r3, [pc, #256]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009422:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943e:	e043      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800952c <HAL_RCC_GetSysClockFreq+0x2f0>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a02 	vldr	s12, [r7, #8]
 8009466:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009482:	e021      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b1e      	ldr	r3, [pc, #120]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	0a5b      	lsrs	r3, r3, #9
 80094ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d2:	3301      	adds	r3, #1
 80094d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	ee07 3a90 	vmov	s15, r3
 80094dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ec:	ee17 3a90 	vmov	r3, s15
 80094f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80094f2:	e005      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	61bb      	str	r3, [r7, #24]
    break;
 80094f8:	e002      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094fc:	61bb      	str	r3, [r7, #24]
    break;
 80094fe:	bf00      	nop
  }

  return sysclockfreq;
 8009500:	69bb      	ldr	r3, [r7, #24]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3724      	adds	r7, #36	; 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
 8009514:	03d09000 	.word	0x03d09000
 8009518:	003d0900 	.word	0x003d0900
 800951c:	017d7840 	.word	0x017d7840
 8009520:	46000000 	.word	0x46000000
 8009524:	4c742400 	.word	0x4c742400
 8009528:	4a742400 	.word	0x4a742400
 800952c:	4bbebc20 	.word	0x4bbebc20

08009530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009536:	f7ff fe81 	bl	800923c <HAL_RCC_GetSysClockFreq>
 800953a:	4602      	mov	r2, r0
 800953c:	4b10      	ldr	r3, [pc, #64]	; (8009580 <HAL_RCC_GetHCLKFreq+0x50>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	0a1b      	lsrs	r3, r3, #8
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	490f      	ldr	r1, [pc, #60]	; (8009584 <HAL_RCC_GetHCLKFreq+0x54>)
 8009548:	5ccb      	ldrb	r3, [r1, r3]
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	fa22 f303 	lsr.w	r3, r2, r3
 8009552:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <HAL_RCC_GetHCLKFreq+0x50>)
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	4a09      	ldr	r2, [pc, #36]	; (8009584 <HAL_RCC_GetHCLKFreq+0x54>)
 800955e:	5cd3      	ldrb	r3, [r2, r3]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	fa22 f303 	lsr.w	r3, r2, r3
 800956a:	4a07      	ldr	r2, [pc, #28]	; (8009588 <HAL_RCC_GetHCLKFreq+0x58>)
 800956c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800956e:	4a07      	ldr	r2, [pc, #28]	; (800958c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <HAL_RCC_GetHCLKFreq+0x58>)
 8009576:	681b      	ldr	r3, [r3, #0]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	58024400 	.word	0x58024400
 8009584:	0800feb8 	.word	0x0800feb8
 8009588:	2400002c 	.word	0x2400002c
 800958c:	24000028 	.word	0x24000028

08009590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009594:	f7ff ffcc 	bl	8009530 <HAL_RCC_GetHCLKFreq>
 8009598:	4602      	mov	r2, r0
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	091b      	lsrs	r3, r3, #4
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	4904      	ldr	r1, [pc, #16]	; (80095b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095a6:	5ccb      	ldrb	r3, [r1, r3]
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	58024400 	.word	0x58024400
 80095b8:	0800feb8 	.word	0x0800feb8

080095bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095c0:	f7ff ffb6 	bl	8009530 <HAL_RCC_GetHCLKFreq>
 80095c4:	4602      	mov	r2, r0
 80095c6:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	0a1b      	lsrs	r3, r3, #8
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	4904      	ldr	r1, [pc, #16]	; (80095e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095d2:	5ccb      	ldrb	r3, [r1, r3]
 80095d4:	f003 031f 	and.w	r3, r3, #31
 80095d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80095dc:	4618      	mov	r0, r3
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	58024400 	.word	0x58024400
 80095e4:	0800feb8 	.word	0x0800feb8

080095e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095f4:	2300      	movs	r3, #0
 80095f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d03f      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800960c:	d02a      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800960e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009612:	d824      	bhi.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009618:	d018      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800961a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800961e:	d81e      	bhi.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009628:	d007      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800962a:	e018      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962c:	4ba3      	ldr	r3, [pc, #652]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	4aa2      	ldr	r2, [pc, #648]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009638:	e015      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3304      	adds	r3, #4
 800963e:	2102      	movs	r1, #2
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fff9 	bl	800b638 <RCCEx_PLL2_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800964a:	e00c      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3324      	adds	r3, #36	; 0x24
 8009650:	2102      	movs	r1, #2
 8009652:	4618      	mov	r0, r3
 8009654:	f002 f8a2 	bl	800b79c <RCCEx_PLL3_Config>
 8009658:	4603      	mov	r3, r0
 800965a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800965c:	e003      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
      break;
 8009662:	e000      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800966c:	4b93      	ldr	r3, [pc, #588]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800966e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009678:	4990      	ldr	r1, [pc, #576]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800967a:	4313      	orrs	r3, r2
 800967c:	650b      	str	r3, [r1, #80]	; 0x50
 800967e:	e001      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968c:	2b00      	cmp	r3, #0
 800968e:	d03d      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	2b04      	cmp	r3, #4
 8009696:	d826      	bhi.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096b5 	.word	0x080096b5
 80096a4:	080096c3 	.word	0x080096c3
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096ed 	.word	0x080096ed
 80096b0:	080096ed 	.word	0x080096ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b4:	4b81      	ldr	r3, [pc, #516]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a80      	ldr	r2, [pc, #512]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096c0:	e015      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3304      	adds	r3, #4
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 ffb5 	bl	800b638 <RCCEx_PLL2_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096d2:	e00c      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3324      	adds	r3, #36	; 0x24
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f002 f85e 	bl	800b79c <RCCEx_PLL3_Config>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096e4:	e003      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ea:	e000      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80096ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d109      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096f4:	4b71      	ldr	r3, [pc, #452]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f8:	f023 0207 	bic.w	r2, r3, #7
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009700:	496e      	ldr	r1, [pc, #440]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009702:	4313      	orrs	r3, r2
 8009704:	650b      	str	r3, [r1, #80]	; 0x50
 8009706:	e001      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009714:	2b00      	cmp	r3, #0
 8009716:	d042      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009720:	d02b      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009726:	d825      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009728:	2bc0      	cmp	r3, #192	; 0xc0
 800972a:	d028      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800972c:	2bc0      	cmp	r3, #192	; 0xc0
 800972e:	d821      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009730:	2b80      	cmp	r3, #128	; 0x80
 8009732:	d016      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009734:	2b80      	cmp	r3, #128	; 0x80
 8009736:	d81d      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d007      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009740:	e018      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009742:	4b5e      	ldr	r3, [pc, #376]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	4a5d      	ldr	r2, [pc, #372]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800974c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800974e:	e017      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3304      	adds	r3, #4
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f001 ff6e 	bl	800b638 <RCCEx_PLL2_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009760:	e00e      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3324      	adds	r3, #36	; 0x24
 8009766:	2100      	movs	r1, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f002 f817 	bl	800b79c <RCCEx_PLL3_Config>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009772:	e005      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
      break;
 8009778:	e002      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800977e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009786:	4b4d      	ldr	r3, [pc, #308]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009792:	494a      	ldr	r1, [pc, #296]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009794:	4313      	orrs	r3, r2
 8009796:	650b      	str	r3, [r1, #80]	; 0x50
 8009798:	e001      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d049      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097b4:	d030      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80097b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097ba:	d82a      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097c0:	d02c      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80097c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097c6:	d824      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097cc:	d018      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80097ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097d2:	d81e      	bhi.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80097d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097dc:	d007      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097de:	e018      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e0:	4b36      	ldr	r3, [pc, #216]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	4a35      	ldr	r2, [pc, #212]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ec:	e017      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3304      	adds	r3, #4
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 ff1f 	bl	800b638 <RCCEx_PLL2_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097fe:	e00e      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3324      	adds	r3, #36	; 0x24
 8009804:	2100      	movs	r1, #0
 8009806:	4618      	mov	r0, r3
 8009808:	f001 ffc8 	bl	800b79c <RCCEx_PLL3_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009810:	e005      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	75fb      	strb	r3, [r7, #23]
      break;
 8009816:	e002      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009818:	bf00      	nop
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800981c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009824:	4b25      	ldr	r3, [pc, #148]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009832:	4922      	ldr	r1, [pc, #136]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009834:	4313      	orrs	r3, r2
 8009836:	658b      	str	r3, [r1, #88]	; 0x58
 8009838:	e001      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009846:	2b00      	cmp	r3, #0
 8009848:	d04b      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009854:	d030      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800985a:	d82a      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800985c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009860:	d02e      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009866:	d824      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800986c:	d018      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800986e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009872:	d81e      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800987c:	d007      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800987e:	e018      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009880:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800988c:	e019      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3304      	adds	r3, #4
 8009892:	2100      	movs	r1, #0
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fecf 	bl	800b638 <RCCEx_PLL2_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800989e:	e010      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3324      	adds	r3, #36	; 0x24
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 ff78 	bl	800b79c <RCCEx_PLL3_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098b0:	e007      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]
      break;
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80098b8:	bf00      	nop
 80098ba:	e002      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80098bc:	58024400 	.word	0x58024400
      break;
 80098c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098c8:	4b99      	ldr	r3, [pc, #612]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098d6:	4996      	ldr	r1, [pc, #600]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	658b      	str	r3, [r1, #88]	; 0x58
 80098dc:	e001      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d032      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f2:	2b30      	cmp	r3, #48	; 0x30
 80098f4:	d01c      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80098f6:	2b30      	cmp	r3, #48	; 0x30
 80098f8:	d817      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d00c      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d813      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d016      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009906:	2b10      	cmp	r3, #16
 8009908:	d10f      	bne.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800990a:	4b89      	ldr	r3, [pc, #548]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	4a88      	ldr	r2, [pc, #544]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009916:	e00e      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3304      	adds	r3, #4
 800991c:	2102      	movs	r1, #2
 800991e:	4618      	mov	r0, r3
 8009920:	f001 fe8a 	bl	800b638 <RCCEx_PLL2_Config>
 8009924:	4603      	mov	r3, r0
 8009926:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009928:	e005      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
      break;
 800992e:	e002      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009930:	bf00      	nop
 8009932:	e000      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d109      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800993c:	4b7c      	ldr	r3, [pc, #496]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800993e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009948:	4979      	ldr	r1, [pc, #484]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800994a:	4313      	orrs	r3, r2
 800994c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800994e:	e001      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d047      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009968:	d030      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800996a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800996e:	d82a      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009974:	d02c      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800997a:	d824      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800997c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009980:	d018      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009986:	d81e      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800998c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009990:	d007      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009992:	e018      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009994:	4b66      	ldr	r3, [pc, #408]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	4a65      	ldr	r2, [pc, #404]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800999a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099a0:	e017      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3304      	adds	r3, #4
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fe45 	bl	800b638 <RCCEx_PLL2_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099b2:	e00e      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3324      	adds	r3, #36	; 0x24
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 feee 	bl	800b79c <RCCEx_PLL3_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099c4:	e005      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ca:	e002      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80099d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099d8:	4b55      	ldr	r3, [pc, #340]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e4:	4952      	ldr	r1, [pc, #328]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	650b      	str	r3, [r1, #80]	; 0x50
 80099ea:	e001      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d049      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a04:	d02e      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a0a:	d828      	bhi.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a10:	d02a      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a16:	d822      	bhi.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a1c:	d026      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009a1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a22:	d81c      	bhi.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a28:	d010      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a2e:	d816      	bhi.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01d      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a38:	d111      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 fdf9 	bl	800b638 <RCCEx_PLL2_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a4a:	e012      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3324      	adds	r3, #36	; 0x24
 8009a50:	2101      	movs	r1, #1
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fea2 	bl	800b79c <RCCEx_PLL3_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a5c:	e009      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
      break;
 8009a62:	e006      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a64:	bf00      	nop
 8009a66:	e004      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e002      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a6c:	bf00      	nop
 8009a6e:	e000      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d109      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a78:	4b2d      	ldr	r3, [pc, #180]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a84:	492a      	ldr	r1, [pc, #168]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	650b      	str	r3, [r1, #80]	; 0x50
 8009a8a:	e001      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d04d      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aa6:	d02e      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aac:	d828      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab2:	d02a      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab8:	d822      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009abe:	d026      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ac4:	d81c      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aca:	d010      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad0:	d816      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01d      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ada:	d111      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 fda8 	bl	800b638 <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009aec:	e012      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3324      	adds	r3, #36	; 0x24
 8009af2:	2101      	movs	r1, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fe51 	bl	800b79c <RCCEx_PLL3_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009afe:	e009      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	e006      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009b06:	bf00      	nop
 8009b08:	e004      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009b0a:	bf00      	nop
 8009b0c:	e002      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009b0e:	bf00      	nop
 8009b10:	e000      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b28:	4901      	ldr	r1, [pc, #4]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b2e:	e003      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d02f      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b4c:	d00e      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b52:	d814      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d015      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b5c:	d10f      	bne.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b5e:	4baf      	ldr	r3, [pc, #700]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	4aae      	ldr	r2, [pc, #696]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b6a:	e00c      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	2101      	movs	r1, #1
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fd60 	bl	800b638 <RCCEx_PLL2_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b7c:	e003      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	75fb      	strb	r3, [r7, #23]
      break;
 8009b82:	e000      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d109      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b8c:	4ba3      	ldr	r3, [pc, #652]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b98:	49a0      	ldr	r1, [pc, #640]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b9e:	e001      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d032      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d81b      	bhi.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bf7 	.word	0x08009bf7
 8009bc4:	08009bd1 	.word	0x08009bd1
 8009bc8:	08009bdf 	.word	0x08009bdf
 8009bcc:	08009bf7 	.word	0x08009bf7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd0:	4b92      	ldr	r3, [pc, #584]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	4a91      	ldr	r2, [pc, #580]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009bdc:	e00c      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3304      	adds	r3, #4
 8009be2:	2102      	movs	r1, #2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fd27 	bl	800b638 <RCCEx_PLL2_Config>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009bee:	e003      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bfe:	4b87      	ldr	r3, [pc, #540]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	f023 0203 	bic.w	r2, r3, #3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0a:	4984      	ldr	r1, [pc, #528]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c10:	e001      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 8086 	beq.w	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c24:	4b7e      	ldr	r3, [pc, #504]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a7d      	ldr	r2, [pc, #500]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c30:	f7f8 fea4 	bl	800297c <HAL_GetTick>
 8009c34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c36:	e009      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c38:	f7f8 fea0 	bl	800297c <HAL_GetTick>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	2b64      	cmp	r3, #100	; 0x64
 8009c44:	d902      	bls.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	75fb      	strb	r3, [r7, #23]
        break;
 8009c4a:	e005      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c4c:	4b74      	ldr	r3, [pc, #464]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0ef      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d166      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c5e:	4b6f      	ldr	r3, [pc, #444]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c68:	4053      	eors	r3, r2
 8009c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d013      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c72:	4b6a      	ldr	r3, [pc, #424]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c7c:	4b67      	ldr	r3, [pc, #412]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c80:	4a66      	ldr	r2, [pc, #408]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c88:	4b64      	ldr	r3, [pc, #400]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8c:	4a63      	ldr	r2, [pc, #396]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c94:	4a61      	ldr	r2, [pc, #388]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca4:	d115      	bne.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca6:	f7f8 fe69 	bl	800297c <HAL_GetTick>
 8009caa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cac:	e00b      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cae:	f7f8 fe65 	bl	800297c <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d902      	bls.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	75fb      	strb	r3, [r7, #23]
            break;
 8009cc4:	e005      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cc6:	4b55      	ldr	r3, [pc, #340]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0ed      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d126      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ce6:	d10d      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009ce8:	4b4c      	ldr	r3, [pc, #304]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cf6:	0919      	lsrs	r1, r3, #4
 8009cf8:	4b4a      	ldr	r3, [pc, #296]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009cfa:	400b      	ands	r3, r1
 8009cfc:	4947      	ldr	r1, [pc, #284]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	610b      	str	r3, [r1, #16]
 8009d02:	e005      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009d04:	4b45      	ldr	r3, [pc, #276]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	4a44      	ldr	r2, [pc, #272]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d0e:	6113      	str	r3, [r2, #16]
 8009d10:	4b42      	ldr	r3, [pc, #264]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d1e:	493f      	ldr	r1, [pc, #252]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	670b      	str	r3, [r1, #112]	; 0x70
 8009d24:	e004      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	75bb      	strb	r3, [r7, #22]
 8009d2a:	e001      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 8085 	beq.w	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d42:	2b28      	cmp	r3, #40	; 0x28
 8009d44:	d866      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009e29 	.word	0x08009e29
 8009d50:	08009e15 	.word	0x08009e15
 8009d54:	08009e15 	.word	0x08009e15
 8009d58:	08009e15 	.word	0x08009e15
 8009d5c:	08009e15 	.word	0x08009e15
 8009d60:	08009e15 	.word	0x08009e15
 8009d64:	08009e15 	.word	0x08009e15
 8009d68:	08009e15 	.word	0x08009e15
 8009d6c:	08009df1 	.word	0x08009df1
 8009d70:	08009e15 	.word	0x08009e15
 8009d74:	08009e15 	.word	0x08009e15
 8009d78:	08009e15 	.word	0x08009e15
 8009d7c:	08009e15 	.word	0x08009e15
 8009d80:	08009e15 	.word	0x08009e15
 8009d84:	08009e15 	.word	0x08009e15
 8009d88:	08009e15 	.word	0x08009e15
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e15 	.word	0x08009e15
 8009d94:	08009e15 	.word	0x08009e15
 8009d98:	08009e15 	.word	0x08009e15
 8009d9c:	08009e15 	.word	0x08009e15
 8009da0:	08009e15 	.word	0x08009e15
 8009da4:	08009e15 	.word	0x08009e15
 8009da8:	08009e15 	.word	0x08009e15
 8009dac:	08009e29 	.word	0x08009e29
 8009db0:	08009e15 	.word	0x08009e15
 8009db4:	08009e15 	.word	0x08009e15
 8009db8:	08009e15 	.word	0x08009e15
 8009dbc:	08009e15 	.word	0x08009e15
 8009dc0:	08009e15 	.word	0x08009e15
 8009dc4:	08009e15 	.word	0x08009e15
 8009dc8:	08009e15 	.word	0x08009e15
 8009dcc:	08009e29 	.word	0x08009e29
 8009dd0:	08009e15 	.word	0x08009e15
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e15 	.word	0x08009e15
 8009ddc:	08009e15 	.word	0x08009e15
 8009de0:	08009e15 	.word	0x08009e15
 8009de4:	08009e15 	.word	0x08009e15
 8009de8:	08009e15 	.word	0x08009e15
 8009dec:	08009e29 	.word	0x08009e29
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	2101      	movs	r1, #1
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fc1e 	bl	800b638 <RCCEx_PLL2_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e00:	e013      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3324      	adds	r3, #36	; 0x24
 8009e06:	2101      	movs	r1, #1
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 fcc7 	bl	800b79c <RCCEx_PLL3_Config>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e12:	e00a      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]
      break;
 8009e18:	e007      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009e1a:	bf00      	nop
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	58024800 	.word	0x58024800
 8009e24:	00ffffcf 	.word	0x00ffffcf
      break;
 8009e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d109      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e30:	4b96      	ldr	r3, [pc, #600]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e34:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e3c:	4993      	ldr	r1, [pc, #588]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	654b      	str	r3, [r1, #84]	; 0x54
 8009e42:	e001      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d038      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e58:	2b05      	cmp	r3, #5
 8009e5a:	d821      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009ea7 	.word	0x08009ea7
 8009e68:	08009e7d 	.word	0x08009e7d
 8009e6c:	08009e8f 	.word	0x08009e8f
 8009e70:	08009ea7 	.word	0x08009ea7
 8009e74:	08009ea7 	.word	0x08009ea7
 8009e78:	08009ea7 	.word	0x08009ea7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	2101      	movs	r1, #1
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 fbd8 	bl	800b638 <RCCEx_PLL2_Config>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e8c:	e00c      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3324      	adds	r3, #36	; 0x24
 8009e92:	2101      	movs	r1, #1
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 fc81 	bl	800b79c <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e9e:	e003      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009eae:	4b77      	ldr	r3, [pc, #476]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb2:	f023 0207 	bic.w	r2, r3, #7
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eba:	4974      	ldr	r1, [pc, #464]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8009ec0:	e001      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d03a      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed8:	2b05      	cmp	r3, #5
 8009eda:	d821      	bhi.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009f27 	.word	0x08009f27
 8009ee8:	08009efd 	.word	0x08009efd
 8009eec:	08009f0f 	.word	0x08009f0f
 8009ef0:	08009f27 	.word	0x08009f27
 8009ef4:	08009f27 	.word	0x08009f27
 8009ef8:	08009f27 	.word	0x08009f27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	2101      	movs	r1, #1
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fb98 	bl	800b638 <RCCEx_PLL2_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f0c:	e00c      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3324      	adds	r3, #36	; 0x24
 8009f12:	2101      	movs	r1, #1
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 fc41 	bl	800b79c <RCCEx_PLL3_Config>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f1e:	e003      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
      break;
 8009f24:	e000      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f2e:	4b57      	ldr	r3, [pc, #348]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f32:	f023 0207 	bic.w	r2, r3, #7
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3c:	4953      	ldr	r1, [pc, #332]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	658b      	str	r3, [r1, #88]	; 0x58
 8009f42:	e001      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d04b      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f5e:	d02e      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f64:	d828      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6a:	d02a      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d822      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f76:	d026      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f7c:	d81c      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f82:	d010      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f88:	d816      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01d      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f92:	d111      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3304      	adds	r3, #4
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 fb4c 	bl	800b638 <RCCEx_PLL2_Config>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009fa4:	e012      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3324      	adds	r3, #36	; 0x24
 8009faa:	2102      	movs	r1, #2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 fbf5 	bl	800b79c <RCCEx_PLL3_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009fb6:	e009      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbc:	e006      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009fbe:	bf00      	nop
 8009fc0:	e004      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009fc2:	bf00      	nop
 8009fc4:	e002      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fd2:	4b2e      	ldr	r3, [pc, #184]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe0:	492a      	ldr	r1, [pc, #168]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	654b      	str	r3, [r1, #84]	; 0x54
 8009fe6:	e001      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d04d      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ffe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a002:	d02e      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a004:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a008:	d828      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00e:	d02a      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a014:	d822      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a01a:	d026      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a01c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a020:	d81c      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a026:	d010      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a02c:	d816      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01d      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a036:	d111      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 fafa 	bl	800b638 <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a048:	e012      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3324      	adds	r3, #36	; 0x24
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fba3 	bl	800b79c <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a05a:	e009      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e006      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a062:	bf00      	nop
 800a064:	e004      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a066:	bf00      	nop
 800a068:	e002      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a06a:	bf00      	nop
 800a06c:	e000      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a06e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10c      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a084:	4901      	ldr	r1, [pc, #4]	; (800a08c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a086:	4313      	orrs	r3, r2
 800a088:	658b      	str	r3, [r1, #88]	; 0x58
 800a08a:	e003      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a08c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d04b      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0aa:	d02e      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a0ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0b0:	d828      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b6:	d02a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0bc:	d822      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0c2:	d026      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a0c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0c8:	d81c      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ce:	d010      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a0d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d4:	d816      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01d      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0de:	d111      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 faa6 	bl	800b638 <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0f0:	e012      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fb4f 	bl	800b79c <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a102:	e009      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
      break;
 800a108:	e006      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a10a:	bf00      	nop
 800a10c:	e004      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a10e:	bf00      	nop
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a116:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a11e:	4b9d      	ldr	r3, [pc, #628]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a12c:	4999      	ldr	r1, [pc, #612]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	658b      	str	r3, [r1, #88]	; 0x58
 800a132:	e001      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01a      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a14e:	d10a      	bne.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3324      	adds	r3, #36	; 0x24
 800a154:	2102      	movs	r1, #2
 800a156:	4618      	mov	r0, r3
 800a158:	f001 fb20 	bl	800b79c <RCCEx_PLL3_Config>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a166:	4b8b      	ldr	r3, [pc, #556]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a174:	4987      	ldr	r1, [pc, #540]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a176:	4313      	orrs	r3, r2
 800a178:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a190:	d10a      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3324      	adds	r3, #36	; 0x24
 800a196:	2102      	movs	r1, #2
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 faff 	bl	800b79c <RCCEx_PLL3_Config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1a8:	4b7a      	ldr	r3, [pc, #488]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1b6:	4977      	ldr	r1, [pc, #476]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d034      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1d2:	d01d      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a1d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1d8:	d817      	bhi.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e2:	d009      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a1e4:	e011      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f001 fa23 	bl	800b638 <RCCEx_PLL2_Config>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1f6:	e00c      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3324      	adds	r3, #36	; 0x24
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 facc 	bl	800b79c <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a208:	e003      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	75fb      	strb	r3, [r7, #23]
      break;
 800a20e:	e000      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a210:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a212:	7dfb      	ldrb	r3, [r7, #23]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a218:	4b5e      	ldr	r3, [pc, #376]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a226:	495b      	ldr	r1, [pc, #364]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	658b      	str	r3, [r1, #88]	; 0x58
 800a22c:	e001      	b.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d033      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a248:	d01c      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a24a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a24e:	d816      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a254:	d003      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a25a:	d007      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a25c:	e00f      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a25e:	4b4d      	ldr	r3, [pc, #308]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	4a4c      	ldr	r2, [pc, #304]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a26a:	e00c      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3324      	adds	r3, #36	; 0x24
 800a270:	2101      	movs	r1, #1
 800a272:	4618      	mov	r0, r3
 800a274:	f001 fa92 	bl	800b79c <RCCEx_PLL3_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a27c:	e003      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	75fb      	strb	r3, [r7, #23]
      break;
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a28c:	4b41      	ldr	r3, [pc, #260]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a29a:	493e      	ldr	r1, [pc, #248]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	654b      	str	r3, [r1, #84]	; 0x54
 800a2a0:	e001      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d029      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2be:	d007      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a2c0:	e00f      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c2:	4b34      	ldr	r3, [pc, #208]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	4a33      	ldr	r2, [pc, #204]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2ce:	e00b      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	2102      	movs	r1, #2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 f9ae 	bl	800b638 <RCCEx_PLL2_Config>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2e0:	e002      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d109      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2ee:	4b29      	ldr	r3, [pc, #164]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2fa:	4926      	ldr	r1, [pc, #152]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a300:	e001      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3324      	adds	r3, #36	; 0x24
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 fa3f 	bl	800b79c <RCCEx_PLL3_Config>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d033      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a33c:	d017      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a33e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a342:	d811      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d013      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a34a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a34e:	d80b      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d010      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a358:	d106      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a35a:	4b0e      	ldr	r3, [pc, #56]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	4a0d      	ldr	r2, [pc, #52]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a366:	e007      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]
      break;
 800a36c:	e004      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a36e:	bf00      	nop
 800a370:	e002      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a376:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10c      	bne.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a38a:	4902      	ldr	r1, [pc, #8]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	654b      	str	r3, [r1, #84]	; 0x54
 800a390:	e004      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3a8:	4b31      	ldr	r3, [pc, #196]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	492e      	ldr	r1, [pc, #184]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d009      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a3c6:	4b2a      	ldr	r3, [pc, #168]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3d4:	4926      	ldr	r1, [pc, #152]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d008      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3e6:	4b22      	ldr	r3, [pc, #136]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3f2:	491f      	ldr	r1, [pc, #124]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00d      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a404:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a19      	ldr	r2, [pc, #100]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a40a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a40e:	6113      	str	r3, [r2, #16]
 800a410:	4b17      	ldr	r3, [pc, #92]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a41a:	4915      	ldr	r1, [pc, #84]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	da08      	bge.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a428:	4b11      	ldr	r3, [pc, #68]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a434:	490e      	ldr	r1, [pc, #56]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a436:	4313      	orrs	r3, r2
 800a438:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	4906      	ldr	r1, [pc, #24]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a456:	4313      	orrs	r3, r2
 800a458:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a45a:	7dbb      	ldrb	r3, [r7, #22]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	e000      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400

0800a474 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b090      	sub	sp, #64	; 0x40
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a482:	f040 8095 	bne.w	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a486:	4b97      	ldr	r3, [pc, #604]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	2b04      	cmp	r3, #4
 800a494:	f200 8088 	bhi.w	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a498:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a4b5 	.word	0x0800a4b5
 800a4a4:	0800a4dd 	.word	0x0800a4dd
 800a4a8:	0800a505 	.word	0x0800a505
 800a4ac:	0800a5a1 	.word	0x0800a5a1
 800a4b0:	0800a52d 	.word	0x0800a52d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4b4:	4b8b      	ldr	r3, [pc, #556]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 ff64 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4d0:	f000 bc94 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	f000 bc90 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4dc:	4b81      	ldr	r3, [pc, #516]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4e8:	d108      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ea:	f107 0318 	add.w	r3, r7, #24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fca8 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4f8:	f000 bc80 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a500:	f000 bc7c 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a504:	4b77      	ldr	r3, [pc, #476]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a510:	d108      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a512:	f107 030c 	add.w	r3, r7, #12
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fde8 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a520:	f000 bc6c 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a528:	f000 bc68 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a52c:	4b6d      	ldr	r3, [pc, #436]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a52e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a534:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a536:	4b6b      	ldr	r3, [pc, #428]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d10c      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	2b00      	cmp	r3, #0
 800a546:	d109      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a548:	4b66      	ldr	r3, [pc, #408]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	08db      	lsrs	r3, r3, #3
 800a54e:	f003 0303 	and.w	r3, r3, #3
 800a552:	4a65      	ldr	r2, [pc, #404]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a554:	fa22 f303 	lsr.w	r3, r2, r3
 800a558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55a:	e01f      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a55c:	4b61      	ldr	r3, [pc, #388]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a568:	d106      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a570:	d102      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a572:	4b5e      	ldr	r3, [pc, #376]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a576:	e011      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a578:	4b5a      	ldr	r3, [pc, #360]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a584:	d106      	bne.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a58c:	d102      	bne.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a58e:	4b58      	ldr	r3, [pc, #352]	; (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a592:	e003      	b.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a598:	f000 bc30 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a59c:	f000 bc2e 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5a0:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a4:	f000 bc2a 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ac:	f000 bc26 	b.w	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b6:	f040 809f 	bne.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a5ba:	4b4a      	ldr	r3, [pc, #296]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a5c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ca:	d04d      	beq.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d2:	f200 8084 	bhi.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	2bc0      	cmp	r3, #192	; 0xc0
 800a5da:	d07d      	beq.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	2bc0      	cmp	r3, #192	; 0xc0
 800a5e0:	d87d      	bhi.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	2b80      	cmp	r3, #128	; 0x80
 800a5e6:	d02d      	beq.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	2b80      	cmp	r3, #128	; 0x80
 800a5ec:	d877      	bhi.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	2b40      	cmp	r3, #64	; 0x40
 800a5f8:	d012      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a5fa:	e070      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5fc:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a604:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a608:	d107      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a60a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fec0 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a618:	e3f0      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61e:	e3ed      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a620:	4b30      	ldr	r3, [pc, #192]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a62c:	d107      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a62e:	f107 0318 	add.w	r3, r7, #24
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fc06 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a63c:	e3de      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a642:	e3db      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a644:	4b27      	ldr	r3, [pc, #156]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a650:	d107      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fd48 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a660:	e3cc      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a666:	e3c9      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a668:	4b1e      	ldr	r3, [pc, #120]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a670:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a672:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	d10c      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	2b00      	cmp	r3, #0
 800a682:	d109      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a684:	4b17      	ldr	r3, [pc, #92]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a696:	e01e      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a698:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a4:	d106      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6ac:	d102      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6ae:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6b2:	e010      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c0:	d106      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c8:	d102      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6ca:	4b09      	ldr	r3, [pc, #36]	; (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ce:	e002      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6d4:	e392      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6d6:	e391      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6dc:	e38e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e2:	e38b      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a6e4:	58024400 	.word	0x58024400
 800a6e8:	03d09000 	.word	0x03d09000
 800a6ec:	003d0900 	.word	0x003d0900
 800a6f0:	017d7840 	.word	0x017d7840
 800a6f4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fe:	f040 809c 	bne.w	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a702:	4b9d      	ldr	r3, [pc, #628]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a70a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a712:	d054      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a71a:	f200 808b 	bhi.w	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a724:	f000 8083 	beq.w	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a72e:	f200 8081 	bhi.w	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a738:	d02f      	beq.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a740:	d878      	bhi.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a74e:	d012      	beq.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a750:	e070      	b.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a752:	4b89      	ldr	r3, [pc, #548]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a75e:	d107      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fe15 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a76e:	e345      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a774:	e342      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a776:	4b80      	ldr	r3, [pc, #512]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a77e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a782:	d107      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a784:	f107 0318 	add.w	r3, r7, #24
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fb5b 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a792:	e333      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a798:	e330      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a79a:	4b77      	ldr	r3, [pc, #476]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a6:	d107      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fc9d 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7b6:	e321      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7bc:	e31e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7be:	4b6e      	ldr	r3, [pc, #440]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7c8:	4b6b      	ldr	r3, [pc, #428]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d10c      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7da:	4b67      	ldr	r3, [pc, #412]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	08db      	lsrs	r3, r3, #3
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	4a65      	ldr	r2, [pc, #404]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ec:	e01e      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7ee:	4b62      	ldr	r3, [pc, #392]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fa:	d106      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a802:	d102      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a804:	4b5e      	ldr	r3, [pc, #376]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a808:	e010      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a80a:	4b5b      	ldr	r3, [pc, #364]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a816:	d106      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81e:	d102      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a820:	4b58      	ldr	r3, [pc, #352]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a824:	e002      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a82a:	e2e7      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a82c:	e2e6      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a82e:	4b56      	ldr	r3, [pc, #344]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a832:	e2e3      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a838:	e2e0      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a840:	f040 80a7 	bne.w	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a844:	4b4c      	ldr	r3, [pc, #304]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a848:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a84c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a854:	d055      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a85c:	f200 8096 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a866:	f000 8084 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a870:	f200 808c 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a87a:	d030      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a882:	f200 8083 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a892:	d012      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a894:	e07a      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a896:	4b38      	ldr	r3, [pc, #224]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a89e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8a2:	d107      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fd73 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8b2:	e2a3      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b8:	e2a0      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ba:	4b2f      	ldr	r3, [pc, #188]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c8:	f107 0318 	add.w	r3, r7, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fab9 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a8d6:	e291      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8dc:	e28e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8de:	4b26      	ldr	r3, [pc, #152]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fbfb 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8fa:	e27f      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a900:	e27c      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a902:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a90a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b04      	cmp	r3, #4
 800a916:	d10c      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a91e:	4b16      	ldr	r3, [pc, #88]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	08db      	lsrs	r3, r3, #3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	4a14      	ldr	r2, [pc, #80]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a92a:	fa22 f303 	lsr.w	r3, r2, r3
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a930:	e01e      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d106      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a948:	4b0d      	ldr	r3, [pc, #52]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a94c:	e010      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a95a:	d106      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a962:	d102      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a964:	4b07      	ldr	r3, [pc, #28]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a96e:	e245      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a970:	e244      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a976:	e241      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900
 800a984:	017d7840 	.word	0x017d7840
 800a988:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a990:	e234      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a998:	f040 809c 	bne.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a99c:	4b9b      	ldr	r3, [pc, #620]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ac:	d054      	beq.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9b4:	f200 808b 	bhi.w	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9be:	f000 8083 	beq.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9c8:	f200 8081 	bhi.w	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d2:	d02f      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9da:	d878      	bhi.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e8:	d012      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a9ea:	e070      	b.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9ec:	4b87      	ldr	r3, [pc, #540]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f8:	d107      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fcc8 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa08:	e1f8      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa0e:	e1f5      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa10:	4b7e      	ldr	r3, [pc, #504]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa1c:	d107      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa1e:	f107 0318 	add.w	r3, r7, #24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fa0e 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa2c:	e1e6      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa32:	e1e3      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa34:	4b75      	ldr	r3, [pc, #468]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa40:	d107      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa42:	f107 030c 	add.w	r3, r7, #12
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fb50 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa50:	e1d4      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa56:	e1d1      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa58:	4b6c      	ldr	r3, [pc, #432]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa62:	4b6a      	ldr	r3, [pc, #424]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d10c      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d109      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa74:	4b65      	ldr	r3, [pc, #404]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	08db      	lsrs	r3, r3, #3
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	4a64      	ldr	r2, [pc, #400]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aa80:	fa22 f303 	lsr.w	r3, r2, r3
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa86:	e01e      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa88:	4b60      	ldr	r3, [pc, #384]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa94:	d106      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800aa96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa9c:	d102      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa9e:	4b5d      	ldr	r3, [pc, #372]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa2:	e010      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaa4:	4b59      	ldr	r3, [pc, #356]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab0:	d106      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aab8:	d102      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aaba:	4b57      	ldr	r3, [pc, #348]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aabe:	e002      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aac4:	e19a      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aac6:	e199      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aac8:	4b54      	ldr	r3, [pc, #336]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aacc:	e196      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad2:	e193      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aada:	d173      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aadc:	4b4b      	ldr	r3, [pc, #300]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aae4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaec:	d02f      	beq.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaf4:	d863      	bhi.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab02:	d012      	beq.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800ab04:	e05b      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab06:	4b41      	ldr	r3, [pc, #260]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab12:	d107      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab14:	f107 0318 	add.w	r3, r7, #24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 f993 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab22:	e16b      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab28:	e168      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab2a:	4b38      	ldr	r3, [pc, #224]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab36:	d107      	bne.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab38:	f107 030c 	add.w	r3, r7, #12
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fad5 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab46:	e159      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab4c:	e156      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab4e:	4b2f      	ldr	r3, [pc, #188]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab56:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab58:	4b2c      	ldr	r3, [pc, #176]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d10c      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab6a:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	4a26      	ldr	r2, [pc, #152]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ab76:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab7c:	e01e      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab7e:	4b23      	ldr	r3, [pc, #140]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab8a:	d106      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab92:	d102      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab94:	4b1f      	ldr	r3, [pc, #124]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab98:	e010      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab9a:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba6:	d106      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abae:	d102      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800abb0:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800abb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abb4:	e002      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abba:	e11f      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abbc:	e11e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abc2:	e11b      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abca:	d13e      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d004      	beq.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe2:	d01d      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800abe4:	e02e      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abe6:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abf2:	d107      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fbcb 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac02:	e0fb      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac08:	e0f8      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac0a:	bf00      	nop
 800ac0c:	58024400 	.word	0x58024400
 800ac10:	03d09000 	.word	0x03d09000
 800ac14:	003d0900 	.word	0x003d0900
 800ac18:	017d7840 	.word	0x017d7840
 800ac1c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac20:	4b79      	ldr	r3, [pc, #484]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac2c:	d107      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac2e:	f107 0318 	add.w	r3, r7, #24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 f906 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac3c:	e0de      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac42:	e0db      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac48:	e0d8      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac50:	f040 8085 	bne.w	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ac54:	4b6c      	ldr	r3, [pc, #432]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ac5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac64:	d06b      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac6c:	d874      	bhi.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac74:	d056      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7c:	d86c      	bhi.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac84:	d03b      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac8c:	d864      	bhi.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac94:	d021      	beq.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac9c:	d85c      	bhi.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acaa:	d004      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800acac:	e054      	b.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800acae:	f000 f8b3 	bl	800ae18 <HAL_RCCEx_GetD3PCLK1Freq>
 800acb2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800acb4:	e0a2      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb6:	4b54      	ldr	r3, [pc, #336]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acc2:	d107      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc4:	f107 0318 	add.w	r3, r7, #24
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 f8bb 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acd2:	e093      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd8:	e090      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acda:	4b4b      	ldr	r3, [pc, #300]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace6:	d107      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f9fd 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acf6:	e081      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acfc:	e07e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acfe:	4b42      	ldr	r3, [pc, #264]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d109      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad0a:	4b3f      	ldr	r3, [pc, #252]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	08db      	lsrs	r3, r3, #3
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	4a3d      	ldr	r2, [pc, #244]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ad16:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad1c:	e06e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad22:	e06b      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad24:	4b38      	ldr	r3, [pc, #224]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad30:	d102      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ad32:	4b37      	ldr	r3, [pc, #220]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad36:	e061      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad3c:	e05e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3e:	4b32      	ldr	r3, [pc, #200]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4a:	d102      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ad4c:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad50:	e054      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad56:	e051      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad5c:	e04e      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad64:	d148      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ad66:	4b28      	ldr	r3, [pc, #160]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad76:	d02a      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad7e:	d838      	bhi.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d004      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad8c:	d00d      	beq.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ad8e:	e030      	b.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad90:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad9c:	d102      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ad9e:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ada2:	e02b      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada8:	e028      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adaa:	4b17      	ldr	r3, [pc, #92]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb6:	d107      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fae9 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adc6:	e019      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adcc:	e016      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adda:	d107      	bne.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800addc:	f107 0318 	add.w	r3, r7, #24
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 f82f 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800adea:	e007      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adf0:	e004      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adf6:	e001      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800adfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3740      	adds	r7, #64	; 0x40
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	58024400 	.word	0x58024400
 800ae0c:	03d09000 	.word	0x03d09000
 800ae10:	003d0900 	.word	0x003d0900
 800ae14:	017d7840 	.word	0x017d7840

0800ae18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ae1c:	f7fe fb88 	bl	8009530 <HAL_RCC_GetHCLKFreq>
 800ae20:	4602      	mov	r2, r0
 800ae22:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	091b      	lsrs	r3, r3, #4
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	4904      	ldr	r1, [pc, #16]	; (800ae40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae2e:	5ccb      	ldrb	r3, [r1, r3]
 800ae30:	f003 031f 	and.w	r3, r3, #31
 800ae34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	58024400 	.word	0x58024400
 800ae40:	0800feb8 	.word	0x0800feb8

0800ae44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b089      	sub	sp, #36	; 0x24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae4c:	4ba1      	ldr	r3, [pc, #644]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ae56:	4b9f      	ldr	r3, [pc, #636]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5a:	0b1b      	lsrs	r3, r3, #12
 800ae5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae62:	4b9c      	ldr	r3, [pc, #624]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	091b      	lsrs	r3, r3, #4
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ae6e:	4b99      	ldr	r3, [pc, #612]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	fb02 f303 	mul.w	r3, r2, r3
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 8111 	beq.w	800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	f000 8083 	beq.w	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	f200 80a1 	bhi.w	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d056      	beq.n	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aeae:	e099      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb0:	4b88      	ldr	r3, [pc, #544]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0320 	and.w	r3, r3, #32
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d02d      	beq.n	800af18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aebc:	4b85      	ldr	r3, [pc, #532]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	08db      	lsrs	r3, r3, #3
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	4a84      	ldr	r2, [pc, #528]	; (800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
 800aecc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af16:	e087      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b6a      	ldr	r3, [pc, #424]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af5a:	e065      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b59      	ldr	r3, [pc, #356]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af9e:	e043      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b48      	ldr	r3, [pc, #288]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afe2:	e021      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b37      	ldr	r3, [pc, #220]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b026:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b028:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	0a5b      	lsrs	r3, r3, #9
 800b02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b042:	edd7 6a07 	vldr	s13, [r7, #28]
 800b046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04e:	ee17 2a90 	vmov	r2, s15
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b056:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b06c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b070:	edd7 6a07 	vldr	s13, [r7, #28]
 800b074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b07c:	ee17 2a90 	vmov	r2, s15
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b084:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b088:	0e1b      	lsrs	r3, r3, #24
 800b08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b09a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b09e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0aa:	ee17 2a90 	vmov	r2, s15
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b0b2:	e008      	b.n	800b0c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	609a      	str	r2, [r3, #8]
}
 800b0c6:	bf00      	nop
 800b0c8:	3724      	adds	r7, #36	; 0x24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	03d09000 	.word	0x03d09000
 800b0dc:	46000000 	.word	0x46000000
 800b0e0:	4c742400 	.word	0x4c742400
 800b0e4:	4a742400 	.word	0x4a742400
 800b0e8:	4bbebc20 	.word	0x4bbebc20

0800b0ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b089      	sub	sp, #36	; 0x24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0f4:	4ba1      	ldr	r3, [pc, #644]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b0fe:	4b9f      	ldr	r3, [pc, #636]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b102:	0d1b      	lsrs	r3, r3, #20
 800b104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b108:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b10a:	4b9c      	ldr	r3, [pc, #624]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b116:	4b99      	ldr	r3, [pc, #612]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	08db      	lsrs	r3, r3, #3
 800b11c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	fb02 f303 	mul.w	r3, r2, r3
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 8111 	beq.w	800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	f000 8083 	beq.w	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b02      	cmp	r3, #2
 800b146:	f200 80a1 	bhi.w	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d056      	beq.n	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b156:	e099      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b158:	4b88      	ldr	r3, [pc, #544]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d02d      	beq.n	800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b164:	4b85      	ldr	r3, [pc, #532]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a84      	ldr	r2, [pc, #528]	; (800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b7b      	ldr	r3, [pc, #492]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b1be:	e087      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b6a      	ldr	r3, [pc, #424]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b202:	e065      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b59      	ldr	r3, [pc, #356]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b246:	e043      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25a:	4b48      	ldr	r3, [pc, #288]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b26e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b28a:	e021      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b296:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29e:	4b37      	ldr	r3, [pc, #220]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b2d0:	4b2a      	ldr	r3, [pc, #168]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	0a5b      	lsrs	r3, r3, #9
 800b2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b2fe:	4b1f      	ldr	r3, [pc, #124]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	0c1b      	lsrs	r3, r3, #16
 800b304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b318:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b324:	ee17 2a90 	vmov	r2, s15
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b32c:	4b13      	ldr	r3, [pc, #76]	; (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	0e1b      	lsrs	r3, r3, #24
 800b332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b342:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b346:	edd7 6a07 	vldr	s13, [r7, #28]
 800b34a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b352:	ee17 2a90 	vmov	r2, s15
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b35a:	e008      	b.n	800b36e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]
}
 800b36e:	bf00      	nop
 800b370:	3724      	adds	r7, #36	; 0x24
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	58024400 	.word	0x58024400
 800b380:	03d09000 	.word	0x03d09000
 800b384:	46000000 	.word	0x46000000
 800b388:	4c742400 	.word	0x4c742400
 800b38c:	4a742400 	.word	0x4a742400
 800b390:	4bbebc20 	.word	0x4bbebc20

0800b394 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	; 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b39c:	4ba0      	ldr	r3, [pc, #640]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a0:	f003 0303 	and.w	r3, r3, #3
 800b3a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b3a6:	4b9e      	ldr	r3, [pc, #632]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	091b      	lsrs	r3, r3, #4
 800b3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b3b2:	4b9b      	ldr	r3, [pc, #620]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b3bc:	4b98      	ldr	r3, [pc, #608]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c0:	08db      	lsrs	r3, r3, #3
 800b3c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	fb02 f303 	mul.w	r3, r2, r3
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8111 	beq.w	800b602 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	f000 8083 	beq.w	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	f200 80a1 	bhi.w	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d056      	beq.n	800b4aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3fc:	e099      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3fe:	4b88      	ldr	r3, [pc, #544]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0320 	and.w	r3, r3, #32
 800b406:	2b00      	cmp	r3, #0
 800b408:	d02d      	beq.n	800b466 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b40a:	4b85      	ldr	r3, [pc, #532]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	08db      	lsrs	r3, r3, #3
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	4a83      	ldr	r2, [pc, #524]	; (800b624 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b416:	fa22 f303 	lsr.w	r3, r2, r3
 800b41a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b434:	4b7a      	ldr	r3, [pc, #488]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	ed97 6a03 	vldr	s12, [r7, #12]
 800b448:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b460:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b464:	e087      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	ee07 3a90 	vmov	s15, r3
 800b46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b470:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b478:	4b69      	ldr	r3, [pc, #420]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b488:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4a8:	e065      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	ee07 3a90 	vmov	s15, r3
 800b4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4bc:	4b58      	ldr	r3, [pc, #352]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	ee07 3a90 	vmov	s15, r3
 800b4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4ec:	e043      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b634 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b500:	4b47      	ldr	r3, [pc, #284]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	ed97 6a03 	vldr	s12, [r7, #12]
 800b514:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b530:	e021      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	ee07 3a90 	vmov	s15, r3
 800b538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b544:	4b36      	ldr	r3, [pc, #216]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b554:	ed97 6a03 	vldr	s12, [r7, #12]
 800b558:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b55c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b570:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b574:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	0a5b      	lsrs	r3, r3, #9
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b590:	edd7 6a07 	vldr	s13, [r7, #28]
 800b594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59c:	ee17 2a90 	vmov	r2, s15
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	0c1b      	lsrs	r3, r3, #16
 800b5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ca:	ee17 2a90 	vmov	r2, s15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b5d2:	4b13      	ldr	r3, [pc, #76]	; (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d6:	0e1b      	lsrs	r3, r3, #24
 800b5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f8:	ee17 2a90 	vmov	r2, s15
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b600:	e008      	b.n	800b614 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	609a      	str	r2, [r3, #8]
}
 800b614:	bf00      	nop
 800b616:	3724      	adds	r7, #36	; 0x24
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	58024400 	.word	0x58024400
 800b624:	03d09000 	.word	0x03d09000
 800b628:	46000000 	.word	0x46000000
 800b62c:	4c742400 	.word	0x4c742400
 800b630:	4a742400 	.word	0x4a742400
 800b634:	4bbebc20 	.word	0x4bbebc20

0800b638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b646:	4b53      	ldr	r3, [pc, #332]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d101      	bne.n	800b656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e099      	b.n	800b78a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b656:	4b4f      	ldr	r3, [pc, #316]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a4e      	ldr	r2, [pc, #312]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b65c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b662:	f7f7 f98b 	bl	800297c <HAL_GetTick>
 800b666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b668:	e008      	b.n	800b67c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b66a:	f7f7 f987 	bl	800297c <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	d901      	bls.n	800b67c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e086      	b.n	800b78a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b67c:	4b45      	ldr	r3, [pc, #276]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1f0      	bne.n	800b66a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b688:	4b42      	ldr	r3, [pc, #264]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b68c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	031b      	lsls	r3, r3, #12
 800b696:	493f      	ldr	r1, [pc, #252]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	628b      	str	r3, [r1, #40]	; 0x28
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	025b      	lsls	r3, r3, #9
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	041b      	lsls	r3, r3, #16
 800b6ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	061b      	lsls	r3, r3, #24
 800b6c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6cc:	4931      	ldr	r1, [pc, #196]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b6d2:	4b30      	ldr	r3, [pc, #192]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	492d      	ldr	r1, [pc, #180]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6e4:	4b2b      	ldr	r3, [pc, #172]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	f023 0220 	bic.w	r2, r3, #32
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	4928      	ldr	r1, [pc, #160]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6f6:	4b27      	ldr	r3, [pc, #156]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fa:	4a26      	ldr	r2, [pc, #152]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	f023 0310 	bic.w	r3, r3, #16
 800b700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b702:	4b24      	ldr	r3, [pc, #144]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <RCCEx_PLL2_Config+0x160>)
 800b708:	4013      	ands	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	69d2      	ldr	r2, [r2, #28]
 800b70e:	00d2      	lsls	r2, r2, #3
 800b710:	4920      	ldr	r1, [pc, #128]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b712:	4313      	orrs	r3, r2
 800b714:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b716:	4b1f      	ldr	r3, [pc, #124]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	4a1e      	ldr	r2, [pc, #120]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b71c:	f043 0310 	orr.w	r3, r3, #16
 800b720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d106      	bne.n	800b736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b728:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72c:	4a19      	ldr	r2, [pc, #100]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b72e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b732:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b734:	e00f      	b.n	800b756 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d106      	bne.n	800b74a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b73c:	4b15      	ldr	r3, [pc, #84]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	4a14      	ldr	r2, [pc, #80]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b746:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b748:	e005      	b.n	800b756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	4a11      	ldr	r2, [pc, #68]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b754:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b756:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a0e      	ldr	r2, [pc, #56]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b75c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b762:	f7f7 f90b 	bl	800297c <HAL_GetTick>
 800b766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b768:	e008      	b.n	800b77c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b76a:	f7f7 f907 	bl	800297c <HAL_GetTick>
 800b76e:	4602      	mov	r2, r0
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d901      	bls.n	800b77c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e006      	b.n	800b78a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b77c:	4b05      	ldr	r3, [pc, #20]	; (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0f0      	beq.n	800b76a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	58024400 	.word	0x58024400
 800b798:	ffff0007 	.word	0xffff0007

0800b79c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7aa:	4b53      	ldr	r3, [pc, #332]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d101      	bne.n	800b7ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e099      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b7ba:	4b4f      	ldr	r3, [pc, #316]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a4e      	ldr	r2, [pc, #312]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7c6:	f7f7 f8d9 	bl	800297c <HAL_GetTick>
 800b7ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7cc:	e008      	b.n	800b7e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7ce:	f7f7 f8d5 	bl	800297c <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e086      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7e0:	4b45      	ldr	r3, [pc, #276]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7ec:	4b42      	ldr	r3, [pc, #264]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	051b      	lsls	r3, r3, #20
 800b7fa:	493f      	ldr	r1, [pc, #252]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	628b      	str	r3, [r1, #40]	; 0x28
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	025b      	lsls	r3, r3, #9
 800b812:	b29b      	uxth	r3, r3
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	3b01      	subs	r3, #1
 800b82a:	061b      	lsls	r3, r3, #24
 800b82c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b830:	4931      	ldr	r1, [pc, #196]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b832:	4313      	orrs	r3, r2
 800b834:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b836:	4b30      	ldr	r3, [pc, #192]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	492d      	ldr	r1, [pc, #180]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b844:	4313      	orrs	r3, r2
 800b846:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b848:	4b2b      	ldr	r3, [pc, #172]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4928      	ldr	r1, [pc, #160]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b856:	4313      	orrs	r3, r2
 800b858:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b85a:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	4a26      	ldr	r2, [pc, #152]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b866:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b86a:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <RCCEx_PLL3_Config+0x160>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	69d2      	ldr	r2, [r2, #28]
 800b872:	00d2      	lsls	r2, r2, #3
 800b874:	4920      	ldr	r1, [pc, #128]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b876:	4313      	orrs	r3, r2
 800b878:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b87a:	4b1f      	ldr	r3, [pc, #124]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87e:	4a1e      	ldr	r2, [pc, #120]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b88c:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a19      	ldr	r2, [pc, #100]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b896:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b898:	e00f      	b.n	800b8ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d106      	bne.n	800b8ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b8a0:	4b15      	ldr	r3, [pc, #84]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	4a14      	ldr	r2, [pc, #80]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8ac:	e005      	b.n	800b8ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	4a11      	ldr	r2, [pc, #68]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b8ba:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a0e      	ldr	r2, [pc, #56]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c6:	f7f7 f859 	bl	800297c <HAL_GetTick>
 800b8ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8cc:	e008      	b.n	800b8e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b8ce:	f7f7 f855 	bl	800297c <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e006      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8e0:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f0      	beq.n	800b8ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	ffff0007 	.word	0xffff0007

0800b900 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e0f1      	b.n	800baf6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a78      	ldr	r2, [pc, #480]	; (800bb00 <HAL_SPI_Init+0x200>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d00f      	beq.n	800b942 <HAL_SPI_Init+0x42>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a77      	ldr	r2, [pc, #476]	; (800bb04 <HAL_SPI_Init+0x204>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d00a      	beq.n	800b942 <HAL_SPI_Init+0x42>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a75      	ldr	r2, [pc, #468]	; (800bb08 <HAL_SPI_Init+0x208>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d005      	beq.n	800b942 <HAL_SPI_Init+0x42>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	2b0f      	cmp	r3, #15
 800b93c:	d901      	bls.n	800b942 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e0d9      	b.n	800baf6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fd74 	bl	800c430 <SPI_GetPacketSize>
 800b948:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a6c      	ldr	r2, [pc, #432]	; (800bb00 <HAL_SPI_Init+0x200>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d00c      	beq.n	800b96e <HAL_SPI_Init+0x6e>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a6a      	ldr	r2, [pc, #424]	; (800bb04 <HAL_SPI_Init+0x204>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d007      	beq.n	800b96e <HAL_SPI_Init+0x6e>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a69      	ldr	r2, [pc, #420]	; (800bb08 <HAL_SPI_Init+0x208>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d002      	beq.n	800b96e <HAL_SPI_Init+0x6e>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b08      	cmp	r3, #8
 800b96c:	d811      	bhi.n	800b992 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b972:	4a63      	ldr	r2, [pc, #396]	; (800bb00 <HAL_SPI_Init+0x200>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d009      	beq.n	800b98c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a61      	ldr	r2, [pc, #388]	; (800bb04 <HAL_SPI_Init+0x204>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d004      	beq.n	800b98c <HAL_SPI_Init+0x8c>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a60      	ldr	r2, [pc, #384]	; (800bb08 <HAL_SPI_Init+0x208>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d104      	bne.n	800b996 <HAL_SPI_Init+0x96>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2b10      	cmp	r3, #16
 800b990:	d901      	bls.n	800b996 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e0af      	b.n	800baf6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7f6 fc54 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0201 	bic.w	r2, r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b9d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9dc:	d119      	bne.n	800ba12 <HAL_SPI_Init+0x112>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9e6:	d103      	bne.n	800b9f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10c      	bne.n	800ba12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba00:	d107      	bne.n	800ba12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69da      	ldr	r2, [r3, #28]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba24:	ea42 0103 	orr.w	r1, r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68da      	ldr	r2, [r3, #12]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	431a      	orrs	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	431a      	orrs	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba66:	431a      	orrs	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba72:	ea42 0103 	orr.w	r1, r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d113      	bne.n	800bab2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bab0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00a      	beq.n	800bae4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	40013000 	.word	0x40013000
 800bb04:	40003800 	.word	0x40003800
 800bb08:	40003c00 	.word	0x40003c00

0800bb0c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	; 0x28
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3330      	adds	r3, #48	; 0x30
 800bb26:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb30:	d112      	bne.n	800bb58 <HAL_SPI_Receive+0x4c>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10e      	bne.n	800bb58 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2204      	movs	r2, #4
 800bb3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bb42:	88fa      	ldrh	r2, [r7, #6]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	68b9      	ldr	r1, [r7, #8]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 f978 	bl	800be44 <HAL_SPI_TransmitReceive>
 800bb54:	4603      	mov	r3, r0
 800bb56:	e16f      	b.n	800be38 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <HAL_SPI_Receive+0x5a>
 800bb62:	2302      	movs	r3, #2
 800bb64:	e168      	b.n	800be38 <HAL_SPI_Receive+0x32c>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb6e:	f7f6 ff05 	bl	800297c <HAL_GetTick>
 800bb72:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d007      	beq.n	800bb90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bb80:	2302      	movs	r3, #2
 800bb82:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb8c:	7ffb      	ldrb	r3, [r7, #31]
 800bb8e:	e153      	b.n	800be38 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_SPI_Receive+0x90>
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d107      	bne.n	800bbac <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bba8:	7ffb      	ldrb	r3, [r7, #31]
 800bbaa:	e145      	b.n	800be38 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2204      	movs	r2, #4
 800bbb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	88fa      	ldrh	r2, [r7, #6]
 800bbc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	88fa      	ldrh	r2, [r7, #6]
 800bbce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bbfc:	d107      	bne.n	800bc0e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	4b8a      	ldr	r3, [pc, #552]	; (800be40 <HAL_SPI_Receive+0x334>)
 800bc16:	4013      	ands	r3, r2
 800bc18:	88f9      	ldrh	r1, [r7, #6]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	6812      	ldr	r2, [r2, #0]
 800bc1e:	430b      	orrs	r3, r1
 800bc20:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f042 0201 	orr.w	r2, r2, #1
 800bc30:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc3a:	d107      	bne.n	800bc4c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	2b0f      	cmp	r3, #15
 800bc52:	d948      	bls.n	800bce6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc54:	e040      	b.n	800bcd8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	695a      	ldr	r2, [r3, #20]
 800bc5c:	f248 0308 	movw	r3, #32776	; 0x8008
 800bc60:	4013      	ands	r3, r2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d014      	beq.n	800bc90 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc76:	1d1a      	adds	r2, r3, #4
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	3b01      	subs	r3, #1
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc8e:	e023      	b.n	800bcd8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc90:	f7f6 fe74 	bl	800297c <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d803      	bhi.n	800bca8 <HAL_SPI_Receive+0x19c>
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bca6:	d102      	bne.n	800bcae <HAL_SPI_Receive+0x1a2>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d114      	bne.n	800bcd8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 faf0 	bl	800c294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e0af      	b.n	800be38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1b8      	bne.n	800bc56 <HAL_SPI_Receive+0x14a>
 800bce4:	e095      	b.n	800be12 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b07      	cmp	r3, #7
 800bcec:	f240 808b 	bls.w	800be06 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bcf0:	e03f      	b.n	800bd72 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d114      	bne.n	800bd2a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	8812      	ldrh	r2, [r2, #0]
 800bd08:	b292      	uxth	r2, r2
 800bd0a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd10:	1c9a      	adds	r2, r3, #2
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd28:	e023      	b.n	800bd72 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd2a:	f7f6 fe27 	bl	800297c <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d803      	bhi.n	800bd42 <HAL_SPI_Receive+0x236>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd40:	d102      	bne.n	800bd48 <HAL_SPI_Receive+0x23c>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d114      	bne.n	800bd72 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 faa3 	bl	800c294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e062      	b.n	800be38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1b9      	bne.n	800bcf2 <HAL_SPI_Receive+0x1e6>
 800bd7e:	e048      	b.n	800be12 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d117      	bne.n	800bdbe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdbc:	e023      	b.n	800be06 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdbe:	f7f6 fddd 	bl	800297c <HAL_GetTick>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d803      	bhi.n	800bdd6 <HAL_SPI_Receive+0x2ca>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdd4:	d102      	bne.n	800bddc <HAL_SPI_Receive+0x2d0>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d114      	bne.n	800be06 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 fa59 	bl	800c294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e018      	b.n	800be38 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1b6      	bne.n	800bd80 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f000 fa3e 	bl	800c294 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800be36:	7ffb      	ldrb	r3, [r7, #31]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	ffff0000 	.word	0xffff0000

0800be44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08e      	sub	sp, #56	; 0x38
 800be48:	af02      	add	r7, sp, #8
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3320      	adds	r3, #32
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3330      	adds	r3, #48	; 0x30
 800be66:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d101      	bne.n	800be76 <HAL_SPI_TransmitReceive+0x32>
 800be72:	2302      	movs	r3, #2
 800be74:	e209      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be7e:	f7f6 fd7d 	bl	800297c <HAL_GetTick>
 800be82:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800be84:	887b      	ldrh	r3, [r7, #2]
 800be86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800be88:	887b      	ldrh	r3, [r7, #2]
 800be8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be9a:	7efb      	ldrb	r3, [r7, #27]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d014      	beq.n	800beca <HAL_SPI_TransmitReceive+0x86>
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bea6:	d106      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800beac:	2b00      	cmp	r3, #0
 800beae:	d102      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800beb0:	7efb      	ldrb	r3, [r7, #27]
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d009      	beq.n	800beca <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800beb6:	2302      	movs	r3, #2
 800beb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bec8:	e1df      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d005      	beq.n	800bedc <HAL_SPI_TransmitReceive+0x98>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <HAL_SPI_TransmitReceive+0x98>
 800bed6:	887b      	ldrh	r3, [r7, #2]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d109      	bne.n	800bef0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800beea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800beee:	e1cc      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b04      	cmp	r3, #4
 800befa:	d003      	beq.n	800bf04 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2205      	movs	r2, #5
 800bf00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	887a      	ldrh	r2, [r7, #2]
 800bf16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	887a      	ldrh	r2, [r7, #2]
 800bf2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	887a      	ldrh	r2, [r7, #2]
 800bf34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685a      	ldr	r2, [r3, #4]
 800bf4a:	4b82      	ldr	r3, [pc, #520]	; (800c154 <HAL_SPI_TransmitReceive+0x310>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	8879      	ldrh	r1, [r7, #2]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	6812      	ldr	r2, [r2, #0]
 800bf54:	430b      	orrs	r3, r1
 800bf56:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f042 0201 	orr.w	r2, r2, #1
 800bf66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf70:	d107      	bne.n	800bf82 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b0f      	cmp	r3, #15
 800bf88:	d970      	bls.n	800c06c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf8a:	e068      	b.n	800c05e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d11a      	bne.n	800bfd0 <HAL_SPI_TransmitReceive+0x18c>
 800bf9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d017      	beq.n	800bfd0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfb0:	1d1a      	adds	r2, r3, #4
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfce:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	695a      	ldr	r2, [r3, #20]
 800bfd6:	f248 0308 	movw	r3, #32776	; 0x8008
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d01a      	beq.n	800c016 <HAL_SPI_TransmitReceive+0x1d2>
 800bfe0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d017      	beq.n	800c016 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bff0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b01      	subs	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c014:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c016:	f7f6 fcb1 	bl	800297c <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c022:	429a      	cmp	r2, r3
 800c024:	d803      	bhi.n	800c02e <HAL_SPI_TransmitReceive+0x1ea>
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c02c:	d102      	bne.n	800c034 <HAL_SPI_TransmitReceive+0x1f0>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	2b00      	cmp	r3, #0
 800c032:	d114      	bne.n	800c05e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 f92d 	bl	800c294 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e115      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c05e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c060:	2b00      	cmp	r3, #0
 800c062:	d193      	bne.n	800bf8c <HAL_SPI_TransmitReceive+0x148>
 800c064:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d190      	bne.n	800bf8c <HAL_SPI_TransmitReceive+0x148>
 800c06a:	e0e7      	b.n	800c23c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	2b07      	cmp	r3, #7
 800c072:	f240 80dd 	bls.w	800c230 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c076:	e066      	b.n	800c146 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b02      	cmp	r3, #2
 800c084:	d119      	bne.n	800c0ba <HAL_SPI_TransmitReceive+0x276>
 800c086:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d016      	beq.n	800c0ba <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c090:	881a      	ldrh	r2, [r3, #0]
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c09a:	1c9a      	adds	r2, r3, #2
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d11a      	bne.n	800c0fe <HAL_SPI_TransmitReceive+0x2ba>
 800c0c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d017      	beq.n	800c0fe <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0d2:	6a3a      	ldr	r2, [r7, #32]
 800c0d4:	8812      	ldrh	r2, [r2, #0]
 800c0d6:	b292      	uxth	r2, r2
 800c0d8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0de:	1c9a      	adds	r2, r3, #2
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0fe:	f7f6 fc3d 	bl	800297c <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d803      	bhi.n	800c116 <HAL_SPI_TransmitReceive+0x2d2>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c114:	d102      	bne.n	800c11c <HAL_SPI_TransmitReceive+0x2d8>
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d114      	bne.n	800c146 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f8b9 	bl	800c294 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e0a1      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d195      	bne.n	800c078 <HAL_SPI_TransmitReceive+0x234>
 800c14c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d192      	bne.n	800c078 <HAL_SPI_TransmitReceive+0x234>
 800c152:	e073      	b.n	800c23c <HAL_SPI_TransmitReceive+0x3f8>
 800c154:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b02      	cmp	r3, #2
 800c164:	d11b      	bne.n	800c19e <HAL_SPI_TransmitReceive+0x35a>
 800c166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d018      	beq.n	800c19e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3320      	adds	r3, #32
 800c176:	7812      	ldrb	r2, [r2, #0]
 800c178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	3b01      	subs	r3, #1
 800c18e:	b29a      	uxth	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c19c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d11d      	bne.n	800c1e8 <HAL_SPI_TransmitReceive+0x3a4>
 800c1ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d01a      	beq.n	800c1e8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1be:	7812      	ldrb	r2, [r2, #0]
 800c1c0:	b2d2      	uxtb	r2, r2
 800c1c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1e8:	f7f6 fbc8 	bl	800297c <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d803      	bhi.n	800c200 <HAL_SPI_TransmitReceive+0x3bc>
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1fe:	d102      	bne.n	800c206 <HAL_SPI_TransmitReceive+0x3c2>
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	2b00      	cmp	r3, #0
 800c204:	d114      	bne.n	800c230 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 f844 	bl	800c294 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e02c      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c232:	2b00      	cmp	r3, #0
 800c234:	d190      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x314>
 800c236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d18d      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	2200      	movs	r2, #0
 800c244:	2108      	movs	r1, #8
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 f8c4 	bl	800c3d4 <SPI_WaitOnFlagUntilTimeout>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d007      	beq.n	800c262 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c258:	f043 0220 	orr.w	r2, r3, #32
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f816 	bl	800c294 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e001      	b.n	800c28a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3730      	adds	r7, #48	; 0x30
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop

0800c294 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	699a      	ldr	r2, [r3, #24]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f042 0208 	orr.w	r2, r2, #8
 800c2b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	699a      	ldr	r2, [r3, #24]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f042 0210 	orr.w	r2, r2, #16
 800c2c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f022 0201 	bic.w	r2, r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6919      	ldr	r1, [r3, #16]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4b3c      	ldr	r3, [pc, #240]	; (800c3d0 <SPI_CloseTransfer+0x13c>)
 800c2e0:	400b      	ands	r3, r1
 800c2e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689a      	ldr	r2, [r3, #8]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c2f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d014      	beq.n	800c32a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00f      	beq.n	800c32a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699a      	ldr	r2, [r3, #24]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f042 0220 	orr.w	r2, r2, #32
 800c328:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b03      	cmp	r3, #3
 800c334:	d014      	beq.n	800c360 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00f      	beq.n	800c360 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c346:	f043 0204 	orr.w	r2, r3, #4
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	699a      	ldr	r2, [r3, #24]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c35e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00f      	beq.n	800c38a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c370:	f043 0201 	orr.w	r2, r3, #1
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	699a      	ldr	r2, [r3, #24]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c388:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00f      	beq.n	800c3b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c39a:	f043 0208 	orr.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	699a      	ldr	r2, [r3, #24]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c3c4:	bf00      	nop
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	fffffc90 	.word	0xfffffc90

0800c3d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	603b      	str	r3, [r7, #0]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c3e4:	e010      	b.n	800c408 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3e6:	f7f6 fac9 	bl	800297c <HAL_GetTick>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d803      	bhi.n	800c3fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3fc:	d102      	bne.n	800c404 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e00f      	b.n	800c428 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	695a      	ldr	r2, [r3, #20]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	4013      	ands	r3, r2
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	429a      	cmp	r2, r3
 800c416:	bf0c      	ite	eq
 800c418:	2301      	moveq	r3, #1
 800c41a:	2300      	movne	r3, #0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	461a      	mov	r2, r3
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	429a      	cmp	r2, r3
 800c424:	d0df      	beq.n	800c3e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43c:	095b      	lsrs	r3, r3, #5
 800c43e:	3301      	adds	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	3301      	adds	r3, #1
 800c448:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	3307      	adds	r3, #7
 800c44e:	08db      	lsrs	r3, r3, #3
 800c450:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	fb02 f303 	mul.w	r3, r2, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
	...

0800c468 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d109      	bne.n	800c490 <HAL_TIM_OC_Start_IT+0x28>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b01      	cmp	r3, #1
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	e03c      	b.n	800c50a <HAL_TIM_OC_Start_IT+0xa2>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b04      	cmp	r3, #4
 800c494:	d109      	bne.n	800c4aa <HAL_TIM_OC_Start_IT+0x42>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	bf14      	ite	ne
 800c4a2:	2301      	movne	r3, #1
 800c4a4:	2300      	moveq	r3, #0
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	e02f      	b.n	800c50a <HAL_TIM_OC_Start_IT+0xa2>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d109      	bne.n	800c4c4 <HAL_TIM_OC_Start_IT+0x5c>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	bf14      	ite	ne
 800c4bc:	2301      	movne	r3, #1
 800c4be:	2300      	moveq	r3, #0
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	e022      	b.n	800c50a <HAL_TIM_OC_Start_IT+0xa2>
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b0c      	cmp	r3, #12
 800c4c8:	d109      	bne.n	800c4de <HAL_TIM_OC_Start_IT+0x76>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	bf14      	ite	ne
 800c4d6:	2301      	movne	r3, #1
 800c4d8:	2300      	moveq	r3, #0
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	e015      	b.n	800c50a <HAL_TIM_OC_Start_IT+0xa2>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b10      	cmp	r3, #16
 800c4e2:	d109      	bne.n	800c4f8 <HAL_TIM_OC_Start_IT+0x90>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	bf14      	ite	ne
 800c4f0:	2301      	movne	r3, #1
 800c4f2:	2300      	moveq	r3, #0
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	e008      	b.n	800c50a <HAL_TIM_OC_Start_IT+0xa2>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b01      	cmp	r3, #1
 800c502:	bf14      	ite	ne
 800c504:	2301      	movne	r3, #1
 800c506:	2300      	moveq	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e0ec      	b.n	800c6ec <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <HAL_TIM_OC_Start_IT+0xba>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c520:	e023      	b.n	800c56a <HAL_TIM_OC_Start_IT+0x102>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b04      	cmp	r3, #4
 800c526:	d104      	bne.n	800c532 <HAL_TIM_OC_Start_IT+0xca>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c530:	e01b      	b.n	800c56a <HAL_TIM_OC_Start_IT+0x102>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b08      	cmp	r3, #8
 800c536:	d104      	bne.n	800c542 <HAL_TIM_OC_Start_IT+0xda>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c540:	e013      	b.n	800c56a <HAL_TIM_OC_Start_IT+0x102>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b0c      	cmp	r3, #12
 800c546:	d104      	bne.n	800c552 <HAL_TIM_OC_Start_IT+0xea>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2202      	movs	r2, #2
 800c54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c550:	e00b      	b.n	800c56a <HAL_TIM_OC_Start_IT+0x102>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b10      	cmp	r3, #16
 800c556:	d104      	bne.n	800c562 <HAL_TIM_OC_Start_IT+0xfa>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c560:	e003      	b.n	800c56a <HAL_TIM_OC_Start_IT+0x102>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2202      	movs	r2, #2
 800c566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b0c      	cmp	r3, #12
 800c56e:	d841      	bhi.n	800c5f4 <HAL_TIM_OC_Start_IT+0x18c>
 800c570:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <HAL_TIM_OC_Start_IT+0x110>)
 800c572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c576:	bf00      	nop
 800c578:	0800c5ad 	.word	0x0800c5ad
 800c57c:	0800c5f5 	.word	0x0800c5f5
 800c580:	0800c5f5 	.word	0x0800c5f5
 800c584:	0800c5f5 	.word	0x0800c5f5
 800c588:	0800c5bf 	.word	0x0800c5bf
 800c58c:	0800c5f5 	.word	0x0800c5f5
 800c590:	0800c5f5 	.word	0x0800c5f5
 800c594:	0800c5f5 	.word	0x0800c5f5
 800c598:	0800c5d1 	.word	0x0800c5d1
 800c59c:	0800c5f5 	.word	0x0800c5f5
 800c5a0:	0800c5f5 	.word	0x0800c5f5
 800c5a4:	0800c5f5 	.word	0x0800c5f5
 800c5a8:	0800c5e3 	.word	0x0800c5e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68da      	ldr	r2, [r3, #12]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f042 0202 	orr.w	r2, r2, #2
 800c5ba:	60da      	str	r2, [r3, #12]
      break;
 800c5bc:	e01d      	b.n	800c5fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f042 0204 	orr.w	r2, r2, #4
 800c5cc:	60da      	str	r2, [r3, #12]
      break;
 800c5ce:	e014      	b.n	800c5fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f042 0208 	orr.w	r2, r2, #8
 800c5de:	60da      	str	r2, [r3, #12]
      break;
 800c5e0:	e00b      	b.n	800c5fa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68da      	ldr	r2, [r3, #12]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0210 	orr.w	r2, r2, #16
 800c5f0:	60da      	str	r2, [r3, #12]
      break;
 800c5f2:	e002      	b.n	800c5fa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d174      	bne.n	800c6ea <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2201      	movs	r2, #1
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 fea9 	bl	800d360 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a38      	ldr	r2, [pc, #224]	; (800c6f4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d013      	beq.n	800c640 <HAL_TIM_OC_Start_IT+0x1d8>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a36      	ldr	r2, [pc, #216]	; (800c6f8 <HAL_TIM_OC_Start_IT+0x290>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00e      	beq.n	800c640 <HAL_TIM_OC_Start_IT+0x1d8>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a35      	ldr	r2, [pc, #212]	; (800c6fc <HAL_TIM_OC_Start_IT+0x294>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d009      	beq.n	800c640 <HAL_TIM_OC_Start_IT+0x1d8>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a33      	ldr	r2, [pc, #204]	; (800c700 <HAL_TIM_OC_Start_IT+0x298>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d004      	beq.n	800c640 <HAL_TIM_OC_Start_IT+0x1d8>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a32      	ldr	r2, [pc, #200]	; (800c704 <HAL_TIM_OC_Start_IT+0x29c>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d101      	bne.n	800c644 <HAL_TIM_OC_Start_IT+0x1dc>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <HAL_TIM_OC_Start_IT+0x1de>
 800c644:	2300      	movs	r3, #0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d007      	beq.n	800c65a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a25      	ldr	r2, [pc, #148]	; (800c6f4 <HAL_TIM_OC_Start_IT+0x28c>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d022      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66c:	d01d      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a25      	ldr	r2, [pc, #148]	; (800c708 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d018      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a23      	ldr	r2, [pc, #140]	; (800c70c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d013      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a22      	ldr	r2, [pc, #136]	; (800c710 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00e      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a19      	ldr	r2, [pc, #100]	; (800c6f8 <HAL_TIM_OC_Start_IT+0x290>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d009      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a1e      	ldr	r2, [pc, #120]	; (800c714 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d004      	beq.n	800c6aa <HAL_TIM_OC_Start_IT+0x242>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a15      	ldr	r2, [pc, #84]	; (800c6fc <HAL_TIM_OC_Start_IT+0x294>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d115      	bne.n	800c6d6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	4b19      	ldr	r3, [pc, #100]	; (800c718 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b06      	cmp	r3, #6
 800c6ba:	d015      	beq.n	800c6e8 <HAL_TIM_OC_Start_IT+0x280>
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6c2:	d011      	beq.n	800c6e8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f042 0201 	orr.w	r2, r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d4:	e008      	b.n	800c6e8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f042 0201 	orr.w	r2, r2, #1
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	e000      	b.n	800c6ea <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	40010400 	.word	0x40010400
 800c6fc:	40014000 	.word	0x40014000
 800c700:	40014400 	.word	0x40014400
 800c704:	40014800 	.word	0x40014800
 800c708:	40000400 	.word	0x40000400
 800c70c:	40000800 	.word	0x40000800
 800c710:	40000c00 	.word	0x40000c00
 800c714:	40001800 	.word	0x40001800
 800c718:	00010007 	.word	0x00010007

0800c71c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e049      	b.n	800c7c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f5 fe38 	bl	80023b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3304      	adds	r3, #4
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f000 fa90 	bl	800cc80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d122      	bne.n	800c826 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	f003 0302 	and.w	r3, r3, #2
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d11b      	bne.n	800c826 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f06f 0202 	mvn.w	r2, #2
 800c7f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	f003 0303 	and.w	r3, r3, #3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fa19 	bl	800cc44 <HAL_TIM_IC_CaptureCallback>
 800c812:	e005      	b.n	800c820 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7f3 fef7 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fa1c 	bl	800cc58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	f003 0304 	and.w	r3, r3, #4
 800c830:	2b04      	cmp	r3, #4
 800c832:	d122      	bne.n	800c87a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f003 0304 	and.w	r3, r3, #4
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d11b      	bne.n	800c87a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f06f 0204 	mvn.w	r2, #4
 800c84a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2202      	movs	r2, #2
 800c850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f9ef 	bl	800cc44 <HAL_TIM_IC_CaptureCallback>
 800c866:	e005      	b.n	800c874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7f3 fecd 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f9f2 	bl	800cc58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	f003 0308 	and.w	r3, r3, #8
 800c884:	2b08      	cmp	r3, #8
 800c886:	d122      	bne.n	800c8ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	f003 0308 	and.w	r3, r3, #8
 800c892:	2b08      	cmp	r3, #8
 800c894:	d11b      	bne.n	800c8ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f06f 0208 	mvn.w	r2, #8
 800c89e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2204      	movs	r2, #4
 800c8a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f9c5 	bl	800cc44 <HAL_TIM_IC_CaptureCallback>
 800c8ba:	e005      	b.n	800c8c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7f3 fea3 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f9c8 	bl	800cc58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	f003 0310 	and.w	r3, r3, #16
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	d122      	bne.n	800c922 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f003 0310 	and.w	r3, r3, #16
 800c8e6:	2b10      	cmp	r3, #16
 800c8e8:	d11b      	bne.n	800c922 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f06f 0210 	mvn.w	r2, #16
 800c8f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2208      	movs	r2, #8
 800c8f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f99b 	bl	800cc44 <HAL_TIM_IC_CaptureCallback>
 800c90e:	e005      	b.n	800c91c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7f3 fe79 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f99e 	bl	800cc58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d10e      	bne.n	800c94e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d107      	bne.n	800c94e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f06f 0201 	mvn.w	r2, #1
 800c946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f971 	bl	800cc30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c958:	2b80      	cmp	r3, #128	; 0x80
 800c95a:	d10e      	bne.n	800c97a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c966:	2b80      	cmp	r3, #128	; 0x80
 800c968:	d107      	bne.n	800c97a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fe2f 	bl	800d5d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c988:	d10e      	bne.n	800c9a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c994:	2b80      	cmp	r3, #128	; 0x80
 800c996:	d107      	bne.n	800c9a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fe22 	bl	800d5ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b2:	2b40      	cmp	r3, #64	; 0x40
 800c9b4:	d10e      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c0:	2b40      	cmp	r3, #64	; 0x40
 800c9c2:	d107      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f94c 	bl	800cc6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0320 	and.w	r3, r3, #32
 800c9de:	2b20      	cmp	r3, #32
 800c9e0:	d10e      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f003 0320 	and.w	r3, r3, #32
 800c9ec:	2b20      	cmp	r3, #32
 800c9ee:	d107      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f06f 0220 	mvn.w	r2, #32
 800c9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fde2 	bl	800d5c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca00:	bf00      	nop
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d101      	bne.n	800ca26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca22:	2302      	movs	r3, #2
 800ca24:	e0ff      	b.n	800cc26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b14      	cmp	r3, #20
 800ca32:	f200 80f0 	bhi.w	800cc16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca36:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3c:	0800ca91 	.word	0x0800ca91
 800ca40:	0800cc17 	.word	0x0800cc17
 800ca44:	0800cc17 	.word	0x0800cc17
 800ca48:	0800cc17 	.word	0x0800cc17
 800ca4c:	0800cad1 	.word	0x0800cad1
 800ca50:	0800cc17 	.word	0x0800cc17
 800ca54:	0800cc17 	.word	0x0800cc17
 800ca58:	0800cc17 	.word	0x0800cc17
 800ca5c:	0800cb13 	.word	0x0800cb13
 800ca60:	0800cc17 	.word	0x0800cc17
 800ca64:	0800cc17 	.word	0x0800cc17
 800ca68:	0800cc17 	.word	0x0800cc17
 800ca6c:	0800cb53 	.word	0x0800cb53
 800ca70:	0800cc17 	.word	0x0800cc17
 800ca74:	0800cc17 	.word	0x0800cc17
 800ca78:	0800cc17 	.word	0x0800cc17
 800ca7c:	0800cb95 	.word	0x0800cb95
 800ca80:	0800cc17 	.word	0x0800cc17
 800ca84:	0800cc17 	.word	0x0800cc17
 800ca88:	0800cc17 	.word	0x0800cc17
 800ca8c:	0800cbd5 	.word	0x0800cbd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f98c 	bl	800cdb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f042 0208 	orr.w	r2, r2, #8
 800caaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	699a      	ldr	r2, [r3, #24]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f022 0204 	bic.w	r2, r2, #4
 800caba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6999      	ldr	r1, [r3, #24]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	691a      	ldr	r2, [r3, #16]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	430a      	orrs	r2, r1
 800cacc:	619a      	str	r2, [r3, #24]
      break;
 800cace:	e0a5      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68b9      	ldr	r1, [r7, #8]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f9fc 	bl	800ced4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	699a      	ldr	r2, [r3, #24]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800caea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	699a      	ldr	r2, [r3, #24]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cafa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	6999      	ldr	r1, [r3, #24]
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	021a      	lsls	r2, r3, #8
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	619a      	str	r2, [r3, #24]
      break;
 800cb10:	e084      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 fa65 	bl	800cfe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69da      	ldr	r2, [r3, #28]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f042 0208 	orr.w	r2, r2, #8
 800cb2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69da      	ldr	r2, [r3, #28]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f022 0204 	bic.w	r2, r2, #4
 800cb3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	69d9      	ldr	r1, [r3, #28]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	691a      	ldr	r2, [r3, #16]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	61da      	str	r2, [r3, #28]
      break;
 800cb50:	e064      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68b9      	ldr	r1, [r7, #8]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 facd 	bl	800d0f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	69da      	ldr	r2, [r3, #28]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69da      	ldr	r2, [r3, #28]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	69d9      	ldr	r1, [r3, #28]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	021a      	lsls	r2, r3, #8
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	61da      	str	r2, [r3, #28]
      break;
 800cb92:	e043      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68b9      	ldr	r1, [r7, #8]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 fb16 	bl	800d1cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f042 0208 	orr.w	r2, r2, #8
 800cbae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f022 0204 	bic.w	r2, r2, #4
 800cbbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	691a      	ldr	r2, [r3, #16]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	430a      	orrs	r2, r1
 800cbd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbd2:	e023      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68b9      	ldr	r1, [r7, #8]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 fb5a 	bl	800d294 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	021a      	lsls	r2, r3, #8
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	430a      	orrs	r2, r1
 800cc12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc14:	e002      	b.n	800cc1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	75fb      	strb	r3, [r7, #23]
      break;
 800cc1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop

0800cc30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a40      	ldr	r2, [pc, #256]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d013      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9e:	d00f      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a3d      	ldr	r2, [pc, #244]	; (800cd98 <TIM_Base_SetConfig+0x118>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d00b      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a3c      	ldr	r2, [pc, #240]	; (800cd9c <TIM_Base_SetConfig+0x11c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d007      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a3b      	ldr	r2, [pc, #236]	; (800cda0 <TIM_Base_SetConfig+0x120>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a3a      	ldr	r2, [pc, #232]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d108      	bne.n	800ccd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a2f      	ldr	r2, [pc, #188]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d01f      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce0:	d01b      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a2c      	ldr	r2, [pc, #176]	; (800cd98 <TIM_Base_SetConfig+0x118>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d017      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a2b      	ldr	r2, [pc, #172]	; (800cd9c <TIM_Base_SetConfig+0x11c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d013      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a2a      	ldr	r2, [pc, #168]	; (800cda0 <TIM_Base_SetConfig+0x120>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d00f      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a29      	ldr	r2, [pc, #164]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d00b      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a28      	ldr	r2, [pc, #160]	; (800cda8 <TIM_Base_SetConfig+0x128>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d007      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a27      	ldr	r2, [pc, #156]	; (800cdac <TIM_Base_SetConfig+0x12c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d003      	beq.n	800cd1a <TIM_Base_SetConfig+0x9a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a26      	ldr	r2, [pc, #152]	; (800cdb0 <TIM_Base_SetConfig+0x130>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d108      	bne.n	800cd2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	689a      	ldr	r2, [r3, #8]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a10      	ldr	r2, [pc, #64]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d00f      	beq.n	800cd78 <TIM_Base_SetConfig+0xf8>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a12      	ldr	r2, [pc, #72]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00b      	beq.n	800cd78 <TIM_Base_SetConfig+0xf8>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a11      	ldr	r2, [pc, #68]	; (800cda8 <TIM_Base_SetConfig+0x128>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <TIM_Base_SetConfig+0xf8>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a10      	ldr	r2, [pc, #64]	; (800cdac <TIM_Base_SetConfig+0x12c>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_Base_SetConfig+0xf8>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a0f      	ldr	r2, [pc, #60]	; (800cdb0 <TIM_Base_SetConfig+0x130>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d103      	bne.n	800cd80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	615a      	str	r2, [r3, #20]
}
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40000400 	.word	0x40000400
 800cd9c:	40000800 	.word	0x40000800
 800cda0:	40000c00 	.word	0x40000c00
 800cda4:	40010400 	.word	0x40010400
 800cda8:	40014000 	.word	0x40014000
 800cdac:	40014400 	.word	0x40014400
 800cdb0:	40014800 	.word	0x40014800

0800cdb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	f023 0201 	bic.w	r2, r3, #1
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	4b37      	ldr	r3, [pc, #220]	; (800cebc <TIM_OC1_SetConfig+0x108>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f023 0302 	bic.w	r3, r3, #2
 800cdfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a2d      	ldr	r2, [pc, #180]	; (800cec0 <TIM_OC1_SetConfig+0x10c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00f      	beq.n	800ce30 <TIM_OC1_SetConfig+0x7c>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a2c      	ldr	r2, [pc, #176]	; (800cec4 <TIM_OC1_SetConfig+0x110>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d00b      	beq.n	800ce30 <TIM_OC1_SetConfig+0x7c>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a2b      	ldr	r2, [pc, #172]	; (800cec8 <TIM_OC1_SetConfig+0x114>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d007      	beq.n	800ce30 <TIM_OC1_SetConfig+0x7c>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a2a      	ldr	r2, [pc, #168]	; (800cecc <TIM_OC1_SetConfig+0x118>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d003      	beq.n	800ce30 <TIM_OC1_SetConfig+0x7c>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a29      	ldr	r2, [pc, #164]	; (800ced0 <TIM_OC1_SetConfig+0x11c>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d10c      	bne.n	800ce4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f023 0308 	bic.w	r3, r3, #8
 800ce36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	f023 0304 	bic.w	r3, r3, #4
 800ce48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4a1c      	ldr	r2, [pc, #112]	; (800cec0 <TIM_OC1_SetConfig+0x10c>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d00f      	beq.n	800ce72 <TIM_OC1_SetConfig+0xbe>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4a1b      	ldr	r2, [pc, #108]	; (800cec4 <TIM_OC1_SetConfig+0x110>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d00b      	beq.n	800ce72 <TIM_OC1_SetConfig+0xbe>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a1a      	ldr	r2, [pc, #104]	; (800cec8 <TIM_OC1_SetConfig+0x114>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d007      	beq.n	800ce72 <TIM_OC1_SetConfig+0xbe>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a19      	ldr	r2, [pc, #100]	; (800cecc <TIM_OC1_SetConfig+0x118>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d003      	beq.n	800ce72 <TIM_OC1_SetConfig+0xbe>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a18      	ldr	r2, [pc, #96]	; (800ced0 <TIM_OC1_SetConfig+0x11c>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d111      	bne.n	800ce96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	693a      	ldr	r2, [r7, #16]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	621a      	str	r2, [r3, #32]
}
 800ceb0:	bf00      	nop
 800ceb2:	371c      	adds	r7, #28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	fffeff8f 	.word	0xfffeff8f
 800cec0:	40010000 	.word	0x40010000
 800cec4:	40010400 	.word	0x40010400
 800cec8:	40014000 	.word	0x40014000
 800cecc:	40014400 	.word	0x40014400
 800ced0:	40014800 	.word	0x40014800

0800ced4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	f023 0210 	bic.w	r2, r3, #16
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	4b34      	ldr	r3, [pc, #208]	; (800cfd0 <TIM_OC2_SetConfig+0xfc>)
 800cf00:	4013      	ands	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	021b      	lsls	r3, r3, #8
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	f023 0320 	bic.w	r3, r3, #32
 800cf1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	011b      	lsls	r3, r3, #4
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a29      	ldr	r2, [pc, #164]	; (800cfd4 <TIM_OC2_SetConfig+0x100>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d003      	beq.n	800cf3c <TIM_OC2_SetConfig+0x68>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a28      	ldr	r2, [pc, #160]	; (800cfd8 <TIM_OC2_SetConfig+0x104>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d10d      	bne.n	800cf58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	011b      	lsls	r3, r3, #4
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a1e      	ldr	r2, [pc, #120]	; (800cfd4 <TIM_OC2_SetConfig+0x100>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d00f      	beq.n	800cf80 <TIM_OC2_SetConfig+0xac>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a1d      	ldr	r2, [pc, #116]	; (800cfd8 <TIM_OC2_SetConfig+0x104>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d00b      	beq.n	800cf80 <TIM_OC2_SetConfig+0xac>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a1c      	ldr	r2, [pc, #112]	; (800cfdc <TIM_OC2_SetConfig+0x108>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d007      	beq.n	800cf80 <TIM_OC2_SetConfig+0xac>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4a1b      	ldr	r2, [pc, #108]	; (800cfe0 <TIM_OC2_SetConfig+0x10c>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d003      	beq.n	800cf80 <TIM_OC2_SetConfig+0xac>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a1a      	ldr	r2, [pc, #104]	; (800cfe4 <TIM_OC2_SetConfig+0x110>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d113      	bne.n	800cfa8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	685a      	ldr	r2, [r3, #4]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	621a      	str	r2, [r3, #32]
}
 800cfc2:	bf00      	nop
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	feff8fff 	.word	0xfeff8fff
 800cfd4:	40010000 	.word	0x40010000
 800cfd8:	40010400 	.word	0x40010400
 800cfdc:	40014000 	.word	0x40014000
 800cfe0:	40014400 	.word	0x40014400
 800cfe4:	40014800 	.word	0x40014800

0800cfe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	69db      	ldr	r3, [r3, #28]
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	4b33      	ldr	r3, [pc, #204]	; (800d0e0 <TIM_OC3_SetConfig+0xf8>)
 800d014:	4013      	ands	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0303 	bic.w	r3, r3, #3
 800d01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	4313      	orrs	r3, r2
 800d028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	021b      	lsls	r3, r3, #8
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a28      	ldr	r2, [pc, #160]	; (800d0e4 <TIM_OC3_SetConfig+0xfc>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d003      	beq.n	800d04e <TIM_OC3_SetConfig+0x66>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a27      	ldr	r2, [pc, #156]	; (800d0e8 <TIM_OC3_SetConfig+0x100>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d10d      	bne.n	800d06a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	021b      	lsls	r3, r3, #8
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	4313      	orrs	r3, r2
 800d060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a1d      	ldr	r2, [pc, #116]	; (800d0e4 <TIM_OC3_SetConfig+0xfc>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00f      	beq.n	800d092 <TIM_OC3_SetConfig+0xaa>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a1c      	ldr	r2, [pc, #112]	; (800d0e8 <TIM_OC3_SetConfig+0x100>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00b      	beq.n	800d092 <TIM_OC3_SetConfig+0xaa>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a1b      	ldr	r2, [pc, #108]	; (800d0ec <TIM_OC3_SetConfig+0x104>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d007      	beq.n	800d092 <TIM_OC3_SetConfig+0xaa>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a1a      	ldr	r2, [pc, #104]	; (800d0f0 <TIM_OC3_SetConfig+0x108>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d003      	beq.n	800d092 <TIM_OC3_SetConfig+0xaa>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a19      	ldr	r2, [pc, #100]	; (800d0f4 <TIM_OC3_SetConfig+0x10c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d113      	bne.n	800d0ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	011b      	lsls	r3, r3, #4
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	011b      	lsls	r3, r3, #4
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	685a      	ldr	r2, [r3, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	621a      	str	r2, [r3, #32]
}
 800d0d4:	bf00      	nop
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	fffeff8f 	.word	0xfffeff8f
 800d0e4:	40010000 	.word	0x40010000
 800d0e8:	40010400 	.word	0x40010400
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	40014400 	.word	0x40014400
 800d0f4:	40014800 	.word	0x40014800

0800d0f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4b24      	ldr	r3, [pc, #144]	; (800d1b4 <TIM_OC4_SetConfig+0xbc>)
 800d124:	4013      	ands	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	031b      	lsls	r3, r3, #12
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a19      	ldr	r2, [pc, #100]	; (800d1b8 <TIM_OC4_SetConfig+0xc0>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d00f      	beq.n	800d178 <TIM_OC4_SetConfig+0x80>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a18      	ldr	r2, [pc, #96]	; (800d1bc <TIM_OC4_SetConfig+0xc4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d00b      	beq.n	800d178 <TIM_OC4_SetConfig+0x80>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a17      	ldr	r2, [pc, #92]	; (800d1c0 <TIM_OC4_SetConfig+0xc8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d007      	beq.n	800d178 <TIM_OC4_SetConfig+0x80>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a16      	ldr	r2, [pc, #88]	; (800d1c4 <TIM_OC4_SetConfig+0xcc>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d003      	beq.n	800d178 <TIM_OC4_SetConfig+0x80>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a15      	ldr	r2, [pc, #84]	; (800d1c8 <TIM_OC4_SetConfig+0xd0>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d109      	bne.n	800d18c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d17e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	695b      	ldr	r3, [r3, #20]
 800d184:	019b      	lsls	r3, r3, #6
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	621a      	str	r2, [r3, #32]
}
 800d1a6:	bf00      	nop
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	feff8fff 	.word	0xfeff8fff
 800d1b8:	40010000 	.word	0x40010000
 800d1bc:	40010400 	.word	0x40010400
 800d1c0:	40014000 	.word	0x40014000
 800d1c4:	40014400 	.word	0x40014400
 800d1c8:	40014800 	.word	0x40014800

0800d1cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4b21      	ldr	r3, [pc, #132]	; (800d27c <TIM_OC5_SetConfig+0xb0>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	4313      	orrs	r3, r2
 800d204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d20c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	041b      	lsls	r3, r3, #16
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	4313      	orrs	r3, r2
 800d218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a18      	ldr	r2, [pc, #96]	; (800d280 <TIM_OC5_SetConfig+0xb4>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00f      	beq.n	800d242 <TIM_OC5_SetConfig+0x76>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a17      	ldr	r2, [pc, #92]	; (800d284 <TIM_OC5_SetConfig+0xb8>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d00b      	beq.n	800d242 <TIM_OC5_SetConfig+0x76>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a16      	ldr	r2, [pc, #88]	; (800d288 <TIM_OC5_SetConfig+0xbc>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d007      	beq.n	800d242 <TIM_OC5_SetConfig+0x76>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a15      	ldr	r2, [pc, #84]	; (800d28c <TIM_OC5_SetConfig+0xc0>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d003      	beq.n	800d242 <TIM_OC5_SetConfig+0x76>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a14      	ldr	r2, [pc, #80]	; (800d290 <TIM_OC5_SetConfig+0xc4>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d109      	bne.n	800d256 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	021b      	lsls	r3, r3, #8
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	4313      	orrs	r3, r2
 800d254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	685a      	ldr	r2, [r3, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	621a      	str	r2, [r3, #32]
}
 800d270:	bf00      	nop
 800d272:	371c      	adds	r7, #28
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	fffeff8f 	.word	0xfffeff8f
 800d280:	40010000 	.word	0x40010000
 800d284:	40010400 	.word	0x40010400
 800d288:	40014000 	.word	0x40014000
 800d28c:	40014400 	.word	0x40014400
 800d290:	40014800 	.word	0x40014800

0800d294 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4b22      	ldr	r3, [pc, #136]	; (800d348 <TIM_OC6_SetConfig+0xb4>)
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	021b      	lsls	r3, r3, #8
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d2d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	051b      	lsls	r3, r3, #20
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a19      	ldr	r2, [pc, #100]	; (800d34c <TIM_OC6_SetConfig+0xb8>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d00f      	beq.n	800d30c <TIM_OC6_SetConfig+0x78>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a18      	ldr	r2, [pc, #96]	; (800d350 <TIM_OC6_SetConfig+0xbc>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d00b      	beq.n	800d30c <TIM_OC6_SetConfig+0x78>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a17      	ldr	r2, [pc, #92]	; (800d354 <TIM_OC6_SetConfig+0xc0>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d007      	beq.n	800d30c <TIM_OC6_SetConfig+0x78>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a16      	ldr	r2, [pc, #88]	; (800d358 <TIM_OC6_SetConfig+0xc4>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d003      	beq.n	800d30c <TIM_OC6_SetConfig+0x78>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a15      	ldr	r2, [pc, #84]	; (800d35c <TIM_OC6_SetConfig+0xc8>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d109      	bne.n	800d320 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	029b      	lsls	r3, r3, #10
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	621a      	str	r2, [r3, #32]
}
 800d33a:	bf00      	nop
 800d33c:	371c      	adds	r7, #28
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	feff8fff 	.word	0xfeff8fff
 800d34c:	40010000 	.word	0x40010000
 800d350:	40010400 	.word	0x40010400
 800d354:	40014000 	.word	0x40014000
 800d358:	40014400 	.word	0x40014400
 800d35c:	40014800 	.word	0x40014800

0800d360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d360:	b480      	push	{r7}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f003 031f 	and.w	r3, r3, #31
 800d372:	2201      	movs	r2, #1
 800d374:	fa02 f303 	lsl.w	r3, r2, r3
 800d378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6a1a      	ldr	r2, [r3, #32]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	43db      	mvns	r3, r3
 800d382:	401a      	ands	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6a1a      	ldr	r2, [r3, #32]
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f003 031f 	and.w	r3, r3, #31
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	fa01 f303 	lsl.w	r3, r1, r3
 800d398:	431a      	orrs	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	621a      	str	r2, [r3, #32]
}
 800d39e:	bf00      	nop
 800d3a0:	371c      	adds	r7, #28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
	...

0800d3ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d101      	bne.n	800d3c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e06d      	b.n	800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a30      	ldr	r2, [pc, #192]	; (800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d004      	beq.n	800d3f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a2f      	ldr	r2, [pc, #188]	; (800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d108      	bne.n	800d40a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d3fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	4313      	orrs	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a20      	ldr	r2, [pc, #128]	; (800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d022      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d436:	d01d      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a1d      	ldr	r2, [pc, #116]	; (800d4b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d018      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a1c      	ldr	r2, [pc, #112]	; (800d4b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d013      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1a      	ldr	r2, [pc, #104]	; (800d4bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d00e      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a15      	ldr	r2, [pc, #84]	; (800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d009      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a16      	ldr	r2, [pc, #88]	; (800d4c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d004      	beq.n	800d474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a15      	ldr	r2, [pc, #84]	; (800d4c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d10c      	bne.n	800d48e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d47a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	4313      	orrs	r3, r2
 800d484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	40010000 	.word	0x40010000
 800d4b0:	40010400 	.word	0x40010400
 800d4b4:	40000400 	.word	0x40000400
 800d4b8:	40000800 	.word	0x40000800
 800d4bc:	40000c00 	.word	0x40000c00
 800d4c0:	40001800 	.word	0x40001800
 800d4c4:	40014000 	.word	0x40014000

0800d4c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d101      	bne.n	800d4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	e065      	b.n	800d5b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	4313      	orrs	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	4313      	orrs	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	041b      	lsls	r3, r3, #16
 800d55a:	4313      	orrs	r3, r2
 800d55c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a16      	ldr	r2, [pc, #88]	; (800d5bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d004      	beq.n	800d572 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a14      	ldr	r2, [pc, #80]	; (800d5c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d115      	bne.n	800d59e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	051b      	lsls	r3, r3, #20
 800d57e:	4313      	orrs	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	40010000 	.word	0x40010000
 800d5c0:	40010400 	.word	0x40010400

0800d5c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e042      	b.n	800d698 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7f4 ff89 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2224      	movs	r2, #36	; 0x24
 800d62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f022 0201 	bic.w	r2, r2, #1
 800d640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fcd6 	bl	800dff4 <UART_SetConfig>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d101      	bne.n	800d652 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e022      	b.n	800d698 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d656:	2b00      	cmp	r3, #0
 800d658:	d002      	beq.n	800d660 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f001 fa32 	bl	800eac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d66e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	689a      	ldr	r2, [r3, #8]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d67e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0201 	orr.w	r2, r2, #1
 800d68e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f001 fab9 	bl	800ec08 <UART_CheckIdleState>
 800d696:	4603      	mov	r3, r0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b08a      	sub	sp, #40	; 0x28
 800d6a4:	af02      	add	r7, sp, #8
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	603b      	str	r3, [r7, #0]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6b6:	2b20      	cmp	r3, #32
 800d6b8:	f040 8083 	bne.w	800d7c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <HAL_UART_Transmit+0x28>
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e07b      	b.n	800d7c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d101      	bne.n	800d6da <HAL_UART_Transmit+0x3a>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e074      	b.n	800d7c4 <HAL_UART_Transmit+0x124>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2221      	movs	r2, #33	; 0x21
 800d6ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6f2:	f7f5 f943 	bl	800297c <HAL_GetTick>
 800d6f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	88fa      	ldrh	r2, [r7, #6]
 800d6fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	88fa      	ldrh	r2, [r7, #6]
 800d704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d710:	d108      	bne.n	800d724 <HAL_UART_Transmit+0x84>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d104      	bne.n	800d724 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	61bb      	str	r3, [r7, #24]
 800d722:	e003      	b.n	800d72c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d734:	e02c      	b.n	800d790 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2200      	movs	r2, #0
 800d73e:	2180      	movs	r1, #128	; 0x80
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f001 faac 	bl	800ec9e <UART_WaitOnFlagUntilTimeout>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e039      	b.n	800d7c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	3302      	adds	r3, #2
 800d76a:	61bb      	str	r3, [r7, #24]
 800d76c:	e007      	b.n	800d77e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	781a      	ldrb	r2, [r3, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	3301      	adds	r3, #1
 800d77c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d796:	b29b      	uxth	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1cc      	bne.n	800d736 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2140      	movs	r1, #64	; 0x40
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f001 fa79 	bl	800ec9e <UART_WaitOnFlagUntilTimeout>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e006      	b.n	800d7c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e000      	b.n	800d7c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d7c2:	2302      	movs	r3, #2
  }
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3720      	adds	r7, #32
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08a      	sub	sp, #40	; 0x28
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	d142      	bne.n	800d86a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <HAL_UART_Receive_IT+0x24>
 800d7ea:	88fb      	ldrh	r3, [r7, #6]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d101      	bne.n	800d7f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e03b      	b.n	800d86c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d101      	bne.n	800d802 <HAL_UART_Receive_IT+0x36>
 800d7fe:	2302      	movs	r3, #2
 800d800:	e034      	b.n	800d86c <HAL_UART_Receive_IT+0xa0>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a17      	ldr	r2, [pc, #92]	; (800d874 <HAL_UART_Receive_IT+0xa8>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d01f      	beq.n	800d85a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d018      	beq.n	800d85a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	e853 3f00 	ldrex	r3, [r3]
 800d834:	613b      	str	r3, [r7, #16]
   return(result);
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d83c:	627b      	str	r3, [r7, #36]	; 0x24
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	623b      	str	r3, [r7, #32]
 800d848:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84a:	69f9      	ldr	r1, [r7, #28]
 800d84c:	6a3a      	ldr	r2, [r7, #32]
 800d84e:	e841 2300 	strex	r3, r2, [r1]
 800d852:	61bb      	str	r3, [r7, #24]
   return(result);
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1e6      	bne.n	800d828 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d85a:	88fb      	ldrh	r3, [r7, #6]
 800d85c:	461a      	mov	r2, r3
 800d85e:	68b9      	ldr	r1, [r7, #8]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f001 fae5 	bl	800ee30 <UART_Start_Receive_IT>
 800d866:	4603      	mov	r3, r0
 800d868:	e000      	b.n	800d86c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d86a:	2302      	movs	r3, #2
  }
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3728      	adds	r7, #40	; 0x28
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	58000c00 	.word	0x58000c00

0800d878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b0ba      	sub	sp, #232	; 0xe8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d89e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d8a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d8ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d11b      	bne.n	800d8ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b8:	f003 0320 	and.w	r3, r3, #32
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d015      	beq.n	800d8ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8c4:	f003 0320 	and.w	r3, r3, #32
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d105      	bne.n	800d8d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 835a 	beq.w	800df96 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	4798      	blx	r3
      }
      return;
 800d8ea:	e354      	b.n	800df96 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d8ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 811f 	beq.w	800db34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d8f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8fa:	4b8b      	ldr	r3, [pc, #556]	; (800db28 <HAL_UART_IRQHandler+0x2b0>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d906:	4b89      	ldr	r3, [pc, #548]	; (800db2c <HAL_UART_IRQHandler+0x2b4>)
 800d908:	4013      	ands	r3, r2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 8112 	beq.w	800db34 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d011      	beq.n	800d940 <HAL_UART_IRQHandler+0xc8>
 800d91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2201      	movs	r2, #1
 800d92e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d936:	f043 0201 	orr.w	r2, r3, #1
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d944:	f003 0302 	and.w	r3, r3, #2
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d011      	beq.n	800d970 <HAL_UART_IRQHandler+0xf8>
 800d94c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2202      	movs	r2, #2
 800d95e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d966:	f043 0204 	orr.w	r2, r3, #4
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d011      	beq.n	800d9a0 <HAL_UART_IRQHandler+0x128>
 800d97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d980:	f003 0301 	and.w	r3, r3, #1
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00b      	beq.n	800d9a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2204      	movs	r2, #4
 800d98e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d996:	f043 0202 	orr.w	r2, r3, #2
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9a4:	f003 0308 	and.w	r3, r3, #8
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d017      	beq.n	800d9dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9b0:	f003 0320 	and.w	r3, r3, #32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d105      	bne.n	800d9c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d9b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9bc:	4b5a      	ldr	r3, [pc, #360]	; (800db28 <HAL_UART_IRQHandler+0x2b0>)
 800d9be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00b      	beq.n	800d9dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9d2:	f043 0208 	orr.w	r2, r3, #8
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d012      	beq.n	800da0e <HAL_UART_IRQHandler+0x196>
 800d9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00c      	beq.n	800da0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da04:	f043 0220 	orr.w	r2, r3, #32
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 82c0 	beq.w	800df9a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800da1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da1e:	f003 0320 	and.w	r3, r3, #32
 800da22:	2b00      	cmp	r3, #0
 800da24:	d013      	beq.n	800da4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da2a:	f003 0320 	and.w	r3, r3, #32
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d105      	bne.n	800da3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d005      	beq.n	800da72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800da66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d04f      	beq.n	800db12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f001 fb06 	bl	800f084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da82:	2b40      	cmp	r3, #64	; 0x40
 800da84:	d141      	bne.n	800db0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3308      	adds	r3, #8
 800da8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da94:	e853 3f00 	ldrex	r3, [r3]
 800da98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800da9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800daa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	3308      	adds	r3, #8
 800daae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dabe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dac2:	e841 2300 	strex	r3, r2, [r1]
 800dac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800daca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1d9      	bne.n	800da86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d013      	beq.n	800db02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dade:	4a14      	ldr	r2, [pc, #80]	; (800db30 <HAL_UART_IRQHandler+0x2b8>)
 800dae0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f8 f88a 	bl	8005c00 <HAL_DMA_Abort_IT>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d017      	beq.n	800db22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dafc:	4610      	mov	r0, r2
 800dafe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db00:	e00f      	b.n	800db22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fa60 	bl	800dfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db08:	e00b      	b.n	800db22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fa5c 	bl	800dfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db10:	e007      	b.n	800db22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa58 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800db20:	e23b      	b.n	800df9a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db22:	bf00      	nop
    return;
 800db24:	e239      	b.n	800df9a <HAL_UART_IRQHandler+0x722>
 800db26:	bf00      	nop
 800db28:	10000001 	.word	0x10000001
 800db2c:	04000120 	.word	0x04000120
 800db30:	0800f151 	.word	0x0800f151

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db38:	2b01      	cmp	r3, #1
 800db3a:	f040 81ce 	bne.w	800deda <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800db3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db42:	f003 0310 	and.w	r3, r3, #16
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 81c7 	beq.w	800deda <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800db4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db50:	f003 0310 	and.w	r3, r3, #16
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 81c0 	beq.w	800deda <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2210      	movs	r2, #16
 800db60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6c:	2b40      	cmp	r3, #64	; 0x40
 800db6e:	f040 813b 	bne.w	800dde8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a8b      	ldr	r2, [pc, #556]	; (800dda8 <HAL_UART_IRQHandler+0x530>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d059      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a89      	ldr	r2, [pc, #548]	; (800ddac <HAL_UART_IRQHandler+0x534>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d053      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a87      	ldr	r2, [pc, #540]	; (800ddb0 <HAL_UART_IRQHandler+0x538>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d04d      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a85      	ldr	r2, [pc, #532]	; (800ddb4 <HAL_UART_IRQHandler+0x53c>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d047      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a83      	ldr	r2, [pc, #524]	; (800ddb8 <HAL_UART_IRQHandler+0x540>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d041      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a81      	ldr	r2, [pc, #516]	; (800ddbc <HAL_UART_IRQHandler+0x544>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d03b      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a7f      	ldr	r2, [pc, #508]	; (800ddc0 <HAL_UART_IRQHandler+0x548>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d035      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a7d      	ldr	r2, [pc, #500]	; (800ddc4 <HAL_UART_IRQHandler+0x54c>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d02f      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a7b      	ldr	r2, [pc, #492]	; (800ddc8 <HAL_UART_IRQHandler+0x550>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d029      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a79      	ldr	r2, [pc, #484]	; (800ddcc <HAL_UART_IRQHandler+0x554>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d023      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a77      	ldr	r2, [pc, #476]	; (800ddd0 <HAL_UART_IRQHandler+0x558>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d01d      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a75      	ldr	r2, [pc, #468]	; (800ddd4 <HAL_UART_IRQHandler+0x55c>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d017      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a73      	ldr	r2, [pc, #460]	; (800ddd8 <HAL_UART_IRQHandler+0x560>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d011      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a71      	ldr	r2, [pc, #452]	; (800dddc <HAL_UART_IRQHandler+0x564>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00b      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a6f      	ldr	r2, [pc, #444]	; (800dde0 <HAL_UART_IRQHandler+0x568>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d005      	beq.n	800dc32 <HAL_UART_IRQHandler+0x3ba>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a6d      	ldr	r2, [pc, #436]	; (800dde4 <HAL_UART_IRQHandler+0x56c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d105      	bne.n	800dc3e <HAL_UART_IRQHandler+0x3c6>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	e004      	b.n	800dc48 <HAL_UART_IRQHandler+0x3d0>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 81a4 	beq.w	800df9e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc60:	429a      	cmp	r2, r3
 800dc62:	f080 819c 	bcs.w	800df9e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc7a:	f000 8086 	beq.w	800dd8a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc8a:	e853 3f00 	ldrex	r3, [r3]
 800dc8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dcac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dcb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dcb8:	e841 2300 	strex	r3, r2, [r1]
 800dcbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dcc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1da      	bne.n	800dc7e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3308      	adds	r3, #8
 800dcce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcd2:	e853 3f00 	ldrex	r3, [r3]
 800dcd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dcd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcda:	f023 0301 	bic.w	r3, r3, #1
 800dcde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	3308      	adds	r3, #8
 800dce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dcec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dcf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dcf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcf8:	e841 2300 	strex	r3, r2, [r1]
 800dcfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1e1      	bne.n	800dcc8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3308      	adds	r3, #8
 800dd0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd0e:	e853 3f00 	ldrex	r3, [r3]
 800dd12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3308      	adds	r3, #8
 800dd24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dd28:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd30:	e841 2300 	strex	r3, r2, [r1]
 800dd34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e3      	bne.n	800dd04 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd52:	e853 3f00 	ldrex	r3, [r3]
 800dd56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd5a:	f023 0310 	bic.w	r3, r3, #16
 800dd5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd74:	e841 2300 	strex	r3, r2, [r1]
 800dd78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e4      	bne.n	800dd4a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7f7 fc1d 	bl	80055c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f91c 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dda4:	e0fb      	b.n	800df9e <HAL_UART_IRQHandler+0x726>
 800dda6:	bf00      	nop
 800dda8:	40020010 	.word	0x40020010
 800ddac:	40020028 	.word	0x40020028
 800ddb0:	40020040 	.word	0x40020040
 800ddb4:	40020058 	.word	0x40020058
 800ddb8:	40020070 	.word	0x40020070
 800ddbc:	40020088 	.word	0x40020088
 800ddc0:	400200a0 	.word	0x400200a0
 800ddc4:	400200b8 	.word	0x400200b8
 800ddc8:	40020410 	.word	0x40020410
 800ddcc:	40020428 	.word	0x40020428
 800ddd0:	40020440 	.word	0x40020440
 800ddd4:	40020458 	.word	0x40020458
 800ddd8:	40020470 	.word	0x40020470
 800dddc:	40020488 	.word	0x40020488
 800dde0:	400204a0 	.word	0x400204a0
 800dde4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de02:	b29b      	uxth	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 80cc 	beq.w	800dfa2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800de0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80c7 	beq.w	800dfa2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de36:	647b      	str	r3, [r7, #68]	; 0x44
 800de38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de3e:	e841 2300 	strex	r3, r2, [r1]
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1e4      	bne.n	800de14 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3308      	adds	r3, #8
 800de50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	e853 3f00 	ldrex	r3, [r3]
 800de58:	623b      	str	r3, [r7, #32]
   return(result);
 800de5a:	6a3a      	ldr	r2, [r7, #32]
 800de5c:	4b54      	ldr	r3, [pc, #336]	; (800dfb0 <HAL_UART_IRQHandler+0x738>)
 800de5e:	4013      	ands	r3, r2
 800de60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3308      	adds	r3, #8
 800de6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de6e:	633a      	str	r2, [r7, #48]	; 0x30
 800de70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de76:	e841 2300 	strex	r3, r2, [r1]
 800de7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1e3      	bne.n	800de4a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2220      	movs	r2, #32
 800de86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	e853 3f00 	ldrex	r3, [r3]
 800dea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f023 0310 	bic.w	r3, r3, #16
 800deaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	69b9      	ldr	r1, [r7, #24]
 800debe:	69fa      	ldr	r2, [r7, #28]
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	617b      	str	r3, [r7, #20]
   return(result);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e4      	bne.n	800de96 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800decc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f882 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ded8:	e063      	b.n	800dfa2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800deda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00e      	beq.n	800df04 <HAL_UART_IRQHandler+0x68c>
 800dee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800deee:	2b00      	cmp	r3, #0
 800def0:	d008      	beq.n	800df04 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800defa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f001 fdc5 	bl	800fa8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df02:	e051      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800df04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d014      	beq.n	800df3a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800df10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d105      	bne.n	800df28 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800df1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d008      	beq.n	800df3a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d03a      	beq.n	800dfa6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	4798      	blx	r3
    }
    return;
 800df38:	e035      	b.n	800dfa6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df42:	2b00      	cmp	r3, #0
 800df44:	d009      	beq.n	800df5a <HAL_UART_IRQHandler+0x6e2>
 800df46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f001 f912 	bl	800f17c <UART_EndTransmit_IT>
    return;
 800df58:	e026      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df62:	2b00      	cmp	r3, #0
 800df64:	d009      	beq.n	800df7a <HAL_UART_IRQHandler+0x702>
 800df66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d003      	beq.n	800df7a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 fd9e 	bl	800fab4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df78:	e016      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df82:	2b00      	cmp	r3, #0
 800df84:	d010      	beq.n	800dfa8 <HAL_UART_IRQHandler+0x730>
 800df86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	da0c      	bge.n	800dfa8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fd86 	bl	800faa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df94:	e008      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
      return;
 800df96:	bf00      	nop
 800df98:	e006      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
    return;
 800df9a:	bf00      	nop
 800df9c:	e004      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
      return;
 800df9e:	bf00      	nop
 800dfa0:	e002      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
      return;
 800dfa2:	bf00      	nop
 800dfa4:	e000      	b.n	800dfa8 <HAL_UART_IRQHandler+0x730>
    return;
 800dfa6:	bf00      	nop
  }
}
 800dfa8:	37e8      	adds	r7, #232	; 0xe8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	effffffe 	.word	0xeffffffe

0800dfb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dff8:	b092      	sub	sp, #72	; 0x48
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	689a      	ldr	r2, [r3, #8]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	431a      	orrs	r2, r3
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	431a      	orrs	r2, r3
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	4313      	orrs	r3, r2
 800e01a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	4bbe      	ldr	r3, [pc, #760]	; (800e31c <UART_SetConfig+0x328>)
 800e024:	4013      	ands	r3, r2
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	6812      	ldr	r2, [r2, #0]
 800e02a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e02c:	430b      	orrs	r3, r1
 800e02e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	68da      	ldr	r2, [r3, #12]
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	430a      	orrs	r2, r1
 800e044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4ab3      	ldr	r2, [pc, #716]	; (800e320 <UART_SetConfig+0x32c>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d004      	beq.n	800e060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	6a1b      	ldr	r3, [r3, #32]
 800e05a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e05c:	4313      	orrs	r3, r2
 800e05e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	4baf      	ldr	r3, [pc, #700]	; (800e324 <UART_SetConfig+0x330>)
 800e068:	4013      	ands	r3, r2
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	6812      	ldr	r2, [r2, #0]
 800e06e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e070:	430b      	orrs	r3, r1
 800e072:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07a:	f023 010f 	bic.w	r1, r3, #15
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	430a      	orrs	r2, r1
 800e088:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4aa6      	ldr	r2, [pc, #664]	; (800e328 <UART_SetConfig+0x334>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d177      	bne.n	800e184 <UART_SetConfig+0x190>
 800e094:	4ba5      	ldr	r3, [pc, #660]	; (800e32c <UART_SetConfig+0x338>)
 800e096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e09c:	2b28      	cmp	r3, #40	; 0x28
 800e09e:	d86d      	bhi.n	800e17c <UART_SetConfig+0x188>
 800e0a0:	a201      	add	r2, pc, #4	; (adr r2, 800e0a8 <UART_SetConfig+0xb4>)
 800e0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a6:	bf00      	nop
 800e0a8:	0800e14d 	.word	0x0800e14d
 800e0ac:	0800e17d 	.word	0x0800e17d
 800e0b0:	0800e17d 	.word	0x0800e17d
 800e0b4:	0800e17d 	.word	0x0800e17d
 800e0b8:	0800e17d 	.word	0x0800e17d
 800e0bc:	0800e17d 	.word	0x0800e17d
 800e0c0:	0800e17d 	.word	0x0800e17d
 800e0c4:	0800e17d 	.word	0x0800e17d
 800e0c8:	0800e155 	.word	0x0800e155
 800e0cc:	0800e17d 	.word	0x0800e17d
 800e0d0:	0800e17d 	.word	0x0800e17d
 800e0d4:	0800e17d 	.word	0x0800e17d
 800e0d8:	0800e17d 	.word	0x0800e17d
 800e0dc:	0800e17d 	.word	0x0800e17d
 800e0e0:	0800e17d 	.word	0x0800e17d
 800e0e4:	0800e17d 	.word	0x0800e17d
 800e0e8:	0800e15d 	.word	0x0800e15d
 800e0ec:	0800e17d 	.word	0x0800e17d
 800e0f0:	0800e17d 	.word	0x0800e17d
 800e0f4:	0800e17d 	.word	0x0800e17d
 800e0f8:	0800e17d 	.word	0x0800e17d
 800e0fc:	0800e17d 	.word	0x0800e17d
 800e100:	0800e17d 	.word	0x0800e17d
 800e104:	0800e17d 	.word	0x0800e17d
 800e108:	0800e165 	.word	0x0800e165
 800e10c:	0800e17d 	.word	0x0800e17d
 800e110:	0800e17d 	.word	0x0800e17d
 800e114:	0800e17d 	.word	0x0800e17d
 800e118:	0800e17d 	.word	0x0800e17d
 800e11c:	0800e17d 	.word	0x0800e17d
 800e120:	0800e17d 	.word	0x0800e17d
 800e124:	0800e17d 	.word	0x0800e17d
 800e128:	0800e16d 	.word	0x0800e16d
 800e12c:	0800e17d 	.word	0x0800e17d
 800e130:	0800e17d 	.word	0x0800e17d
 800e134:	0800e17d 	.word	0x0800e17d
 800e138:	0800e17d 	.word	0x0800e17d
 800e13c:	0800e17d 	.word	0x0800e17d
 800e140:	0800e17d 	.word	0x0800e17d
 800e144:	0800e17d 	.word	0x0800e17d
 800e148:	0800e175 	.word	0x0800e175
 800e14c:	2301      	movs	r3, #1
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e222      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e154:	2304      	movs	r3, #4
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e21e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e15c:	2308      	movs	r3, #8
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e21a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e164:	2310      	movs	r3, #16
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e216      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e16c:	2320      	movs	r3, #32
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e212      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e174:	2340      	movs	r3, #64	; 0x40
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e20e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e17c:	2380      	movs	r3, #128	; 0x80
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e20a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a69      	ldr	r2, [pc, #420]	; (800e330 <UART_SetConfig+0x33c>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d130      	bne.n	800e1f0 <UART_SetConfig+0x1fc>
 800e18e:	4b67      	ldr	r3, [pc, #412]	; (800e32c <UART_SetConfig+0x338>)
 800e190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b05      	cmp	r3, #5
 800e198:	d826      	bhi.n	800e1e8 <UART_SetConfig+0x1f4>
 800e19a:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <UART_SetConfig+0x1ac>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1b9 	.word	0x0800e1b9
 800e1a4:	0800e1c1 	.word	0x0800e1c1
 800e1a8:	0800e1c9 	.word	0x0800e1c9
 800e1ac:	0800e1d1 	.word	0x0800e1d1
 800e1b0:	0800e1d9 	.word	0x0800e1d9
 800e1b4:	0800e1e1 	.word	0x0800e1e1
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e1ec      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e1e8      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e1e4      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1d0:	2310      	movs	r3, #16
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e1e0      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1d8:	2320      	movs	r3, #32
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e1dc      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1e0:	2340      	movs	r3, #64	; 0x40
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e1d8      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1e8:	2380      	movs	r3, #128	; 0x80
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e1d4      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a4f      	ldr	r2, [pc, #316]	; (800e334 <UART_SetConfig+0x340>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d130      	bne.n	800e25c <UART_SetConfig+0x268>
 800e1fa:	4b4c      	ldr	r3, [pc, #304]	; (800e32c <UART_SetConfig+0x338>)
 800e1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fe:	f003 0307 	and.w	r3, r3, #7
 800e202:	2b05      	cmp	r3, #5
 800e204:	d826      	bhi.n	800e254 <UART_SetConfig+0x260>
 800e206:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <UART_SetConfig+0x218>)
 800e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20c:	0800e225 	.word	0x0800e225
 800e210:	0800e22d 	.word	0x0800e22d
 800e214:	0800e235 	.word	0x0800e235
 800e218:	0800e23d 	.word	0x0800e23d
 800e21c:	0800e245 	.word	0x0800e245
 800e220:	0800e24d 	.word	0x0800e24d
 800e224:	2300      	movs	r3, #0
 800e226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22a:	e1b6      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e22c:	2304      	movs	r3, #4
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e1b2      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e234:	2308      	movs	r3, #8
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e1ae      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e23c:	2310      	movs	r3, #16
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e1aa      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e244:	2320      	movs	r3, #32
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e1a6      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e24c:	2340      	movs	r3, #64	; 0x40
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e1a2      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e254:	2380      	movs	r3, #128	; 0x80
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e19e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a35      	ldr	r2, [pc, #212]	; (800e338 <UART_SetConfig+0x344>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d130      	bne.n	800e2c8 <UART_SetConfig+0x2d4>
 800e266:	4b31      	ldr	r3, [pc, #196]	; (800e32c <UART_SetConfig+0x338>)
 800e268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e26a:	f003 0307 	and.w	r3, r3, #7
 800e26e:	2b05      	cmp	r3, #5
 800e270:	d826      	bhi.n	800e2c0 <UART_SetConfig+0x2cc>
 800e272:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <UART_SetConfig+0x284>)
 800e274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e278:	0800e291 	.word	0x0800e291
 800e27c:	0800e299 	.word	0x0800e299
 800e280:	0800e2a1 	.word	0x0800e2a1
 800e284:	0800e2a9 	.word	0x0800e2a9
 800e288:	0800e2b1 	.word	0x0800e2b1
 800e28c:	0800e2b9 	.word	0x0800e2b9
 800e290:	2300      	movs	r3, #0
 800e292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e296:	e180      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e298:	2304      	movs	r3, #4
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e17c      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2a0:	2308      	movs	r3, #8
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e178      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2a8:	2310      	movs	r3, #16
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e174      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2b0:	2320      	movs	r3, #32
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e170      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2b8:	2340      	movs	r3, #64	; 0x40
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e16c      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2c0:	2380      	movs	r3, #128	; 0x80
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e168      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1b      	ldr	r2, [pc, #108]	; (800e33c <UART_SetConfig+0x348>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d142      	bne.n	800e358 <UART_SetConfig+0x364>
 800e2d2:	4b16      	ldr	r3, [pc, #88]	; (800e32c <UART_SetConfig+0x338>)
 800e2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b05      	cmp	r3, #5
 800e2dc:	d838      	bhi.n	800e350 <UART_SetConfig+0x35c>
 800e2de:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <UART_SetConfig+0x2f0>)
 800e2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e4:	0800e2fd 	.word	0x0800e2fd
 800e2e8:	0800e305 	.word	0x0800e305
 800e2ec:	0800e30d 	.word	0x0800e30d
 800e2f0:	0800e315 	.word	0x0800e315
 800e2f4:	0800e341 	.word	0x0800e341
 800e2f8:	0800e349 	.word	0x0800e349
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e302:	e14a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e304:	2304      	movs	r3, #4
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e146      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e30c:	2308      	movs	r3, #8
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e142      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e314:	2310      	movs	r3, #16
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e13e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e31c:	cfff69f3 	.word	0xcfff69f3
 800e320:	58000c00 	.word	0x58000c00
 800e324:	11fff4ff 	.word	0x11fff4ff
 800e328:	40011000 	.word	0x40011000
 800e32c:	58024400 	.word	0x58024400
 800e330:	40004400 	.word	0x40004400
 800e334:	40004800 	.word	0x40004800
 800e338:	40004c00 	.word	0x40004c00
 800e33c:	40005000 	.word	0x40005000
 800e340:	2320      	movs	r3, #32
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e128      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e348:	2340      	movs	r3, #64	; 0x40
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e124      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e350:	2380      	movs	r3, #128	; 0x80
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e120      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4acb      	ldr	r2, [pc, #812]	; (800e68c <UART_SetConfig+0x698>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d176      	bne.n	800e450 <UART_SetConfig+0x45c>
 800e362:	4bcb      	ldr	r3, [pc, #812]	; (800e690 <UART_SetConfig+0x69c>)
 800e364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e36a:	2b28      	cmp	r3, #40	; 0x28
 800e36c:	d86c      	bhi.n	800e448 <UART_SetConfig+0x454>
 800e36e:	a201      	add	r2, pc, #4	; (adr r2, 800e374 <UART_SetConfig+0x380>)
 800e370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e374:	0800e419 	.word	0x0800e419
 800e378:	0800e449 	.word	0x0800e449
 800e37c:	0800e449 	.word	0x0800e449
 800e380:	0800e449 	.word	0x0800e449
 800e384:	0800e449 	.word	0x0800e449
 800e388:	0800e449 	.word	0x0800e449
 800e38c:	0800e449 	.word	0x0800e449
 800e390:	0800e449 	.word	0x0800e449
 800e394:	0800e421 	.word	0x0800e421
 800e398:	0800e449 	.word	0x0800e449
 800e39c:	0800e449 	.word	0x0800e449
 800e3a0:	0800e449 	.word	0x0800e449
 800e3a4:	0800e449 	.word	0x0800e449
 800e3a8:	0800e449 	.word	0x0800e449
 800e3ac:	0800e449 	.word	0x0800e449
 800e3b0:	0800e449 	.word	0x0800e449
 800e3b4:	0800e429 	.word	0x0800e429
 800e3b8:	0800e449 	.word	0x0800e449
 800e3bc:	0800e449 	.word	0x0800e449
 800e3c0:	0800e449 	.word	0x0800e449
 800e3c4:	0800e449 	.word	0x0800e449
 800e3c8:	0800e449 	.word	0x0800e449
 800e3cc:	0800e449 	.word	0x0800e449
 800e3d0:	0800e449 	.word	0x0800e449
 800e3d4:	0800e431 	.word	0x0800e431
 800e3d8:	0800e449 	.word	0x0800e449
 800e3dc:	0800e449 	.word	0x0800e449
 800e3e0:	0800e449 	.word	0x0800e449
 800e3e4:	0800e449 	.word	0x0800e449
 800e3e8:	0800e449 	.word	0x0800e449
 800e3ec:	0800e449 	.word	0x0800e449
 800e3f0:	0800e449 	.word	0x0800e449
 800e3f4:	0800e439 	.word	0x0800e439
 800e3f8:	0800e449 	.word	0x0800e449
 800e3fc:	0800e449 	.word	0x0800e449
 800e400:	0800e449 	.word	0x0800e449
 800e404:	0800e449 	.word	0x0800e449
 800e408:	0800e449 	.word	0x0800e449
 800e40c:	0800e449 	.word	0x0800e449
 800e410:	0800e449 	.word	0x0800e449
 800e414:	0800e441 	.word	0x0800e441
 800e418:	2301      	movs	r3, #1
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e0bc      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e420:	2304      	movs	r3, #4
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e0b8      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e428:	2308      	movs	r3, #8
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e0b4      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e430:	2310      	movs	r3, #16
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e0b0      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e438:	2320      	movs	r3, #32
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e0ac      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e440:	2340      	movs	r3, #64	; 0x40
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e0a8      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e448:	2380      	movs	r3, #128	; 0x80
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e0a4      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a8f      	ldr	r2, [pc, #572]	; (800e694 <UART_SetConfig+0x6a0>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d130      	bne.n	800e4bc <UART_SetConfig+0x4c8>
 800e45a:	4b8d      	ldr	r3, [pc, #564]	; (800e690 <UART_SetConfig+0x69c>)
 800e45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45e:	f003 0307 	and.w	r3, r3, #7
 800e462:	2b05      	cmp	r3, #5
 800e464:	d826      	bhi.n	800e4b4 <UART_SetConfig+0x4c0>
 800e466:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <UART_SetConfig+0x478>)
 800e468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46c:	0800e485 	.word	0x0800e485
 800e470:	0800e48d 	.word	0x0800e48d
 800e474:	0800e495 	.word	0x0800e495
 800e478:	0800e49d 	.word	0x0800e49d
 800e47c:	0800e4a5 	.word	0x0800e4a5
 800e480:	0800e4ad 	.word	0x0800e4ad
 800e484:	2300      	movs	r3, #0
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e086      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e48c:	2304      	movs	r3, #4
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e082      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e494:	2308      	movs	r3, #8
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e07e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e49c:	2310      	movs	r3, #16
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e07a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e4a4:	2320      	movs	r3, #32
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e076      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e4ac:	2340      	movs	r3, #64	; 0x40
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e072      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e4b4:	2380      	movs	r3, #128	; 0x80
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e06e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a75      	ldr	r2, [pc, #468]	; (800e698 <UART_SetConfig+0x6a4>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d130      	bne.n	800e528 <UART_SetConfig+0x534>
 800e4c6:	4b72      	ldr	r3, [pc, #456]	; (800e690 <UART_SetConfig+0x69c>)
 800e4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ca:	f003 0307 	and.w	r3, r3, #7
 800e4ce:	2b05      	cmp	r3, #5
 800e4d0:	d826      	bhi.n	800e520 <UART_SetConfig+0x52c>
 800e4d2:	a201      	add	r2, pc, #4	; (adr r2, 800e4d8 <UART_SetConfig+0x4e4>)
 800e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4f9 	.word	0x0800e4f9
 800e4e0:	0800e501 	.word	0x0800e501
 800e4e4:	0800e509 	.word	0x0800e509
 800e4e8:	0800e511 	.word	0x0800e511
 800e4ec:	0800e519 	.word	0x0800e519
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e050      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e04c      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e500:	2308      	movs	r3, #8
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e048      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e508:	2310      	movs	r3, #16
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e044      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e510:	2320      	movs	r3, #32
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e040      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e518:	2340      	movs	r3, #64	; 0x40
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e03c      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e520:	2380      	movs	r3, #128	; 0x80
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e038      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a5b      	ldr	r2, [pc, #364]	; (800e69c <UART_SetConfig+0x6a8>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d130      	bne.n	800e594 <UART_SetConfig+0x5a0>
 800e532:	4b57      	ldr	r3, [pc, #348]	; (800e690 <UART_SetConfig+0x69c>)
 800e534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	2b05      	cmp	r3, #5
 800e53c:	d826      	bhi.n	800e58c <UART_SetConfig+0x598>
 800e53e:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <UART_SetConfig+0x550>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800e55d 	.word	0x0800e55d
 800e548:	0800e565 	.word	0x0800e565
 800e54c:	0800e56d 	.word	0x0800e56d
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800e57d 	.word	0x0800e57d
 800e558:	0800e585 	.word	0x0800e585
 800e55c:	2302      	movs	r3, #2
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e01a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e564:	2304      	movs	r3, #4
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e016      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e56c:	2308      	movs	r3, #8
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e012      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e574:	2310      	movs	r3, #16
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e00e      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e57c:	2320      	movs	r3, #32
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e00a      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e584:	2340      	movs	r3, #64	; 0x40
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e006      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e58c:	2380      	movs	r3, #128	; 0x80
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e002      	b.n	800e59a <UART_SetConfig+0x5a6>
 800e594:	2380      	movs	r3, #128	; 0x80
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a3f      	ldr	r2, [pc, #252]	; (800e69c <UART_SetConfig+0x6a8>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	f040 80f8 	bne.w	800e796 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e5a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	dc46      	bgt.n	800e63c <UART_SetConfig+0x648>
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	f2c0 8082 	blt.w	800e6b8 <UART_SetConfig+0x6c4>
 800e5b4:	3b02      	subs	r3, #2
 800e5b6:	2b1e      	cmp	r3, #30
 800e5b8:	d87e      	bhi.n	800e6b8 <UART_SetConfig+0x6c4>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <UART_SetConfig+0x5cc>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e643 	.word	0x0800e643
 800e5c4:	0800e6b9 	.word	0x0800e6b9
 800e5c8:	0800e64b 	.word	0x0800e64b
 800e5cc:	0800e6b9 	.word	0x0800e6b9
 800e5d0:	0800e6b9 	.word	0x0800e6b9
 800e5d4:	0800e6b9 	.word	0x0800e6b9
 800e5d8:	0800e65b 	.word	0x0800e65b
 800e5dc:	0800e6b9 	.word	0x0800e6b9
 800e5e0:	0800e6b9 	.word	0x0800e6b9
 800e5e4:	0800e6b9 	.word	0x0800e6b9
 800e5e8:	0800e6b9 	.word	0x0800e6b9
 800e5ec:	0800e6b9 	.word	0x0800e6b9
 800e5f0:	0800e6b9 	.word	0x0800e6b9
 800e5f4:	0800e6b9 	.word	0x0800e6b9
 800e5f8:	0800e66b 	.word	0x0800e66b
 800e5fc:	0800e6b9 	.word	0x0800e6b9
 800e600:	0800e6b9 	.word	0x0800e6b9
 800e604:	0800e6b9 	.word	0x0800e6b9
 800e608:	0800e6b9 	.word	0x0800e6b9
 800e60c:	0800e6b9 	.word	0x0800e6b9
 800e610:	0800e6b9 	.word	0x0800e6b9
 800e614:	0800e6b9 	.word	0x0800e6b9
 800e618:	0800e6b9 	.word	0x0800e6b9
 800e61c:	0800e6b9 	.word	0x0800e6b9
 800e620:	0800e6b9 	.word	0x0800e6b9
 800e624:	0800e6b9 	.word	0x0800e6b9
 800e628:	0800e6b9 	.word	0x0800e6b9
 800e62c:	0800e6b9 	.word	0x0800e6b9
 800e630:	0800e6b9 	.word	0x0800e6b9
 800e634:	0800e6b9 	.word	0x0800e6b9
 800e638:	0800e6ab 	.word	0x0800e6ab
 800e63c:	2b40      	cmp	r3, #64	; 0x40
 800e63e:	d037      	beq.n	800e6b0 <UART_SetConfig+0x6bc>
 800e640:	e03a      	b.n	800e6b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e642:	f7fc fbe9 	bl	800ae18 <HAL_RCCEx_GetD3PCLK1Freq>
 800e646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e648:	e03c      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e64a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fc fbf8 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e658:	e034      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e65a:	f107 0318 	add.w	r3, r7, #24
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fc fd44 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e668:	e02c      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e66a:	4b09      	ldr	r3, [pc, #36]	; (800e690 <UART_SetConfig+0x69c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 0320 	and.w	r3, r3, #32
 800e672:	2b00      	cmp	r3, #0
 800e674:	d016      	beq.n	800e6a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e676:	4b06      	ldr	r3, [pc, #24]	; (800e690 <UART_SetConfig+0x69c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	08db      	lsrs	r3, r3, #3
 800e67c:	f003 0303 	and.w	r3, r3, #3
 800e680:	4a07      	ldr	r2, [pc, #28]	; (800e6a0 <UART_SetConfig+0x6ac>)
 800e682:	fa22 f303 	lsr.w	r3, r2, r3
 800e686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e688:	e01c      	b.n	800e6c4 <UART_SetConfig+0x6d0>
 800e68a:	bf00      	nop
 800e68c:	40011400 	.word	0x40011400
 800e690:	58024400 	.word	0x58024400
 800e694:	40007800 	.word	0x40007800
 800e698:	40007c00 	.word	0x40007c00
 800e69c:	58000c00 	.word	0x58000c00
 800e6a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e6a4:	4b9d      	ldr	r3, [pc, #628]	; (800e91c <UART_SetConfig+0x928>)
 800e6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6a8:	e00c      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e6aa:	4b9d      	ldr	r3, [pc, #628]	; (800e920 <UART_SetConfig+0x92c>)
 800e6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6ae:	e009      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6b6:	e005      	b.n	800e6c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e6c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f000 81de 	beq.w	800ea88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d0:	4a94      	ldr	r2, [pc, #592]	; (800e924 <UART_SetConfig+0x930>)
 800e6d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	685a      	ldr	r2, [r3, #4]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	4413      	add	r3, r2
 800e6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d305      	bcc.n	800e6fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e6f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d903      	bls.n	800e704 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e702:	e1c1      	b.n	800ea88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e706:	2200      	movs	r2, #0
 800e708:	60bb      	str	r3, [r7, #8]
 800e70a:	60fa      	str	r2, [r7, #12]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e710:	4a84      	ldr	r2, [pc, #528]	; (800e924 <UART_SetConfig+0x930>)
 800e712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e716:	b29b      	uxth	r3, r3
 800e718:	2200      	movs	r2, #0
 800e71a:	603b      	str	r3, [r7, #0]
 800e71c:	607a      	str	r2, [r7, #4]
 800e71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e726:	f7f1 fdd7 	bl	80002d8 <__aeabi_uldivmod>
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	4610      	mov	r0, r2
 800e730:	4619      	mov	r1, r3
 800e732:	f04f 0200 	mov.w	r2, #0
 800e736:	f04f 0300 	mov.w	r3, #0
 800e73a:	020b      	lsls	r3, r1, #8
 800e73c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e740:	0202      	lsls	r2, r0, #8
 800e742:	6979      	ldr	r1, [r7, #20]
 800e744:	6849      	ldr	r1, [r1, #4]
 800e746:	0849      	lsrs	r1, r1, #1
 800e748:	2000      	movs	r0, #0
 800e74a:	460c      	mov	r4, r1
 800e74c:	4605      	mov	r5, r0
 800e74e:	eb12 0804 	adds.w	r8, r2, r4
 800e752:	eb43 0905 	adc.w	r9, r3, r5
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	469a      	mov	sl, r3
 800e75e:	4693      	mov	fp, r2
 800e760:	4652      	mov	r2, sl
 800e762:	465b      	mov	r3, fp
 800e764:	4640      	mov	r0, r8
 800e766:	4649      	mov	r1, r9
 800e768:	f7f1 fdb6 	bl	80002d8 <__aeabi_uldivmod>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4613      	mov	r3, r2
 800e772:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e77a:	d308      	bcc.n	800e78e <UART_SetConfig+0x79a>
 800e77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e782:	d204      	bcs.n	800e78e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e78a:	60da      	str	r2, [r3, #12]
 800e78c:	e17c      	b.n	800ea88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e78e:	2301      	movs	r3, #1
 800e790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e794:	e178      	b.n	800ea88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	69db      	ldr	r3, [r3, #28]
 800e79a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e79e:	f040 80c5 	bne.w	800e92c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e7a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7a6:	2b20      	cmp	r3, #32
 800e7a8:	dc48      	bgt.n	800e83c <UART_SetConfig+0x848>
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	db7b      	blt.n	800e8a6 <UART_SetConfig+0x8b2>
 800e7ae:	2b20      	cmp	r3, #32
 800e7b0:	d879      	bhi.n	800e8a6 <UART_SetConfig+0x8b2>
 800e7b2:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <UART_SetConfig+0x7c4>)
 800e7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b8:	0800e843 	.word	0x0800e843
 800e7bc:	0800e84b 	.word	0x0800e84b
 800e7c0:	0800e8a7 	.word	0x0800e8a7
 800e7c4:	0800e8a7 	.word	0x0800e8a7
 800e7c8:	0800e853 	.word	0x0800e853
 800e7cc:	0800e8a7 	.word	0x0800e8a7
 800e7d0:	0800e8a7 	.word	0x0800e8a7
 800e7d4:	0800e8a7 	.word	0x0800e8a7
 800e7d8:	0800e863 	.word	0x0800e863
 800e7dc:	0800e8a7 	.word	0x0800e8a7
 800e7e0:	0800e8a7 	.word	0x0800e8a7
 800e7e4:	0800e8a7 	.word	0x0800e8a7
 800e7e8:	0800e8a7 	.word	0x0800e8a7
 800e7ec:	0800e8a7 	.word	0x0800e8a7
 800e7f0:	0800e8a7 	.word	0x0800e8a7
 800e7f4:	0800e8a7 	.word	0x0800e8a7
 800e7f8:	0800e873 	.word	0x0800e873
 800e7fc:	0800e8a7 	.word	0x0800e8a7
 800e800:	0800e8a7 	.word	0x0800e8a7
 800e804:	0800e8a7 	.word	0x0800e8a7
 800e808:	0800e8a7 	.word	0x0800e8a7
 800e80c:	0800e8a7 	.word	0x0800e8a7
 800e810:	0800e8a7 	.word	0x0800e8a7
 800e814:	0800e8a7 	.word	0x0800e8a7
 800e818:	0800e8a7 	.word	0x0800e8a7
 800e81c:	0800e8a7 	.word	0x0800e8a7
 800e820:	0800e8a7 	.word	0x0800e8a7
 800e824:	0800e8a7 	.word	0x0800e8a7
 800e828:	0800e8a7 	.word	0x0800e8a7
 800e82c:	0800e8a7 	.word	0x0800e8a7
 800e830:	0800e8a7 	.word	0x0800e8a7
 800e834:	0800e8a7 	.word	0x0800e8a7
 800e838:	0800e899 	.word	0x0800e899
 800e83c:	2b40      	cmp	r3, #64	; 0x40
 800e83e:	d02e      	beq.n	800e89e <UART_SetConfig+0x8aa>
 800e840:	e031      	b.n	800e8a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e842:	f7fa fea5 	bl	8009590 <HAL_RCC_GetPCLK1Freq>
 800e846:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e848:	e033      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e84a:	f7fa feb7 	bl	80095bc <HAL_RCC_GetPCLK2Freq>
 800e84e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e850:	e02f      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e856:	4618      	mov	r0, r3
 800e858:	f7fc faf4 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e860:	e027      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e862:	f107 0318 	add.w	r3, r7, #24
 800e866:	4618      	mov	r0, r3
 800e868:	f7fc fc40 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e870:	e01f      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e872:	4b2d      	ldr	r3, [pc, #180]	; (800e928 <UART_SetConfig+0x934>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d009      	beq.n	800e892 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e87e:	4b2a      	ldr	r3, [pc, #168]	; (800e928 <UART_SetConfig+0x934>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	08db      	lsrs	r3, r3, #3
 800e884:	f003 0303 	and.w	r3, r3, #3
 800e888:	4a24      	ldr	r2, [pc, #144]	; (800e91c <UART_SetConfig+0x928>)
 800e88a:	fa22 f303 	lsr.w	r3, r2, r3
 800e88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e890:	e00f      	b.n	800e8b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e892:	4b22      	ldr	r3, [pc, #136]	; (800e91c <UART_SetConfig+0x928>)
 800e894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e896:	e00c      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e898:	4b21      	ldr	r3, [pc, #132]	; (800e920 <UART_SetConfig+0x92c>)
 800e89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89c:	e009      	b.n	800e8b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e89e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a4:	e005      	b.n	800e8b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 80e7 	beq.w	800ea88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8be:	4a19      	ldr	r2, [pc, #100]	; (800e924 <UART_SetConfig+0x930>)
 800e8c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8cc:	005a      	lsls	r2, r3, #1
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	085b      	lsrs	r3, r3, #1
 800e8d4:	441a      	add	r2, r3
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e2:	2b0f      	cmp	r3, #15
 800e8e4:	d916      	bls.n	800e914 <UART_SetConfig+0x920>
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8ec:	d212      	bcs.n	800e914 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f023 030f 	bic.w	r3, r3, #15
 800e8f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	085b      	lsrs	r3, r3, #1
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	f003 0307 	and.w	r3, r3, #7
 800e902:	b29a      	uxth	r2, r3
 800e904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e906:	4313      	orrs	r3, r2
 800e908:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e910:	60da      	str	r2, [r3, #12]
 800e912:	e0b9      	b.n	800ea88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e91a:	e0b5      	b.n	800ea88 <UART_SetConfig+0xa94>
 800e91c:	03d09000 	.word	0x03d09000
 800e920:	003d0900 	.word	0x003d0900
 800e924:	0800fed0 	.word	0x0800fed0
 800e928:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e92c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e930:	2b20      	cmp	r3, #32
 800e932:	dc49      	bgt.n	800e9c8 <UART_SetConfig+0x9d4>
 800e934:	2b00      	cmp	r3, #0
 800e936:	db7c      	blt.n	800ea32 <UART_SetConfig+0xa3e>
 800e938:	2b20      	cmp	r3, #32
 800e93a:	d87a      	bhi.n	800ea32 <UART_SetConfig+0xa3e>
 800e93c:	a201      	add	r2, pc, #4	; (adr r2, 800e944 <UART_SetConfig+0x950>)
 800e93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e942:	bf00      	nop
 800e944:	0800e9cf 	.word	0x0800e9cf
 800e948:	0800e9d7 	.word	0x0800e9d7
 800e94c:	0800ea33 	.word	0x0800ea33
 800e950:	0800ea33 	.word	0x0800ea33
 800e954:	0800e9df 	.word	0x0800e9df
 800e958:	0800ea33 	.word	0x0800ea33
 800e95c:	0800ea33 	.word	0x0800ea33
 800e960:	0800ea33 	.word	0x0800ea33
 800e964:	0800e9ef 	.word	0x0800e9ef
 800e968:	0800ea33 	.word	0x0800ea33
 800e96c:	0800ea33 	.word	0x0800ea33
 800e970:	0800ea33 	.word	0x0800ea33
 800e974:	0800ea33 	.word	0x0800ea33
 800e978:	0800ea33 	.word	0x0800ea33
 800e97c:	0800ea33 	.word	0x0800ea33
 800e980:	0800ea33 	.word	0x0800ea33
 800e984:	0800e9ff 	.word	0x0800e9ff
 800e988:	0800ea33 	.word	0x0800ea33
 800e98c:	0800ea33 	.word	0x0800ea33
 800e990:	0800ea33 	.word	0x0800ea33
 800e994:	0800ea33 	.word	0x0800ea33
 800e998:	0800ea33 	.word	0x0800ea33
 800e99c:	0800ea33 	.word	0x0800ea33
 800e9a0:	0800ea33 	.word	0x0800ea33
 800e9a4:	0800ea33 	.word	0x0800ea33
 800e9a8:	0800ea33 	.word	0x0800ea33
 800e9ac:	0800ea33 	.word	0x0800ea33
 800e9b0:	0800ea33 	.word	0x0800ea33
 800e9b4:	0800ea33 	.word	0x0800ea33
 800e9b8:	0800ea33 	.word	0x0800ea33
 800e9bc:	0800ea33 	.word	0x0800ea33
 800e9c0:	0800ea33 	.word	0x0800ea33
 800e9c4:	0800ea25 	.word	0x0800ea25
 800e9c8:	2b40      	cmp	r3, #64	; 0x40
 800e9ca:	d02e      	beq.n	800ea2a <UART_SetConfig+0xa36>
 800e9cc:	e031      	b.n	800ea32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9ce:	f7fa fddf 	bl	8009590 <HAL_RCC_GetPCLK1Freq>
 800e9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9d4:	e033      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9d6:	f7fa fdf1 	bl	80095bc <HAL_RCC_GetPCLK2Freq>
 800e9da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9dc:	e02f      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fc fa2e 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ec:	e027      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9ee:	f107 0318 	add.w	r3, r7, #24
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fc fb7a 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9fc:	e01f      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9fe:	4b2d      	ldr	r3, [pc, #180]	; (800eab4 <UART_SetConfig+0xac0>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d009      	beq.n	800ea1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea0a:	4b2a      	ldr	r3, [pc, #168]	; (800eab4 <UART_SetConfig+0xac0>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	08db      	lsrs	r3, r3, #3
 800ea10:	f003 0303 	and.w	r3, r3, #3
 800ea14:	4a28      	ldr	r2, [pc, #160]	; (800eab8 <UART_SetConfig+0xac4>)
 800ea16:	fa22 f303 	lsr.w	r3, r2, r3
 800ea1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea1c:	e00f      	b.n	800ea3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ea1e:	4b26      	ldr	r3, [pc, #152]	; (800eab8 <UART_SetConfig+0xac4>)
 800ea20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea22:	e00c      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea24:	4b25      	ldr	r3, [pc, #148]	; (800eabc <UART_SetConfig+0xac8>)
 800ea26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea28:	e009      	b.n	800ea3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea30:	e005      	b.n	800ea3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ea32:	2300      	movs	r3, #0
 800ea34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea3c:	bf00      	nop
    }

    if (pclk != 0U)
 800ea3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d021      	beq.n	800ea88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	4a1d      	ldr	r2, [pc, #116]	; (800eac0 <UART_SetConfig+0xacc>)
 800ea4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	085b      	lsrs	r3, r3, #1
 800ea5c:	441a      	add	r2, r3
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	2b0f      	cmp	r3, #15
 800ea6c:	d909      	bls.n	800ea82 <UART_SetConfig+0xa8e>
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea74:	d205      	bcs.n	800ea82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	60da      	str	r2, [r3, #12]
 800ea80:	e002      	b.n	800ea88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800eaa4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3748      	adds	r7, #72	; 0x48
 800eaac:	46bd      	mov	sp, r7
 800eaae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eab2:	bf00      	nop
 800eab4:	58024400 	.word	0x58024400
 800eab8:	03d09000 	.word	0x03d09000
 800eabc:	003d0900 	.word	0x003d0900
 800eac0:	0800fed0 	.word	0x0800fed0

0800eac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00a      	beq.n	800eaee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	430a      	orrs	r2, r1
 800eaec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf2:	f003 0302 	and.w	r3, r3, #2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00a      	beq.n	800eb10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb14:	f003 0304 	and.w	r3, r3, #4
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00a      	beq.n	800eb32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	430a      	orrs	r2, r1
 800eb30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb36:	f003 0308 	and.w	r3, r3, #8
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00a      	beq.n	800eb54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	430a      	orrs	r2, r1
 800eb52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb58:	f003 0310 	and.w	r3, r3, #16
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00a      	beq.n	800eb76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	430a      	orrs	r2, r1
 800eb74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7a:	f003 0320 	and.w	r3, r3, #32
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00a      	beq.n	800eb98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	430a      	orrs	r2, r1
 800eb96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d01a      	beq.n	800ebda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	430a      	orrs	r2, r1
 800ebb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebc2:	d10a      	bne.n	800ebda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00a      	beq.n	800ebfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	430a      	orrs	r2, r1
 800ebfa:	605a      	str	r2, [r3, #4]
  }
}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec18:	f7f3 feb0 	bl	800297c <HAL_GetTick>
 800ec1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 0308 	and.w	r3, r3, #8
 800ec28:	2b08      	cmp	r3, #8
 800ec2a:	d10e      	bne.n	800ec4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f82f 	bl	800ec9e <UART_WaitOnFlagUntilTimeout>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec46:	2303      	movs	r3, #3
 800ec48:	e025      	b.n	800ec96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f003 0304 	and.w	r3, r3, #4
 800ec54:	2b04      	cmp	r3, #4
 800ec56:	d10e      	bne.n	800ec76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f819 	bl	800ec9e <UART_WaitOnFlagUntilTimeout>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d001      	beq.n	800ec76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e00f      	b.n	800ec96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2220      	movs	r2, #32
 800ec7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2220      	movs	r2, #32
 800ec82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b09c      	sub	sp, #112	; 0x70
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	60f8      	str	r0, [r7, #12]
 800eca6:	60b9      	str	r1, [r7, #8]
 800eca8:	603b      	str	r3, [r7, #0]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecae:	e0a9      	b.n	800ee04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb6:	f000 80a5 	beq.w	800ee04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecba:	f7f3 fe5f 	bl	800297c <HAL_GetTick>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d302      	bcc.n	800ecd0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ecca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d140      	bne.n	800ed52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ecde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ece0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ece4:	667b      	str	r3, [r7, #100]	; 0x64
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecf0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ecf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ecf6:	e841 2300 	strex	r3, r2, [r1]
 800ecfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ecfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1e6      	bne.n	800ecd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	3308      	adds	r3, #8
 800ed08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0c:	e853 3f00 	ldrex	r3, [r3]
 800ed10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	f023 0301 	bic.w	r3, r3, #1
 800ed18:	663b      	str	r3, [r7, #96]	; 0x60
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3308      	adds	r3, #8
 800ed20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed22:	64ba      	str	r2, [r7, #72]	; 0x48
 800ed24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed2a:	e841 2300 	strex	r3, r2, [r1]
 800ed2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1e5      	bne.n	800ed02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2220      	movs	r2, #32
 800ed42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	e069      	b.n	800ee26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d051      	beq.n	800ee04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed6e:	d149      	bne.n	800ee04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	e853 3f00 	ldrex	r3, [r3]
 800ed86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	461a      	mov	r2, r3
 800ed96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed98:	637b      	str	r3, [r7, #52]	; 0x34
 800ed9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eda0:	e841 2300 	strex	r3, r2, [r1]
 800eda4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1e6      	bne.n	800ed7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3308      	adds	r3, #8
 800edb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	e853 3f00 	ldrex	r3, [r3]
 800edba:	613b      	str	r3, [r7, #16]
   return(result);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	f023 0301 	bic.w	r3, r3, #1
 800edc2:	66bb      	str	r3, [r7, #104]	; 0x68
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3308      	adds	r3, #8
 800edca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800edcc:	623a      	str	r2, [r7, #32]
 800edce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd0:	69f9      	ldr	r1, [r7, #28]
 800edd2:	6a3a      	ldr	r2, [r7, #32]
 800edd4:	e841 2300 	strex	r3, r2, [r1]
 800edd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d1e5      	bne.n	800edac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2220      	movs	r2, #32
 800ede4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2220      	movs	r2, #32
 800edec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2220      	movs	r2, #32
 800edf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ee00:	2303      	movs	r3, #3
 800ee02:	e010      	b.n	800ee26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	69da      	ldr	r2, [r3, #28]
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	68ba      	ldr	r2, [r7, #8]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	bf0c      	ite	eq
 800ee14:	2301      	moveq	r3, #1
 800ee16:	2300      	movne	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	f43f af46 	beq.w	800ecb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3770      	adds	r7, #112	; 0x70
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
	...

0800ee30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b0a3      	sub	sp, #140	; 0x8c
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	88fa      	ldrh	r2, [r7, #6]
 800ee48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	88fa      	ldrh	r2, [r7, #6]
 800ee50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee62:	d10e      	bne.n	800ee82 <UART_Start_Receive_IT+0x52>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d105      	bne.n	800ee78 <UART_Start_Receive_IT+0x48>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ee72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee76:	e02d      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	22ff      	movs	r2, #255	; 0xff
 800ee7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee80:	e028      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10d      	bne.n	800eea6 <UART_Start_Receive_IT+0x76>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d104      	bne.n	800ee9c <UART_Start_Receive_IT+0x6c>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	22ff      	movs	r2, #255	; 0xff
 800ee96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee9a:	e01b      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	227f      	movs	r2, #127	; 0x7f
 800eea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eea4:	e016      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeae:	d10d      	bne.n	800eecc <UART_Start_Receive_IT+0x9c>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d104      	bne.n	800eec2 <UART_Start_Receive_IT+0x92>
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	227f      	movs	r2, #127	; 0x7f
 800eebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eec0:	e008      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	223f      	movs	r2, #63	; 0x3f
 800eec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eeca:	e003      	b.n	800eed4 <UART_Start_Receive_IT+0xa4>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2222      	movs	r2, #34	; 0x22
 800eee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	3308      	adds	r3, #8
 800eeea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeee:	e853 3f00 	ldrex	r3, [r3]
 800eef2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eef6:	f043 0301 	orr.w	r3, r3, #1
 800eefa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	3308      	adds	r3, #8
 800ef04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ef08:	673a      	str	r2, [r7, #112]	; 0x70
 800ef0a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ef0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ef10:	e841 2300 	strex	r3, r2, [r1]
 800ef14:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ef16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e3      	bne.n	800eee4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef24:	d153      	bne.n	800efce <UART_Start_Receive_IT+0x19e>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef2c:	88fa      	ldrh	r2, [r7, #6]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d34d      	bcc.n	800efce <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef3a:	d107      	bne.n	800ef4c <UART_Start_Receive_IT+0x11c>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d103      	bne.n	800ef4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4a4b      	ldr	r2, [pc, #300]	; (800f074 <UART_Start_Receive_IT+0x244>)
 800ef48:	671a      	str	r2, [r3, #112]	; 0x70
 800ef4a:	e002      	b.n	800ef52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4a4a      	ldr	r2, [pc, #296]	; (800f078 <UART_Start_Receive_IT+0x248>)
 800ef50:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	691b      	ldr	r3, [r3, #16]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d01a      	beq.n	800ef98 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef6a:	e853 3f00 	ldrex	r3, [r3]
 800ef6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef86:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef8c:	e841 2300 	strex	r3, r2, [r1]
 800ef90:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1e4      	bne.n	800ef62 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa2:	e853 3f00 	ldrex	r3, [r3]
 800efa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	3308      	adds	r3, #8
 800efb6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800efb8:	64ba      	str	r2, [r7, #72]	; 0x48
 800efba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efc0:	e841 2300 	strex	r3, r2, [r1]
 800efc4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800efc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1e5      	bne.n	800ef98 <UART_Start_Receive_IT+0x168>
 800efcc:	e04a      	b.n	800f064 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efd6:	d107      	bne.n	800efe8 <UART_Start_Receive_IT+0x1b8>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d103      	bne.n	800efe8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4a26      	ldr	r2, [pc, #152]	; (800f07c <UART_Start_Receive_IT+0x24c>)
 800efe4:	671a      	str	r2, [r3, #112]	; 0x70
 800efe6:	e002      	b.n	800efee <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4a25      	ldr	r2, [pc, #148]	; (800f080 <UART_Start_Receive_IT+0x250>)
 800efec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d019      	beq.n	800f032 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	e853 3f00 	ldrex	r3, [r3]
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f012:	677b      	str	r3, [r7, #116]	; 0x74
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	461a      	mov	r2, r3
 800f01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f01c:	637b      	str	r3, [r7, #52]	; 0x34
 800f01e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f024:	e841 2300 	strex	r3, r2, [r1]
 800f028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1e6      	bne.n	800effe <UART_Start_Receive_IT+0x1ce>
 800f030:	e018      	b.n	800f064 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	e853 3f00 	ldrex	r3, [r3]
 800f03e:	613b      	str	r3, [r7, #16]
   return(result);
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	f043 0320 	orr.w	r3, r3, #32
 800f046:	67bb      	str	r3, [r7, #120]	; 0x78
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	461a      	mov	r2, r3
 800f04e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f050:	623b      	str	r3, [r7, #32]
 800f052:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f054:	69f9      	ldr	r1, [r7, #28]
 800f056:	6a3a      	ldr	r2, [r7, #32]
 800f058:	e841 2300 	strex	r3, r2, [r1]
 800f05c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1e6      	bne.n	800f032 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	378c      	adds	r7, #140	; 0x8c
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	0800f78d 	.word	0x0800f78d
 800f078:	0800f495 	.word	0x0800f495
 800f07c:	0800f333 	.word	0x0800f333
 800f080:	0800f1d3 	.word	0x0800f1d3

0800f084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f084:	b480      	push	{r7}
 800f086:	b095      	sub	sp, #84	; 0x54
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f094:	e853 3f00 	ldrex	r3, [r3]
 800f098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0aa:	643b      	str	r3, [r7, #64]	; 0x40
 800f0ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0b2:	e841 2300 	strex	r3, r2, [r1]
 800f0b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1e6      	bne.n	800f08c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c6:	6a3b      	ldr	r3, [r7, #32]
 800f0c8:	e853 3f00 	ldrex	r3, [r3]
 800f0cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	4b1e      	ldr	r3, [pc, #120]	; (800f14c <UART_EndRxTransfer+0xc8>)
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	3308      	adds	r3, #8
 800f0dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0e6:	e841 2300 	strex	r3, r2, [r1]
 800f0ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1e5      	bne.n	800f0be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d118      	bne.n	800f12c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	e853 3f00 	ldrex	r3, [r3]
 800f106:	60bb      	str	r3, [r7, #8]
   return(result);
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f023 0310 	bic.w	r3, r3, #16
 800f10e:	647b      	str	r3, [r7, #68]	; 0x44
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
 800f116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f118:	61bb      	str	r3, [r7, #24]
 800f11a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11c:	6979      	ldr	r1, [r7, #20]
 800f11e:	69ba      	ldr	r2, [r7, #24]
 800f120:	e841 2300 	strex	r3, r2, [r1]
 800f124:	613b      	str	r3, [r7, #16]
   return(result);
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1e6      	bne.n	800f0fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f140:	bf00      	nop
 800f142:	3754      	adds	r7, #84	; 0x54
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	effffffe 	.word	0xeffffffe

0800f150 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f15c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f7fe ff2a 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f174:	bf00      	nop
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	e853 3f00 	ldrex	r3, [r3]
 800f190:	60bb      	str	r3, [r7, #8]
   return(result);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f198:	61fb      	str	r3, [r7, #28]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	61bb      	str	r3, [r7, #24]
 800f1a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	6979      	ldr	r1, [r7, #20]
 800f1a8:	69ba      	ldr	r2, [r7, #24]
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e6      	bne.n	800f184 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2220      	movs	r2, #32
 800f1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7fe fef5 	bl	800dfb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1ca:	bf00      	nop
 800f1cc:	3720      	adds	r7, #32
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b096      	sub	sp, #88	; 0x58
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1ea:	2b22      	cmp	r3, #34	; 0x22
 800f1ec:	f040 8095 	bne.w	800f31a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f1fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f1fe:	b2d9      	uxtb	r1, r3
 800f200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f204:	b2da      	uxtb	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20a:	400a      	ands	r2, r1
 800f20c:	b2d2      	uxtb	r2, r2
 800f20e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f220:	b29b      	uxth	r3, r3
 800f222:	3b01      	subs	r3, #1
 800f224:	b29a      	uxth	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f232:	b29b      	uxth	r3, r3
 800f234:	2b00      	cmp	r3, #0
 800f236:	d178      	bne.n	800f32a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	e853 3f00 	ldrex	r3, [r3]
 800f244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f24c:	653b      	str	r3, [r7, #80]	; 0x50
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f256:	647b      	str	r3, [r7, #68]	; 0x44
 800f258:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f25c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f25e:	e841 2300 	strex	r3, r2, [r1]
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1e6      	bne.n	800f238 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	3308      	adds	r3, #8
 800f270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	e853 3f00 	ldrex	r3, [r3]
 800f278:	623b      	str	r3, [r7, #32]
   return(result);
 800f27a:	6a3b      	ldr	r3, [r7, #32]
 800f27c:	f023 0301 	bic.w	r3, r3, #1
 800f280:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3308      	adds	r3, #8
 800f288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f28a:	633a      	str	r2, [r7, #48]	; 0x30
 800f28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f292:	e841 2300 	strex	r3, r2, [r1]
 800f296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e5      	bne.n	800f26a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d12e      	bne.n	800f312 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	e853 3f00 	ldrex	r3, [r3]
 800f2c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f023 0310 	bic.w	r3, r3, #16
 800f2ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d8:	61fb      	str	r3, [r7, #28]
 800f2da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2dc:	69b9      	ldr	r1, [r7, #24]
 800f2de:	69fa      	ldr	r2, [r7, #28]
 800f2e0:	e841 2300 	strex	r3, r2, [r1]
 800f2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1e6      	bne.n	800f2ba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	69db      	ldr	r3, [r3, #28]
 800f2f2:	f003 0310 	and.w	r3, r3, #16
 800f2f6:	2b10      	cmp	r3, #16
 800f2f8:	d103      	bne.n	800f302 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2210      	movs	r2, #16
 800f300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7fe fe66 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f310:	e00b      	b.n	800f32a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7f1 fd1e 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 800f318:	e007      	b.n	800f32a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	699a      	ldr	r2, [r3, #24]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f042 0208 	orr.w	r2, r2, #8
 800f328:	619a      	str	r2, [r3, #24]
}
 800f32a:	bf00      	nop
 800f32c:	3758      	adds	r7, #88	; 0x58
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b096      	sub	sp, #88	; 0x58
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f340:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f34a:	2b22      	cmp	r3, #34	; 0x22
 800f34c:	f040 8095 	bne.w	800f47a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f356:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f35e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f360:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f364:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f368:	4013      	ands	r3, r2
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f36e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f374:	1c9a      	adds	r2, r3, #2
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f380:	b29b      	uxth	r3, r3
 800f382:	3b01      	subs	r3, #1
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f392:	b29b      	uxth	r3, r3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d178      	bne.n	800f48a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a0:	e853 3f00 	ldrex	r3, [r3]
 800f3a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3b6:	643b      	str	r3, [r7, #64]	; 0x40
 800f3b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3be:	e841 2300 	strex	r3, r2, [r1]
 800f3c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1e6      	bne.n	800f398 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	3308      	adds	r3, #8
 800f3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	e853 3f00 	ldrex	r3, [r3]
 800f3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	f023 0301 	bic.w	r3, r3, #1
 800f3e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3308      	adds	r3, #8
 800f3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f3ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3f2:	e841 2300 	strex	r3, r2, [r1]
 800f3f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1e5      	bne.n	800f3ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2220      	movs	r2, #32
 800f402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f410:	2b01      	cmp	r3, #1
 800f412:	d12e      	bne.n	800f472 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	e853 3f00 	ldrex	r3, [r3]
 800f426:	60bb      	str	r3, [r7, #8]
   return(result);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	f023 0310 	bic.w	r3, r3, #16
 800f42e:	647b      	str	r3, [r7, #68]	; 0x44
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43c:	6979      	ldr	r1, [r7, #20]
 800f43e:	69ba      	ldr	r2, [r7, #24]
 800f440:	e841 2300 	strex	r3, r2, [r1]
 800f444:	613b      	str	r3, [r7, #16]
   return(result);
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1e6      	bne.n	800f41a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	69db      	ldr	r3, [r3, #28]
 800f452:	f003 0310 	and.w	r3, r3, #16
 800f456:	2b10      	cmp	r3, #16
 800f458:	d103      	bne.n	800f462 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2210      	movs	r2, #16
 800f460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7fe fdb6 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f470:	e00b      	b.n	800f48a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7f1 fc6e 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 800f478:	e007      	b.n	800f48a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	699a      	ldr	r2, [r3, #24]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f042 0208 	orr.w	r2, r2, #8
 800f488:	619a      	str	r2, [r3, #24]
}
 800f48a:	bf00      	nop
 800f48c:	3758      	adds	r7, #88	; 0x58
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
	...

0800f494 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b0a6      	sub	sp, #152	; 0x98
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	69db      	ldr	r3, [r3, #28]
 800f4ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4ca:	2b22      	cmp	r3, #34	; 0x22
 800f4cc:	f040 814d 	bne.w	800f76a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f4d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4da:	e0f4      	b.n	800f6c6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4e6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f4ea:	b2d9      	uxtb	r1, r3
 800f4ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4f6:	400a      	ands	r2, r1
 800f4f8:	b2d2      	uxtb	r2, r2
 800f4fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3b01      	subs	r3, #1
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f526:	f003 0307 	and.w	r3, r3, #7
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d053      	beq.n	800f5d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f52e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b00      	cmp	r3, #0
 800f538:	d011      	beq.n	800f55e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f53a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00b      	beq.n	800f55e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2201      	movs	r2, #1
 800f54c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f554:	f043 0201 	orr.w	r2, r3, #1
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f55e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f562:	f003 0302 	and.w	r3, r3, #2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d011      	beq.n	800f58e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f56a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00b      	beq.n	800f58e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2202      	movs	r2, #2
 800f57c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f584:	f043 0204 	orr.w	r2, r3, #4
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f58e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f592:	f003 0304 	and.w	r3, r3, #4
 800f596:	2b00      	cmp	r3, #0
 800f598:	d011      	beq.n	800f5be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f59a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00b      	beq.n	800f5be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5b4:	f043 0202 	orr.w	r2, r3, #2
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d006      	beq.n	800f5d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7fe fcfd 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d171      	bne.n	800f6c6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ea:	e853 3f00 	ldrex	r3, [r3]
 800f5ee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f5f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f604:	66bb      	str	r3, [r7, #104]	; 0x68
 800f606:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f60a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e4      	bne.n	800f5e2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3308      	adds	r3, #8
 800f61e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f622:	e853 3f00 	ldrex	r3, [r3]
 800f626:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f62a:	4b56      	ldr	r3, [pc, #344]	; (800f784 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f62c:	4013      	ands	r3, r2
 800f62e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	3308      	adds	r3, #8
 800f636:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f638:	657a      	str	r2, [r7, #84]	; 0x54
 800f63a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f63e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f640:	e841 2300 	strex	r3, r2, [r1]
 800f644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1e5      	bne.n	800f618 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2220      	movs	r2, #32
 800f650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d12e      	bne.n	800f6c0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f670:	e853 3f00 	ldrex	r3, [r3]
 800f674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	f023 0310 	bic.w	r3, r3, #16
 800f67c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f686:	643b      	str	r3, [r7, #64]	; 0x40
 800f688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f68e:	e841 2300 	strex	r3, r2, [r1]
 800f692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e6      	bne.n	800f668 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	69db      	ldr	r3, [r3, #28]
 800f6a0:	f003 0310 	and.w	r3, r3, #16
 800f6a4:	2b10      	cmp	r3, #16
 800f6a6:	d103      	bne.n	800f6b0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2210      	movs	r2, #16
 800f6ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7fe fc8f 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
 800f6be:	e002      	b.n	800f6c6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7f1 fb47 	bl	8000d54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <UART_RxISR_8BIT_FIFOEN+0x248>
 800f6ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6d2:	f003 0320 	and.w	r3, r3, #32
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f47f af00 	bne.w	800f4dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f6e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d045      	beq.n	800f77a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d23e      	bcs.n	800f77a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3308      	adds	r3, #8
 800f702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f704:	6a3b      	ldr	r3, [r7, #32]
 800f706:	e853 3f00 	ldrex	r3, [r3]
 800f70a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f712:	673b      	str	r3, [r7, #112]	; 0x70
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	3308      	adds	r3, #8
 800f71a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f71c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f724:	e841 2300 	strex	r3, r2, [r1]
 800f728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1e5      	bne.n	800f6fc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a15      	ldr	r2, [pc, #84]	; (800f788 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f734:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	e853 3f00 	ldrex	r3, [r3]
 800f742:	60bb      	str	r3, [r7, #8]
   return(result);
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	f043 0320 	orr.w	r3, r3, #32
 800f74a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	461a      	mov	r2, r3
 800f752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f754:	61bb      	str	r3, [r7, #24]
 800f756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f758:	6979      	ldr	r1, [r7, #20]
 800f75a:	69ba      	ldr	r2, [r7, #24]
 800f75c:	e841 2300 	strex	r3, r2, [r1]
 800f760:	613b      	str	r3, [r7, #16]
   return(result);
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1e6      	bne.n	800f736 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f768:	e007      	b.n	800f77a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	699a      	ldr	r2, [r3, #24]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f042 0208 	orr.w	r2, r2, #8
 800f778:	619a      	str	r2, [r3, #24]
}
 800f77a:	bf00      	nop
 800f77c:	3798      	adds	r7, #152	; 0x98
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	effffffe 	.word	0xeffffffe
 800f788:	0800f1d3 	.word	0x0800f1d3

0800f78c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b0a8      	sub	sp, #160	; 0xa0
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f79a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	69db      	ldr	r3, [r3, #28]
 800f7a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7c2:	2b22      	cmp	r3, #34	; 0x22
 800f7c4:	f040 8151 	bne.w	800fa6a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7d2:	e0f8      	b.n	800f9c6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f7e6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f7ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7fc:	1c9a      	adds	r2, r3, #2
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f808:	b29b      	uxth	r3, r3
 800f80a:	3b01      	subs	r3, #1
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	69db      	ldr	r3, [r3, #28]
 800f81a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f81e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f822:	f003 0307 	and.w	r3, r3, #7
 800f826:	2b00      	cmp	r3, #0
 800f828:	d053      	beq.n	800f8d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f82a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f82e:	f003 0301 	and.w	r3, r3, #1
 800f832:	2b00      	cmp	r3, #0
 800f834:	d011      	beq.n	800f85a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00b      	beq.n	800f85a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2201      	movs	r2, #1
 800f848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f850:	f043 0201 	orr.w	r2, r3, #1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f85a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f85e:	f003 0302 	and.w	r3, r3, #2
 800f862:	2b00      	cmp	r3, #0
 800f864:	d011      	beq.n	800f88a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00b      	beq.n	800f88a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2202      	movs	r2, #2
 800f878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f880:	f043 0204 	orr.w	r2, r3, #4
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f88a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f88e:	f003 0304 	and.w	r3, r3, #4
 800f892:	2b00      	cmp	r3, #0
 800f894:	d011      	beq.n	800f8ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f89a:	f003 0301 	and.w	r3, r3, #1
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00b      	beq.n	800f8ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8b0:	f043 0202 	orr.w	r2, r3, #2
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d006      	beq.n	800f8d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7fe fb7f 	bl	800dfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d173      	bne.n	800f9c6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f900:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f902:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f904:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f908:	e841 2300 	strex	r3, r2, [r1]
 800f90c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1e4      	bne.n	800f8de <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3308      	adds	r3, #8
 800f91a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f91e:	e853 3f00 	ldrex	r3, [r3]
 800f922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f926:	4b57      	ldr	r3, [pc, #348]	; (800fa84 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f928:	4013      	ands	r3, r2
 800f92a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	3308      	adds	r3, #8
 800f934:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f938:	65ba      	str	r2, [r7, #88]	; 0x58
 800f93a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f93e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f940:	e841 2300 	strex	r3, r2, [r1]
 800f944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1e3      	bne.n	800f914 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2220      	movs	r2, #32
 800f950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d12e      	bne.n	800f9c0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	e853 3f00 	ldrex	r3, [r3]
 800f974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f978:	f023 0310 	bic.w	r3, r3, #16
 800f97c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f986:	647b      	str	r3, [r7, #68]	; 0x44
 800f988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f98c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f98e:	e841 2300 	strex	r3, r2, [r1]
 800f992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d1e6      	bne.n	800f968 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	f003 0310 	and.w	r3, r3, #16
 800f9a4:	2b10      	cmp	r3, #16
 800f9a6:	d103      	bne.n	800f9b0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2210      	movs	r2, #16
 800f9ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7fe fb0f 	bl	800dfdc <HAL_UARTEx_RxEventCallback>
 800f9be:	e002      	b.n	800f9c6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7f1 f9c7 	bl	8000d54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d006      	beq.n	800f9dc <UART_RxISR_16BIT_FIFOEN+0x250>
 800f9ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f9d2:	f003 0320 	and.w	r3, r3, #32
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	f47f aefc 	bne.w	800f7d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f9e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d045      	beq.n	800fa7a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9f4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d23e      	bcs.n	800fa7a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	3308      	adds	r3, #8
 800fa02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa06:	e853 3f00 	ldrex	r3, [r3]
 800fa0a:	623b      	str	r3, [r7, #32]
   return(result);
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa12:	677b      	str	r3, [r7, #116]	; 0x74
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3308      	adds	r3, #8
 800fa1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fa1c:	633a      	str	r2, [r7, #48]	; 0x30
 800fa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa24:	e841 2300 	strex	r3, r2, [r1]
 800fa28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1e5      	bne.n	800f9fc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	4a15      	ldr	r2, [pc, #84]	; (800fa88 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800fa34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	e853 3f00 	ldrex	r3, [r3]
 800fa42:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f043 0320 	orr.w	r3, r3, #32
 800fa4a:	673b      	str	r3, [r7, #112]	; 0x70
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	461a      	mov	r2, r3
 800fa52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa54:	61fb      	str	r3, [r7, #28]
 800fa56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa58:	69b9      	ldr	r1, [r7, #24]
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	e841 2300 	strex	r3, r2, [r1]
 800fa60:	617b      	str	r3, [r7, #20]
   return(result);
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1e6      	bne.n	800fa36 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa68:	e007      	b.n	800fa7a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	699a      	ldr	r2, [r3, #24]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f042 0208 	orr.w	r2, r2, #8
 800fa78:	619a      	str	r2, [r3, #24]
}
 800fa7a:	bf00      	nop
 800fa7c:	37a0      	adds	r7, #160	; 0xa0
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	effffffe 	.word	0xeffffffe
 800fa88:	0800f333 	.word	0x0800f333

0800fa8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fabc:	bf00      	nop
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af02      	add	r7, sp, #8
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	1d3b      	adds	r3, r7, #4
 800fad2:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800fad6:	2300      	movs	r3, #0
 800fad8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d101      	bne.n	800fae8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fae4:	2302      	movs	r3, #2
 800fae6:	e046      	b.n	800fb76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2224      	movs	r2, #36	; 0x24
 800faf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f022 0201 	bic.w	r2, r2, #1
 800fb06:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	689b      	ldr	r3, [r3, #8]
 800fb0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	430a      	orrs	r2, r1
 800fb1a:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d105      	bne.n	800fb2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fb22:	1d3b      	adds	r3, r7, #4
 800fb24:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 f910 	bl	800fd4e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f042 0201 	orr.w	r2, r2, #1
 800fb3c:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb3e:	f7f2 ff1d 	bl	800297c <HAL_GetTick>
 800fb42:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	f7ff f8a3 	bl	800ec9e <UART_WaitOnFlagUntilTimeout>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d002      	beq.n	800fb64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	75fb      	strb	r3, [r7, #23]
 800fb62:	e003      	b.n	800fb6c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2220      	movs	r2, #32
 800fb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3718      	adds	r7, #24
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b089      	sub	sp, #36	; 0x24
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d101      	bne.n	800fb94 <HAL_UARTEx_EnableStopMode+0x16>
 800fb90:	2302      	movs	r3, #2
 800fb92:	e021      	b.n	800fbd8 <HAL_UARTEx_EnableStopMode+0x5a>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	e853 3f00 	ldrex	r3, [r3]
 800fba8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	f043 0302 	orr.w	r3, r3, #2
 800fbb0:	61fb      	str	r3, [r7, #28]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	61bb      	str	r3, [r7, #24]
 800fbbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbe:	6979      	ldr	r1, [r7, #20]
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	e841 2300 	strex	r3, r2, [r1]
 800fbc6:	613b      	str	r3, [r7, #16]
   return(result);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1e6      	bne.n	800fb9c <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3724      	adds	r7, #36	; 0x24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr

0800fbe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d101      	bne.n	800fbfa <HAL_UARTEx_DisableFifoMode+0x16>
 800fbf6:	2302      	movs	r3, #2
 800fbf8:	e027      	b.n	800fc4a <HAL_UARTEx_DisableFifoMode+0x66>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2224      	movs	r2, #36	; 0x24
 800fc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f022 0201 	bic.w	r2, r2, #1
 800fc20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fc28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2220      	movs	r2, #32
 800fc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b084      	sub	sp, #16
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d101      	bne.n	800fc6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc6a:	2302      	movs	r3, #2
 800fc6c:	e02d      	b.n	800fcca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2201      	movs	r2, #1
 800fc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2224      	movs	r2, #36	; 0x24
 800fc7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f022 0201 	bic.w	r2, r2, #1
 800fc94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	430a      	orrs	r2, r1
 800fca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f872 	bl	800fd94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2220      	movs	r2, #32
 800fcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b084      	sub	sp, #16
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d101      	bne.n	800fcea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fce6:	2302      	movs	r3, #2
 800fce8:	e02d      	b.n	800fd46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2201      	movs	r2, #1
 800fcee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2224      	movs	r2, #36	; 0x24
 800fcf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f022 0201 	bic.w	r2, r2, #1
 800fd10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	430a      	orrs	r2, r1
 800fd24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f834 	bl	800fd94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2220      	movs	r2, #32
 800fd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fd4e:	b480      	push	{r7}
 800fd50:	b085      	sub	sp, #20
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	60f8      	str	r0, [r7, #12]
 800fd56:	1d3b      	adds	r3, r7, #4
 800fd58:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f023 0210 	bic.w	r2, r3, #16
 800fd66:	893b      	ldrh	r3, [r7, #8]
 800fd68:	4619      	mov	r1, r3
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fd7c:	7abb      	ldrb	r3, [r7, #10]
 800fd7e:	061a      	lsls	r2, r3, #24
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	430a      	orrs	r2, r1
 800fd86:	605a      	str	r2, [r3, #4]
}
 800fd88:	bf00      	nop
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d108      	bne.n	800fdb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fdb4:	e031      	b.n	800fe1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fdb6:	2310      	movs	r3, #16
 800fdb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdba:	2310      	movs	r3, #16
 800fdbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	0e5b      	lsrs	r3, r3, #25
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	f003 0307 	and.w	r3, r3, #7
 800fdcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	0f5b      	lsrs	r3, r3, #29
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	f003 0307 	and.w	r3, r3, #7
 800fddc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdde:	7bbb      	ldrb	r3, [r7, #14]
 800fde0:	7b3a      	ldrb	r2, [r7, #12]
 800fde2:	4911      	ldr	r1, [pc, #68]	; (800fe28 <UARTEx_SetNbDataToProcess+0x94>)
 800fde4:	5c8a      	ldrb	r2, [r1, r2]
 800fde6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdea:	7b3a      	ldrb	r2, [r7, #12]
 800fdec:	490f      	ldr	r1, [pc, #60]	; (800fe2c <UARTEx_SetNbDataToProcess+0x98>)
 800fdee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
 800fdfe:	7b7a      	ldrb	r2, [r7, #13]
 800fe00:	4909      	ldr	r1, [pc, #36]	; (800fe28 <UARTEx_SetNbDataToProcess+0x94>)
 800fe02:	5c8a      	ldrb	r2, [r1, r2]
 800fe04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe08:	7b7a      	ldrb	r2, [r7, #13]
 800fe0a:	4908      	ldr	r1, [pc, #32]	; (800fe2c <UARTEx_SetNbDataToProcess+0x98>)
 800fe0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fe1a:	bf00      	nop
 800fe1c:	3714      	adds	r7, #20
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	0800fee8 	.word	0x0800fee8
 800fe2c:	0800fef0 	.word	0x0800fef0

0800fe30 <__libc_init_array>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	4d0d      	ldr	r5, [pc, #52]	; (800fe68 <__libc_init_array+0x38>)
 800fe34:	4c0d      	ldr	r4, [pc, #52]	; (800fe6c <__libc_init_array+0x3c>)
 800fe36:	1b64      	subs	r4, r4, r5
 800fe38:	10a4      	asrs	r4, r4, #2
 800fe3a:	2600      	movs	r6, #0
 800fe3c:	42a6      	cmp	r6, r4
 800fe3e:	d109      	bne.n	800fe54 <__libc_init_array+0x24>
 800fe40:	4d0b      	ldr	r5, [pc, #44]	; (800fe70 <__libc_init_array+0x40>)
 800fe42:	4c0c      	ldr	r4, [pc, #48]	; (800fe74 <__libc_init_array+0x44>)
 800fe44:	f000 f820 	bl	800fe88 <_init>
 800fe48:	1b64      	subs	r4, r4, r5
 800fe4a:	10a4      	asrs	r4, r4, #2
 800fe4c:	2600      	movs	r6, #0
 800fe4e:	42a6      	cmp	r6, r4
 800fe50:	d105      	bne.n	800fe5e <__libc_init_array+0x2e>
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
 800fe54:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe58:	4798      	blx	r3
 800fe5a:	3601      	adds	r6, #1
 800fe5c:	e7ee      	b.n	800fe3c <__libc_init_array+0xc>
 800fe5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe62:	4798      	blx	r3
 800fe64:	3601      	adds	r6, #1
 800fe66:	e7f2      	b.n	800fe4e <__libc_init_array+0x1e>
 800fe68:	0800ff00 	.word	0x0800ff00
 800fe6c:	0800ff00 	.word	0x0800ff00
 800fe70:	0800ff00 	.word	0x0800ff00
 800fe74:	0800ff04 	.word	0x0800ff04

0800fe78 <memset>:
 800fe78:	4402      	add	r2, r0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d100      	bne.n	800fe82 <memset+0xa>
 800fe80:	4770      	bx	lr
 800fe82:	f803 1b01 	strb.w	r1, [r3], #1
 800fe86:	e7f9      	b.n	800fe7c <memset+0x4>

0800fe88 <_init>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	bf00      	nop
 800fe8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8e:	bc08      	pop	{r3}
 800fe90:	469e      	mov	lr, r3
 800fe92:	4770      	bx	lr

0800fe94 <_fini>:
 800fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe96:	bf00      	nop
 800fe98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe9a:	bc08      	pop	{r3}
 800fe9c:	469e      	mov	lr, r3
 800fe9e:	4770      	bx	lr
