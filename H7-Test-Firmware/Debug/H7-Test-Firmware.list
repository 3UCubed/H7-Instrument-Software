
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcb4  0800dcb4  0001dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcbc  0800dcbc  0001dcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dcc0  0800dcc0  0001dcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800dcc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000470  24000034  0800dcf8  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004a4  0800dcf8  000204a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f02  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003553  00000000  00000000  00042f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  000464b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001978  00000000  00000000  00047f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  000498e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002361d  00000000  00000000  00084681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fdf6  00000000  00000000  000a7c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00227a94  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007464  00000000  00000000  00227ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000034 	.word	0x24000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dc40 	.word	0x0800dc40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000038 	.word	0x24000038
 80002d4:	0800dc40 	.word	0x0800dc40

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aab      	ldr	r2, [pc, #684]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 82e5 	bne.w	8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x5dc>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4baa      	ldr	r3, [pc, #680]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8083 	beq.w	800072a <HAL_TIM_OC_DelayElapsedCallback+0x122>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a7      	ldr	r0, [pc, #668]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800062c:	f005 ff0c 	bl	8006448 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	49a4      	ldr	r1, [pc, #656]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800063c:	48a4      	ldr	r0, [pc, #656]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800063e:	f009 ff81 	bl	800a544 <HAL_SPI_Transmit>
		//SPI2->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
	    erpa_raw = SPI2->RXDR;
 8000642:	4ba4      	ldr	r3, [pc, #656]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	461a      	mov	r2, r3
 8000648:	4ba3      	ldr	r3, [pc, #652]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 800064a:	601a      	str	r2, [r3, #0]


		DAC1->DHR12R1 = DAC_OUT[step];
 800064c:	4ba3      	ldr	r3, [pc, #652]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	4aa3      	ldr	r2, [pc, #652]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000654:	4ba3      	ldr	r3, [pc, #652]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800065a:	6093      	str	r3, [r2, #8]

		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA,adcChannelCount);
 800065c:	2311      	movs	r3, #17
 800065e:	461a      	mov	r2, r3
 8000660:	49a1      	ldr	r1, [pc, #644]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000662:	48a2      	ldr	r0, [pc, #648]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000664:	f002 fa56 	bl	8002b14 <HAL_ADC_Start_DMA>
		uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 8000668:	4b9f      	ldr	r3, [pc, #636]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 800066e:	4b9e      	ldr	r3, [pc, #632]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 8000674:	4b9c      	ldr	r3, [pc, #624]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000676:	89db      	ldrh	r3, [r3, #14]
 8000678:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 800067a:	4b9b      	ldr	r3, [pc, #620]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800067c:	8a1b      	ldrh	r3, [r3, #16]
 800067e:	85bb      	strh	r3, [r7, #44]	; 0x2c

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000680:	22aa      	movs	r2, #170	; 0xaa
 8000682:	4b9b      	ldr	r3, [pc, #620]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000684:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 8000686:	22aa      	movs	r2, #170	; 0xaa
 8000688:	4b99      	ldr	r3, [pc, #612]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800068a:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 800068c:	4b99      	ldr	r3, [pc, #612]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29b      	uxth	r3, r3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b96      	ldr	r3, [pc, #600]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000698:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 800069a:	4b96      	ldr	r3, [pc, #600]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b93      	ldr	r3, [pc, #588]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006a2:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b90      	ldr	r3, [pc, #576]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ae:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 80006b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b8e      	ldr	r3, [pc, #568]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006b6:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b8b      	ldr	r3, [pc, #556]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006c2:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 80006c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b89      	ldr	r3, [pc, #548]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ca:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80006cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b86      	ldr	r3, [pc, #536]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006d6:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 80006d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b84      	ldr	r3, [pc, #528]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006de:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 80006e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b81      	ldr	r3, [pc, #516]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006ea:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80006ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b7f      	ldr	r3, [pc, #508]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006f2:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 80006f4:	4b78      	ldr	r3, [pc, #480]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b7c      	ldr	r3, [pc, #496]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 80006fe:	731a      	strb	r2, [r3, #12]
		erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000700:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b7a      	ldr	r3, [pc, #488]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000708:	735a      	strb	r2, [r3, #13]

		erpa_seq++;
 800070a:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b78      	ldr	r3, [pc, #480]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000714:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000716:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <HAL_TIM_OC_DelayElapsedCallback+0x122>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	220e      	movs	r2, #14
 8000722:	4973      	ldr	r1, [pc, #460]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 8000724:	4874      	ldr	r0, [pc, #464]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 8000726:	f00b fb05 	bl	800bd34 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 82a0 	beq.w	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>
      {
        if (hk_counter == HK_CADENCE)
 8000734:	4b72      	ldr	r3, [pc, #456]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2201      	movs	r2, #1
 800073a:	4293      	cmp	r3, r2
 800073c:	f040 823e 	bne.w	8000bbc <HAL_TIM_OC_DelayElapsedCallback+0x5b4>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000740:	2300      	movs	r3, #0
 8000742:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	b299      	uxth	r1, r3
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	486b      	ldr	r0, [pc, #428]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000756:	f005 ff39 	bl	80065cc <HAL_I2C_Master_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          if (ret != HAL_OK)
 8000760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000764:	2b00      	cmp	r3, #0
 8000766:	d009      	beq.n	800077c <HAL_TIM_OC_DelayElapsedCallback+0x174>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4a66      	ldr	r2, [pc, #408]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800076e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000770:	c303      	stmia	r3!, {r0, r1}
 8000772:	801a      	strh	r2, [r3, #0]
 8000774:	3302      	adds	r3, #2
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e024      	b.n	80007c6 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	b299      	uxth	r1, r3
 8000780:	f107 020c 	add.w	r2, r7, #12
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	485d      	ldr	r0, [pc, #372]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800078e:	f006 f811 	bl	80067b4 <HAL_I2C_Master_Receive>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 8000798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4a59      	ldr	r2, [pc, #356]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e008      	b.n	80007c6 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007b4:	7b3b      	ldrb	r3, [r7, #12]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80007ba:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80007be:	7b7a      	ldrb	r2, [r7, #13]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007c6:	2300      	movs	r3, #0
 80007c8:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80007ca:	2394      	movs	r3, #148	; 0x94
 80007cc:	b299      	uxth	r1, r3
 80007ce:	f107 020c 	add.w	r2, r7, #12
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	484a      	ldr	r0, [pc, #296]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80007dc:	f005 fef6 	bl	80065cc <HAL_I2C_Master_Transmit>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d009      	beq.n	8000802 <HAL_TIM_OC_DelayElapsedCallback+0x1fa>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4a45      	ldr	r2, [pc, #276]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 80007f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f6:	c303      	stmia	r3!, {r0, r1}
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	3302      	adds	r3, #2
 80007fc:	0c12      	lsrs	r2, r2, #16
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e024      	b.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x244>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000802:	2394      	movs	r3, #148	; 0x94
 8000804:	b299      	uxth	r1, r3
 8000806:	f107 020c 	add.w	r2, r7, #12
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000814:	f005 ffce 	bl	80067b4 <HAL_I2C_Master_Receive>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800081e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <HAL_TIM_OC_DelayElapsedCallback+0x232>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800082c:	ca07      	ldmia	r2, {r0, r1, r2}
 800082e:	c303      	stmia	r3!, {r0, r1}
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	3302      	adds	r3, #2
 8000834:	0c12      	lsrs	r2, r2, #16
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e008      	b.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x244>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800083a:	7b3b      	ldrb	r3, [r7, #12]
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000840:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000844:	7b7a      	ldrb	r2, [r7, #13]
 8000846:	4313      	orrs	r3, r2
 8000848:	10db      	asrs	r3, r3, #3
 800084a:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800084c:	2300      	movs	r3, #0
 800084e:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000850:	2392      	movs	r3, #146	; 0x92
 8000852:	b299      	uxth	r1, r3
 8000854:	f107 020c 	add.w	r2, r7, #12
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2301      	movs	r3, #1
 8000860:	4828      	ldr	r0, [pc, #160]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000862:	f005 feb3 	bl	80065cc <HAL_I2C_Master_Transmit>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800086c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000870:	2b00      	cmp	r3, #0
 8000872:	d009      	beq.n	8000888 <HAL_TIM_OC_DelayElapsedCallback+0x280>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800087a:	ca07      	ldmia	r2, {r0, r1, r2}
 800087c:	c303      	stmia	r3!, {r0, r1}
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	0c12      	lsrs	r2, r2, #16
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e04c      	b.n	8000922 <HAL_TIM_OC_DelayElapsedCallback+0x31a>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000888:	2392      	movs	r3, #146	; 0x92
 800088a:	b299      	uxth	r1, r3
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2302      	movs	r3, #2
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800089a:	f005 ff8b 	bl	80067b4 <HAL_I2C_Master_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 80008a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d031      	beq.n	8000910 <HAL_TIM_OC_DelayElapsedCallback+0x308>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 80008b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b4:	c303      	stmia	r3!, {r0, r1}
 80008b6:	801a      	strh	r2, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e030      	b.n	8000922 <HAL_TIM_OC_DelayElapsedCallback+0x31a>
 80008c0:	240002e8 	.word	0x240002e8
 80008c4:	24000021 	.word	0x24000021
 80008c8:	58020400 	.word	0x58020400
 80008cc:	0800dc70 	.word	0x0800dc70
 80008d0:	24000214 	.word	0x24000214
 80008d4:	40003800 	.word	0x40003800
 80008d8:	24000458 	.word	0x24000458
 80008dc:	24000452 	.word	0x24000452
 80008e0:	40007400 	.word	0x40007400
 80008e4:	24000000 	.word	0x24000000
 80008e8:	24000430 	.word	0x24000430
 80008ec:	24000050 	.word	0x24000050
 80008f0:	2400045c 	.word	0x2400045c
 80008f4:	2400046a 	.word	0x2400046a
 80008f8:	24000334 	.word	0x24000334
 80008fc:	24000022 	.word	0x24000022
 8000900:	2400049c 	.word	0x2400049c
 8000904:	24000140 	.word	0x24000140
 8000908:	0800dc58 	.word	0x0800dc58
 800090c:	0800dc64 	.word	0x0800dc64
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000910:	7b3b      	ldrb	r3, [r7, #12]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 8000916:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800091a:	7b7a      	ldrb	r2, [r7, #13]
 800091c:	4313      	orrs	r3, r2
 800091e:	10db      	asrs	r3, r3, #3
 8000920:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000922:	2300      	movs	r3, #0
 8000924:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000926:	2396      	movs	r3, #150	; 0x96
 8000928:	b299      	uxth	r1, r3
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000938:	f005 fe48 	bl	80065cc <HAL_I2C_Master_Transmit>
 800093c:	4603      	mov	r3, r0
 800093e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000946:	2b00      	cmp	r3, #0
 8000948:	d009      	beq.n	800095e <HAL_TIM_OC_DelayElapsedCallback+0x356>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	c303      	stmia	r3!, {r0, r1}
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	0c12      	lsrs	r2, r2, #16
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e02b      	b.n	80009b6 <HAL_TIM_OC_DelayElapsedCallback+0x3ae>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800095e:	2396      	movs	r3, #150	; 0x96
 8000960:	b299      	uxth	r1, r3
 8000962:	f107 020c 	add.w	r2, r7, #12
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000970:	f005 ff20 	bl	80067b4 <HAL_I2C_Master_Receive>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800097a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800097e:	2b00      	cmp	r3, #0
 8000980:	d010      	beq.n	80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000988:	ca07      	ldmia	r2, {r0, r1, r2}
 800098a:	c303      	stmia	r3!, {r0, r1}
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	3302      	adds	r3, #2
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e00f      	b.n	80009b6 <HAL_TIM_OC_DelayElapsedCallback+0x3ae>
 8000996:	bf00      	nop
 8000998:	24000140 	.word	0x24000140
 800099c:	0800dc58 	.word	0x0800dc58
 80009a0:	0800dc64 	.word	0x0800dc64
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80009a4:	7b3b      	ldrb	r3, [r7, #12]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 80009aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80009ae:	7b7a      	ldrb	r2, [r7, #13]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	10db      	asrs	r3, r3, #3
 80009b4:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcResultsDMA,
 80009b6:	2311      	movs	r3, #17
 80009b8:	461a      	mov	r2, r3
 80009ba:	4983      	ldr	r1, [pc, #524]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009bc:	4883      	ldr	r0, [pc, #524]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x5c4>)
 80009be:	f002 f8a9 	bl	8002b14 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80009c2:	4b81      	ldr	r3, [pc, #516]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009c4:	885b      	ldrh	r3, [r3, #2]
 80009c6:	853b      	strh	r3, [r7, #40]	; 0x28
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80009c8:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	84fb      	strh	r3, [r7, #38]	; 0x26
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80009ce:	4b7e      	ldr	r3, [pc, #504]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009d0:	88db      	ldrh	r3, [r3, #6]
 80009d2:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80009d4:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009d6:	891b      	ldrh	r3, [r3, #8]
 80009d8:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80009da:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009dc:	895b      	ldrh	r3, [r3, #10]
 80009de:	843b      	strh	r3, [r7, #32]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80009e0:	4b79      	ldr	r3, [pc, #484]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009e2:	8a5b      	ldrh	r3, [r3, #18]
 80009e4:	83fb      	strh	r3, [r7, #30]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80009e6:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009e8:	8a9b      	ldrh	r3, [r3, #20]
 80009ea:	83bb      	strh	r3, [r7, #28]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80009ec:	4b76      	ldr	r3, [pc, #472]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009ee:	8adb      	ldrh	r3, [r3, #22]
 80009f0:	837b      	strh	r3, [r7, #26]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80009f2:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009f4:	8b1b      	ldrh	r3, [r3, #24]
 80009f6:	833b      	strh	r3, [r7, #24]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80009f8:	4b73      	ldr	r3, [pc, #460]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 80009fa:	8b5b      	ldrh	r3, [r3, #26]
 80009fc:	82fb      	strh	r3, [r7, #22]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80009fe:	4b72      	ldr	r3, [pc, #456]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 8000a00:	8b9b      	ldrh	r3, [r3, #28]
 8000a02:	82bb      	strh	r3, [r7, #20]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000a04:	4b70      	ldr	r3, [pc, #448]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 8000a06:	8bdb      	ldrh	r3, [r3, #30]
 8000a08:	827b      	strh	r3, [r7, #18]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000a0a:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>)
 8000a0c:	8c1b      	ldrh	r3, [r3, #32]
 8000a0e:	823b      	strh	r3, [r7, #16]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000a10:	22cc      	movs	r2, #204	; 0xcc
 8000a12:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a14:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000a16:	22cc      	movs	r2, #204	; 0xcc
 8000a18:	4b6d      	ldr	r3, [pc, #436]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a1a:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000a1c:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a28:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000a2a:	4b6a      	ldr	r3, [pc, #424]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a32:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000a34:	8a7b      	ldrh	r3, [r7, #18]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a3e:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000a40:	8a7b      	ldrh	r3, [r7, #18]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a46:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 8000a48:	8a3b      	ldrh	r3, [r7, #16]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a52:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 8000a54:	8a3b      	ldrh	r3, [r7, #16]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a5a:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000a5c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a60:	121b      	asrs	r3, r3, #8
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a66:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000a68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a6e:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000a70:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000a74:	121b      	asrs	r3, r3, #8
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a7a:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000a7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a82:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000a84:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000a88:	121b      	asrs	r3, r3, #8
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a8e:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000a90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000a96:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000a98:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000a9c:	121b      	asrs	r3, r3, #8
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000aa2:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000aa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000aaa:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000aac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000ab6:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 8000ab8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000abe:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000aca:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000ad2:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000ad4:	8bfb      	ldrh	r3, [r7, #30]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000ade:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000ae0:	8bfb      	ldrh	r3, [r7, #30]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000ae6:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000af2:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000afa:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000afc:	8b7b      	ldrh	r3, [r7, #26]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b06:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000b08:	8b7b      	ldrh	r3, [r7, #26]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b0e:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b1a:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000b1c:	8b3b      	ldrh	r3, [r7, #24]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b22:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000b24:	8bbb      	ldrh	r3, [r7, #28]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b2e:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000b30:	8bbb      	ldrh	r3, [r7, #28]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b36:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000b38:	8abb      	ldrh	r3, [r7, #20]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b42:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000b44:	8abb      	ldrh	r3, [r7, #20]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b4a:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000b4c:	8afb      	ldrh	r3, [r7, #22]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000b5a:	8afb      	ldrh	r3, [r7, #22]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b66:	0a1b      	lsrs	r3, r3, #8
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000b7c:	8c3b      	ldrh	r3, [r7, #32]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000b8a:	8c3b      	ldrh	r3, [r7, #32]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000b90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

          if (HK_ON)
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x5d0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <HAL_TIM_OC_DelayElapsedCallback+0x5a0>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2226      	movs	r2, #38	; 0x26
 8000ba0:	490b      	ldr	r1, [pc, #44]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x5c8>)
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x5d4>)
 8000ba4:	f00b f8c6 	bl	800bd34 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x5d8>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x5cc>)
 8000bb8:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000bba:	e05b      	b.n	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>
          hk_counter++;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x5d8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x5d8>)
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	e055      	b.n	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>
 8000bc8:	24000430 	.word	0x24000430
 8000bcc:	24000050 	.word	0x24000050
 8000bd0:	24000474 	.word	0x24000474
 8000bd4:	2400049a 	.word	0x2400049a
 8000bd8:	24000022 	.word	0x24000022
 8000bdc:	24000334 	.word	0x24000334
 8000be0:	2400049c 	.word	0x2400049c
  else if (htim == &htim1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d143      	bne.n	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>
      if (PMT_ON)
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d03f      	beq.n	8000c74 <HAL_TIM_OC_DelayElapsedCallback+0x66c>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000bf4:	bf00      	nop
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	4822      	ldr	r0, [pc, #136]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 8000bfc:	f005 fc24 	bl	8006448 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f7      	bne.n	8000bf6 <HAL_TIM_OC_DelayElapsedCallback+0x5ee>
  		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000c06:	2301      	movs	r3, #1
 8000c08:	2201      	movs	r2, #1
 8000c0a:	491f      	ldr	r1, [pc, #124]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 8000c0e:	f009 fc99 	bl	800a544 <HAL_SPI_Transmit>
		pmt_raw = SPI1->RXDR;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c1a:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 8000c22:	22bb      	movs	r2, #187	; 0xbb
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c26:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000c28:	22bb      	movs	r2, #187	; 0xbb
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c2c:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c3a:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c44:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	121b      	asrs	r3, r3, #8
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c50:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c5a:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000c66:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	490a      	ldr	r1, [pc, #40]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 8000c6e:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x698>)
 8000c70:	f00b f860 	bl	800bd34 <HAL_UART_Transmit>
}
 8000c74:	bf00      	nop
 8000c76:	3740      	adds	r7, #64	; 0x40
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2400029c 	.word	0x2400029c
 8000c80:	24000020 	.word	0x24000020
 8000c84:	58020000 	.word	0x58020000
 8000c88:	0800dc70 	.word	0x0800dc70
 8000c8c:	2400018c 	.word	0x2400018c
 8000c90:	40013000 	.word	0x40013000
 8000c94:	24000454 	.word	0x24000454
 8000c98:	2400046c 	.word	0x2400046c
 8000c9c:	24000472 	.word	0x24000472
 8000ca0:	24000334 	.word	0x24000334

08000ca4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	498e      	ldr	r1, [pc, #568]	; (8000ee8 <HAL_UART_RxCpltCallback+0x244>)
 8000cb0:	488e      	ldr	r0, [pc, #568]	; (8000eec <HAL_UART_RxCpltCallback+0x248>)
 8000cb2:	f00b f8d5 	bl	800be60 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000cb6:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_UART_RxCpltCallback+0x244>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b1c      	cmp	r3, #28
 8000cc0:	f200 810d 	bhi.w	8000ede <HAL_UART_RxCpltCallback+0x23a>
 8000cc4:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <HAL_UART_RxCpltCallback+0x28>)
 8000cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cca:	bf00      	nop
 8000ccc:	08000da9 	.word	0x08000da9
 8000cd0:	08000dc5 	.word	0x08000dc5
 8000cd4:	08000de1 	.word	0x08000de1
 8000cd8:	08000e01 	.word	0x08000e01
 8000cdc:	08000e21 	.word	0x08000e21
 8000ce0:	08000e3d 	.word	0x08000e3d
 8000ce4:	08000e5d 	.word	0x08000e5d
 8000ce8:	08000e7d 	.word	0x08000e7d
 8000cec:	08000d5d 	.word	0x08000d5d
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d4f 	.word	0x08000d4f
 8000cf8:	08000d41 	.word	0x08000d41
 8000cfc:	08000e99 	.word	0x08000e99
 8000d00:	08000ea9 	.word	0x08000ea9
 8000d04:	08000eb9 	.word	0x08000eb9
 8000d08:	08000ec9 	.word	0x08000ec9
 8000d0c:	08000eb1 	.word	0x08000eb1
 8000d10:	08000ec1 	.word	0x08000ec1
 8000d14:	08000ed1 	.word	0x08000ed1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000dd3 	.word	0x08000dd3
 8000d20:	08000df1 	.word	0x08000df1
 8000d24:	08000e11 	.word	0x08000e11
 8000d28:	08000e2f 	.word	0x08000e2f
 8000d2c:	08000e4d 	.word	0x08000e4d
 8000d30:	08000e6d 	.word	0x08000e6d
 8000d34:	08000e8b 	.word	0x08000e8b
 8000d38:	08000d79 	.word	0x08000d79
 8000d3c:	08000d91 	.word	0x08000d91
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d40:	4b6b      	ldr	r3, [pc, #428]	; (8000ef0 <HAL_UART_RxCpltCallback+0x24c>)
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	2201      	movs	r2, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 fb96 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000d4c:	e0c7      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d4e:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <HAL_UART_RxCpltCallback+0x24c>)
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	2200      	movs	r2, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 fb8f 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000d5a:	e0c0      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000d5c:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <HAL_UART_RxCpltCallback+0x24c>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	2201      	movs	r2, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f005 fb88 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000d68:	e0b9      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000d6a:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <HAL_UART_RxCpltCallback+0x24c>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 fb81 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000d76:	e0b2      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000d78:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	f200 80ab 	bhi.w	8000ed8 <HAL_UART_RxCpltCallback+0x234>
    {
      step++;
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000d8c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d8e:	e0a3      	b.n	8000ed8 <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x1C:
  {
    if (step > 0)
 8000d90:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80a1 	beq.w	8000edc <HAL_UART_RxCpltCallback+0x238>
    {
      step--;
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <HAL_UART_RxCpltCallback+0x250>)
 8000da4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000da6:	e099      	b.n	8000edc <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_UART_RxCpltCallback+0x254>)
 8000daa:	2120      	movs	r1, #32
 8000dac:	2201      	movs	r2, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fb62 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000db4:	e093      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000db6:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_UART_RxCpltCallback+0x254>)
 8000db8:	2120      	movs	r1, #32
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f005 fb5b 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000dc2:	e08c      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_UART_RxCpltCallback+0x254>)
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fb54 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000dd0:	e085      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_UART_RxCpltCallback+0x254>)
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fb4d 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000dde:	e07e      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	2201      	movs	r2, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fb45 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000dee:	e076      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	2200      	movs	r2, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fb3d 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000dfe:	e06e      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	2201      	movs	r2, #1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 fb35 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e0e:	e066      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e10:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	2200      	movs	r2, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f005 fb2d 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e1e:	e05e      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	2201      	movs	r2, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 fb26 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e2c:	e057      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	2200      	movs	r2, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 fb1f 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e3a:	e050      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e42:	2201      	movs	r2, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fb17 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e4a:	e048      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e52:	2200      	movs	r2, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f005 fb0f 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e5a:	e040      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	2201      	movs	r2, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fb07 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e6a:	e038      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e72:	2200      	movs	r2, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 faff 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e7a:	e030      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	2201      	movs	r2, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 faf8 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e88:	e029      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_UART_RxCpltCallback+0x258>)
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 faf1 	bl	8006478 <HAL_GPIO_WritePin>
    break;
 8000e96:	e022      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000e98:	f001 fa96 	bl	80023c8 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f006 f88e 	bl	8006fc0 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000ea4:	f7ff fb9a 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_RxCpltCallback+0x25c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
    break;
 8000eae:	e016      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_UART_RxCpltCallback+0x25c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    break;
 8000eb6:	e012      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_UART_RxCpltCallback+0x260>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
    break;
 8000ebe:	e00e      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_UART_RxCpltCallback+0x260>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    break;
 8000ec6:	e00a      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_UART_RxCpltCallback+0x264>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
    break;
 8000ece:	e006      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_UART_RxCpltCallback+0x264>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    break;
 8000ed6:	e002      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000ed8:	bf00      	nop
 8000eda:	e000      	b.n	8000ede <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000edc:	bf00      	nop
  }
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	240003c4 	.word	0x240003c4
 8000eec:	24000334 	.word	0x24000334
 8000ef0:	58021400 	.word	0x58021400
 8000ef4:	24000452 	.word	0x24000452
 8000ef8:	58020400 	.word	0x58020400
 8000efc:	58020800 	.word	0x58020800
 8000f00:	24000020 	.word	0x24000020
 8000f04:	24000021 	.word	0x24000021
 8000f08:	24000022 	.word	0x24000022

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f001 f9a4 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f864 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fbd4 	bl	80016c4 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f1c:	f000 f95e 	bl	80011dc <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f20:	f000 fa7a 	bl	8001418 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f24:	f000 fb08 	bl	8001538 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f28:	f000 f98a 	bl	8001240 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f2c:	f000 f9c8 	bl	80012c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f30:	f000 fa1c 	bl	800136c <MX_SPI2_Init>
  MX_ADC1_Init();
 8000f34:	f000 f8da 	bl	80010ec <MX_ADC1_Init>
  MX_DMA_Init();
 8000f38:	f000 fba4 	bl	8001684 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f3c:	f000 fb56 	bl	80015ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <main+0xbc>)
 8000f44:	f002 fe75 	bl	8003c32 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4820      	ldr	r0, [pc, #128]	; (8000fcc <main+0xc0>)
 8000f4c:	f009 fdd6 	bl	800aafc <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f50:	210c      	movs	r1, #12
 8000f52:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <main+0xc4>)
 8000f54:	f009 fdd2 	bl	800aafc <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000f58:	bf00      	nop
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <main+0xc8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f68:	d0f7      	beq.n	8000f5a <main+0x4e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000f6a:	bf00      	nop
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <main+0xc8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f7a:	d1f7      	bne.n	8000f6c <main+0x60>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <main+0xcc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <main+0xcc>)
 8000f84:	2210      	movs	r2, #16
 8000f86:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <main+0xcc>)
 8000f8a:	225b      	movs	r2, #91	; 0x5b
 8000f8c:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <main+0xcc>)
 8000f90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <main+0xc8>)
 8000f96:	f00c fc73 	bl	800d880 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x98>
      Error_Handler();
 8000fa0:	f000 fc4e 	bl	8001840 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <main+0xc8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <main+0xc8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fb2:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <main+0xc8>)
 8000fb6:	f00c fcbe 	bl	800d936 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <main+0xd0>)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <main+0xc8>)
 8000fc0:	f00a ff4e 	bl	800be60 <HAL_UART_Receive_IT>
 8000fc4:	e7f9      	b.n	8000fba <main+0xae>
 8000fc6:	bf00      	nop
 8000fc8:	2400012c 	.word	0x2400012c
 8000fcc:	2400029c 	.word	0x2400029c
 8000fd0:	240002e8 	.word	0x240002e8
 8000fd4:	24000334 	.word	0x24000334
 8000fd8:	24000428 	.word	0x24000428
 8000fdc:	240003c4 	.word	0x240003c4

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09c      	sub	sp, #112	; 0x70
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	224c      	movs	r2, #76	; 0x4c
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00c fe1e 	bl	800dc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00c fe18 	bl	800dc30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001000:	2002      	movs	r0, #2
 8001002:	f006 f819 	bl	8007038 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <SystemClock_Config+0x100>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <SystemClock_Config+0x100>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <SystemClock_Config+0x100>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <SystemClock_Config+0x104>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001028:	4a2e      	ldr	r2, [pc, #184]	; (80010e4 <SystemClock_Config+0x104>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <SystemClock_Config+0x104>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800103c:	bf00      	nop
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <SystemClock_Config+0x104>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104a:	d1f8      	bne.n	800103e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemClock_Config+0x108>)
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <SystemClock_Config+0x108>)
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800105c:	2301      	movs	r3, #1
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2340      	movs	r3, #64	; 0x40
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001070:	230c      	movs	r3, #12
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001080:	230c      	movs	r3, #12
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001084:	2300      	movs	r3, #0
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4618      	mov	r0, r3
 8001092:	f006 f80b 	bl	80070ac <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800109c:	f000 fbd0 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	233f      	movs	r3, #63	; 0x3f
 80010a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2303      	movs	r3, #3
 80010a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80010a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2101      	movs	r1, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fc1d 	bl	8007908 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80010d4:	f000 fbb4 	bl	8001840 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3770      	adds	r7, #112	; 0x70
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58000400 	.word	0x58000400
 80010e4:	58024800 	.word	0x58024800
 80010e8:	58024400 	.word	0x58024400

080010ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <MX_ADC1_Init+0xe8>)
 8001114:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800112a:	2204      	movs	r2, #4
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001136:	2200      	movs	r2, #0
 8001138:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800113c:	2201      	movs	r2, #1
 800113e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116c:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_ADC1_Init+0xe4>)
 800116e:	f001 fb2f 	bl	80027d0 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001178:	f000 fb62 	bl	8001840 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <MX_ADC1_Init+0xe4>)
 8001188:	f002 fb44 	bl	8003814 <HAL_ADCEx_MultiModeConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001192:	f000 fb55 	bl	8001840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_ADC1_Init+0xec>)
 8001198:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119a:	2306      	movs	r3, #6
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a8:	2304      	movs	r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_ADC1_Init+0xe4>)
 80011ba:	f001 fd8d 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80011c4:	f000 fb3c 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24000050 	.word	0x24000050
 80011d4:	40022000 	.word	0x40022000
 80011d8:	2e300800 	.word	0x2e300800

080011dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2224      	movs	r2, #36	; 0x24
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00c fd21 	bl	800dc30 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_DAC1_Init+0x5c>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_DAC1_Init+0x60>)
 80011f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011f4:	4810      	ldr	r0, [pc, #64]	; (8001238 <MX_DAC1_Init+0x5c>)
 80011f6:	f002 fcfa 	bl	8003bee <HAL_DAC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001200:	f000 fb1e 	bl	8001840 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_DAC1_Init+0x5c>)
 8001220:	f002 fd5a 	bl	8003cd8 <HAL_DAC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800122a:	f000 fb09 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2400012c 	.word	0x2400012c
 800123c:	40007400 	.word	0x40007400

08001240 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_I2C1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_I2C1_Init+0x74>)
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <MX_I2C1_Init+0x7c>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x74>)
 800127c:	f005 f916 	bl	80064ac <HAL_I2C_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 fadb 	bl	8001840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x74>)
 800128e:	f005 fdff 	bl	8006e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 fad2 	bl	8001840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_I2C1_Init+0x74>)
 80012a0:	f005 fe41 	bl	8006f26 <HAL_I2CEx_ConfigDigitalFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 fac9 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000140 	.word	0x24000140
 80012b8:	40005400 	.word	0x40005400
 80012bc:	00506682 	.word	0x00506682

080012c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012c6:	4a28      	ldr	r2, [pc, #160]	; (8001368 <MX_SPI1_Init+0xa8>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012da:	220f      	movs	r2, #15
 80012dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012f4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80012f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI1_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_SPI1_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_SPI1_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI1_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI1_Init+0xa4>)
 8001352:	f008 fff1 	bl	800a338 <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800135c:	f000 fa70 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2400018c 	.word	0x2400018c
 8001368:	40013000 	.word	0x40013000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <MX_SPI2_Init+0xa8>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001386:	220f      	movs	r2, #15
 8001388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_SPI2_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_SPI2_Init+0xa4>)
 8001398:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800139c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013a0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80013a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0xa4>)
 80013fe:	f008 ff9b 	bl	800a338 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001408:	f000 fa1a 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	24000214 	.word	0x24000214
 8001414:	40003800 	.word	0x40003800

08001418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	222c      	movs	r2, #44	; 0x2c
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00c fbf3 	bl	800dc30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <MX_TIM1_Init+0x118>)
 800144c:	4a39      	ldr	r2, [pc, #228]	; (8001534 <MX_TIM1_Init+0x11c>)
 800144e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_TIM1_Init+0x118>)
 8001452:	2263      	movs	r2, #99	; 0x63
 8001454:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_TIM1_Init+0x118>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <MX_TIM1_Init+0x118>)
 800145e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001462:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <MX_TIM1_Init+0x118>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <MX_TIM1_Init+0x118>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <MX_TIM1_Init+0x118>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001476:	482e      	ldr	r0, [pc, #184]	; (8001530 <MX_TIM1_Init+0x118>)
 8001478:	f009 fc9a 	bl	800adb0 <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001482:	f000 f9dd 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001492:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001496:	4619      	mov	r1, r3
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <MX_TIM1_Init+0x118>)
 800149a:	f00a fad1 	bl	800ba40 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014a4:	f000 f9cc 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a8:	2360      	movs	r3, #96	; 0x60
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80014ac:	f240 13df 	movw	r3, #479	; 0x1df
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <MX_TIM1_Init+0x118>)
 80014d0:	f009 fde4 	bl	800b09c <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80014da:	f000 f9b1 	bl	8001840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM1_Init+0x118>)
 8001514:	f00a fb22 	bl	800bb5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800151e:	f000 f98f 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM1_Init+0x118>)
 8001524:	f000 fcb8 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 8001528:	bf00      	nop
 800152a:	3758      	adds	r7, #88	; 0x58
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2400029c 	.word	0x2400029c
 8001534:	40010000 	.word	0x40010000

08001538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001566:	2263      	movs	r2, #99	; 0x63
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001572:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001586:	f009 fc13 	bl	800adb0 <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 f956 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015a4:	f00a fa4c 	bl	800ba40 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015ae:	f000 f947 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80015b6:	f240 13df 	movw	r3, #479	; 0x1df
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	220c      	movs	r2, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015cc:	f009 fd66 	bl	800b09c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015d6:	f000 f933 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015dc:	f000 fc5c 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	240002e8 	.word	0x240002e8

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <MX_USART1_UART_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_USART1_UART_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_USART1_UART_Init+0x90>)
 80015f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_USART1_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001636:	f00a fb2d 	bl	800bc94 <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001640:	f000 f8fe 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_USART1_UART_Init+0x90>)
 8001648:	f00c f9e1 	bl	800da0e <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001652:	f000 f8f5 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x90>)
 800165a:	f00c fa16 	bl	800da8a <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001664:	f000 f8ec 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_USART1_UART_Init+0x90>)
 800166a:	f00c f997 	bl	800d99c <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 f8e4 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24000334 	.word	0x24000334
 8001680:	40011000 	.word	0x40011000

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_DMA_Init+0x3c>)
 800168c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <MX_DMA_Init+0x3c>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_DMA_Init+0x3c>)
 800169c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	200b      	movs	r0, #11
 80016ae:	f002 fa6a 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b2:	200b      	movs	r0, #11
 80016b4:	f002 fa81 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <MX_GPIO_Init+0x168>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <MX_GPIO_Init+0x168>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b50      	ldr	r3, [pc, #320]	; (800182c <MX_GPIO_Init+0x168>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <MX_GPIO_Init+0x168>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a4b      	ldr	r2, [pc, #300]	; (800182c <MX_GPIO_Init+0x168>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <MX_GPIO_Init+0x168>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	4b45      	ldr	r3, [pc, #276]	; (800182c <MX_GPIO_Init+0x168>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <MX_GPIO_Init+0x168>)
 800171e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <MX_GPIO_Init+0x168>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <MX_GPIO_Init+0x168>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <MX_GPIO_Init+0x168>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <MX_GPIO_Init+0x168>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <MX_GPIO_Init+0x168>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a34      	ldr	r2, [pc, #208]	; (800182c <MX_GPIO_Init+0x168>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_GPIO_Init+0x168>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <MX_GPIO_Init+0x168>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	4a2d      	ldr	r2, [pc, #180]	; (800182c <MX_GPIO_Init+0x168>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <MX_GPIO_Init+0x168>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	21c0      	movs	r1, #192	; 0xc0
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <MX_GPIO_Init+0x16c>)
 8001794:	f004 fe70 	bl	8006478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <MX_GPIO_Init+0x170>)
 80017a0:	f004 fe6a 	bl	8006478 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2160      	movs	r1, #96	; 0x60
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <MX_GPIO_Init+0x174>)
 80017aa:	f004 fe65 	bl	8006478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <MX_GPIO_Init+0x16c>)
 80017c6:	f004 fc8f 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80017ca:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80017ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <MX_GPIO_Init+0x170>)
 80017e4:	f004 fc80 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017e8:	2360      	movs	r3, #96	; 0x60
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f8:	2307      	movs	r3, #7
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_GPIO_Init+0x178>)
 8001804:	f004 fc70 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <MX_GPIO_Init+0x174>)
 8001820:	f004 fc62 	bl	80060e8 <HAL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400
 8001830:	58021400 	.word	0x58021400
 8001834:	58020800 	.word	0x58020800
 8001838:	58020400 	.word	0x58020400
 800183c:	58020c00 	.word	0x58020c00

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_MspInit+0x30>)
 8001854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001858:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x30>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x30>)
 8001864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	58024400 	.word	0x58024400

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0bc      	sub	sp, #240	; 0xf0
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	22bc      	movs	r2, #188	; 0xbc
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00c f9c5 	bl	800dc30 <memset>
  if(hadc->Instance==ADC1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a70      	ldr	r2, [pc, #448]	; (8001a6c <HAL_ADC_MspInit+0x1ec>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f040 80d8 	bne.w	8001a62 <HAL_ADC_MspInit+0x1e2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80018bc:	2309      	movs	r3, #9
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80018d0:	2320      	movs	r3, #32
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80018d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 fb9b 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 80018f0:	f7ff ffa6 	bl	8001840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 80018f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018fa:	4a5d      	ldr	r2, [pc, #372]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a55      	ldr	r2, [pc, #340]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001940:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195e:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800196c:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_ADC_MspInit+0x1f0>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800198a:	2333      	movs	r3, #51	; 0x33
 800198c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a0:	4619      	mov	r1, r3
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <HAL_ADC_MspInit+0x1f4>)
 80019a4:	f004 fba0 	bl	80060e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019a8:	23ef      	movs	r3, #239	; 0xef
 80019aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019be:	4619      	mov	r1, r3
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <HAL_ADC_MspInit+0x1f8>)
 80019c2:	f004 fb91 	bl	80060e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019dc:	4619      	mov	r1, r3
 80019de:	4827      	ldr	r0, [pc, #156]	; (8001a7c <HAL_ADC_MspInit+0x1fc>)
 80019e0:	f004 fb82 	bl	80060e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019fc:	4619      	mov	r1, r3
 80019fe:	4820      	ldr	r0, [pc, #128]	; (8001a80 <HAL_ADC_MspInit+0x200>)
 8001a00:	f004 fb72 	bl	80060e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <HAL_ADC_MspInit+0x208>)
 8001a08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a46:	480f      	ldr	r0, [pc, #60]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a48:	f002 fa76 	bl	8003f38 <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_MspInit+0x1d6>
    {
      Error_Handler();
 8001a52:	f7ff fef5 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a5c:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_ADC_MspInit+0x204>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	37f0      	adds	r7, #240	; 0xf0
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020800 	.word	0x58020800
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	58021400 	.word	0x58021400
 8001a84:	240000b4 	.word	0x240000b4
 8001a88:	40020010 	.word	0x40020010

08001a8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_DAC_MspInit+0x80>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d129      	bne.n	8001b02 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_DAC_MspInit+0x84>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aea:	2310      	movs	r3, #16
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_DAC_MspInit+0x88>)
 8001afe:	f004 faf3 	bl	80060e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40007400 	.word	0x40007400
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58020000 	.word	0x58020000

08001b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	22bc      	movs	r2, #188	; 0xbc
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00c f879 	bl	800dc30 <memset>
  if(hi2c->Instance==I2C1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_I2C_MspInit+0xc0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d142      	bne.n	8001bce <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fa62 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b62:	f7ff fe6d 	bl	8001840 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <HAL_I2C_MspInit+0xc8>)
 8001bac:	f004 fa9c 	bl	80060e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_I2C_MspInit+0xc4>)
 8001bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	37e0      	adds	r7, #224	; 0xe0
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58020400 	.word	0x58020400

08001be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0bc      	sub	sp, #240	; 0xf0
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	22bc      	movs	r2, #188	; 0xbc
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00c f813 	bl	800dc30 <memset>
  if(hspi->Instance==SPI1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6d      	ldr	r2, [pc, #436]	; (8001dc4 <HAL_SPI_MspInit+0x1e0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d166      	bne.n	8001ce2 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	4618      	mov	r0, r3
 8001c24:	f006 f9fc 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c2e:	f7ff fe07 	bl	8001840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c38:	4a63      	ldr	r2, [pc, #396]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4846      	ldr	r0, [pc, #280]	; (8001dcc <HAL_SPI_MspInit+0x1e8>)
 8001cb2:	f004 fa19 	bl	80060e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001cb6:	2318      	movs	r3, #24
 8001cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cd8:	4619      	mov	r1, r3
 8001cda:	483d      	ldr	r0, [pc, #244]	; (8001dd0 <HAL_SPI_MspInit+0x1ec>)
 8001cdc:	f004 fa04 	bl	80060e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ce0:	e06b      	b.n	8001dba <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_SPI_MspInit+0x1f0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d166      	bne.n	8001dba <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 f990 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_SPI_MspInit+0x126>
      Error_Handler();
 8001d06:	f7ff fd9b 	bl	8001840 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d10:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_SPI_MspInit+0x1e4>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d64:	2308      	movs	r3, #8
 8001d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d86:	4619      	mov	r1, r3
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <HAL_SPI_MspInit+0x1f4>)
 8001d8a:	f004 f9ad 	bl	80060e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001da8:	2305      	movs	r3, #5
 8001daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001db2:	4619      	mov	r1, r3
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <HAL_SPI_MspInit+0x1ec>)
 8001db6:	f004 f997 	bl	80060e8 <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	37f0      	adds	r7, #240	; 0xf0
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40013000 	.word	0x40013000
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020c00 	.word	0x58020c00
 8001dd0:	58020400 	.word	0x58020400
 8001dd4:	40003800 	.word	0x40003800
 8001dd8:	58020800 	.word	0x58020800

08001ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_TIM_PWM_MspInit+0xb4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d12f      	bne.n	8001e4e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2018      	movs	r0, #24
 8001e12:	f001 feb8 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001e16:	2018      	movs	r0, #24
 8001e18:	f001 fecf 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2019      	movs	r0, #25
 8001e22:	f001 feb0 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e26:	2019      	movs	r0, #25
 8001e28:	f001 fec7 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	201a      	movs	r0, #26
 8001e32:	f001 fea8 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001e36:	201a      	movs	r0, #26
 8001e38:	f001 febf 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	201b      	movs	r0, #27
 8001e42:	f001 fea0 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e46:	201b      	movs	r0, #27
 8001e48:	f001 feb7 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e4c:	e01b      	b.n	8001e86 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d116      	bne.n	8001e86 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f001 fe83 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f001 fe9a 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	58024400 	.word	0x58024400

08001e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_TIM_MspPostInit+0xb8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d120      	bne.n	8001efc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4818      	ldr	r0, [pc, #96]	; (8001f58 <HAL_TIM_MspPostInit+0xc0>)
 8001ef6:	f004 f8f7 	bl	80060e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001efa:	e024      	b.n	8001f46 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d11f      	bne.n	8001f46 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_TIM_MspPostInit+0xbc>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f36:	2301      	movs	r3, #1
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_TIM_MspPostInit+0xc4>)
 8001f42:	f004 f8d1 	bl	80060e8 <HAL_GPIO_Init>
}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020000 	.word	0x58020000
 8001f5c:	58020400 	.word	0x58020400

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0b8      	sub	sp, #224	; 0xe0
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	22bc      	movs	r2, #188	; 0xbc
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00b fe55 	bl	800dc30 <memset>
  if(huart->Instance==USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_UART_MspInit+0xc0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d142      	bne.n	8002016 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 f83e 	bl	8008020 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001faa:	f7ff fc49 	bl	8001840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_UART_MspInit+0xc4>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002004:	2307      	movs	r3, #7
 8002006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <HAL_UART_MspInit+0xc8>)
 8002012:	f004 f869 	bl	80060e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	37e0      	adds	r7, #224	; 0xe0
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	58024400 	.word	0x58024400
 8002028:	58020000 	.word	0x58020000

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 f962 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA1_Stream0_IRQHandler+0x10>)
 8002086:	f002 fd1d 	bl	8004ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	240000b4 	.word	0x240000b4

08002094 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM1_BRK_IRQHandler+0x10>)
 800209a:	f008 fee0 	bl	800ae5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2400029c 	.word	0x2400029c

080020a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <TIM1_UP_IRQHandler+0x10>)
 80020ae:	f008 fed6 	bl	800ae5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2400029c 	.word	0x2400029c

080020bc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM1_TRG_COM_IRQHandler+0x10>)
 80020c2:	f008 fecc 	bl	800ae5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2400029c 	.word	0x2400029c

080020d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM1_CC_IRQHandler+0x10>)
 80020d6:	f008 fec2 	bl	800ae5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2400029c 	.word	0x2400029c

080020e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM2_IRQHandler+0x10>)
 80020ea:	f008 feb8 	bl	800ae5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	240002e8 	.word	0x240002e8

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020fc:	4b37      	ldr	r3, [pc, #220]	; (80021dc <SystemInit+0xe4>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a36      	ldr	r2, [pc, #216]	; (80021dc <SystemInit+0xe4>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <SystemInit+0xe8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	2b06      	cmp	r3, #6
 8002116:	d807      	bhi.n	8002128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <SystemInit+0xe8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 030f 	bic.w	r3, r3, #15
 8002120:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <SystemInit+0xe8>)
 8002122:	f043 0307 	orr.w	r3, r3, #7
 8002126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <SystemInit+0xec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2d      	ldr	r2, [pc, #180]	; (80021e4 <SystemInit+0xec>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <SystemInit+0xec>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <SystemInit+0xec>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4929      	ldr	r1, [pc, #164]	; (80021e4 <SystemInit+0xec>)
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <SystemInit+0xf0>)
 8002142:	4013      	ands	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <SystemInit+0xe8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <SystemInit+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 030f 	bic.w	r3, r3, #15
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <SystemInit+0xe8>)
 800215c:	f043 0307 	orr.w	r3, r3, #7
 8002160:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <SystemInit+0xec>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <SystemInit+0xec>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <SystemInit+0xec>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <SystemInit+0xec>)
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <SystemInit+0xf4>)
 8002178:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <SystemInit+0xec>)
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <SystemInit+0xf8>)
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <SystemInit+0xec>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <SystemInit+0xfc>)
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <SystemInit+0xec>)
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <SystemInit+0xec>)
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <SystemInit+0xfc>)
 8002190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <SystemInit+0xec>)
 8002194:	2200      	movs	r2, #0
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <SystemInit+0xec>)
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <SystemInit+0xfc>)
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <SystemInit+0xec>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <SystemInit+0xec>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <SystemInit+0xec>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <SystemInit+0xec>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SystemInit+0x100>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <SystemInit+0x104>)
 80021bc:	4013      	ands	r3, r2
 80021be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c2:	d202      	bcs.n	80021ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <SystemInit+0x108>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <SystemInit+0x10c>)
 80021cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	52002000 	.word	0x52002000
 80021e4:	58024400 	.word	0x58024400
 80021e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021ec:	02020200 	.word	0x02020200
 80021f0:	01ff0000 	.word	0x01ff0000
 80021f4:	01010280 	.word	0x01010280
 80021f8:	5c001000 	.word	0x5c001000
 80021fc:	ffff0000 	.word	0xffff0000
 8002200:	51008108 	.word	0x51008108
 8002204:	52004000 	.word	0x52004000

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800220c:	f7ff ff74 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f00b fcd7 	bl	800dbe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe fe67 	bl	8000f0c <main>
  bx  lr
 800223e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002244:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002248:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 800224c:	0800dcc4 	.word	0x0800dcc4
  ldr r2, =_sbss
 8002250:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 8002254:	240004a4 	.word	0x240004a4

08002258 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC3_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002262:	2003      	movs	r0, #3
 8002264:	f001 fc84 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002268:	f005 fd04 	bl	8007c74 <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_Init+0x68>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4913      	ldr	r1, [pc, #76]	; (80022c8 <HAL_Init+0x6c>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_Init+0x68>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_Init+0x6c>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_Init+0x70>)
 800229e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_Init+0x74>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f814 	bl	80022d4 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e002      	b.n	80022bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022b6:	f7ff fac9 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58024400 	.word	0x58024400
 80022c8:	0800dc74 	.word	0x0800dc74
 80022cc:	24000028 	.word	0x24000028
 80022d0:	24000024 	.word	0x24000024

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e021      	b.n	800232c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_InitTick+0x64>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_InitTick+0x60>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fc69 	bl	8003bd6 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800231c:	f001 fc33 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x68>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	24000030 	.word	0x24000030
 8002338:	24000024 	.word	0x24000024
 800233c:	2400002c 	.word	0x2400002c

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	24000030 	.word	0x24000030
 8002364:	240004a0 	.word	0x240004a0

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	240004a0 	.word	0x240004a0

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000030 	.word	0x24000030

080023c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_SuspendTick+0x1c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_SuspendTick+0x1c>)
 80023d2:	f023 0302 	bic.w	r3, r3, #2
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_GetREVID+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0c1b      	lsrs	r3, r3, #16
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	5c001000 	.word	0x5c001000

08002400 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	609a      	str	r2, [r3, #8]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3360      	adds	r3, #96	; 0x60
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	431a      	orrs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	611a      	str	r2, [r3, #16]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	431a      	orrs	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]
  }
}
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3330      	adds	r3, #48	; 0x30
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	211f      	movs	r1, #31
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 011f 	and.w	r1, r3, #31
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f023 0203 	bic.w	r2, r3, #3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60da      	str	r2, [r3, #12]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3314      	adds	r3, #20
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0e5b      	lsrs	r3, r3, #25
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0d1b      	lsrs	r3, r3, #20
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2107      	movs	r1, #7
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	401a      	ands	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0d1b      	lsrs	r3, r3, #20
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	431a      	orrs	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0318 	and.w	r3, r3, #24
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002630:	40d9      	lsrs	r1, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	400b      	ands	r3, r1
 8002636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	000fffff 	.word	0x000fffff

08002654 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 031f 	and.w	r3, r3, #31
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <LL_ADC_DisableDeepPowerDown+0x20>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	5fffffc0 	.word	0x5fffffc0

08002694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	6fffffc0 	.word	0x6fffffc0

080026e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f8:	d101      	bne.n	80026fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <LL_ADC_Enable+0x24>)
 800271a:	4013      	ands	r3, r2
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	7fffffc0 	.word	0x7fffffc0

08002734 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <LL_ADC_IsEnabled+0x18>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LL_ADC_IsEnabled+0x1a>
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <LL_ADC_REG_StartConversion+0x24>)
 800276a:	4013      	ands	r3, r2
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	7fffffc0 	.word	0x7fffffc0

08002784 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d101      	bne.n	800279c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e18f      	b.n	8002b0a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff f841 	bl	8001880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff3f 	bl	8002694 <LL_ADC_IsDeepPowerDownEnabled>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff25 	bl	8002670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff5a 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff3e 	bl	80026bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002840:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <HAL_ADC_Init+0x290>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_ADC_Init+0x294>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002852:	e002      	b.n	800285a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff3d 	bl	80026e4 <LL_ADC_IsInternalRegulatorEnabled>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff77 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002896:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 8129 	bne.w	8002af8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 8125 	bne.w	8002af8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff36 	bl	8002734 <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d136      	bne.n	800293c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_ADC_Init+0x298>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_Init+0x112>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_ADC_Init+0x29c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10e      	bne.n	8002900 <HAL_ADC_Init+0x130>
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_ADC_Init+0x298>)
 80028e4:	f7ff ff26 	bl	8002734 <LL_ADC_IsEnabled>
 80028e8:	4604      	mov	r4, r0
 80028ea:	4860      	ldr	r0, [pc, #384]	; (8002a6c <HAL_ADC_Init+0x29c>)
 80028ec:	f7ff ff22 	bl	8002734 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4323      	orrs	r3, r4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e008      	b.n	8002912 <HAL_ADC_Init+0x142>
 8002900:	485b      	ldr	r0, [pc, #364]	; (8002a70 <HAL_ADC_Init+0x2a0>)
 8002902:	f7ff ff17 	bl	8002734 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_ADC_Init+0x298>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_ADC_Init+0x15a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_ADC_Init+0x29c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_ADC_Init+0x15e>
 800292a:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_ADC_Init+0x2a4>)
 800292c:	e000      	b.n	8002930 <HAL_ADC_Init+0x160>
 800292e:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_ADC_Init+0x2a8>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7ff fd62 	bl	8002400 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800293c:	f7ff fd54 	bl	80023e8 <HAL_GetREVID>
 8002940:	4603      	mov	r3, r0
 8002942:	f241 0203 	movw	r2, #4099	; 0x1003
 8002946:	4293      	cmp	r3, r2
 8002948:	d914      	bls.n	8002974 <HAL_ADC_Init+0x1a4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b10      	cmp	r3, #16
 8002950:	d110      	bne.n	8002974 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7d5b      	ldrb	r3, [r3, #21]
 8002956:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800295c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002962:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7f1b      	ldrb	r3, [r3, #28]
 8002968:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800296a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800296c:	f043 030c 	orr.w	r3, r3, #12
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e00d      	b.n	8002990 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7d5b      	ldrb	r3, [r3, #21]
 8002978:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800297e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002984:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7f1b      	ldrb	r3, [r3, #28]
 800298a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7f1b      	ldrb	r3, [r3, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	3b01      	subs	r3, #1
 800299e:	045b      	lsls	r3, r3, #17
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_ADC_Init+0x2ac>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	69b9      	ldr	r1, [r7, #24]
 80029d2:	430b      	orrs	r3, r1
 80029d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fed2 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fedf 	bl	80027aa <LL_ADC_INJ_IsConversionOngoing>
 80029ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d15f      	bne.n	8002ab4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d15c      	bne.n	8002ab4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7d1b      	ldrb	r3, [r3, #20]
 80029fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_ADC_Init+0x2b0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d130      	bne.n	8002a88 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_ADC_Init+0x2b4>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a3a:	3a01      	subs	r2, #1
 8002a3c:	0411      	lsls	r1, r2, #16
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	e01c      	b.n	8002a98 <HAL_ADC_Init+0x2c8>
 8002a5e:	bf00      	nop
 8002a60:	24000024 	.word	0x24000024
 8002a64:	053e2d63 	.word	0x053e2d63
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40022100 	.word	0x40022100
 8002a70:	58026000 	.word	0x58026000
 8002a74:	40022300 	.word	0x40022300
 8002a78:	58026300 	.word	0x58026300
 8002a7c:	fff0c003 	.word	0xfff0c003
 8002a80:	ffffbffc 	.word	0xffffbffc
 8002a84:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fd80 	bl	80035b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10c      	bne.n	8002ad6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f023 010f 	bic.w	r1, r3, #15
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad4:	e007      	b.n	8002ae6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 020f 	bic.w	r2, r2, #15
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
 8002af6:	e007      	b.n	8002b08 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0210 	orr.w	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	bf00      	nop

08002b14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_ADC_Start_DMA+0x168>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_ADC_Start_DMA+0x20>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_ADC_Start_DMA+0x16c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_Start_DMA+0x24>
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_ADC_Start_DMA+0x170>)
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_Start_DMA+0x26>
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_ADC_Start_DMA+0x174>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fd8a 	bl	8002654 <LL_ADC_GetMultimode>
 8002b40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fe1c 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 808c 	bne.w	8002c6c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Start_DMA+0x4e>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e087      	b.n	8002c72 <HAL_ADC_Start_DMA+0x15e>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d002      	beq.n	8002b7c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d170      	bne.n	8002c5e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fbfb 	bl	8003378 <ADC_Enable>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d163      	bne.n	8002c54 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b90:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <HAL_ADC_Start_DMA+0x178>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a37      	ldr	r2, [pc, #220]	; (8002c80 <HAL_ADC_Start_DMA+0x16c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d002      	beq.n	8002bac <HAL_ADC_Start_DMA+0x98>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e000      	b.n	8002bae <HAL_ADC_Start_DMA+0x9a>
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_ADC_Start_DMA+0x168>)
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f023 0206 	bic.w	r2, r3, #6
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	659a      	str	r2, [r3, #88]	; 0x58
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_ADC_Start_DMA+0x17c>)
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_ADC_Start_DMA+0x180>)
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_ADC_Start_DMA+0x184>)
 8002bfe:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	221c      	movs	r2, #28
 8002c06:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0210 	orr.w	r2, r2, #16
 8002c1e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7ff fcaf 	bl	800258e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3340      	adds	r3, #64	; 0x40
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f001 fcd6 	bl	80045f0 <HAL_DMA_Start_IT>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fd85 	bl	800275c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c52:	e00d      	b.n	8002c70 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002c5c:	e008      	b.n	8002c70 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c6a:	e001      	b.n	8002c70 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40022100 	.word	0x40022100
 8002c84:	40022300 	.word	0x40022300
 8002c88:	58026300 	.word	0x58026300
 8002c8c:	fffff0fe 	.word	0xfffff0fe
 8002c90:	0800348d 	.word	0x0800348d
 8002c94:	08003565 	.word	0x08003565
 8002c98:	08003581 	.word	0x08003581

08002c9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b0a1      	sub	sp, #132	; 0x84
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a9d      	ldr	r2, [pc, #628]	; (8002f68 <HAL_ADC_ConfigChannel+0x290>)
 8002cf2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x2a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e321      	b.n	8003346 <HAL_ADC_ConfigChannel+0x66e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fd38 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8306 	bne.w	8003328 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x62>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	e016      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x90>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	69d1      	ldr	r1, [r2, #28]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7ff fbd7 	bl	8002536 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fcf9 	bl	8002784 <LL_ADC_REG_IsConversionOngoing>
 8002d92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fd06 	bl	80027aa <LL_ADC_INJ_IsConversionOngoing>
 8002d9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80b3 	bne.w	8002f0e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 80af 	bne.w	8002f0e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f7ff fbf9 	bl	80025b4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dc2:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_ADC_ConfigChannel+0x294>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dce:	d10b      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x110>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	e01d      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x14c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x136>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	e00a      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x14c>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d027      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3c:	f7ff fb14 	bl	8002468 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	7e5b      	ldrb	r3, [r3, #25]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d102      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x17e>
 8002e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e54:	e000      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x180>
 8002e56:	2300      	movs	r3, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7ff fb3e 	bl	80024da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7e1b      	ldrb	r3, [r3, #24]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x19c>
 8002e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e72:	e000      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x19e>
 8002e74:	2300      	movs	r3, #0
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7ff fb16 	bl	80024a8 <LL_ADC_SetDataRightShift>
 8002e7c:	e047      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d107      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ea0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	069b      	lsls	r3, r3, #26
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ec4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	069b      	lsls	r3, r3, #26
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d107      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d107      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f0c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fc0e 	bl	8002734 <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 820d 	bne.w	800333a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f7ff fb6d 	bl	800260c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <HAL_ADC_ConfigChannel+0x290>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	f040 8133 	bne.w	80031a4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d110      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x298>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	bf94      	ite	ls
 8002f5e:	2301      	movls	r3, #1
 8002f60:	2300      	movhi	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x2cc>
 8002f66:	bf00      	nop
 8002f68:	47ff0000 	.word	0x47ff0000
 8002f6c:	5c001000 	.word	0x5c001000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e003      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	bf94      	ite	ls
 8002f9e:	2301      	movls	r3, #1
 8002fa0:	2300      	movhi	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d079      	beq.n	800309c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x2ec>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	069b      	lsls	r3, r3, #26
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc2:	e015      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x318>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x338>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	3301      	adds	r3, #1
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	e017      	b.n	8003040 <HAL_ADC_ConfigChannel+0x368>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800302c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x38e>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	3301      	adds	r3, #1
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	051b      	lsls	r3, r3, #20
 8003064:	e018      	b.n	8003098 <HAL_ADC_ConfigChannel+0x3c0>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800307e:	2320      	movs	r3, #32
 8003080:	e003      	b.n	800308a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003098:	430b      	orrs	r3, r1
 800309a:	e07e      	b.n	800319a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x3e0>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	3301      	adds	r3, #1
 80030b0:	069b      	lsls	r3, r3, #26
 80030b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b6:	e015      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x40c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e003      	b.n	80030dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	069b      	lsls	r3, r3, #26
 80030e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x42c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	3301      	adds	r3, #1
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	e017      	b.n	8003134 <HAL_ADC_ConfigChannel+0x45c>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	61bb      	str	r3, [r7, #24]
  return result;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	ea42 0103 	orr.w	r1, r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x488>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	3301      	adds	r3, #1
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	3b1e      	subs	r3, #30
 8003158:	051b      	lsls	r3, r3, #20
 800315a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800315e:	e01b      	b.n	8003198 <HAL_ADC_ConfigChannel+0x4c0>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	60fb      	str	r3, [r7, #12]
  return result;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e003      	b.n	8003184 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f003 021f 	and.w	r2, r3, #31
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b1e      	subs	r3, #30
 8003192:	051b      	lsls	r3, r3, #20
 8003194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	430b      	orrs	r3, r1
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	6892      	ldr	r2, [r2, #8]
 800319e:	4619      	mov	r1, r3
 80031a0:	f7ff fa08 	bl	80025b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f280 80c6 	bge.w	800333a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x4ea>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x4ee>
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_ADC_ConfigChannel+0x680>)
 80031c4:	e000      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x4f0>
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_ADC_ConfigChannel+0x684>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f93f 	bl	800244c <LL_ADC_GetCommonPathInternalCh>
 80031ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5e      	ldr	r2, [pc, #376]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x50c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10e      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x52a>
 80031e4:	485a      	ldr	r0, [pc, #360]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 80031e6:	f7ff faa5 	bl	8002734 <LL_ADC_IsEnabled>
 80031ea:	4604      	mov	r4, r0
 80031ec:	4859      	ldr	r0, [pc, #356]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 80031ee:	f7ff faa1 	bl	8002734 <LL_ADC_IsEnabled>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4323      	orrs	r3, r4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e008      	b.n	8003214 <HAL_ADC_ConfigChannel+0x53c>
 8003202:	4857      	ldr	r0, [pc, #348]	; (8003360 <HAL_ADC_ConfigChannel+0x688>)
 8003204:	f7ff fa96 	bl	8002734 <LL_ADC_IsEnabled>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d07d      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a51      	ldr	r2, [pc, #324]	; (8003364 <HAL_ADC_ConfigChannel+0x68c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d130      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x5ac>
 8003222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d12b      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_ADC_ConfigChannel+0x688>)
 8003232:	4293      	cmp	r3, r2
 8003234:	f040 8081 	bne.w	800333a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a44      	ldr	r2, [pc, #272]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_ADC_ConfigChannel+0x574>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x578>
 800324c:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_ADC_ConfigChannel+0x680>)
 800324e:	e000      	b.n	8003252 <HAL_ADC_ConfigChannel+0x57a>
 8003250:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_ADC_ConfigChannel+0x684>)
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff f8e3 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_ADC_ConfigChannel+0x690>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_ADC_ConfigChannel+0x694>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003274:	e002      	b.n	800327c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3b01      	subs	r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f9      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003282:	e05a      	b.n	800333a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a39      	ldr	r2, [pc, #228]	; (8003370 <HAL_ADC_ConfigChannel+0x698>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11e      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x5f4>
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d119      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <HAL_ADC_ConfigChannel+0x688>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d14b      	bne.n	800333a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x5de>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x5e2>
 80032b6:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_ADC_ConfigChannel+0x680>)
 80032b8:	e000      	b.n	80032bc <HAL_ADC_ConfigChannel+0x5e4>
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_ADC_ConfigChannel+0x684>)
 80032bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f7ff f8ae 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ca:	e036      	b.n	800333a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a28      	ldr	r2, [pc, #160]	; (8003374 <HAL_ADC_ConfigChannel+0x69c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d131      	bne.n	800333a <HAL_ADC_ConfigChannel+0x662>
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d12c      	bne.n	800333a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <HAL_ADC_ConfigChannel+0x688>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d127      	bne.n	800333a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_ADC_ConfigChannel+0x678>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x626>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_ADC_ConfigChannel+0x67c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x62a>
 80032fe:	4a16      	ldr	r2, [pc, #88]	; (8003358 <HAL_ADC_ConfigChannel+0x680>)
 8003300:	e000      	b.n	8003304 <HAL_ADC_ConfigChannel+0x62c>
 8003302:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_ADC_ConfigChannel+0x684>)
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7ff f88a 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
 8003312:	e012      	b.n	800333a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003326:	e008      	b.n	800333a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003342:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003346:	4618      	mov	r0, r3
 8003348:	3784      	adds	r7, #132	; 0x84
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}
 800334e:	bf00      	nop
 8003350:	40022000 	.word	0x40022000
 8003354:	40022100 	.word	0x40022100
 8003358:	40022300 	.word	0x40022300
 800335c:	58026300 	.word	0x58026300
 8003360:	58026000 	.word	0x58026000
 8003364:	cb840000 	.word	0xcb840000
 8003368:	24000024 	.word	0x24000024
 800336c:	053e2d63 	.word	0x053e2d63
 8003370:	c7520000 	.word	0xc7520000
 8003374:	cfb80000 	.word	0xcfb80000

08003378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f9d5 	bl	8002734 <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d16e      	bne.n	800346e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <ADC_Enable+0x100>)
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e05a      	b.n	8003470 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f9a4 	bl	800270c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033c4:	f7fe ffd0 	bl	8002368 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <ADC_Enable+0x104>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <ADC_Enable+0x66>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a29      	ldr	r2, [pc, #164]	; (8003480 <ADC_Enable+0x108>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <ADC_Enable+0x6a>
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <ADC_Enable+0x10c>)
 80033e0:	e000      	b.n	80033e4 <ADC_Enable+0x6c>
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <ADC_Enable+0x110>)
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f935 	bl	8002654 <LL_ADC_GetMultimode>
 80033ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <ADC_Enable+0x108>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d002      	beq.n	80033fc <ADC_Enable+0x84>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	e000      	b.n	80033fe <ADC_Enable+0x86>
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <ADC_Enable+0x104>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d130      	bne.n	800346e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800340c:	e028      	b.n	8003460 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f98e 	bl	8002734 <LL_ADC_IsEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f972 	bl	800270c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003428:	f7fe ff9e 	bl	8002368 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d914      	bls.n	8003460 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00d      	beq.n	8003460 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0210 	orr.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d1cf      	bne.n	800340e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	8000003f 	.word	0x8000003f
 800347c:	40022000 	.word	0x40022000
 8003480:	40022100 	.word	0x40022100
 8003484:	40022300 	.word	0x40022300
 8003488:	58026300 	.word	0x58026300

0800348c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d14b      	bne.n	800353e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d021      	beq.n	8003504 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f823 	bl	8002510 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d032      	beq.n	8003536 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12b      	bne.n	8003536 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11f      	bne.n	8003536 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
 8003502:	e018      	b.n	8003536 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d111      	bne.n	8003536 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fbb0 	bl	8002c9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800353c:	e00e      	b.n	800355c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fbba 	bl	8002cc4 <HAL_ADC_ErrorCallback>
}
 8003550:	e004      	b.n	800355c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff fb9c 	bl	8002cb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f043 0204 	orr.w	r2, r3, #4
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff fb8c 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a79      	ldr	r2, [pc, #484]	; (80037a8 <ADC_ConfigureBoostMode+0x1f4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <ADC_ConfigureBoostMode+0x1c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a78      	ldr	r2, [pc, #480]	; (80037ac <ADC_ConfigureBoostMode+0x1f8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d109      	bne.n	80035e4 <ADC_ConfigureBoostMode+0x30>
 80035d0:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <ADC_ConfigureBoostMode+0x1fc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e008      	b.n	80035f6 <ADC_ConfigureBoostMode+0x42>
 80035e4:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <ADC_ConfigureBoostMode+0x200>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01c      	beq.n	8003634 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80035fa:	f004 fcb5 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 80035fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003608:	d010      	beq.n	800362c <ADC_ConfigureBoostMode+0x78>
 800360a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800360e:	d871      	bhi.n	80036f4 <ADC_ConfigureBoostMode+0x140>
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d002      	beq.n	800361c <ADC_ConfigureBoostMode+0x68>
 8003616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361a:	d16b      	bne.n	80036f4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	60fb      	str	r3, [r7, #12]
        break;
 800362a:	e066      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	60fb      	str	r3, [r7, #12]
        break;
 8003632:	e062      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003638:	f005 fc38 	bl	8008eac <HAL_RCCEx_GetPeriphCLKFreq>
 800363c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003646:	d051      	beq.n	80036ec <ADC_ConfigureBoostMode+0x138>
 8003648:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800364c:	d854      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 800364e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003652:	d047      	beq.n	80036e4 <ADC_ConfigureBoostMode+0x130>
 8003654:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003658:	d84e      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 800365a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800365e:	d03d      	beq.n	80036dc <ADC_ConfigureBoostMode+0x128>
 8003660:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003664:	d848      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d033      	beq.n	80036d4 <ADC_ConfigureBoostMode+0x120>
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003670:	d842      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 8003672:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003676:	d029      	beq.n	80036cc <ADC_ConfigureBoostMode+0x118>
 8003678:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800367c:	d83c      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 800367e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003682:	d01a      	beq.n	80036ba <ADC_ConfigureBoostMode+0x106>
 8003684:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003688:	d836      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 800368a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800368e:	d014      	beq.n	80036ba <ADC_ConfigureBoostMode+0x106>
 8003690:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003694:	d830      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d00e      	beq.n	80036ba <ADC_ConfigureBoostMode+0x106>
 800369c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a0:	d82a      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 80036a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036a6:	d008      	beq.n	80036ba <ADC_ConfigureBoostMode+0x106>
 80036a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036ac:	d824      	bhi.n	80036f8 <ADC_ConfigureBoostMode+0x144>
 80036ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036b2:	d002      	beq.n	80036ba <ADC_ConfigureBoostMode+0x106>
 80036b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036b8:	d11e      	bne.n	80036f8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	60fb      	str	r3, [r7, #12]
        break;
 80036ca:	e016      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
        break;
 80036d2:	e012      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	60fb      	str	r3, [r7, #12]
        break;
 80036da:	e00e      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e00a      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	09db      	lsrs	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
        break;
 80036ea:	e006      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	60fb      	str	r3, [r7, #12]
        break;
 80036f2:	e002      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
        break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80036f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80036fa:	f7fe fe75 	bl	80023e8 <HAL_GetREVID>
 80036fe:	4603      	mov	r3, r0
 8003700:	f241 0203 	movw	r2, #4099	; 0x1003
 8003704:	4293      	cmp	r3, r2
 8003706:	d815      	bhi.n	8003734 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <ADC_ConfigureBoostMode+0x204>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d908      	bls.n	8003722 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003720:	e03e      	b.n	80037a0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	e035      	b.n	80037a0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <ADC_ConfigureBoostMode+0x208>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d808      	bhi.n	8003754 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	e025      	b.n	80037a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <ADC_ConfigureBoostMode+0x20c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d80a      	bhi.n	8003772 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	e016      	b.n	80037a0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <ADC_ConfigureBoostMode+0x210>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d80a      	bhi.n	8003790 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	e007      	b.n	80037a0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800379e:	609a      	str	r2, [r3, #8]
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40022100 	.word	0x40022100
 80037b0:	40022300 	.word	0x40022300
 80037b4:	58026300 	.word	0x58026300
 80037b8:	01312d00 	.word	0x01312d00
 80037bc:	005f5e10 	.word	0x005f5e10
 80037c0:	00bebc20 	.word	0x00bebc20
 80037c4:	017d7840 	.word	0x017d7840

080037c8 <LL_ADC_IsEnabled>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <LL_ADC_IsEnabled+0x18>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <LL_ADC_IsEnabled+0x1a>
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_ADC_REG_IsConversionOngoing>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d101      	bne.n	8003806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b09f      	sub	sp, #124	; 0x7c
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800382e:	2302      	movs	r3, #2
 8003830:	e0be      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d102      	bne.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800384c:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	e001      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e09d      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ffb9 	bl	80037ee <LL_ADC_REG_IsConversionOngoing>
 800387c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ffb3 	bl	80037ee <LL_ADC_REG_IsConversionOngoing>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d17f      	bne.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800388e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003890:	2b00      	cmp	r3, #0
 8003892:	d17c      	bne.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a47      	ldr	r2, [pc, #284]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a46      	ldr	r2, [pc, #280]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038aa:	e000      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80038ac:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d039      	beq.n	800392c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3a      	ldr	r2, [pc, #232]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a38      	ldr	r2, [pc, #224]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10e      	bne.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80038de:	4836      	ldr	r0, [pc, #216]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038e0:	f7ff ff72 	bl	80037c8 <LL_ADC_IsEnabled>
 80038e4:	4604      	mov	r4, r0
 80038e6:	4835      	ldr	r0, [pc, #212]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038e8:	f7ff ff6e 	bl	80037c8 <LL_ADC_IsEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4323      	orrs	r3, r4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e008      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80038fc:	4832      	ldr	r0, [pc, #200]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038fe:	f7ff ff63 	bl	80037c8 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d047      	beq.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003918:	4013      	ands	r3, r2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	430a      	orrs	r2, r1
 8003924:	431a      	orrs	r2, r3
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800392a:	e03a      	b.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10e      	bne.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800394c:	481a      	ldr	r0, [pc, #104]	; (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800394e:	f7ff ff3b 	bl	80037c8 <LL_ADC_IsEnabled>
 8003952:	4604      	mov	r4, r0
 8003954:	4819      	ldr	r0, [pc, #100]	; (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003956:	f7ff ff37 	bl	80037c8 <LL_ADC_IsEnabled>
 800395a:	4603      	mov	r3, r0
 800395c:	4323      	orrs	r3, r4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e008      	b.n	800397c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800396a:	4817      	ldr	r0, [pc, #92]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800396c:	f7ff ff2c 	bl	80037c8 <LL_ADC_IsEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003986:	4013      	ands	r3, r2
 8003988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800398a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800398c:	e009      	b.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80039a0:	e000      	b.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	377c      	adds	r7, #124	; 0x7c
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40022100 	.word	0x40022100
 80039c0:	40022300 	.word	0x40022300
 80039c4:	58026300 	.word	0x58026300
 80039c8:	58026000 	.word	0x58026000
 80039cc:	fffff0e0 	.word	0xfffff0e0

080039d0 <__NVIC_SetPriorityGrouping>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00
 8003a14:	05fa0000 	.word	0x05fa0000

08003a18 <__NVIC_GetPriorityGrouping>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	; (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	; (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff40 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff90 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5f 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff33 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa4 	bl	8003b2c <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e014      	b.n	8003c2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	791b      	ldrb	r3, [r3, #4]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fd ff3b 	bl	8001a8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	795b      	ldrb	r3, [r3, #5]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DAC_Start+0x16>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e040      	b.n	8003cca <HAL_DAC_Start+0x98>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2201      	movs	r2, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d11d      	bne.n	8003cbc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	e014      	b.n	8003cbc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d107      	bne.n	8003cbc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0202 	orr.w	r2, r2, #2
 8003cba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	795b      	ldrb	r3, [r3, #5]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_DAC_ConfigChannel+0x18>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e11d      	b.n	8003f2c <HAL_DAC_ConfigChannel+0x254>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d174      	bne.n	8003dee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fb30 	bl	8002368 <HAL_GetTick>
 8003d08:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d134      	bne.n	8003d7a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d10:	e011      	b.n	8003d36 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d12:	f7fe fb29 	bl	8002368 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d90a      	bls.n	8003d36 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f043 0208 	orr.w	r2, r3, #8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0fa      	b.n	8003f2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3c:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_DAC_ConfigChannel+0x25c>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003d44:	2001      	movs	r0, #1
 8003d46:	f7fe fb1b 	bl	8002380 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	6992      	ldr	r2, [r2, #24]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
 8003d54:	e01e      	b.n	8003d94 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d56:	f7fe fb07 	bl	8002368 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d90a      	bls.n	8003d7a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f043 0208 	orr.w	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2203      	movs	r2, #3
 8003d74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0d8      	b.n	8003f2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dbe8      	blt.n	8003d56 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fafb 	bl	8002380 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	6992      	ldr	r2, [r2, #24]
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	ea02 0103 	and.w	r1, r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	21ff      	movs	r1, #255	; 0xff
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	ea02 0103 	and.w	r1, r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	409a      	lsls	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d11d      	bne.n	8003e32 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	221f      	movs	r2, #31
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2207      	movs	r2, #7
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e00f      	b.n	8003e7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d102      	bne.n	8003e6a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003e64:	2301      	movs	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e008      	b.n	8003e7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e001      	b.n	8003e7c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	22c0      	movs	r2, #192	; 0xc0
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20008000 	.word	0x20008000

08003f38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f40:	f7fe fa12 	bl	8002368 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e316      	b.n	800457e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a66      	ldr	r2, [pc, #408]	; (80040f0 <HAL_DMA_Init+0x1b8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <HAL_DMA_Init+0x1bc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a63      	ldr	r2, [pc, #396]	; (80040f8 <HAL_DMA_Init+0x1c0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a62      	ldr	r2, [pc, #392]	; (80040fc <HAL_DMA_Init+0x1c4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a60      	ldr	r2, [pc, #384]	; (8004100 <HAL_DMA_Init+0x1c8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5f      	ldr	r2, [pc, #380]	; (8004104 <HAL_DMA_Init+0x1cc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5d      	ldr	r2, [pc, #372]	; (8004108 <HAL_DMA_Init+0x1d0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5c      	ldr	r2, [pc, #368]	; (800410c <HAL_DMA_Init+0x1d4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	; (8004110 <HAL_DMA_Init+0x1d8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a59      	ldr	r2, [pc, #356]	; (8004114 <HAL_DMA_Init+0x1dc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a57      	ldr	r2, [pc, #348]	; (8004118 <HAL_DMA_Init+0x1e0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a56      	ldr	r2, [pc, #344]	; (800411c <HAL_DMA_Init+0x1e4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a54      	ldr	r2, [pc, #336]	; (8004120 <HAL_DMA_Init+0x1e8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a53      	ldr	r2, [pc, #332]	; (8004124 <HAL_DMA_Init+0x1ec>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_DMA_Init+0x1f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_Init+0xb8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_DMA_Init+0x1f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Init+0xbc>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_DMA_Init+0xbe>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 813b 	beq.w	8004272 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_DMA_Init+0x1b8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a36      	ldr	r2, [pc, #216]	; (80040f4 <HAL_DMA_Init+0x1bc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_DMA_Init+0x1c0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_Init+0x174>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a33      	ldr	r2, [pc, #204]	; (80040fc <HAL_DMA_Init+0x1c4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_DMA_Init+0x1c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_Init+0x174>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_DMA_Init+0x1cc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_DMA_Init+0x1d0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2d      	ldr	r2, [pc, #180]	; (800410c <HAL_DMA_Init+0x1d4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_Init+0x174>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_DMA_Init+0x1d8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_DMA_Init+0x1dc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_DMA_Init+0x1e0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_Init+0x174>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <HAL_DMA_Init+0x1e4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <HAL_DMA_Init+0x1e8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_Init+0x174>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_DMA_Init+0x1ec>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_Init+0x174>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_DMA_Init+0x1f0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_Init+0x174>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_DMA_Init+0x1f4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <HAL_DMA_Init+0x186>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e007      	b.n	80040ce <HAL_DMA_Init+0x196>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040ce:	e02f      	b.n	8004130 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040d0:	f7fe f94a 	bl	8002368 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d928      	bls.n	8004130 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e246      	b.n	800457e <HAL_DMA_Init+0x646>
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1c8      	bne.n	80040d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4b83      	ldr	r3, [pc, #524]	; (8004358 <HAL_DMA_Init+0x420>)
 800414a:	4013      	ands	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004156:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004162:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b04      	cmp	r3, #4
 8004182:	d107      	bne.n	8004194 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	4313      	orrs	r3, r2
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004194:	4b71      	ldr	r3, [pc, #452]	; (800435c <HAL_DMA_Init+0x424>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b71      	ldr	r3, [pc, #452]	; (8004360 <HAL_DMA_Init+0x428>)
 800419a:	4013      	ands	r3, r2
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d328      	bcc.n	80041f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b28      	cmp	r3, #40	; 0x28
 80041a8:	d903      	bls.n	80041b2 <HAL_DMA_Init+0x27a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b2e      	cmp	r3, #46	; 0x2e
 80041b0:	d917      	bls.n	80041e2 <HAL_DMA_Init+0x2aa>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b3e      	cmp	r3, #62	; 0x3e
 80041b8:	d903      	bls.n	80041c2 <HAL_DMA_Init+0x28a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b42      	cmp	r3, #66	; 0x42
 80041c0:	d90f      	bls.n	80041e2 <HAL_DMA_Init+0x2aa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b46      	cmp	r3, #70	; 0x46
 80041c8:	d903      	bls.n	80041d2 <HAL_DMA_Init+0x29a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b48      	cmp	r3, #72	; 0x48
 80041d0:	d907      	bls.n	80041e2 <HAL_DMA_Init+0x2aa>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b4e      	cmp	r3, #78	; 0x4e
 80041d8:	d905      	bls.n	80041e6 <HAL_DMA_Init+0x2ae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b52      	cmp	r3, #82	; 0x52
 80041e0:	d801      	bhi.n	80041e6 <HAL_DMA_Init+0x2ae>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_DMA_Init+0x2b0>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0307 	bic.w	r3, r3, #7
 800420a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b04      	cmp	r3, #4
 800421c:	d117      	bne.n	800424e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 fdcf 	bl	8005dd4 <DMA_CheckFifoParam>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e197      	b.n	800457e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fd0a 	bl	8005c70 <DMA_CalcBaseAndBitshift>
 800425c:	4603      	mov	r3, r0
 800425e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	223f      	movs	r2, #63	; 0x3f
 800426a:	409a      	lsls	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	e0cd      	b.n	800440e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3b      	ldr	r2, [pc, #236]	; (8004364 <HAL_DMA_Init+0x42c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a39      	ldr	r2, [pc, #228]	; (8004368 <HAL_DMA_Init+0x430>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a38      	ldr	r2, [pc, #224]	; (800436c <HAL_DMA_Init+0x434>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a36      	ldr	r2, [pc, #216]	; (8004370 <HAL_DMA_Init+0x438>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a35      	ldr	r2, [pc, #212]	; (8004374 <HAL_DMA_Init+0x43c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a33      	ldr	r2, [pc, #204]	; (8004378 <HAL_DMA_Init+0x440>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a32      	ldr	r2, [pc, #200]	; (800437c <HAL_DMA_Init+0x444>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_Init+0x38a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_DMA_Init+0x448>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_Init+0x38e>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_DMA_Init+0x390>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8097 	beq.w	80043fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a24      	ldr	r2, [pc, #144]	; (8004364 <HAL_DMA_Init+0x42c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d021      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_DMA_Init+0x430>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01c      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_DMA_Init+0x434>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d017      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_DMA_Init+0x438>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d012      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_DMA_Init+0x43c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00d      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_DMA_Init+0x440>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d008      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_DMA_Init+0x444>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <HAL_DMA_Init+0x3e4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_DMA_Init+0x448>)
 800431a:	4293      	cmp	r3, r2
 800431c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_DMA_Init+0x44c>)
 800433a:	4013      	ands	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d020      	beq.n	8004388 <HAL_DMA_Init+0x450>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d102      	bne.n	8004354 <HAL_DMA_Init+0x41c>
 800434e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004352:	e01a      	b.n	800438a <HAL_DMA_Init+0x452>
 8004354:	2300      	movs	r3, #0
 8004356:	e018      	b.n	800438a <HAL_DMA_Init+0x452>
 8004358:	fe10803f 	.word	0xfe10803f
 800435c:	5c001000 	.word	0x5c001000
 8004360:	ffff0000 	.word	0xffff0000
 8004364:	58025408 	.word	0x58025408
 8004368:	5802541c 	.word	0x5802541c
 800436c:	58025430 	.word	0x58025430
 8004370:	58025444 	.word	0x58025444
 8004374:	58025458 	.word	0x58025458
 8004378:	5802546c 	.word	0x5802546c
 800437c:	58025480 	.word	0x58025480
 8004380:	58025494 	.word	0x58025494
 8004384:	fffe000f 	.word	0xfffe000f
 8004388:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b6e      	ldr	r3, [pc, #440]	; (8004588 <HAL_DMA_Init+0x650>)
 80043d0:	4413      	add	r3, r2
 80043d2:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_DMA_Init+0x654>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f001 fc45 	bl	8005c70 <DMA_CalcBaseAndBitshift>
 80043e6:	4603      	mov	r3, r0
 80043e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2201      	movs	r2, #1
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e008      	b.n	800440e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2203      	movs	r2, #3
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0b7      	b.n	800457e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5f      	ldr	r2, [pc, #380]	; (8004590 <HAL_DMA_Init+0x658>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d072      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5d      	ldr	r2, [pc, #372]	; (8004594 <HAL_DMA_Init+0x65c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d06d      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5c      	ldr	r2, [pc, #368]	; (8004598 <HAL_DMA_Init+0x660>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d068      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5a      	ldr	r2, [pc, #360]	; (800459c <HAL_DMA_Init+0x664>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d063      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a59      	ldr	r2, [pc, #356]	; (80045a0 <HAL_DMA_Init+0x668>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d05e      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <HAL_DMA_Init+0x66c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d059      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <HAL_DMA_Init+0x670>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d054      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a54      	ldr	r2, [pc, #336]	; (80045ac <HAL_DMA_Init+0x674>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d04f      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a53      	ldr	r2, [pc, #332]	; (80045b0 <HAL_DMA_Init+0x678>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d04a      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <HAL_DMA_Init+0x67c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d045      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a50      	ldr	r2, [pc, #320]	; (80045b8 <HAL_DMA_Init+0x680>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d040      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4e      	ldr	r2, [pc, #312]	; (80045bc <HAL_DMA_Init+0x684>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d03b      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a4d      	ldr	r2, [pc, #308]	; (80045c0 <HAL_DMA_Init+0x688>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d036      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a4b      	ldr	r2, [pc, #300]	; (80045c4 <HAL_DMA_Init+0x68c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d031      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_DMA_Init+0x690>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d02c      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a48      	ldr	r2, [pc, #288]	; (80045cc <HAL_DMA_Init+0x694>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d027      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a47      	ldr	r2, [pc, #284]	; (80045d0 <HAL_DMA_Init+0x698>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a45      	ldr	r2, [pc, #276]	; (80045d4 <HAL_DMA_Init+0x69c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01d      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a44      	ldr	r2, [pc, #272]	; (80045d8 <HAL_DMA_Init+0x6a0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d018      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a42      	ldr	r2, [pc, #264]	; (80045dc <HAL_DMA_Init+0x6a4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a41      	ldr	r2, [pc, #260]	; (80045e0 <HAL_DMA_Init+0x6a8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <HAL_DMA_Init+0x6ac>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3e      	ldr	r2, [pc, #248]	; (80045e8 <HAL_DMA_Init+0x6b0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_DMA_Init+0x5c6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <HAL_DMA_Init+0x6b4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_DMA_Init+0x5ca>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_DMA_Init+0x5cc>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d032      	beq.n	800456e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 fcdf 	bl	8005ecc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d102      	bne.n	800451c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004530:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_DMA_Init+0x624>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d80c      	bhi.n	800455c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f001 fd5c 	bl	8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e008      	b.n	800456e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	a7fdabf8 	.word	0xa7fdabf8
 800458c:	cccccccd 	.word	0xcccccccd
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
 80045d0:	58025408 	.word	0x58025408
 80045d4:	5802541c 	.word	0x5802541c
 80045d8:	58025430 	.word	0x58025430
 80045dc:	58025444 	.word	0x58025444
 80045e0:	58025458 	.word	0x58025458
 80045e4:	5802546c 	.word	0x5802546c
 80045e8:	58025480 	.word	0x58025480
 80045ec:	58025494 	.word	0x58025494

080045f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e226      	b.n	8004a5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_DMA_Start_IT+0x2a>
 8004616:	2302      	movs	r3, #2
 8004618:	e21f      	b.n	8004a5a <HAL_DMA_Start_IT+0x46a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	f040 820a 	bne.w	8004a44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a68      	ldr	r2, [pc, #416]	; (80047e4 <HAL_DMA_Start_IT+0x1f4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a66      	ldr	r2, [pc, #408]	; (80047e8 <HAL_DMA_Start_IT+0x1f8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a65      	ldr	r2, [pc, #404]	; (80047ec <HAL_DMA_Start_IT+0x1fc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a63      	ldr	r2, [pc, #396]	; (80047f0 <HAL_DMA_Start_IT+0x200>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a62      	ldr	r2, [pc, #392]	; (80047f4 <HAL_DMA_Start_IT+0x204>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a60      	ldr	r2, [pc, #384]	; (80047f8 <HAL_DMA_Start_IT+0x208>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5f      	ldr	r2, [pc, #380]	; (80047fc <HAL_DMA_Start_IT+0x20c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5d      	ldr	r2, [pc, #372]	; (8004800 <HAL_DMA_Start_IT+0x210>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5c      	ldr	r2, [pc, #368]	; (8004804 <HAL_DMA_Start_IT+0x214>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5a      	ldr	r2, [pc, #360]	; (8004808 <HAL_DMA_Start_IT+0x218>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a59      	ldr	r2, [pc, #356]	; (800480c <HAL_DMA_Start_IT+0x21c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a57      	ldr	r2, [pc, #348]	; (8004810 <HAL_DMA_Start_IT+0x220>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_DMA_Start_IT+0x224>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a54      	ldr	r2, [pc, #336]	; (8004818 <HAL_DMA_Start_IT+0x228>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a53      	ldr	r2, [pc, #332]	; (800481c <HAL_DMA_Start_IT+0x22c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_Start_IT+0xee>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a51      	ldr	r2, [pc, #324]	; (8004820 <HAL_DMA_Start_IT+0x230>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d108      	bne.n	80046f0 <HAL_DMA_Start_IT+0x100>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e007      	b.n	8004700 <HAL_DMA_Start_IT+0x110>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f001 f906 	bl	8005918 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <HAL_DMA_Start_IT+0x1f4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	; (80047e8 <HAL_DMA_Start_IT+0x1f8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a31      	ldr	r2, [pc, #196]	; (80047ec <HAL_DMA_Start_IT+0x1fc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_DMA_Start_IT+0x200>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_DMA_Start_IT+0x204>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <HAL_DMA_Start_IT+0x208>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_DMA_Start_IT+0x20c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <HAL_DMA_Start_IT+0x210>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <HAL_DMA_Start_IT+0x214>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_DMA_Start_IT+0x218>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	; (800480c <HAL_DMA_Start_IT+0x21c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_DMA_Start_IT+0x220>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Start_IT+0x224>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_DMA_Start_IT+0x228>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_DMA_Start_IT+0x22c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_Start_IT+0x1bc>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_DMA_Start_IT+0x230>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_DMA_Start_IT+0x1c0>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_DMA_Start_IT+0x1c2>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d036      	beq.n	8004824 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 021e 	bic.w	r2, r3, #30
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0216 	orr.w	r2, r2, #22
 80047c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d03e      	beq.n	8004850 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0208 	orr.w	r2, r2, #8
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e035      	b.n	8004850 <HAL_DMA_Start_IT+0x260>
 80047e4:	40020010 	.word	0x40020010
 80047e8:	40020028 	.word	0x40020028
 80047ec:	40020040 	.word	0x40020040
 80047f0:	40020058 	.word	0x40020058
 80047f4:	40020070 	.word	0x40020070
 80047f8:	40020088 	.word	0x40020088
 80047fc:	400200a0 	.word	0x400200a0
 8004800:	400200b8 	.word	0x400200b8
 8004804:	40020410 	.word	0x40020410
 8004808:	40020428 	.word	0x40020428
 800480c:	40020440 	.word	0x40020440
 8004810:	40020458 	.word	0x40020458
 8004814:	40020470 	.word	0x40020470
 8004818:	40020488 	.word	0x40020488
 800481c:	400204a0 	.word	0x400204a0
 8004820:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 020e 	bic.w	r2, r3, #14
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 020a 	orr.w	r2, r2, #10
 8004836:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0204 	orr.w	r2, r2, #4
 800484e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a83      	ldr	r2, [pc, #524]	; (8004a64 <HAL_DMA_Start_IT+0x474>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d072      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a82      	ldr	r2, [pc, #520]	; (8004a68 <HAL_DMA_Start_IT+0x478>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d06d      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_DMA_Start_IT+0x47c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d068      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a7f      	ldr	r2, [pc, #508]	; (8004a70 <HAL_DMA_Start_IT+0x480>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d063      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a7d      	ldr	r2, [pc, #500]	; (8004a74 <HAL_DMA_Start_IT+0x484>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d05e      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7c      	ldr	r2, [pc, #496]	; (8004a78 <HAL_DMA_Start_IT+0x488>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d059      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a7a      	ldr	r2, [pc, #488]	; (8004a7c <HAL_DMA_Start_IT+0x48c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d054      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a79      	ldr	r2, [pc, #484]	; (8004a80 <HAL_DMA_Start_IT+0x490>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d04f      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a77      	ldr	r2, [pc, #476]	; (8004a84 <HAL_DMA_Start_IT+0x494>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04a      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a76      	ldr	r2, [pc, #472]	; (8004a88 <HAL_DMA_Start_IT+0x498>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d045      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a74      	ldr	r2, [pc, #464]	; (8004a8c <HAL_DMA_Start_IT+0x49c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d040      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a73      	ldr	r2, [pc, #460]	; (8004a90 <HAL_DMA_Start_IT+0x4a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d03b      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a71      	ldr	r2, [pc, #452]	; (8004a94 <HAL_DMA_Start_IT+0x4a4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d036      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a70      	ldr	r2, [pc, #448]	; (8004a98 <HAL_DMA_Start_IT+0x4a8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d031      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6e      	ldr	r2, [pc, #440]	; (8004a9c <HAL_DMA_Start_IT+0x4ac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02c      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6d      	ldr	r2, [pc, #436]	; (8004aa0 <HAL_DMA_Start_IT+0x4b0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d027      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	; (8004aa4 <HAL_DMA_Start_IT+0x4b4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6a      	ldr	r2, [pc, #424]	; (8004aa8 <HAL_DMA_Start_IT+0x4b8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a68      	ldr	r2, [pc, #416]	; (8004aac <HAL_DMA_Start_IT+0x4bc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a67      	ldr	r2, [pc, #412]	; (8004ab0 <HAL_DMA_Start_IT+0x4c0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a65      	ldr	r2, [pc, #404]	; (8004ab4 <HAL_DMA_Start_IT+0x4c4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a64      	ldr	r2, [pc, #400]	; (8004ab8 <HAL_DMA_Start_IT+0x4c8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a62      	ldr	r2, [pc, #392]	; (8004abc <HAL_DMA_Start_IT+0x4cc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_DMA_Start_IT+0x350>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a61      	ldr	r2, [pc, #388]	; (8004ac0 <HAL_DMA_Start_IT+0x4d0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_DMA_Start_IT+0x354>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_DMA_Start_IT+0x356>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01a      	beq.n	8004980 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004966:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800497e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <HAL_DMA_Start_IT+0x474>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d04a      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a36      	ldr	r2, [pc, #216]	; (8004a68 <HAL_DMA_Start_IT+0x478>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d045      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <HAL_DMA_Start_IT+0x47c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d040      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a33      	ldr	r2, [pc, #204]	; (8004a70 <HAL_DMA_Start_IT+0x480>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d03b      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <HAL_DMA_Start_IT+0x484>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d036      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_DMA_Start_IT+0x488>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d031      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2e      	ldr	r2, [pc, #184]	; (8004a7c <HAL_DMA_Start_IT+0x48c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d02c      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2d      	ldr	r2, [pc, #180]	; (8004a80 <HAL_DMA_Start_IT+0x490>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d027      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <HAL_DMA_Start_IT+0x494>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2a      	ldr	r2, [pc, #168]	; (8004a88 <HAL_DMA_Start_IT+0x498>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d01d      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <HAL_DMA_Start_IT+0x49c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a27      	ldr	r2, [pc, #156]	; (8004a90 <HAL_DMA_Start_IT+0x4a0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <HAL_DMA_Start_IT+0x4a4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <HAL_DMA_Start_IT+0x4a8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_DMA_Start_IT+0x4ac>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_DMA_Start_IT+0x430>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_DMA_Start_IT+0x4b0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <HAL_DMA_Start_IT+0x442>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e012      	b.n	8004a58 <HAL_DMA_Start_IT+0x468>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e009      	b.n	8004a58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40020010 	.word	0x40020010
 8004a68:	40020028 	.word	0x40020028
 8004a6c:	40020040 	.word	0x40020040
 8004a70:	40020058 	.word	0x40020058
 8004a74:	40020070 	.word	0x40020070
 8004a78:	40020088 	.word	0x40020088
 8004a7c:	400200a0 	.word	0x400200a0
 8004a80:	400200b8 	.word	0x400200b8
 8004a84:	40020410 	.word	0x40020410
 8004a88:	40020428 	.word	0x40020428
 8004a8c:	40020440 	.word	0x40020440
 8004a90:	40020458 	.word	0x40020458
 8004a94:	40020470 	.word	0x40020470
 8004a98:	40020488 	.word	0x40020488
 8004a9c:	400204a0 	.word	0x400204a0
 8004aa0:	400204b8 	.word	0x400204b8
 8004aa4:	58025408 	.word	0x58025408
 8004aa8:	5802541c 	.word	0x5802541c
 8004aac:	58025430 	.word	0x58025430
 8004ab0:	58025444 	.word	0x58025444
 8004ab4:	58025458 	.word	0x58025458
 8004ab8:	5802546c 	.word	0x5802546c
 8004abc:	58025480 	.word	0x58025480
 8004ac0:	58025494 	.word	0x58025494

08004ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad0:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_DMA_IRQHandler+0x1ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a67      	ldr	r2, [pc, #412]	; (8004c74 <HAL_DMA_IRQHandler+0x1b0>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	0a9b      	lsrs	r3, r3, #10
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a5f      	ldr	r2, [pc, #380]	; (8004c78 <HAL_DMA_IRQHandler+0x1b4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d04a      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5d      	ldr	r2, [pc, #372]	; (8004c7c <HAL_DMA_IRQHandler+0x1b8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d045      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_DMA_IRQHandler+0x1bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d040      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_DMA_IRQHandler+0x1c0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d03b      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a59      	ldr	r2, [pc, #356]	; (8004c88 <HAL_DMA_IRQHandler+0x1c4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d036      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_DMA_IRQHandler+0x1c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d031      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a56      	ldr	r2, [pc, #344]	; (8004c90 <HAL_DMA_IRQHandler+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d02c      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a54      	ldr	r2, [pc, #336]	; (8004c94 <HAL_DMA_IRQHandler+0x1d0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d027      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a53      	ldr	r2, [pc, #332]	; (8004c98 <HAL_DMA_IRQHandler+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_DMA_IRQHandler+0x1d8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01d      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a50      	ldr	r2, [pc, #320]	; (8004ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4d      	ldr	r2, [pc, #308]	; (8004ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <HAL_DMA_IRQHandler+0x1e8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a4a      	ldr	r2, [pc, #296]	; (8004cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xd2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a48      	ldr	r2, [pc, #288]	; (8004cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_IRQHandler+0xd6>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_DMA_IRQHandler+0xd8>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 842b 	beq.w	80053f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2208      	movs	r2, #8
 8004bac:	409a      	lsls	r2, r3
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a2 	beq.w	8004cfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <HAL_DMA_IRQHandler+0x1b4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04a      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <HAL_DMA_IRQHandler+0x1b8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d045      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <HAL_DMA_IRQHandler+0x1bc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d040      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <HAL_DMA_IRQHandler+0x1c0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d03b      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <HAL_DMA_IRQHandler+0x1c4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d036      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <HAL_DMA_IRQHandler+0x1c8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d031      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <HAL_DMA_IRQHandler+0x1cc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <HAL_DMA_IRQHandler+0x1d0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d027      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <HAL_DMA_IRQHandler+0x1d4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <HAL_DMA_IRQHandler+0x1d8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01d      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <HAL_DMA_IRQHandler+0x1dc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <HAL_DMA_IRQHandler+0x1e0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <HAL_DMA_IRQHandler+0x1e4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_DMA_IRQHandler+0x1e8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <HAL_DMA_IRQHandler+0x1ec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x194>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_DMA_IRQHandler+0x1f0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d12f      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x1f4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e02e      	b.n	8004ccc <HAL_DMA_IRQHandler+0x208>
 8004c6e:	bf00      	nop
 8004c70:	24000024 	.word	0x24000024
 8004c74:	1b4e81b5 	.word	0x1b4e81b5
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2208      	movs	r2, #8
 8004cea:	409a      	lsls	r2, r3
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d06e      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a69      	ldr	r2, [pc, #420]	; (8004ebc <HAL_DMA_IRQHandler+0x3f8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d04a      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a67      	ldr	r2, [pc, #412]	; (8004ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d045      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a66      	ldr	r2, [pc, #408]	; (8004ec4 <HAL_DMA_IRQHandler+0x400>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d040      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a64      	ldr	r2, [pc, #400]	; (8004ec8 <HAL_DMA_IRQHandler+0x404>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d03b      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a63      	ldr	r2, [pc, #396]	; (8004ecc <HAL_DMA_IRQHandler+0x408>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d036      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a61      	ldr	r2, [pc, #388]	; (8004ed0 <HAL_DMA_IRQHandler+0x40c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_DMA_IRQHandler+0x410>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d02c      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <HAL_DMA_IRQHandler+0x414>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d027      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a5d      	ldr	r2, [pc, #372]	; (8004edc <HAL_DMA_IRQHandler+0x418>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5b      	ldr	r2, [pc, #364]	; (8004ee0 <HAL_DMA_IRQHandler+0x41c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5a      	ldr	r2, [pc, #360]	; (8004ee4 <HAL_DMA_IRQHandler+0x420>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_DMA_IRQHandler+0x424>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a57      	ldr	r2, [pc, #348]	; (8004eec <HAL_DMA_IRQHandler+0x428>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a55      	ldr	r2, [pc, #340]	; (8004ef0 <HAL_DMA_IRQHandler+0x42c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a54      	ldr	r2, [pc, #336]	; (8004ef4 <HAL_DMA_IRQHandler+0x430>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x2ee>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_DMA_IRQHandler+0x434>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10a      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x304>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e003      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x30c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2201      	movs	r2, #1
 8004dde:	409a      	lsls	r2, r3
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f043 0202 	orr.w	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2204      	movs	r2, #4
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 808f 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <HAL_DMA_IRQHandler+0x3f8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d04a      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <HAL_DMA_IRQHandler+0x3fc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d045      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a29      	ldr	r2, [pc, #164]	; (8004ec4 <HAL_DMA_IRQHandler+0x400>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d040      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <HAL_DMA_IRQHandler+0x404>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d03b      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_DMA_IRQHandler+0x408>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d036      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <HAL_DMA_IRQHandler+0x40c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d031      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <HAL_DMA_IRQHandler+0x410>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d02c      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <HAL_DMA_IRQHandler+0x414>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d027      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a20      	ldr	r2, [pc, #128]	; (8004edc <HAL_DMA_IRQHandler+0x418>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d022      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <HAL_DMA_IRQHandler+0x41c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01d      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_DMA_IRQHandler+0x420>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d018      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <HAL_DMA_IRQHandler+0x424>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_DMA_IRQHandler+0x428>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <HAL_DMA_IRQHandler+0x42c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_DMA_IRQHandler+0x430>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x3e2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <HAL_DMA_IRQHandler+0x434>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12a      	bne.n	8004efc <HAL_DMA_IRQHandler+0x438>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e023      	b.n	8004f04 <HAL_DMA_IRQHandler+0x440>
 8004ebc:	40020010 	.word	0x40020010
 8004ec0:	40020028 	.word	0x40020028
 8004ec4:	40020040 	.word	0x40020040
 8004ec8:	40020058 	.word	0x40020058
 8004ecc:	40020070 	.word	0x40020070
 8004ed0:	40020088 	.word	0x40020088
 8004ed4:	400200a0 	.word	0x400200a0
 8004ed8:	400200b8 	.word	0x400200b8
 8004edc:	40020410 	.word	0x40020410
 8004ee0:	40020428 	.word	0x40020428
 8004ee4:	40020440 	.word	0x40020440
 8004ee8:	40020458 	.word	0x40020458
 8004eec:	40020470 	.word	0x40020470
 8004ef0:	40020488 	.word	0x40020488
 8004ef4:	400204a0 	.word	0x400204a0
 8004ef8:	400204b8 	.word	0x400204b8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2204      	movs	r2, #4
 8004f12:	409a      	lsls	r2, r3
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80a6 	beq.w	8005086 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a85      	ldr	r2, [pc, #532]	; (8005154 <HAL_DMA_IRQHandler+0x690>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d04a      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a83      	ldr	r2, [pc, #524]	; (8005158 <HAL_DMA_IRQHandler+0x694>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d045      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a82      	ldr	r2, [pc, #520]	; (800515c <HAL_DMA_IRQHandler+0x698>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d040      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a80      	ldr	r2, [pc, #512]	; (8005160 <HAL_DMA_IRQHandler+0x69c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d03b      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7f      	ldr	r2, [pc, #508]	; (8005164 <HAL_DMA_IRQHandler+0x6a0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d036      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a7d      	ldr	r2, [pc, #500]	; (8005168 <HAL_DMA_IRQHandler+0x6a4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d031      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	; (800516c <HAL_DMA_IRQHandler+0x6a8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d02c      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a7a      	ldr	r2, [pc, #488]	; (8005170 <HAL_DMA_IRQHandler+0x6ac>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d027      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_DMA_IRQHandler+0x6b0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a77      	ldr	r2, [pc, #476]	; (8005178 <HAL_DMA_IRQHandler+0x6b4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a76      	ldr	r2, [pc, #472]	; (800517c <HAL_DMA_IRQHandler+0x6b8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a74      	ldr	r2, [pc, #464]	; (8005180 <HAL_DMA_IRQHandler+0x6bc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a73      	ldr	r2, [pc, #460]	; (8005184 <HAL_DMA_IRQHandler+0x6c0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a71      	ldr	r2, [pc, #452]	; (8005188 <HAL_DMA_IRQHandler+0x6c4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_DMA_IRQHandler+0x6c8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_DMA_IRQHandler+0x516>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6e      	ldr	r2, [pc, #440]	; (8005190 <HAL_DMA_IRQHandler+0x6cc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0x52c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e009      	b.n	8005004 <HAL_DMA_IRQHandler+0x540>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d03e      	beq.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2210      	movs	r2, #16
 8005012:	409a      	lsls	r2, r3
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d024      	beq.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
 8005044:	e01f      	b.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01b      	beq.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
 8005056:	e016      	b.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0208 	bic.w	r2, r2, #8
 8005074:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2220      	movs	r2, #32
 8005090:	409a      	lsls	r2, r3
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8110 	beq.w	80052bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2c      	ldr	r2, [pc, #176]	; (8005154 <HAL_DMA_IRQHandler+0x690>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d04a      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_DMA_IRQHandler+0x694>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d045      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <HAL_DMA_IRQHandler+0x698>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d040      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a28      	ldr	r2, [pc, #160]	; (8005160 <HAL_DMA_IRQHandler+0x69c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d03b      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_DMA_IRQHandler+0x6a0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d036      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <HAL_DMA_IRQHandler+0x6a4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d031      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <HAL_DMA_IRQHandler+0x6a8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02c      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_DMA_IRQHandler+0x6ac>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d027      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_DMA_IRQHandler+0x6b0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <HAL_DMA_IRQHandler+0x6b4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01d      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <HAL_DMA_IRQHandler+0x6b8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_DMA_IRQHandler+0x6bc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <HAL_DMA_IRQHandler+0x6c0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_DMA_IRQHandler+0x6c4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a17      	ldr	r2, [pc, #92]	; (800518c <HAL_DMA_IRQHandler+0x6c8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_DMA_IRQHandler+0x678>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_DMA_IRQHandler+0x6cc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d12b      	bne.n	8005194 <HAL_DMA_IRQHandler+0x6d0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e02a      	b.n	80051a8 <HAL_DMA_IRQHandler+0x6e4>
 8005152:	bf00      	nop
 8005154:	40020010 	.word	0x40020010
 8005158:	40020028 	.word	0x40020028
 800515c:	40020040 	.word	0x40020040
 8005160:	40020058 	.word	0x40020058
 8005164:	40020070 	.word	0x40020070
 8005168:	40020088 	.word	0x40020088
 800516c:	400200a0 	.word	0x400200a0
 8005170:	400200b8 	.word	0x400200b8
 8005174:	40020410 	.word	0x40020410
 8005178:	40020428 	.word	0x40020428
 800517c:	40020440 	.word	0x40020440
 8005180:	40020458 	.word	0x40020458
 8005184:	40020470 	.word	0x40020470
 8005188:	40020488 	.word	0x40020488
 800518c:	400204a0 	.word	0x400204a0
 8005190:	400204b8 	.word	0x400204b8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf14      	ite	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	2300      	moveq	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8087 	beq.w	80052bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2220      	movs	r2, #32
 80051b8:	409a      	lsls	r2, r3
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d139      	bne.n	800523e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0216 	bic.w	r2, r2, #22
 80051d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_DMA_IRQHandler+0x736>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0208 	bic.w	r2, r2, #8
 8005208:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	223f      	movs	r2, #63	; 0x3f
 8005214:	409a      	lsls	r2, r3
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 834a 	beq.w	80058c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
          }
          return;
 800523c:	e344      	b.n	80058c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02c      	beq.n	80052bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	e027      	b.n	80052bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d023      	beq.n	80052bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
 800527c:	e01e      	b.n	80052bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10f      	bne.n	80052ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0210 	bic.w	r2, r2, #16
 800529a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8306 	beq.w	80058d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8088 	beq.w	80053e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2204      	movs	r2, #4
 80052d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a7a      	ldr	r2, [pc, #488]	; (80054cc <HAL_DMA_IRQHandler+0xa08>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d04a      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a79      	ldr	r2, [pc, #484]	; (80054d0 <HAL_DMA_IRQHandler+0xa0c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d045      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a77      	ldr	r2, [pc, #476]	; (80054d4 <HAL_DMA_IRQHandler+0xa10>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d040      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a76      	ldr	r2, [pc, #472]	; (80054d8 <HAL_DMA_IRQHandler+0xa14>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d03b      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a74      	ldr	r2, [pc, #464]	; (80054dc <HAL_DMA_IRQHandler+0xa18>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d036      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a73      	ldr	r2, [pc, #460]	; (80054e0 <HAL_DMA_IRQHandler+0xa1c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d031      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a71      	ldr	r2, [pc, #452]	; (80054e4 <HAL_DMA_IRQHandler+0xa20>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d02c      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a70      	ldr	r2, [pc, #448]	; (80054e8 <HAL_DMA_IRQHandler+0xa24>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d027      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	; (80054ec <HAL_DMA_IRQHandler+0xa28>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d022      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6d      	ldr	r2, [pc, #436]	; (80054f0 <HAL_DMA_IRQHandler+0xa2c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d01d      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6b      	ldr	r2, [pc, #428]	; (80054f4 <HAL_DMA_IRQHandler+0xa30>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d018      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6a      	ldr	r2, [pc, #424]	; (80054f8 <HAL_DMA_IRQHandler+0xa34>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <HAL_DMA_IRQHandler+0xa38>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00e      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a67      	ldr	r2, [pc, #412]	; (8005500 <HAL_DMA_IRQHandler+0xa3c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d009      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a65      	ldr	r2, [pc, #404]	; (8005504 <HAL_DMA_IRQHandler+0xa40>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <HAL_DMA_IRQHandler+0x8b8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a64      	ldr	r2, [pc, #400]	; (8005508 <HAL_DMA_IRQHandler+0xa44>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d108      	bne.n	800538e <HAL_DMA_IRQHandler+0x8ca>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e007      	b.n	800539e <HAL_DMA_IRQHandler+0x8da>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d307      	bcc.n	80053ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f2      	bne.n	800539e <HAL_DMA_IRQHandler+0x8da>
 80053b8:	e000      	b.n	80053bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80053ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2203      	movs	r2, #3
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053d2:	e003      	b.n	80053dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8272 	beq.w	80058d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	e26c      	b.n	80058d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a43      	ldr	r2, [pc, #268]	; (800550c <HAL_DMA_IRQHandler+0xa48>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_DMA_IRQHandler+0xa4c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a40      	ldr	r2, [pc, #256]	; (8005514 <HAL_DMA_IRQHandler+0xa50>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <HAL_DMA_IRQHandler+0xa54>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3d      	ldr	r2, [pc, #244]	; (800551c <HAL_DMA_IRQHandler+0xa58>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <HAL_DMA_IRQHandler+0xa5c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3a      	ldr	r2, [pc, #232]	; (8005524 <HAL_DMA_IRQHandler+0xa60>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_DMA_IRQHandler+0x984>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a39      	ldr	r2, [pc, #228]	; (8005528 <HAL_DMA_IRQHandler+0xa64>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_DMA_IRQHandler+0x988>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_DMA_IRQHandler+0x98a>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 823f 	beq.w	80058d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2204      	movs	r2, #4
 8005466:	409a      	lsls	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80cd 	beq.w	800560c <HAL_DMA_IRQHandler+0xb48>
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80c7 	beq.w	800560c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2204      	movs	r2, #4
 8005488:	409a      	lsls	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d049      	beq.n	800552c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8210 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b4:	e20a      	b.n	80058cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8206 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054c8:	e200      	b.n	80058cc <HAL_DMA_IRQHandler+0xe08>
 80054ca:	bf00      	nop
 80054cc:	40020010 	.word	0x40020010
 80054d0:	40020028 	.word	0x40020028
 80054d4:	40020040 	.word	0x40020040
 80054d8:	40020058 	.word	0x40020058
 80054dc:	40020070 	.word	0x40020070
 80054e0:	40020088 	.word	0x40020088
 80054e4:	400200a0 	.word	0x400200a0
 80054e8:	400200b8 	.word	0x400200b8
 80054ec:	40020410 	.word	0x40020410
 80054f0:	40020428 	.word	0x40020428
 80054f4:	40020440 	.word	0x40020440
 80054f8:	40020458 	.word	0x40020458
 80054fc:	40020470 	.word	0x40020470
 8005500:	40020488 	.word	0x40020488
 8005504:	400204a0 	.word	0x400204a0
 8005508:	400204b8 	.word	0x400204b8
 800550c:	58025408 	.word	0x58025408
 8005510:	5802541c 	.word	0x5802541c
 8005514:	58025430 	.word	0x58025430
 8005518:	58025444 	.word	0x58025444
 800551c:	58025458 	.word	0x58025458
 8005520:	5802546c 	.word	0x5802546c
 8005524:	58025480 	.word	0x58025480
 8005528:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d160      	bne.n	80055f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a7f      	ldr	r2, [pc, #508]	; (8005738 <HAL_DMA_IRQHandler+0xc74>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d04a      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a7d      	ldr	r2, [pc, #500]	; (800573c <HAL_DMA_IRQHandler+0xc78>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d045      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a7c      	ldr	r2, [pc, #496]	; (8005740 <HAL_DMA_IRQHandler+0xc7c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d040      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a7a      	ldr	r2, [pc, #488]	; (8005744 <HAL_DMA_IRQHandler+0xc80>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d03b      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a79      	ldr	r2, [pc, #484]	; (8005748 <HAL_DMA_IRQHandler+0xc84>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d036      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a77      	ldr	r2, [pc, #476]	; (800574c <HAL_DMA_IRQHandler+0xc88>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d031      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a76      	ldr	r2, [pc, #472]	; (8005750 <HAL_DMA_IRQHandler+0xc8c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d02c      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a74      	ldr	r2, [pc, #464]	; (8005754 <HAL_DMA_IRQHandler+0xc90>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a73      	ldr	r2, [pc, #460]	; (8005758 <HAL_DMA_IRQHandler+0xc94>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a71      	ldr	r2, [pc, #452]	; (800575c <HAL_DMA_IRQHandler+0xc98>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01d      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a70      	ldr	r2, [pc, #448]	; (8005760 <HAL_DMA_IRQHandler+0xc9c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a6e      	ldr	r2, [pc, #440]	; (8005764 <HAL_DMA_IRQHandler+0xca0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a6d      	ldr	r2, [pc, #436]	; (8005768 <HAL_DMA_IRQHandler+0xca4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a6b      	ldr	r2, [pc, #428]	; (800576c <HAL_DMA_IRQHandler+0xca8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a6a      	ldr	r2, [pc, #424]	; (8005770 <HAL_DMA_IRQHandler+0xcac>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_DMA_IRQHandler+0xb12>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a68      	ldr	r2, [pc, #416]	; (8005774 <HAL_DMA_IRQHandler+0xcb0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d108      	bne.n	80055e8 <HAL_DMA_IRQHandler+0xb24>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0208 	bic.w	r2, r2, #8
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e007      	b.n	80055f8 <HAL_DMA_IRQHandler+0xb34>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8165 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800560a:	e15f      	b.n	80058cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2202      	movs	r2, #2
 8005616:	409a      	lsls	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80c5 	beq.w	80057ac <HAL_DMA_IRQHandler+0xce8>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80bf 	beq.w	80057ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2202      	movs	r2, #2
 8005638:	409a      	lsls	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 813a 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005664:	e134      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8130 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005678:	e12a      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 8089 	bne.w	8005798 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2b      	ldr	r2, [pc, #172]	; (8005738 <HAL_DMA_IRQHandler+0xc74>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d04a      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <HAL_DMA_IRQHandler+0xc78>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d045      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a28      	ldr	r2, [pc, #160]	; (8005740 <HAL_DMA_IRQHandler+0xc7c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d040      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <HAL_DMA_IRQHandler+0xc80>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d03b      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a25      	ldr	r2, [pc, #148]	; (8005748 <HAL_DMA_IRQHandler+0xc84>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d036      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a23      	ldr	r2, [pc, #140]	; (800574c <HAL_DMA_IRQHandler+0xc88>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d031      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a22      	ldr	r2, [pc, #136]	; (8005750 <HAL_DMA_IRQHandler+0xc8c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d02c      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a20      	ldr	r2, [pc, #128]	; (8005754 <HAL_DMA_IRQHandler+0xc90>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d027      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <HAL_DMA_IRQHandler+0xc94>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d022      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_DMA_IRQHandler+0xc98>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01d      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <HAL_DMA_IRQHandler+0xc9c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d018      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <HAL_DMA_IRQHandler+0xca0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a19      	ldr	r2, [pc, #100]	; (8005768 <HAL_DMA_IRQHandler+0xca4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_DMA_IRQHandler+0xca8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d009      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_DMA_IRQHandler+0xcac>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_DMA_IRQHandler+0xc62>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <HAL_DMA_IRQHandler+0xcb0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d128      	bne.n	8005778 <HAL_DMA_IRQHandler+0xcb4>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0214 	bic.w	r2, r2, #20
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e027      	b.n	8005788 <HAL_DMA_IRQHandler+0xcc4>
 8005738:	40020010 	.word	0x40020010
 800573c:	40020028 	.word	0x40020028
 8005740:	40020040 	.word	0x40020040
 8005744:	40020058 	.word	0x40020058
 8005748:	40020070 	.word	0x40020070
 800574c:	40020088 	.word	0x40020088
 8005750:	400200a0 	.word	0x400200a0
 8005754:	400200b8 	.word	0x400200b8
 8005758:	40020410 	.word	0x40020410
 800575c:	40020428 	.word	0x40020428
 8005760:	40020440 	.word	0x40020440
 8005764:	40020458 	.word	0x40020458
 8005768:	40020470 	.word	0x40020470
 800576c:	40020488 	.word	0x40020488
 8005770:	400204a0 	.word	0x400204a0
 8005774:	400204b8 	.word	0x400204b8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 020a 	bic.w	r2, r2, #10
 8005786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8097 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057aa:	e091      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2208      	movs	r2, #8
 80057b6:	409a      	lsls	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8088 	beq.w	80058d2 <HAL_DMA_IRQHandler+0xe0e>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8082 	beq.w	80058d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <HAL_DMA_IRQHandler+0xe14>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a3f      	ldr	r2, [pc, #252]	; (80058dc <HAL_DMA_IRQHandler+0xe18>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a3e      	ldr	r2, [pc, #248]	; (80058e0 <HAL_DMA_IRQHandler+0xe1c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <HAL_DMA_IRQHandler+0xe20>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <HAL_DMA_IRQHandler+0xe24>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a39      	ldr	r2, [pc, #228]	; (80058ec <HAL_DMA_IRQHandler+0xe28>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a38      	ldr	r2, [pc, #224]	; (80058f0 <HAL_DMA_IRQHandler+0xe2c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a36      	ldr	r2, [pc, #216]	; (80058f4 <HAL_DMA_IRQHandler+0xe30>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a35      	ldr	r2, [pc, #212]	; (80058f8 <HAL_DMA_IRQHandler+0xe34>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a33      	ldr	r2, [pc, #204]	; (80058fc <HAL_DMA_IRQHandler+0xe38>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a32      	ldr	r2, [pc, #200]	; (8005900 <HAL_DMA_IRQHandler+0xe3c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a30      	ldr	r2, [pc, #192]	; (8005904 <HAL_DMA_IRQHandler+0xe40>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2f      	ldr	r2, [pc, #188]	; (8005908 <HAL_DMA_IRQHandler+0xe44>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <HAL_DMA_IRQHandler+0xe48>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <HAL_DMA_IRQHandler+0xe4c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_IRQHandler+0xdaa>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <HAL_DMA_IRQHandler+0xe50>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <HAL_DMA_IRQHandler+0xdbc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 021c 	bic.w	r2, r2, #28
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e007      	b.n	8005890 <HAL_DMA_IRQHandler+0xdcc>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 020e 	bic.w	r2, r2, #14
 800588e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
 80058c6:	e004      	b.n	80058d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80058c8:	bf00      	nop
 80058ca:	e002      	b.n	80058d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058cc:	bf00      	nop
 80058ce:	e000      	b.n	80058d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40020010 	.word	0x40020010
 80058dc:	40020028 	.word	0x40020028
 80058e0:	40020040 	.word	0x40020040
 80058e4:	40020058 	.word	0x40020058
 80058e8:	40020070 	.word	0x40020070
 80058ec:	40020088 	.word	0x40020088
 80058f0:	400200a0 	.word	0x400200a0
 80058f4:	400200b8 	.word	0x400200b8
 80058f8:	40020410 	.word	0x40020410
 80058fc:	40020428 	.word	0x40020428
 8005900:	40020440 	.word	0x40020440
 8005904:	40020458 	.word	0x40020458
 8005908:	40020470 	.word	0x40020470
 800590c:	40020488 	.word	0x40020488
 8005910:	400204a0 	.word	0x400204a0
 8005914:	400204b8 	.word	0x400204b8

08005918 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a7f      	ldr	r2, [pc, #508]	; (8005b34 <DMA_SetConfig+0x21c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d072      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a7d      	ldr	r2, [pc, #500]	; (8005b38 <DMA_SetConfig+0x220>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d06d      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a7c      	ldr	r2, [pc, #496]	; (8005b3c <DMA_SetConfig+0x224>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d068      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a7a      	ldr	r2, [pc, #488]	; (8005b40 <DMA_SetConfig+0x228>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d063      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a79      	ldr	r2, [pc, #484]	; (8005b44 <DMA_SetConfig+0x22c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d05e      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a77      	ldr	r2, [pc, #476]	; (8005b48 <DMA_SetConfig+0x230>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d059      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a76      	ldr	r2, [pc, #472]	; (8005b4c <DMA_SetConfig+0x234>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d054      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a74      	ldr	r2, [pc, #464]	; (8005b50 <DMA_SetConfig+0x238>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d04f      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a73      	ldr	r2, [pc, #460]	; (8005b54 <DMA_SetConfig+0x23c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a71      	ldr	r2, [pc, #452]	; (8005b58 <DMA_SetConfig+0x240>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a70      	ldr	r2, [pc, #448]	; (8005b5c <DMA_SetConfig+0x244>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a6e      	ldr	r2, [pc, #440]	; (8005b60 <DMA_SetConfig+0x248>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6d      	ldr	r2, [pc, #436]	; (8005b64 <DMA_SetConfig+0x24c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6b      	ldr	r2, [pc, #428]	; (8005b68 <DMA_SetConfig+0x250>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6a      	ldr	r2, [pc, #424]	; (8005b6c <DMA_SetConfig+0x254>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a68      	ldr	r2, [pc, #416]	; (8005b70 <DMA_SetConfig+0x258>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a67      	ldr	r2, [pc, #412]	; (8005b74 <DMA_SetConfig+0x25c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <DMA_SetConfig+0x260>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a64      	ldr	r2, [pc, #400]	; (8005b7c <DMA_SetConfig+0x264>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a62      	ldr	r2, [pc, #392]	; (8005b80 <DMA_SetConfig+0x268>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a61      	ldr	r2, [pc, #388]	; (8005b84 <DMA_SetConfig+0x26c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a5f      	ldr	r2, [pc, #380]	; (8005b88 <DMA_SetConfig+0x270>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a5e      	ldr	r2, [pc, #376]	; (8005b8c <DMA_SetConfig+0x274>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <DMA_SetConfig+0x10a>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <DMA_SetConfig+0x278>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <DMA_SetConfig+0x10e>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <DMA_SetConfig+0x110>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a39      	ldr	r2, [pc, #228]	; (8005b34 <DMA_SetConfig+0x21c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04a      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a38      	ldr	r2, [pc, #224]	; (8005b38 <DMA_SetConfig+0x220>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d045      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a36      	ldr	r2, [pc, #216]	; (8005b3c <DMA_SetConfig+0x224>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d040      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a35      	ldr	r2, [pc, #212]	; (8005b40 <DMA_SetConfig+0x228>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d03b      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a33      	ldr	r2, [pc, #204]	; (8005b44 <DMA_SetConfig+0x22c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d036      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a32      	ldr	r2, [pc, #200]	; (8005b48 <DMA_SetConfig+0x230>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d031      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a30      	ldr	r2, [pc, #192]	; (8005b4c <DMA_SetConfig+0x234>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02c      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <DMA_SetConfig+0x238>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d027      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2d      	ldr	r2, [pc, #180]	; (8005b54 <DMA_SetConfig+0x23c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <DMA_SetConfig+0x240>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01d      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <DMA_SetConfig+0x244>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <DMA_SetConfig+0x248>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <DMA_SetConfig+0x24c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <DMA_SetConfig+0x250>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	; (8005b6c <DMA_SetConfig+0x254>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <DMA_SetConfig+0x1d0>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <DMA_SetConfig+0x258>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <DMA_SetConfig+0x1d4>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <DMA_SetConfig+0x1d6>
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d059      	beq.n	8005ba6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	223f      	movs	r2, #63	; 0x3f
 8005afc:	409a      	lsls	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d138      	bne.n	8005b94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b32:	e086      	b.n	8005c42 <DMA_SetConfig+0x32a>
 8005b34:	40020010 	.word	0x40020010
 8005b38:	40020028 	.word	0x40020028
 8005b3c:	40020040 	.word	0x40020040
 8005b40:	40020058 	.word	0x40020058
 8005b44:	40020070 	.word	0x40020070
 8005b48:	40020088 	.word	0x40020088
 8005b4c:	400200a0 	.word	0x400200a0
 8005b50:	400200b8 	.word	0x400200b8
 8005b54:	40020410 	.word	0x40020410
 8005b58:	40020428 	.word	0x40020428
 8005b5c:	40020440 	.word	0x40020440
 8005b60:	40020458 	.word	0x40020458
 8005b64:	40020470 	.word	0x40020470
 8005b68:	40020488 	.word	0x40020488
 8005b6c:	400204a0 	.word	0x400204a0
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	58025408 	.word	0x58025408
 8005b78:	5802541c 	.word	0x5802541c
 8005b7c:	58025430 	.word	0x58025430
 8005b80:	58025444 	.word	0x58025444
 8005b84:	58025458 	.word	0x58025458
 8005b88:	5802546c 	.word	0x5802546c
 8005b8c:	58025480 	.word	0x58025480
 8005b90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
}
 8005ba4:	e04d      	b.n	8005c42 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <DMA_SetConfig+0x338>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <DMA_SetConfig+0x33c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01d      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a26      	ldr	r2, [pc, #152]	; (8005c58 <DMA_SetConfig+0x340>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <DMA_SetConfig+0x344>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <DMA_SetConfig+0x348>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <DMA_SetConfig+0x34c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <DMA_SetConfig+0x350>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <DMA_SetConfig+0x2de>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <DMA_SetConfig+0x354>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <DMA_SetConfig+0x2e2>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <DMA_SetConfig+0x2e4>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d020      	beq.n	8005c42 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2201      	movs	r2, #1
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d108      	bne.n	8005c32 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	60da      	str	r2, [r3, #12]
}
 8005c30:	e007      	b.n	8005c42 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	58025408 	.word	0x58025408
 8005c54:	5802541c 	.word	0x5802541c
 8005c58:	58025430 	.word	0x58025430
 8005c5c:	58025444 	.word	0x58025444
 8005c60:	58025458 	.word	0x58025458
 8005c64:	5802546c 	.word	0x5802546c
 8005c68:	58025480 	.word	0x58025480
 8005c6c:	58025494 	.word	0x58025494

08005c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a42      	ldr	r2, [pc, #264]	; (8005d88 <DMA_CalcBaseAndBitshift+0x118>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a41      	ldr	r2, [pc, #260]	; (8005d8c <DMA_CalcBaseAndBitshift+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d045      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a3f      	ldr	r2, [pc, #252]	; (8005d90 <DMA_CalcBaseAndBitshift+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d040      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3e      	ldr	r2, [pc, #248]	; (8005d94 <DMA_CalcBaseAndBitshift+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d03b      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3c      	ldr	r2, [pc, #240]	; (8005d98 <DMA_CalcBaseAndBitshift+0x128>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d036      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a3b      	ldr	r2, [pc, #236]	; (8005d9c <DMA_CalcBaseAndBitshift+0x12c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d031      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a39      	ldr	r2, [pc, #228]	; (8005da0 <DMA_CalcBaseAndBitshift+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a38      	ldr	r2, [pc, #224]	; (8005da4 <DMA_CalcBaseAndBitshift+0x134>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d027      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a36      	ldr	r2, [pc, #216]	; (8005da8 <DMA_CalcBaseAndBitshift+0x138>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a35      	ldr	r2, [pc, #212]	; (8005dac <DMA_CalcBaseAndBitshift+0x13c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01d      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a33      	ldr	r2, [pc, #204]	; (8005db0 <DMA_CalcBaseAndBitshift+0x140>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a32      	ldr	r2, [pc, #200]	; (8005db4 <DMA_CalcBaseAndBitshift+0x144>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a30      	ldr	r2, [pc, #192]	; (8005db8 <DMA_CalcBaseAndBitshift+0x148>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <DMA_CalcBaseAndBitshift+0x14c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a2d      	ldr	r2, [pc, #180]	; (8005dc0 <DMA_CalcBaseAndBitshift+0x150>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <DMA_CalcBaseAndBitshift+0xa8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <DMA_CalcBaseAndBitshift+0x154>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <DMA_CalcBaseAndBitshift+0xac>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <DMA_CalcBaseAndBitshift+0xae>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d024      	beq.n	8005d6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	3b10      	subs	r3, #16
 8005d2a:	4a27      	ldr	r2, [pc, #156]	; (8005dc8 <DMA_CalcBaseAndBitshift+0x158>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <DMA_CalcBaseAndBitshift+0x15c>)
 8005d3c:	5cd3      	ldrb	r3, [r2, r3]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d908      	bls.n	8005d5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	659a      	str	r2, [r3, #88]	; 0x58
 8005d5a:	e00d      	b.n	8005d78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6a:	e005      	b.n	8005d78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40020010 	.word	0x40020010
 8005d8c:	40020028 	.word	0x40020028
 8005d90:	40020040 	.word	0x40020040
 8005d94:	40020058 	.word	0x40020058
 8005d98:	40020070 	.word	0x40020070
 8005d9c:	40020088 	.word	0x40020088
 8005da0:	400200a0 	.word	0x400200a0
 8005da4:	400200b8 	.word	0x400200b8
 8005da8:	40020410 	.word	0x40020410
 8005dac:	40020428 	.word	0x40020428
 8005db0:	40020440 	.word	0x40020440
 8005db4:	40020458 	.word	0x40020458
 8005db8:	40020470 	.word	0x40020470
 8005dbc:	40020488 	.word	0x40020488
 8005dc0:	400204a0 	.word	0x400204a0
 8005dc4:	400204b8 	.word	0x400204b8
 8005dc8:	aaaaaaab 	.word	0xaaaaaaab
 8005dcc:	0800dc84 	.word	0x0800dc84
 8005dd0:	fffffc00 	.word	0xfffffc00

08005dd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d120      	bne.n	8005e2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d858      	bhi.n	8005ea2 <DMA_CheckFifoParam+0xce>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <DMA_CheckFifoParam+0x24>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e1b 	.word	0x08005e1b
 8005e00:	08005e09 	.word	0x08005e09
 8005e04:	08005ea3 	.word	0x08005ea3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d048      	beq.n	8005ea6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e18:	e045      	b.n	8005ea6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e22:	d142      	bne.n	8005eaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e28:	e03f      	b.n	8005eaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e32:	d123      	bne.n	8005e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d838      	bhi.n	8005eae <DMA_CheckFifoParam+0xda>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <DMA_CheckFifoParam+0x70>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e5b 	.word	0x08005e5b
 8005e4c:	08005e55 	.word	0x08005e55
 8005e50:	08005e6d 	.word	0x08005e6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
        break;
 8005e58:	e030      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d025      	beq.n	8005eb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e6a:	e022      	b.n	8005eb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e74:	d11f      	bne.n	8005eb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e7a:	e01c      	b.n	8005eb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d902      	bls.n	8005e8a <DMA_CheckFifoParam+0xb6>
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d003      	beq.n	8005e90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e88:	e018      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e8e:	e015      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea0:	e00b      	b.n	8005eba <DMA_CheckFifoParam+0xe6>
        break;
 8005ea2:	bf00      	nop
 8005ea4:	e00a      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e008      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e006      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        break;
 8005eae:	bf00      	nop
 8005eb0:	e004      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e002      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
        break;
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <DMA_CheckFifoParam+0xe8>
    break;
 8005eba:	bf00      	nop
    }
  }

  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a38      	ldr	r2, [pc, #224]	; (8005fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d022      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a36      	ldr	r2, [pc, #216]	; (8005fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d01d      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a35      	ldr	r2, [pc, #212]	; (8005fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d018      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a33      	ldr	r2, [pc, #204]	; (8005fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a32      	ldr	r2, [pc, #200]	; (8005fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00e      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d009      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01a      	beq.n	8005f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	3b08      	subs	r3, #8
 8005f3c:	4a28      	ldr	r2, [pc, #160]	; (8005fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	461a      	mov	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f68:	e024      	b.n	8005fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	3b10      	subs	r3, #16
 8005f72:	4a1e      	ldr	r2, [pc, #120]	; (8005fec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f74:	fba2 2303 	umull	r2, r3, r2, r3
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d806      	bhi.n	8005f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d902      	bls.n	8005f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2201      	movs	r2, #1
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494
 8005fe0:	cccccccd 	.word	0xcccccccd
 8005fe4:	16009600 	.word	0x16009600
 8005fe8:	58025880 	.word	0x58025880
 8005fec:	aaaaaaab 	.word	0xaaaaaaab
 8005ff0:	400204b8 	.word	0x400204b8
 8005ff4:	4002040f 	.word	0x4002040f
 8005ff8:	10008200 	.word	0x10008200
 8005ffc:	40020880 	.word	0x40020880

08006000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d04a      	beq.n	80060ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d847      	bhi.n	80060ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a24      	ldr	r2, [pc, #144]	; (80060bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006088:	671a      	str	r2, [r3, #112]	; 0x70
 800608a:	e009      	b.n	80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800609e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2201      	movs	r2, #1
 80060a6:	409a      	lsls	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	58025408 	.word	0x58025408
 80060bc:	5802541c 	.word	0x5802541c
 80060c0:	58025430 	.word	0x58025430
 80060c4:	58025444 	.word	0x58025444
 80060c8:	58025458 	.word	0x58025458
 80060cc:	5802546c 	.word	0x5802546c
 80060d0:	58025480 	.word	0x58025480
 80060d4:	58025494 	.word	0x58025494
 80060d8:	1600963f 	.word	0x1600963f
 80060dc:	58025940 	.word	0x58025940
 80060e0:	1000823f 	.word	0x1000823f
 80060e4:	40020940 	.word	0x40020940

080060e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	; 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060f6:	4b89      	ldr	r3, [pc, #548]	; (800631c <HAL_GPIO_Init+0x234>)
 80060f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060fa:	e194      	b.n	8006426 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	2101      	movs	r1, #1
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8186 	beq.w	8006420 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d005      	beq.n	800612c <HAL_GPIO_Init+0x44>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d130      	bne.n	800618e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	2203      	movs	r2, #3
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006162:	2201      	movs	r2, #1
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4013      	ands	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 0201 	and.w	r2, r3, #1
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d017      	beq.n	80061ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	2203      	movs	r2, #3
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d123      	bne.n	800621e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	08da      	lsrs	r2, r3, #3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3208      	adds	r2, #8
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	220f      	movs	r2, #15
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	08da      	lsrs	r2, r3, #3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3208      	adds	r2, #8
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	2203      	movs	r2, #3
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0203 	and.w	r2, r3, #3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4313      	orrs	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80e0 	beq.w	8006420 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <HAL_GPIO_Init+0x238>)
 8006262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006266:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <HAL_GPIO_Init+0x238>)
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <HAL_GPIO_Init+0x238>)
 8006272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800627e:	4a29      	ldr	r2, [pc, #164]	; (8006324 <HAL_GPIO_Init+0x23c>)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	220f      	movs	r2, #15
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_GPIO_Init+0x240>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d052      	beq.n	8006350 <HAL_GPIO_Init+0x268>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_GPIO_Init+0x244>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d031      	beq.n	8006316 <HAL_GPIO_Init+0x22e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_GPIO_Init+0x248>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02b      	beq.n	8006312 <HAL_GPIO_Init+0x22a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <HAL_GPIO_Init+0x24c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d025      	beq.n	800630e <HAL_GPIO_Init+0x226>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1c      	ldr	r2, [pc, #112]	; (8006338 <HAL_GPIO_Init+0x250>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01f      	beq.n	800630a <HAL_GPIO_Init+0x222>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_GPIO_Init+0x254>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d019      	beq.n	8006306 <HAL_GPIO_Init+0x21e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <HAL_GPIO_Init+0x258>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_GPIO_Init+0x21a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_GPIO_Init+0x25c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00d      	beq.n	80062fe <HAL_GPIO_Init+0x216>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_GPIO_Init+0x260>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <HAL_GPIO_Init+0x212>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a17      	ldr	r2, [pc, #92]	; (800634c <HAL_GPIO_Init+0x264>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_GPIO_Init+0x20e>
 80062f2:	2309      	movs	r3, #9
 80062f4:	e02d      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 80062f6:	230a      	movs	r3, #10
 80062f8:	e02b      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 80062fa:	2308      	movs	r3, #8
 80062fc:	e029      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 80062fe:	2307      	movs	r3, #7
 8006300:	e027      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 8006302:	2306      	movs	r3, #6
 8006304:	e025      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 8006306:	2305      	movs	r3, #5
 8006308:	e023      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 800630a:	2304      	movs	r3, #4
 800630c:	e021      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 800630e:	2303      	movs	r3, #3
 8006310:	e01f      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 8006312:	2302      	movs	r3, #2
 8006314:	e01d      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 8006316:	2301      	movs	r3, #1
 8006318:	e01b      	b.n	8006352 <HAL_GPIO_Init+0x26a>
 800631a:	bf00      	nop
 800631c:	58000080 	.word	0x58000080
 8006320:	58024400 	.word	0x58024400
 8006324:	58000400 	.word	0x58000400
 8006328:	58020000 	.word	0x58020000
 800632c:	58020400 	.word	0x58020400
 8006330:	58020800 	.word	0x58020800
 8006334:	58020c00 	.word	0x58020c00
 8006338:	58021000 	.word	0x58021000
 800633c:	58021400 	.word	0x58021400
 8006340:	58021800 	.word	0x58021800
 8006344:	58021c00 	.word	0x58021c00
 8006348:	58022000 	.word	0x58022000
 800634c:	58022400 	.word	0x58022400
 8006350:	2300      	movs	r3, #0
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	f002 0203 	and.w	r2, r2, #3
 8006358:	0092      	lsls	r2, r2, #2
 800635a:	4093      	lsls	r3, r2
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006362:	4938      	ldr	r1, [pc, #224]	; (8006444 <HAL_GPIO_Init+0x35c>)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	3302      	adds	r3, #2
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	43db      	mvns	r3, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4013      	ands	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800639e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	f47f ae63 	bne.w	80060fc <HAL_GPIO_Init+0x14>
  }
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	3724      	adds	r7, #36	; 0x24
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	58000400 	.word	0x58000400

08006448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e001      	b.n	800646a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	807b      	strh	r3, [r7, #2]
 8006484:	4613      	mov	r3, r2
 8006486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006488:	787b      	ldrb	r3, [r7, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006494:	e003      	b.n	800649e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006496:	887b      	ldrh	r3, [r7, #2]
 8006498:	041a      	lsls	r2, r3, #16
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	619a      	str	r2, [r3, #24]
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07f      	b.n	80065be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb fb20 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	; 0x24
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800650c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d107      	bne.n	8006526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	e006      	b.n	8006534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d104      	bne.n	8006546 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_I2C_Init+0x11c>)
 8006552:	430b      	orrs	r3, r1
 8006554:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69d9      	ldr	r1, [r3, #28]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	02008000 	.word	0x02008000

080065cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	817b      	strh	r3, [r7, #10]
 80065dc:	4613      	mov	r3, r2
 80065de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	f040 80da 	bne.w	80067a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_I2C_Master_Transmit+0x30>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e0d3      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006604:	f7fb feb0 	bl	8002368 <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2319      	movs	r3, #25
 8006610:	2201      	movs	r2, #1
 8006612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f9e6 	bl	80069e8 <I2C_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0be      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2221      	movs	r2, #33	; 0x21
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2210      	movs	r2, #16
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	893a      	ldrh	r2, [r7, #8]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	2bff      	cmp	r3, #255	; 0xff
 8006656:	d90e      	bls.n	8006676 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	22ff      	movs	r2, #255	; 0xff
 800665c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	b2da      	uxtb	r2, r3
 8006664:	8979      	ldrh	r1, [r7, #10]
 8006666:	4b51      	ldr	r3, [pc, #324]	; (80067ac <HAL_I2C_Master_Transmit+0x1e0>)
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fbdc 	bl	8006e2c <I2C_TransferConfig>
 8006674:	e06c      	b.n	8006750 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	b2da      	uxtb	r2, r3
 8006686:	8979      	ldrh	r1, [r7, #10]
 8006688:	4b48      	ldr	r3, [pc, #288]	; (80067ac <HAL_I2C_Master_Transmit+0x1e0>)
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fbcb 	bl	8006e2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006696:	e05b      	b.n	8006750 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	6a39      	ldr	r1, [r7, #32]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f9e3 	bl	8006a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e07b      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d034      	beq.n	8006750 <HAL_I2C_Master_Transmit+0x184>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d130      	bne.n	8006750 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f975 	bl	80069e8 <I2C_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e04d      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2bff      	cmp	r3, #255	; 0xff
 8006710:	d90e      	bls.n	8006730 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	b2da      	uxtb	r2, r3
 800671e:	8979      	ldrh	r1, [r7, #10]
 8006720:	2300      	movs	r3, #0
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fb7f 	bl	8006e2c <I2C_TransferConfig>
 800672e:	e00f      	b.n	8006750 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	b2da      	uxtb	r2, r3
 8006740:	8979      	ldrh	r1, [r7, #10]
 8006742:	2300      	movs	r3, #0
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fb6e 	bl	8006e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d19e      	bne.n	8006698 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f9c2 	bl	8006ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e01a      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2220      	movs	r2, #32
 8006774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6859      	ldr	r1, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8006782:	400b      	ands	r3, r1
 8006784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	80002000 	.word	0x80002000
 80067b0:	fe00e800 	.word	0xfe00e800

080067b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	461a      	mov	r2, r3
 80067c0:	460b      	mov	r3, r1
 80067c2:	817b      	strh	r3, [r7, #10]
 80067c4:	4613      	mov	r3, r2
 80067c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	f040 80db 	bne.w	800698c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_I2C_Master_Receive+0x30>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e0d4      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067ec:	f7fb fdbc 	bl	8002368 <HAL_GetTick>
 80067f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	2319      	movs	r3, #25
 80067f8:	2201      	movs	r2, #1
 80067fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f8f2 	bl	80069e8 <I2C_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e0bf      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2222      	movs	r2, #34	; 0x22
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2210      	movs	r2, #16
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	893a      	ldrh	r2, [r7, #8]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	2bff      	cmp	r3, #255	; 0xff
 800683e:	d90e      	bls.n	800685e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	b2da      	uxtb	r2, r3
 800684c:	8979      	ldrh	r1, [r7, #10]
 800684e:	4b52      	ldr	r3, [pc, #328]	; (8006998 <HAL_I2C_Master_Receive+0x1e4>)
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fae8 	bl	8006e2c <I2C_TransferConfig>
 800685c:	e06d      	b.n	800693a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	b2da      	uxtb	r2, r3
 800686e:	8979      	ldrh	r1, [r7, #10]
 8006870:	4b49      	ldr	r3, [pc, #292]	; (8006998 <HAL_I2C_Master_Receive+0x1e4>)
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fad7 	bl	8006e2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800687e:	e05c      	b.n	800693a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	6a39      	ldr	r1, [r7, #32]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f96b 	bl	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e07c      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d034      	beq.n	800693a <HAL_I2C_Master_Receive+0x186>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d130      	bne.n	800693a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2200      	movs	r2, #0
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f880 	bl	80069e8 <I2C_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e04d      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2bff      	cmp	r3, #255	; 0xff
 80068fa:	d90e      	bls.n	800691a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	22ff      	movs	r2, #255	; 0xff
 8006900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006906:	b2da      	uxtb	r2, r3
 8006908:	8979      	ldrh	r1, [r7, #10]
 800690a:	2300      	movs	r3, #0
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fa8a 	bl	8006e2c <I2C_TransferConfig>
 8006918:	e00f      	b.n	800693a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006928:	b2da      	uxtb	r2, r3
 800692a:	8979      	ldrh	r1, [r7, #10]
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fa79 	bl	8006e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d19d      	bne.n	8006880 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	6a39      	ldr	r1, [r7, #32]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f8cd 	bl	8006ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e01a      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2220      	movs	r2, #32
 800695e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <HAL_I2C_Master_Receive+0x1e8>)
 800696c:	400b      	ands	r3, r1
 800696e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	80002400 	.word	0x80002400
 800699c:	fe00e800 	.word	0xfe00e800

080069a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d103      	bne.n	80069be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d007      	beq.n	80069dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	619a      	str	r2, [r3, #24]
  }
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f8:	e022      	b.n	8006a40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a00:	d01e      	beq.n	8006a40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a02:	f7fb fcb1 	bl	8002368 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d302      	bcc.n	8006a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d113      	bne.n	8006a40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e00f      	b.n	8006a60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d0cd      	beq.n	80069fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a74:	e02c      	b.n	8006ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f8ea 	bl	8006c54 <I2C_IsErrorOccurred>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e02a      	b.n	8006ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a90:	d01e      	beq.n	8006ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fb fc69 	bl	8002368 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d113      	bne.n	8006ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e007      	b.n	8006ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d1cb      	bne.n	8006a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006af4:	e028      	b.n	8006b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f8aa 	bl	8006c54 <I2C_IsErrorOccurred>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e026      	b.n	8006b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0a:	f7fb fc2d 	bl	8002368 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d302      	bcc.n	8006b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d113      	bne.n	8006b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e007      	b.n	8006b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d1cf      	bne.n	8006af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b6c:	e064      	b.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f86e 	bl	8006c54 <I2C_IsErrorOccurred>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e062      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d138      	bne.n	8006c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d105      	bne.n	8006baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e04e      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d107      	bne.n	8006bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006bc6:	e002      	b.n	8006bce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006be2:	400b      	ands	r3, r1
 8006be4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e022      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c02:	f7fb fbb1 	bl	8002368 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e007      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d193      	bne.n	8006b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	fe00e800 	.word	0xfe00e800

08006c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d075      	beq.n	8006d6c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2210      	movs	r2, #16
 8006c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c88:	e056      	b.n	8006d38 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c90:	d052      	beq.n	8006d38 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c92:	f7fb fb69 	bl	8002368 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d302      	bcc.n	8006ca8 <I2C_IsErrorOccurred+0x54>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d147      	bne.n	8006d38 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cca:	d12e      	bne.n	8006d2a <I2C_IsErrorOccurred+0xd6>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd2:	d02a      	beq.n	8006d2a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d027      	beq.n	8006d2a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ce8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006cea:	f7fb fb3d 	bl	8002368 <HAL_GetTick>
 8006cee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cf0:	e01b      	b.n	8006d2a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006cf2:	f7fb fb39 	bl	8002368 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b19      	cmp	r3, #25
 8006cfe:	d914      	bls.n	8006d2a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d1dc      	bne.n	8006cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d003      	beq.n	8006d4e <I2C_IsErrorOccurred+0xfa>
 8006d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d09d      	beq.n	8006c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	f043 0308 	orr.w	r3, r3, #8
 8006da6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
 8006dc8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01c      	beq.n	8006e1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fddc 	bl	80069a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6859      	ldr	r1, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <I2C_IsErrorOccurred+0x1d4>)
 8006df4:	400b      	ands	r3, r1
 8006df6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3728      	adds	r7, #40	; 0x28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	fe00e800 	.word	0xfe00e800

08006e2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	817b      	strh	r3, [r7, #10]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e3e:	897b      	ldrh	r3, [r7, #10]
 8006e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e44:	7a7b      	ldrb	r3, [r7, #9]
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e4c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e5a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	0d5b      	lsrs	r3, r3, #21
 8006e66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <I2C_TransferConfig+0x60>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	ea02 0103 	and.w	r1, r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	03ff63ff 	.word	0x03ff63ff

08006e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d138      	bne.n	8006f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e032      	b.n	8006f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	; 0x24
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6819      	ldr	r1, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d139      	bne.n	8006fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e033      	b.n	8006fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	; 0x24
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8006fcc:	4b18      	ldr	r3, [pc, #96]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f023 0201 	bic.w	r2, r3, #1
 8006fd4:	4916      	ldr	r1, [pc, #88]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8006fdc:	4b14      	ldr	r3, [pc, #80]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	4a13      	ldr	r2, [pc, #76]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fe2:	f023 0305 	bic.w	r3, r3, #5
 8006fe6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8006fe8:	4b11      	ldr	r3, [pc, #68]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	4a10      	ldr	r2, [pc, #64]	; (8007030 <HAL_PWR_EnterSTOPMode+0x70>)
 8006fee:	f023 0302 	bic.w	r3, r3, #2
 8006ff2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <HAL_PWR_EnterSTOPMode+0x74>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a0e      	ldr	r2, [pc, #56]	; (8007034 <HAL_PWR_EnterSTOPMode+0x74>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007000:	f3bf 8f4f 	dsb	sy
}
 8007004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007006:	f3bf 8f6f 	isb	sy
}
 800700a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8007012:	bf30      	wfi
 8007014:	e000      	b.n	8007018 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007016:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_PWR_EnterSTOPMode+0x74>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4a05      	ldr	r2, [pc, #20]	; (8007034 <HAL_PWR_EnterSTOPMode+0x74>)
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	6113      	str	r3, [r2, #16]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	58024800 	.word	0x58024800
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b04      	cmp	r3, #4
 800704a:	d00a      	beq.n	8007062 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <HAL_PWREx_ConfigSupply+0x70>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e01f      	b.n	800709e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e01d      	b.n	800709e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f023 0207 	bic.w	r2, r3, #7
 800706a:	490f      	ldr	r1, [pc, #60]	; (80070a8 <HAL_PWREx_ConfigSupply+0x70>)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4313      	orrs	r3, r2
 8007070:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007072:	f7fb f979 	bl	8002368 <HAL_GetTick>
 8007076:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007078:	e009      	b.n	800708e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800707a:	f7fb f975 	bl	8002368 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007088:	d901      	bls.n	800708e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e007      	b.n	800709e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_PWREx_ConfigSupply+0x70>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709a:	d1ee      	bne.n	800707a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	58024800 	.word	0x58024800

080070ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d102      	bne.n	80070c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f000 bc1d 	b.w	80078fa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8087 	beq.w	80071dc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ce:	4b99      	ldr	r3, [pc, #612]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070d8:	4b96      	ldr	r3, [pc, #600]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d007      	beq.n	80070f4 <HAL_RCC_OscConfig+0x48>
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b18      	cmp	r3, #24
 80070e8:	d110      	bne.n	800710c <HAL_RCC_OscConfig+0x60>
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d10b      	bne.n	800710c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f4:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d06c      	beq.n	80071da <HAL_RCC_OscConfig+0x12e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d168      	bne.n	80071da <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e3f6      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007114:	d106      	bne.n	8007124 <HAL_RCC_OscConfig+0x78>
 8007116:	4b87      	ldr	r3, [pc, #540]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a86      	ldr	r2, [pc, #536]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e02e      	b.n	8007182 <HAL_RCC_OscConfig+0xd6>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10c      	bne.n	8007146 <HAL_RCC_OscConfig+0x9a>
 800712c:	4b81      	ldr	r3, [pc, #516]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a80      	ldr	r2, [pc, #512]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4b7e      	ldr	r3, [pc, #504]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a7d      	ldr	r2, [pc, #500]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800713e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e01d      	b.n	8007182 <HAL_RCC_OscConfig+0xd6>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800714e:	d10c      	bne.n	800716a <HAL_RCC_OscConfig+0xbe>
 8007150:	4b78      	ldr	r3, [pc, #480]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a77      	ldr	r2, [pc, #476]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	4b75      	ldr	r3, [pc, #468]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a74      	ldr	r2, [pc, #464]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e00b      	b.n	8007182 <HAL_RCC_OscConfig+0xd6>
 800716a:	4b72      	ldr	r3, [pc, #456]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a71      	ldr	r2, [pc, #452]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4b6f      	ldr	r3, [pc, #444]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a6e      	ldr	r2, [pc, #440]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800717c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007180:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d013      	beq.n	80071b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718a:	f7fb f8ed 	bl	8002368 <HAL_GetTick>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007192:	f7fb f8e9 	bl	8002368 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b64      	cmp	r3, #100	; 0x64
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e3aa      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a4:	4b63      	ldr	r3, [pc, #396]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <HAL_RCC_OscConfig+0xe6>
 80071b0:	e014      	b.n	80071dc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fb f8d9 	bl	8002368 <HAL_GetTick>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071ba:	f7fb f8d5 	bl	8002368 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b64      	cmp	r3, #100	; 0x64
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e396      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071cc:	4b59      	ldr	r3, [pc, #356]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f0      	bne.n	80071ba <HAL_RCC_OscConfig+0x10e>
 80071d8:	e000      	b.n	80071dc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80cb 	beq.w	8007380 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ea:	4b52      	ldr	r3, [pc, #328]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071f4:	4b4f      	ldr	r3, [pc, #316]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <HAL_RCC_OscConfig+0x164>
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	2b18      	cmp	r3, #24
 8007204:	d156      	bne.n	80072b4 <HAL_RCC_OscConfig+0x208>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d151      	bne.n	80072b4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007210:	4b48      	ldr	r3, [pc, #288]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_RCC_OscConfig+0x17c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e368      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007228:	4b42      	ldr	r3, [pc, #264]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 0219 	bic.w	r2, r3, #25
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	493f      	ldr	r1, [pc, #252]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007236:	4313      	orrs	r3, r2
 8007238:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800723a:	f7fb f895 	bl	8002368 <HAL_GetTick>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007242:	f7fb f891 	bl	8002368 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e352      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007254:	4b37      	ldr	r3, [pc, #220]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007260:	f7fb f8c2 	bl	80023e8 <HAL_GetREVID>
 8007264:	4603      	mov	r3, r0
 8007266:	f241 0203 	movw	r2, #4099	; 0x1003
 800726a:	4293      	cmp	r3, r2
 800726c:	d817      	bhi.n	800729e <HAL_RCC_OscConfig+0x1f2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d108      	bne.n	8007288 <HAL_RCC_OscConfig+0x1dc>
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800727e:	4a2d      	ldr	r2, [pc, #180]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007284:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007286:	e07b      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007288:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	4927      	ldr	r1, [pc, #156]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007298:	4313      	orrs	r3, r2
 800729a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800729c:	e070      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729e:	4b25      	ldr	r3, [pc, #148]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	4921      	ldr	r1, [pc, #132]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b2:	e065      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d048      	beq.n	800734e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f023 0219 	bic.w	r2, r3, #25
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	491a      	ldr	r1, [pc, #104]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ce:	f7fb f84b 	bl	8002368 <HAL_GetTick>
 80072d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d6:	f7fb f847 	bl	8002368 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e308      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e8:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f4:	f7fb f878 	bl	80023e8 <HAL_GetREVID>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80072fe:	4293      	cmp	r3, r2
 8007300:	d81a      	bhi.n	8007338 <HAL_RCC_OscConfig+0x28c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d108      	bne.n	800731c <HAL_RCC_OscConfig+0x270>
 800730a:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007312:	4a08      	ldr	r2, [pc, #32]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 8007314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007318:	6053      	str	r3, [r2, #4]
 800731a:	e031      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	031b      	lsls	r3, r3, #12
 800732a:	4902      	ldr	r1, [pc, #8]	; (8007334 <HAL_RCC_OscConfig+0x288>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]
 8007330:	e026      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
 8007332:	bf00      	nop
 8007334:	58024400 	.word	0x58024400
 8007338:	4b9a      	ldr	r3, [pc, #616]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	061b      	lsls	r3, r3, #24
 8007346:	4997      	ldr	r1, [pc, #604]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]
 800734c:	e018      	b.n	8007380 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800734e:	4b95      	ldr	r3, [pc, #596]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a94      	ldr	r2, [pc, #592]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735a:	f7fb f805 	bl	8002368 <HAL_GetTick>
 800735e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007362:	f7fb f801 	bl	8002368 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e2c2      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007374:	4b8b      	ldr	r3, [pc, #556]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80a9 	beq.w	80074e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800738e:	4b85      	ldr	r3, [pc, #532]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007396:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007398:	4b82      	ldr	r3, [pc, #520]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d007      	beq.n	80073b4 <HAL_RCC_OscConfig+0x308>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b18      	cmp	r3, #24
 80073a8:	d13a      	bne.n	8007420 <HAL_RCC_OscConfig+0x374>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d135      	bne.n	8007420 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073b4:	4b7b      	ldr	r3, [pc, #492]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_OscConfig+0x320>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b80      	cmp	r3, #128	; 0x80
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e296      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073cc:	f7fb f80c 	bl	80023e8 <HAL_GetREVID>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d817      	bhi.n	800740a <HAL_RCC_OscConfig+0x35e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d108      	bne.n	80073f4 <HAL_RCC_OscConfig+0x348>
 80073e2:	4b70      	ldr	r3, [pc, #448]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073ea:	4a6e      	ldr	r2, [pc, #440]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80073ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073f2:	e075      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073f4:	4b6b      	ldr	r3, [pc, #428]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	069b      	lsls	r3, r3, #26
 8007402:	4968      	ldr	r1, [pc, #416]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007408:	e06a      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800740a:	4b66      	ldr	r3, [pc, #408]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	061b      	lsls	r3, r3, #24
 8007418:	4962      	ldr	r1, [pc, #392]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800741a:	4313      	orrs	r3, r2
 800741c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800741e:	e05f      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d042      	beq.n	80074ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007428:	4b5e      	ldr	r3, [pc, #376]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a5d      	ldr	r2, [pc, #372]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800742e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007434:	f7fa ff98 	bl	8002368 <HAL_GetTick>
 8007438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800743c:	f7fa ff94 	bl	8002368 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e255      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800744e:	4b55      	ldr	r3, [pc, #340]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800745a:	f7fa ffc5 	bl	80023e8 <HAL_GetREVID>
 800745e:	4603      	mov	r3, r0
 8007460:	f241 0203 	movw	r2, #4099	; 0x1003
 8007464:	4293      	cmp	r3, r2
 8007466:	d817      	bhi.n	8007498 <HAL_RCC_OscConfig+0x3ec>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	2b20      	cmp	r3, #32
 800746e:	d108      	bne.n	8007482 <HAL_RCC_OscConfig+0x3d6>
 8007470:	4b4c      	ldr	r3, [pc, #304]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007478:	4a4a      	ldr	r2, [pc, #296]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800747a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800747e:	6053      	str	r3, [r2, #4]
 8007480:	e02e      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
 8007482:	4b48      	ldr	r3, [pc, #288]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	069b      	lsls	r3, r3, #26
 8007490:	4944      	ldr	r1, [pc, #272]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	604b      	str	r3, [r1, #4]
 8007496:	e023      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
 8007498:	4b42      	ldr	r3, [pc, #264]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	493f      	ldr	r1, [pc, #252]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60cb      	str	r3, [r1, #12]
 80074ac:	e018      	b.n	80074e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80074ae:	4b3d      	ldr	r3, [pc, #244]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a3c      	ldr	r2, [pc, #240]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fa ff55 	bl	8002368 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80074c2:	f7fa ff51 	bl	8002368 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e212      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80074d4:	4b33      	ldr	r3, [pc, #204]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f0      	bne.n	80074c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d036      	beq.n	800755a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074f4:	4b2b      	ldr	r3, [pc, #172]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f8:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fa ff32 	bl	8002368 <HAL_GetTick>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007508:	f7fa ff2e 	bl	8002368 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e1ef      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800751a:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800751c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0x45c>
 8007526:	e018      	b.n	800755a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800752a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007534:	f7fa ff18 	bl	8002368 <HAL_GetTick>
 8007538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800753c:	f7fa ff14 	bl	8002368 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e1d5      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800754e:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d039      	beq.n	80075da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01c      	beq.n	80075a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007578:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800757a:	f7fa fef5 	bl	8002368 <HAL_GetTick>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007582:	f7fa fef1 	bl	8002368 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e1b2      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <HAL_RCC_OscConfig+0x4f8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <HAL_RCC_OscConfig+0x4d6>
 80075a0:	e01b      	b.n	80075da <HAL_RCC_OscConfig+0x52e>
 80075a2:	bf00      	nop
 80075a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075a8:	4b9b      	ldr	r3, [pc, #620]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a9a      	ldr	r2, [pc, #616]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80075ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80075b4:	f7fa fed8 	bl	8002368 <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80075bc:	f7fa fed4 	bl	8002368 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e195      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075ce:	4b92      	ldr	r3, [pc, #584]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f0      	bne.n	80075bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 8081 	beq.w	80076ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075e8:	4b8c      	ldr	r3, [pc, #560]	; (800781c <HAL_RCC_OscConfig+0x770>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a8b      	ldr	r2, [pc, #556]	; (800781c <HAL_RCC_OscConfig+0x770>)
 80075ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075f4:	f7fa feb8 	bl	8002368 <HAL_GetTick>
 80075f8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075fc:	f7fa feb4 	bl	8002368 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b64      	cmp	r3, #100	; 0x64
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e175      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800760e:	4b83      	ldr	r3, [pc, #524]	; (800781c <HAL_RCC_OscConfig+0x770>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0f0      	beq.n	80075fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d106      	bne.n	8007630 <HAL_RCC_OscConfig+0x584>
 8007622:	4b7d      	ldr	r3, [pc, #500]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	4a7c      	ldr	r2, [pc, #496]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
 800762e:	e02d      	b.n	800768c <HAL_RCC_OscConfig+0x5e0>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10c      	bne.n	8007652 <HAL_RCC_OscConfig+0x5a6>
 8007638:	4b77      	ldr	r3, [pc, #476]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	4a76      	ldr	r2, [pc, #472]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	6713      	str	r3, [r2, #112]	; 0x70
 8007644:	4b74      	ldr	r3, [pc, #464]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007648:	4a73      	ldr	r2, [pc, #460]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800764a:	f023 0304 	bic.w	r3, r3, #4
 800764e:	6713      	str	r3, [r2, #112]	; 0x70
 8007650:	e01c      	b.n	800768c <HAL_RCC_OscConfig+0x5e0>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2b05      	cmp	r3, #5
 8007658:	d10c      	bne.n	8007674 <HAL_RCC_OscConfig+0x5c8>
 800765a:	4b6f      	ldr	r3, [pc, #444]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	4a6e      	ldr	r2, [pc, #440]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007660:	f043 0304 	orr.w	r3, r3, #4
 8007664:	6713      	str	r3, [r2, #112]	; 0x70
 8007666:	4b6c      	ldr	r3, [pc, #432]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	4a6b      	ldr	r2, [pc, #428]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800766c:	f043 0301 	orr.w	r3, r3, #1
 8007670:	6713      	str	r3, [r2, #112]	; 0x70
 8007672:	e00b      	b.n	800768c <HAL_RCC_OscConfig+0x5e0>
 8007674:	4b68      	ldr	r3, [pc, #416]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007678:	4a67      	ldr	r2, [pc, #412]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	6713      	str	r3, [r2, #112]	; 0x70
 8007680:	4b65      	ldr	r3, [pc, #404]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007684:	4a64      	ldr	r2, [pc, #400]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007686:	f023 0304 	bic.w	r3, r3, #4
 800768a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d015      	beq.n	80076c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007694:	f7fa fe68 	bl	8002368 <HAL_GetTick>
 8007698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800769a:	e00a      	b.n	80076b2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800769c:	f7fa fe64 	bl	8002368 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e123      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076b2:	4b59      	ldr	r3, [pc, #356]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ee      	beq.n	800769c <HAL_RCC_OscConfig+0x5f0>
 80076be:	e014      	b.n	80076ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c0:	f7fa fe52 	bl	8002368 <HAL_GetTick>
 80076c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076c6:	e00a      	b.n	80076de <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c8:	f7fa fe4e 	bl	8002368 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e10d      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80076de:	4b4e      	ldr	r3, [pc, #312]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ee      	bne.n	80076c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8102 	beq.w	80078f8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80076f4:	4b48      	ldr	r3, [pc, #288]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076fc:	2b18      	cmp	r3, #24
 80076fe:	f000 80bd 	beq.w	800787c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b02      	cmp	r3, #2
 8007708:	f040 809e 	bne.w	8007848 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770c:	4b42      	ldr	r3, [pc, #264]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a41      	ldr	r2, [pc, #260]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fa fe26 	bl	8002368 <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007720:	f7fa fe22 	bl	8002368 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e0e3      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800773e:	4b36      	ldr	r3, [pc, #216]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007742:	4b37      	ldr	r3, [pc, #220]	; (8007820 <HAL_RCC_OscConfig+0x774>)
 8007744:	4013      	ands	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800774e:	0112      	lsls	r2, r2, #4
 8007750:	430a      	orrs	r2, r1
 8007752:	4931      	ldr	r1, [pc, #196]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007754:	4313      	orrs	r3, r2
 8007756:	628b      	str	r3, [r1, #40]	; 0x28
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	3b01      	subs	r3, #1
 800775e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	3b01      	subs	r3, #1
 8007768:	025b      	lsls	r3, r3, #9
 800776a:	b29b      	uxth	r3, r3
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	3b01      	subs	r3, #1
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	3b01      	subs	r3, #1
 8007782:	061b      	lsls	r3, r3, #24
 8007784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007788:	4923      	ldr	r1, [pc, #140]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800778e:	4b22      	ldr	r3, [pc, #136]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	4a21      	ldr	r2, [pc, #132]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800779a:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 800779c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800779e:	4b21      	ldr	r3, [pc, #132]	; (8007824 <HAL_RCC_OscConfig+0x778>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80077a6:	00d2      	lsls	r2, r2, #3
 80077a8:	491b      	ldr	r1, [pc, #108]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80077ae:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	f023 020c 	bic.w	r2, r3, #12
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	4917      	ldr	r1, [pc, #92]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80077c0:	4b15      	ldr	r3, [pc, #84]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f023 0202 	bic.w	r2, r3, #2
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	4912      	ldr	r1, [pc, #72]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	4a07      	ldr	r2, [pc, #28]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a04      	ldr	r2, [pc, #16]	; (8007818 <HAL_RCC_OscConfig+0x76c>)
 8007808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800780c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780e:	f7fa fdab 	bl	8002368 <HAL_GetTick>
 8007812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007814:	e011      	b.n	800783a <HAL_RCC_OscConfig+0x78e>
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	58024800 	.word	0x58024800
 8007820:	fffffc0c 	.word	0xfffffc0c
 8007824:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fa fd9e 	bl	8002368 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e05f      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800783a:	4b32      	ldr	r3, [pc, #200]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x77c>
 8007846:	e057      	b.n	80078f8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007848:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2d      	ldr	r2, [pc, #180]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 800784e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7fa fd88 	bl	8002368 <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800785c:	f7fa fd84 	bl	8002368 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e045      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800786e:	4b25      	ldr	r3, [pc, #148]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <HAL_RCC_OscConfig+0x7b0>
 800787a:	e03d      	b.n	80078f8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800787c:	4b21      	ldr	r3, [pc, #132]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007882:	4b20      	ldr	r3, [pc, #128]	; (8007904 <HAL_RCC_OscConfig+0x858>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b01      	cmp	r3, #1
 800788e:	d031      	beq.n	80078f4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f003 0203 	and.w	r2, r3, #3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800789a:	429a      	cmp	r2, r3
 800789c:	d12a      	bne.n	80078f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d122      	bne.n	80078f4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d11a      	bne.n	80078f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	0a5b      	lsrs	r3, r3, #9
 80078c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d111      	bne.n	80078f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80078de:	429a      	cmp	r2, r3
 80078e0:	d108      	bne.n	80078f4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	0e1b      	lsrs	r3, r3, #24
 80078e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3730      	adds	r7, #48	; 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	58024400 	.word	0x58024400

08007908 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e19c      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800791c:	4b8a      	ldr	r3, [pc, #552]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d910      	bls.n	800794c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792a:	4b87      	ldr	r3, [pc, #540]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 020f 	bic.w	r2, r3, #15
 8007932:	4985      	ldr	r1, [pc, #532]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793a:	4b83      	ldr	r3, [pc, #524]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d001      	beq.n	800794c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e184      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d010      	beq.n	800797a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007964:	429a      	cmp	r2, r3
 8007966:	d908      	bls.n	800797a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007968:	4b78      	ldr	r3, [pc, #480]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	4975      	ldr	r1, [pc, #468]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007976:	4313      	orrs	r3, r2
 8007978:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	4b70      	ldr	r3, [pc, #448]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007992:	429a      	cmp	r2, r3
 8007994:	d908      	bls.n	80079a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007996:	4b6d      	ldr	r3, [pc, #436]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	496a      	ldr	r1, [pc, #424]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	4b64      	ldr	r3, [pc, #400]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d908      	bls.n	80079d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079c4:	4b61      	ldr	r3, [pc, #388]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	495e      	ldr	r1, [pc, #376]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d010      	beq.n	8007a04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69da      	ldr	r2, [r3, #28]
 80079e6:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d908      	bls.n	8007a04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079f2:	4b56      	ldr	r3, [pc, #344]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	4953      	ldr	r1, [pc, #332]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	4b4d      	ldr	r3, [pc, #308]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d908      	bls.n	8007a32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a20:	4b4a      	ldr	r3, [pc, #296]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f023 020f 	bic.w	r2, r3, #15
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	4947      	ldr	r1, [pc, #284]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d055      	beq.n	8007aea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007a3e:	4b43      	ldr	r3, [pc, #268]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	4940      	ldr	r1, [pc, #256]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d107      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a58:	4b3c      	ldr	r3, [pc, #240]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d121      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0f6      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d107      	bne.n	8007a80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a70:	4b36      	ldr	r3, [pc, #216]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d115      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0ea      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d107      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a88:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0de      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a98:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0d6      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aa8:	4b28      	ldr	r3, [pc, #160]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f023 0207 	bic.w	r2, r3, #7
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4925      	ldr	r1, [pc, #148]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aba:	f7fa fc55 	bl	8002368 <HAL_GetTick>
 8007abe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac0:	e00a      	b.n	8007ad8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac2:	f7fa fc51 	bl	8002368 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e0be      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad8:	4b1c      	ldr	r3, [pc, #112]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d1eb      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d208      	bcs.n	8007b18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f023 020f 	bic.w	r2, r3, #15
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	490e      	ldr	r1, [pc, #56]	; (8007b4c <HAL_RCC_ClockConfig+0x244>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b18:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d214      	bcs.n	8007b50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 020f 	bic.w	r2, r3, #15
 8007b2e:	4906      	ldr	r1, [pc, #24]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b36:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <HAL_RCC_ClockConfig+0x240>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d005      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e086      	b.n	8007c56 <HAL_RCC_ClockConfig+0x34e>
 8007b48:	52002000 	.word	0x52002000
 8007b4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d010      	beq.n	8007b7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	4b3f      	ldr	r3, [pc, #252]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d208      	bcs.n	8007b7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b6c:	4b3c      	ldr	r3, [pc, #240]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4939      	ldr	r1, [pc, #228]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0308 	and.w	r3, r3, #8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d010      	beq.n	8007bac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	4b34      	ldr	r3, [pc, #208]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d208      	bcs.n	8007bac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b9a:	4b31      	ldr	r3, [pc, #196]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	492e      	ldr	r1, [pc, #184]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d010      	beq.n	8007bda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699a      	ldr	r2, [r3, #24]
 8007bbc:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d208      	bcs.n	8007bda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007bc8:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	4922      	ldr	r1, [pc, #136]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69da      	ldr	r2, [r3, #28]
 8007bea:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d208      	bcs.n	8007c08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	4917      	ldr	r1, [pc, #92]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c08:	f000 f834 	bl	8007c74 <HAL_RCC_GetSysClockFreq>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	4912      	ldr	r1, [pc, #72]	; (8007c64 <HAL_RCC_ClockConfig+0x35c>)
 8007c1a:	5ccb      	ldrb	r3, [r1, r3]
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c26:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <HAL_RCC_ClockConfig+0x358>)
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <HAL_RCC_ClockConfig+0x35c>)
 8007c30:	5cd3      	ldrb	r3, [r2, r3]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3c:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <HAL_RCC_ClockConfig+0x360>)
 8007c3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c40:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <HAL_RCC_ClockConfig+0x364>)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <HAL_RCC_ClockConfig+0x368>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fa fb42 	bl	80022d4 <HAL_InitTick>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	58024400 	.word	0x58024400
 8007c64:	0800dc74 	.word	0x0800dc74
 8007c68:	24000028 	.word	0x24000028
 8007c6c:	24000024 	.word	0x24000024
 8007c70:	2400002c 	.word	0x2400002c

08007c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c7a:	4bb3      	ldr	r3, [pc, #716]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c82:	2b18      	cmp	r3, #24
 8007c84:	f200 8155 	bhi.w	8007f32 <HAL_RCC_GetSysClockFreq+0x2be>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007cf5 	.word	0x08007cf5
 8007c94:	08007f33 	.word	0x08007f33
 8007c98:	08007f33 	.word	0x08007f33
 8007c9c:	08007f33 	.word	0x08007f33
 8007ca0:	08007f33 	.word	0x08007f33
 8007ca4:	08007f33 	.word	0x08007f33
 8007ca8:	08007f33 	.word	0x08007f33
 8007cac:	08007f33 	.word	0x08007f33
 8007cb0:	08007d1b 	.word	0x08007d1b
 8007cb4:	08007f33 	.word	0x08007f33
 8007cb8:	08007f33 	.word	0x08007f33
 8007cbc:	08007f33 	.word	0x08007f33
 8007cc0:	08007f33 	.word	0x08007f33
 8007cc4:	08007f33 	.word	0x08007f33
 8007cc8:	08007f33 	.word	0x08007f33
 8007ccc:	08007f33 	.word	0x08007f33
 8007cd0:	08007d21 	.word	0x08007d21
 8007cd4:	08007f33 	.word	0x08007f33
 8007cd8:	08007f33 	.word	0x08007f33
 8007cdc:	08007f33 	.word	0x08007f33
 8007ce0:	08007f33 	.word	0x08007f33
 8007ce4:	08007f33 	.word	0x08007f33
 8007ce8:	08007f33 	.word	0x08007f33
 8007cec:	08007f33 	.word	0x08007f33
 8007cf0:	08007d27 	.word	0x08007d27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf4:	4b94      	ldr	r3, [pc, #592]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d009      	beq.n	8007d14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d00:	4b91      	ldr	r3, [pc, #580]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	08db      	lsrs	r3, r3, #3
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	4a90      	ldr	r2, [pc, #576]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007d12:	e111      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d14:	4b8d      	ldr	r3, [pc, #564]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d16:	61bb      	str	r3, [r7, #24]
    break;
 8007d18:	e10e      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007d1a:	4b8d      	ldr	r3, [pc, #564]	; (8007f50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d1c:	61bb      	str	r3, [r7, #24]
    break;
 8007d1e:	e10b      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007d20:	4b8c      	ldr	r3, [pc, #560]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007d22:	61bb      	str	r3, [r7, #24]
    break;
 8007d24:	e108      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d26:	4b88      	ldr	r3, [pc, #544]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007d30:	4b85      	ldr	r3, [pc, #532]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d3c:	4b82      	ldr	r3, [pc, #520]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d46:	4b80      	ldr	r3, [pc, #512]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	08db      	lsrs	r3, r3, #3
 8007d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80e1 	beq.w	8007f2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	f000 8083 	beq.w	8007e78 <HAL_RCC_GetSysClockFreq+0x204>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	f200 80a1 	bhi.w	8007ebc <HAL_RCC_GetSysClockFreq+0x248>
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x114>
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d056      	beq.n	8007e34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d86:	e099      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d88:	4b6f      	ldr	r3, [pc, #444]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d02d      	beq.n	8007df0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d94:	4b6c      	ldr	r3, [pc, #432]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	08db      	lsrs	r3, r3, #3
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	4a6b      	ldr	r2, [pc, #428]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007da0:	fa22 f303 	lsr.w	r3, r2, r3
 8007da4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	ee07 3a90 	vmov	s15, r3
 8007dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b62      	ldr	r3, [pc, #392]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dd2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007dee:	e087      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007f5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b51      	ldr	r3, [pc, #324]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	e065      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e46:	4b40      	ldr	r3, [pc, #256]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e76:	e043      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007f64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8a:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eba:	e021      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ee2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007efe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	0a5b      	lsrs	r3, r3, #9
 8007f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f24:	ee17 3a90 	vmov	r3, s15
 8007f28:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007f2a:	e005      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61bb      	str	r3, [r7, #24]
    break;
 8007f30:	e002      	b.n	8007f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f34:	61bb      	str	r3, [r7, #24]
    break;
 8007f36:	bf00      	nop
  }

  return sysclockfreq;
 8007f38:	69bb      	ldr	r3, [r7, #24]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	03d09000 	.word	0x03d09000
 8007f50:	003d0900 	.word	0x003d0900
 8007f54:	017d7840 	.word	0x017d7840
 8007f58:	46000000 	.word	0x46000000
 8007f5c:	4c742400 	.word	0x4c742400
 8007f60:	4a742400 	.word	0x4a742400
 8007f64:	4bbebc20 	.word	0x4bbebc20

08007f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f6e:	f7ff fe81 	bl	8007c74 <HAL_RCC_GetSysClockFreq>
 8007f72:	4602      	mov	r2, r0
 8007f74:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	0a1b      	lsrs	r3, r3, #8
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	490f      	ldr	r1, [pc, #60]	; (8007fbc <HAL_RCC_GetHCLKFreq+0x54>)
 8007f80:	5ccb      	ldrb	r3, [r1, r3]
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <HAL_RCC_GetHCLKFreq+0x54>)
 8007f96:	5cd3      	ldrb	r3, [r2, r3]
 8007f98:	f003 031f 	and.w	r3, r3, #31
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007fa4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fa6:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007fae:	681b      	ldr	r3, [r3, #0]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	0800dc74 	.word	0x0800dc74
 8007fc0:	24000028 	.word	0x24000028
 8007fc4:	24000024 	.word	0x24000024

08007fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007fcc:	f7ff ffcc 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4b06      	ldr	r3, [pc, #24]	; (8007fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fde:	5ccb      	ldrb	r3, [r1, r3]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	58024400 	.word	0x58024400
 8007ff0:	0800dc74 	.word	0x0800dc74

08007ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ff8:	f7ff ffb6 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <HAL_RCC_GetPCLK2Freq+0x28>)
 800800a:	5ccb      	ldrb	r3, [r1, r3]
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	58024400 	.word	0x58024400
 800801c:	0800dc74 	.word	0x0800dc74

08008020 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008028:	2300      	movs	r3, #0
 800802a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800802c:	2300      	movs	r3, #0
 800802e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d03f      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008044:	d02a      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800804a:	d824      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800804c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008050:	d018      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008056:	d81e      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800805c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008060:	d007      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008062:	e018      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008064:	4ba3      	ldr	r3, [pc, #652]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4aa2      	ldr	r2, [pc, #648]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800806a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008070:	e015      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	2102      	movs	r1, #2
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fff9 	bl	800a070 <RCCEx_PLL2_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008082:	e00c      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	2102      	movs	r1, #2
 800808a:	4618      	mov	r0, r3
 800808c:	f002 f8a2 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008094:	e003      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
      break;
 800809a:	e000      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800809c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080a4:	4b93      	ldr	r3, [pc, #588]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b0:	4990      	ldr	r1, [pc, #576]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	650b      	str	r3, [r1, #80]	; 0x50
 80080b6:	e001      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d03d      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d826      	bhi.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80080d0:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080fb 	.word	0x080080fb
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	08008125 	.word	0x08008125
 80080e8:	08008125 	.word	0x08008125
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ec:	4b81      	ldr	r3, [pc, #516]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4a80      	ldr	r2, [pc, #512]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080f8:	e015      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f001 ffb5 	bl	800a070 <RCCEx_PLL2_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800810a:	e00c      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3324      	adds	r3, #36	; 0x24
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f002 f85e 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800811c:	e003      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]
      break;
 8008122:	e000      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800812c:	4b71      	ldr	r3, [pc, #452]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	f023 0207 	bic.w	r2, r3, #7
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008138:	496e      	ldr	r1, [pc, #440]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800813a:	4313      	orrs	r3, r2
 800813c:	650b      	str	r3, [r1, #80]	; 0x50
 800813e:	e001      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800814c:	2b00      	cmp	r3, #0
 800814e:	d042      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008158:	d02b      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800815a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815e:	d825      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008160:	2bc0      	cmp	r3, #192	; 0xc0
 8008162:	d028      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008164:	2bc0      	cmp	r3, #192	; 0xc0
 8008166:	d821      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d016      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800816c:	2b80      	cmp	r3, #128	; 0x80
 800816e:	d81d      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d007      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008178:	e018      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817a:	4b5e      	ldr	r3, [pc, #376]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	4a5d      	ldr	r2, [pc, #372]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008186:	e017      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 ff6e 	bl	800a070 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008198:	e00e      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 f817 	bl	800a1d4 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80081aa:	e005      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
      break;
 80081b0:	e002      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80081b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80081be:	4b4d      	ldr	r3, [pc, #308]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ca:	494a      	ldr	r1, [pc, #296]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	650b      	str	r3, [r1, #80]	; 0x50
 80081d0:	e001      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d049      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ec:	d030      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80081ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081f2:	d82a      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80081f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081f8:	d02c      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80081fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081fe:	d824      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008204:	d018      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800820a:	d81e      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008214:	d007      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008216:	e018      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008218:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4a35      	ldr	r2, [pc, #212]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800821e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008224:	e017      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3304      	adds	r3, #4
 800822a:	2100      	movs	r1, #0
 800822c:	4618      	mov	r0, r3
 800822e:	f001 ff1f 	bl	800a070 <RCCEx_PLL2_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008236:	e00e      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3324      	adds	r3, #36	; 0x24
 800823c:	2100      	movs	r1, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f001 ffc8 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008248:	e005      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]
      break;
 800824e:	e002      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008250:	bf00      	nop
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800826a:	4922      	ldr	r1, [pc, #136]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800826c:	4313      	orrs	r3, r2
 800826e:	658b      	str	r3, [r1, #88]	; 0x58
 8008270:	e001      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800827e:	2b00      	cmp	r3, #0
 8008280:	d04b      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800828c:	d030      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800828e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008292:	d82a      	bhi.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008298:	d02e      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800829a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800829e:	d824      	bhi.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80082a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082a4:	d018      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80082a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082aa:	d81e      	bhi.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80082b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082b4:	d007      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80082b6:	e018      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b8:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80082be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082c4:	e019      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3304      	adds	r3, #4
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 fecf 	bl	800a070 <RCCEx_PLL2_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80082d6:	e010      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3324      	adds	r3, #36	; 0x24
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 ff78 	bl	800a1d4 <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082e8:	e007      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	75fb      	strb	r3, [r7, #23]
      break;
 80082ee:	e004      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80082f0:	bf00      	nop
 80082f2:	e002      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80082f4:	58024400 	.word	0x58024400
      break;
 80082f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008300:	4b99      	ldr	r3, [pc, #612]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008304:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800830e:	4996      	ldr	r1, [pc, #600]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008310:	4313      	orrs	r3, r2
 8008312:	658b      	str	r3, [r1, #88]	; 0x58
 8008314:	e001      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d032      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832a:	2b30      	cmp	r3, #48	; 0x30
 800832c:	d01c      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800832e:	2b30      	cmp	r3, #48	; 0x30
 8008330:	d817      	bhi.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008332:	2b20      	cmp	r3, #32
 8008334:	d00c      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008336:	2b20      	cmp	r3, #32
 8008338:	d813      	bhi.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d016      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800833e:	2b10      	cmp	r3, #16
 8008340:	d10f      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008342:	4b89      	ldr	r3, [pc, #548]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	4a88      	ldr	r2, [pc, #544]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800834c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800834e:	e00e      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	2102      	movs	r1, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fe8a 	bl	800a070 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008360:	e005      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
      break;
 8008366:	e002      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008368:	bf00      	nop
 800836a:	e000      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800836c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008374:	4b7c      	ldr	r3, [pc, #496]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008378:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008380:	4979      	ldr	r1, [pc, #484]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008382:	4313      	orrs	r3, r2
 8008384:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008386:	e001      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d047      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a0:	d030      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80083a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a6:	d82a      	bhi.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80083a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083ac:	d02c      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80083ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083b2:	d824      	bhi.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80083b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b8:	d018      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80083ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083be:	d81e      	bhi.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80083c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c8:	d007      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80083ca:	e018      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083cc:	4b66      	ldr	r3, [pc, #408]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	4a65      	ldr	r2, [pc, #404]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083d8:	e017      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3304      	adds	r3, #4
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fe45 	bl	800a070 <RCCEx_PLL2_Config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083ea:	e00e      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3324      	adds	r3, #36	; 0x24
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 feee 	bl	800a1d4 <RCCEx_PLL3_Config>
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083fc:	e005      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
      break;
 8008402:	e002      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008404:	bf00      	nop
 8008406:	e000      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008410:	4b55      	ldr	r3, [pc, #340]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841c:	4952      	ldr	r1, [pc, #328]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800841e:	4313      	orrs	r3, r2
 8008420:	650b      	str	r3, [r1, #80]	; 0x50
 8008422:	e001      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d049      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800843c:	d02e      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800843e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008442:	d828      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008448:	d02a      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800844a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800844e:	d822      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008454:	d026      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800845a:	d81c      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800845c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008460:	d010      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008466:	d816      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01d      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008470:	d111      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3304      	adds	r3, #4
 8008476:	2101      	movs	r1, #1
 8008478:	4618      	mov	r0, r3
 800847a:	f001 fdf9 	bl	800a070 <RCCEx_PLL2_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008482:	e012      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	2101      	movs	r1, #1
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fea2 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008494:	e009      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	75fb      	strb	r3, [r7, #23]
      break;
 800849a:	e006      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800849c:	bf00      	nop
 800849e:	e004      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80084a0:	bf00      	nop
 80084a2:	e002      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80084a4:	bf00      	nop
 80084a6:	e000      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80084a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084b0:	4b2d      	ldr	r3, [pc, #180]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80084b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084bc:	492a      	ldr	r1, [pc, #168]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	650b      	str	r3, [r1, #80]	; 0x50
 80084c2:	e001      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d04d      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084de:	d02e      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80084e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084e4:	d828      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ea:	d02a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d822      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80084f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084f6:	d026      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80084f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084fc:	d81c      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80084fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008502:	d010      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008508:	d816      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01d      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800850e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008512:	d111      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	2101      	movs	r1, #1
 800851a:	4618      	mov	r0, r3
 800851c:	f001 fda8 	bl	800a070 <RCCEx_PLL2_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008524:	e012      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3324      	adds	r3, #36	; 0x24
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fe51 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008536:	e009      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      break;
 800853c:	e006      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800853e:	bf00      	nop
 8008540:	e004      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008542:	bf00      	nop
 8008544:	e002      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008546:	bf00      	nop
 8008548:	e000      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800854a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10c      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008556:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008560:	4901      	ldr	r1, [pc, #4]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008562:	4313      	orrs	r3, r2
 8008564:	658b      	str	r3, [r1, #88]	; 0x58
 8008566:	e003      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02f      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008584:	d00e      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858a:	d814      	bhi.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d015      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008594:	d10f      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008596:	4baf      	ldr	r3, [pc, #700]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	4aae      	ldr	r2, [pc, #696]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800859c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80085a2:	e00c      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3304      	adds	r3, #4
 80085a8:	2101      	movs	r1, #1
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fd60 	bl	800a070 <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80085b4:	e003      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80085bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085c4:	4ba3      	ldr	r3, [pc, #652]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d0:	49a0      	ldr	r1, [pc, #640]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	650b      	str	r3, [r1, #80]	; 0x50
 80085d6:	e001      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d032      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d81b      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800862f 	.word	0x0800862f
 80085fc:	08008609 	.word	0x08008609
 8008600:	08008617 	.word	0x08008617
 8008604:	0800862f 	.word	0x0800862f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008608:	4b92      	ldr	r3, [pc, #584]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	4a91      	ldr	r2, [pc, #580]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800860e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008614:	e00c      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3304      	adds	r3, #4
 800861a:	2102      	movs	r1, #2
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fd27 	bl	800a070 <RCCEx_PLL2_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008626:	e003      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	e000      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800862e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008636:	4b87      	ldr	r3, [pc, #540]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863a:	f023 0203 	bic.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	4984      	ldr	r1, [pc, #528]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008644:	4313      	orrs	r3, r2
 8008646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008648:	e001      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8086 	beq.w	8008768 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800865c:	4b7e      	ldr	r3, [pc, #504]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a7d      	ldr	r2, [pc, #500]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008668:	f7f9 fe7e 	bl	8002368 <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800866e:	e009      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008670:	f7f9 fe7a 	bl	8002368 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b64      	cmp	r3, #100	; 0x64
 800867c:	d902      	bls.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	75fb      	strb	r3, [r7, #23]
        break;
 8008682:	e005      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008684:	4b74      	ldr	r3, [pc, #464]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0ef      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d166      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008696:	4b6f      	ldr	r3, [pc, #444]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008698:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086a0:	4053      	eors	r3, r2
 80086a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d013      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086aa:	4b6a      	ldr	r3, [pc, #424]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086b4:	4b67      	ldr	r3, [pc, #412]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	4a66      	ldr	r2, [pc, #408]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086c0:	4b64      	ldr	r3, [pc, #400]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c4:	4a63      	ldr	r2, [pc, #396]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086cc:	4a61      	ldr	r2, [pc, #388]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086dc:	d115      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086de:	f7f9 fe43 	bl	8002368 <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086e4:	e00b      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e6:	f7f9 fe3f 	bl	8002368 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d902      	bls.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	75fb      	strb	r3, [r7, #23]
            break;
 80086fc:	e005      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086fe:	4b55      	ldr	r3, [pc, #340]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0ed      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d126      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800871a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800871e:	d10d      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008720:	4b4c      	ldr	r3, [pc, #304]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800872e:	0919      	lsrs	r1, r3, #4
 8008730:	4b4a      	ldr	r3, [pc, #296]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008732:	400b      	ands	r3, r1
 8008734:	4947      	ldr	r1, [pc, #284]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008736:	4313      	orrs	r3, r2
 8008738:	610b      	str	r3, [r1, #16]
 800873a:	e005      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800873c:	4b45      	ldr	r3, [pc, #276]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	4a44      	ldr	r2, [pc, #272]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008746:	6113      	str	r3, [r2, #16]
 8008748:	4b42      	ldr	r3, [pc, #264]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800874a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008756:	493f      	ldr	r1, [pc, #252]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008758:	4313      	orrs	r3, r2
 800875a:	670b      	str	r3, [r1, #112]	; 0x70
 800875c:	e004      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	75bb      	strb	r3, [r7, #22]
 8008762:	e001      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8085 	beq.w	8008880 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800877a:	2b28      	cmp	r3, #40	; 0x28
 800877c:	d866      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	08008861 	.word	0x08008861
 8008788:	0800884d 	.word	0x0800884d
 800878c:	0800884d 	.word	0x0800884d
 8008790:	0800884d 	.word	0x0800884d
 8008794:	0800884d 	.word	0x0800884d
 8008798:	0800884d 	.word	0x0800884d
 800879c:	0800884d 	.word	0x0800884d
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	08008829 	.word	0x08008829
 80087a8:	0800884d 	.word	0x0800884d
 80087ac:	0800884d 	.word	0x0800884d
 80087b0:	0800884d 	.word	0x0800884d
 80087b4:	0800884d 	.word	0x0800884d
 80087b8:	0800884d 	.word	0x0800884d
 80087bc:	0800884d 	.word	0x0800884d
 80087c0:	0800884d 	.word	0x0800884d
 80087c4:	0800883b 	.word	0x0800883b
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	0800884d 	.word	0x0800884d
 80087d0:	0800884d 	.word	0x0800884d
 80087d4:	0800884d 	.word	0x0800884d
 80087d8:	0800884d 	.word	0x0800884d
 80087dc:	0800884d 	.word	0x0800884d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	08008861 	.word	0x08008861
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	0800884d 	.word	0x0800884d
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	08008861 	.word	0x08008861
 8008808:	0800884d 	.word	0x0800884d
 800880c:	0800884d 	.word	0x0800884d
 8008810:	0800884d 	.word	0x0800884d
 8008814:	0800884d 	.word	0x0800884d
 8008818:	0800884d 	.word	0x0800884d
 800881c:	0800884d 	.word	0x0800884d
 8008820:	0800884d 	.word	0x0800884d
 8008824:	08008861 	.word	0x08008861
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3304      	adds	r3, #4
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fc1e 	bl	800a070 <RCCEx_PLL2_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008838:	e013      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3324      	adds	r3, #36	; 0x24
 800883e:	2101      	movs	r1, #1
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fcc7 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800884a:	e00a      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
      break;
 8008850:	e007      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	58024800 	.word	0x58024800
 800885c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008868:	4b96      	ldr	r3, [pc, #600]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800886a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008874:	4993      	ldr	r1, [pc, #588]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008876:	4313      	orrs	r3, r2
 8008878:	654b      	str	r3, [r1, #84]	; 0x54
 800887a:	e001      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d038      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008890:	2b05      	cmp	r3, #5
 8008892:	d821      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008894:	a201      	add	r2, pc, #4	; (adr r2, 800889c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088df 	.word	0x080088df
 80088a0:	080088b5 	.word	0x080088b5
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088df 	.word	0x080088df
 80088ac:	080088df 	.word	0x080088df
 80088b0:	080088df 	.word	0x080088df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fbd8 	bl	800a070 <RCCEx_PLL2_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80088c4:	e00c      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	2101      	movs	r1, #1
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fc81 	bl	800a1d4 <RCCEx_PLL3_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80088d6:	e003      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	e000      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80088de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80088e6:	4b77      	ldr	r3, [pc, #476]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80088e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ea:	f023 0207 	bic.w	r2, r3, #7
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f2:	4974      	ldr	r1, [pc, #464]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	654b      	str	r3, [r1, #84]	; 0x54
 80088f8:	e001      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	d03a      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008910:	2b05      	cmp	r3, #5
 8008912:	d821      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800895f 	.word	0x0800895f
 8008920:	08008935 	.word	0x08008935
 8008924:	08008947 	.word	0x08008947
 8008928:	0800895f 	.word	0x0800895f
 800892c:	0800895f 	.word	0x0800895f
 8008930:	0800895f 	.word	0x0800895f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3304      	adds	r3, #4
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fb98 	bl	800a070 <RCCEx_PLL2_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008944:	e00c      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3324      	adds	r3, #36	; 0x24
 800894a:	2101      	movs	r1, #1
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fc41 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008956:	e003      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	75fb      	strb	r3, [r7, #23]
      break;
 800895c:	e000      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800895e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008966:	4b57      	ldr	r3, [pc, #348]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896a:	f023 0207 	bic.w	r2, r3, #7
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008974:	4953      	ldr	r1, [pc, #332]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008976:	4313      	orrs	r3, r2
 8008978:	658b      	str	r3, [r1, #88]	; 0x58
 800897a:	e001      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d04b      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008996:	d02e      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800899c:	d828      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d02a      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a8:	d822      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80089aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089ae:	d026      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80089b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089b4:	d81c      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80089b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ba:	d010      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80089bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c0:	d816      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01d      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80089c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ca:	d111      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 fb4c 	bl	800a070 <RCCEx_PLL2_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80089dc:	e012      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3324      	adds	r3, #36	; 0x24
 80089e2:	2102      	movs	r1, #2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f001 fbf5 	bl	800a1d4 <RCCEx_PLL3_Config>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80089ee:	e009      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
      break;
 80089f4:	e006      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80089f6:	bf00      	nop
 80089f8:	e004      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a0a:	4b2e      	ldr	r3, [pc, #184]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a18:	492a      	ldr	r1, [pc, #168]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	654b      	str	r3, [r1, #84]	; 0x54
 8008a1e:	e001      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d04d      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a3a:	d02e      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008a3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a40:	d828      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d02a      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4c:	d822      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a52:	d026      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a58:	d81c      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a5e:	d010      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a64:	d816      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01d      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6e:	d111      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	2100      	movs	r1, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 fafa 	bl	800a070 <RCCEx_PLL2_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a80:	e012      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3324      	adds	r3, #36	; 0x24
 8008a86:	2102      	movs	r1, #2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fba3 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a92:	e009      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	75fb      	strb	r3, [r7, #23]
      break;
 8008a98:	e006      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008a9a:	bf00      	nop
 8008a9c:	e004      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008a9e:	bf00      	nop
 8008aa0:	e002      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008abc:	4901      	ldr	r1, [pc, #4]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ac2:	e003      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d04b      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ade:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ae2:	d02e      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008ae4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ae8:	d828      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aee:	d02a      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af4:	d822      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008af6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008afa:	d026      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008afc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b00:	d81c      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b06:	d010      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b0c:	d816      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01d      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b16:	d111      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 faa6 	bl	800a070 <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b28:	e012      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3324      	adds	r3, #36	; 0x24
 8008b2e:	2102      	movs	r1, #2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 fb4f 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b3a:	e009      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b40:	e006      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008b42:	bf00      	nop
 8008b44:	e004      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b56:	4b9d      	ldr	r3, [pc, #628]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b64:	4999      	ldr	r1, [pc, #612]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	658b      	str	r3, [r1, #88]	; 0x58
 8008b6a:	e001      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b86:	d10a      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3324      	adds	r3, #36	; 0x24
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fb20 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b9e:	4b8b      	ldr	r3, [pc, #556]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bac:	4987      	ldr	r1, [pc, #540]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0310 	and.w	r3, r3, #16
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01a      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	d10a      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3324      	adds	r3, #36	; 0x24
 8008bce:	2102      	movs	r1, #2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 faff 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008be0:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bee:	4977      	ldr	r1, [pc, #476]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d034      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c0a:	d01d      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c10:	d817      	bhi.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1a:	d009      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008c1c:	e011      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 fa23 	bl	800a070 <RCCEx_PLL2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c2e:	e00c      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3324      	adds	r3, #36	; 0x24
 8008c34:	2102      	movs	r1, #2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 facc 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c40:	e003      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
      break;
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c50:	4b5e      	ldr	r3, [pc, #376]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c5e:	495b      	ldr	r1, [pc, #364]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	658b      	str	r3, [r1, #88]	; 0x58
 8008c64:	e001      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d033      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c80:	d01c      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c86:	d816      	bhi.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c8c:	d003      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c92:	d007      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008c94:	e00f      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c96:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	4a4c      	ldr	r2, [pc, #304]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ca2:	e00c      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3324      	adds	r3, #36	; 0x24
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 fa92 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008cb4:	e003      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cba:	e000      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cc4:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd2:	493e      	ldr	r1, [pc, #248]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	654b      	str	r3, [r1, #84]	; 0x54
 8008cd8:	e001      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d029      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf6:	d007      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008cf8:	e00f      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfa:	4b34      	ldr	r3, [pc, #208]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a33      	ldr	r2, [pc, #204]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d06:	e00b      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f9ae 	bl	800a070 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d26:	4b29      	ldr	r3, [pc, #164]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d32:	4926      	ldr	r1, [pc, #152]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d38:	e001      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3324      	adds	r3, #36	; 0x24
 8008d4e:	2102      	movs	r1, #2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fa3f 	bl	800a1d4 <RCCEx_PLL3_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d033      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d74:	d017      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7a:	d811      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d80:	d013      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d86:	d80b      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d010      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d106      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d92:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	4a0d      	ldr	r2, [pc, #52]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008d9e:	e007      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
      break;
 8008da4:	e004      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008da6:	bf00      	nop
 8008da8:	e002      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008daa:	bf00      	nop
 8008dac:	e000      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10c      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dc2:	4902      	ldr	r1, [pc, #8]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	654b      	str	r3, [r1, #84]	; 0x54
 8008dc8:	e004      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dec:	492e      	ldr	r1, [pc, #184]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008dfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e0c:	4926      	ldr	r1, [pc, #152]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d008      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e1e:	4b22      	ldr	r3, [pc, #136]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e2a:	491f      	ldr	r1, [pc, #124]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	4a19      	ldr	r2, [pc, #100]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e46:	6113      	str	r3, [r2, #16]
 8008e48:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008e52:	4915      	ldr	r1, [pc, #84]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da08      	bge.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e60:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	490e      	ldr	r1, [pc, #56]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e8c:	4906      	ldr	r1, [pc, #24]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008e92:	7dbb      	ldrb	r3, [r7, #22]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e000      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	58024400 	.word	0x58024400

08008eac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b090      	sub	sp, #64	; 0x40
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eba:	f040 8095 	bne.w	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008ebe:	4b97      	ldr	r3, [pc, #604]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	f200 8088 	bhi.w	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008eed 	.word	0x08008eed
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f3d 	.word	0x08008f3d
 8008ee4:	08008fd9 	.word	0x08008fd9
 8008ee8:	08008f65 	.word	0x08008f65
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eec:	4b8b      	ldr	r3, [pc, #556]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef8:	d108      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 ff64 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f08:	f000 bc94 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f10:	f000 bc90 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f14:	4b81      	ldr	r3, [pc, #516]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f20:	d108      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f22:	f107 0318 	add.w	r3, r7, #24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fca8 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f30:	f000 bc80 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f38:	f000 bc7c 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f3c:	4b77      	ldr	r3, [pc, #476]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f48:	d108      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4a:	f107 030c 	add.w	r3, r7, #12
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fde8 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f58:	f000 bc6c 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f60:	f000 bc68 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f64:	4b6d      	ldr	r3, [pc, #436]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f6e:	4b6b      	ldr	r3, [pc, #428]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d10c      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f80:	4b66      	ldr	r3, [pc, #408]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a65      	ldr	r2, [pc, #404]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f92:	e01f      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f94:	4b61      	ldr	r3, [pc, #388]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008faa:	4b5e      	ldr	r3, [pc, #376]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fae:	e011      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fb0:	4b5a      	ldr	r3, [pc, #360]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fbc:	d106      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc4:	d102      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fc6:	4b58      	ldr	r3, [pc, #352]	; (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fca:	e003      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fd0:	f000 bc30 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008fd4:	f000 bc2e 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fd8:	4b54      	ldr	r3, [pc, #336]	; (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fdc:	f000 bc2a 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe4:	f000 bc26 	b.w	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fee:	f040 809f 	bne.w	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008ff2:	4b4a      	ldr	r3, [pc, #296]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ffa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009002:	d04d      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900a:	f200 8084 	bhi.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	2bc0      	cmp	r3, #192	; 0xc0
 8009012:	d07d      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	2bc0      	cmp	r3, #192	; 0xc0
 8009018:	d87d      	bhi.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2b80      	cmp	r3, #128	; 0x80
 800901e:	d02d      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2b80      	cmp	r3, #128	; 0x80
 8009024:	d877      	bhi.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	2b40      	cmp	r3, #64	; 0x40
 8009030:	d012      	beq.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009032:	e070      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009034:	4b39      	ldr	r3, [pc, #228]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800903c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009040:	d107      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fec0 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009050:	e3f0      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009056:	e3ed      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009058:	4b30      	ldr	r3, [pc, #192]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009064:	d107      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009066:	f107 0318 	add.w	r3, r7, #24
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fc06 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009074:	e3de      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907a:	e3db      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800907c:	4b27      	ldr	r3, [pc, #156]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009088:	d107      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800908a:	f107 030c 	add.w	r3, r7, #12
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fd48 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009098:	e3cc      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909e:	e3c9      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090a0:	4b1e      	ldr	r3, [pc, #120]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090aa:	4b1c      	ldr	r3, [pc, #112]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d10c      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80090b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090bc:	4b17      	ldr	r3, [pc, #92]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a16      	ldr	r2, [pc, #88]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ce:	e01e      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090dc:	d106      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e4:	d102      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ea:	e010      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ec:	4b0b      	ldr	r3, [pc, #44]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f8:	d106      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009100:	d102      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009106:	e002      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800910c:	e392      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800910e:	e391      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009114:	e38e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800911a:	e38b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800911c:	58024400 	.word	0x58024400
 8009120:	03d09000 	.word	0x03d09000
 8009124:	003d0900 	.word	0x003d0900
 8009128:	017d7840 	.word	0x017d7840
 800912c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009136:	f040 809c 	bne.w	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800913a:	4b9d      	ldr	r3, [pc, #628]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800913c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009142:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800914a:	d054      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009152:	f200 808b 	bhi.w	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800915c:	f000 8083 	beq.w	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009166:	f200 8081 	bhi.w	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009170:	d02f      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009178:	d878      	bhi.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009186:	d012      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009188:	e070      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800918a:	4b89      	ldr	r3, [pc, #548]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009196:	d107      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fe15 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a6:	e345      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ac:	e342      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ae:	4b80      	ldr	r3, [pc, #512]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091bc:	f107 0318 	add.w	r3, r7, #24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fb5b 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ca:	e333      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d0:	e330      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091d2:	4b77      	ldr	r3, [pc, #476]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e0:	f107 030c 	add.w	r3, r7, #12
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fc9d 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ee:	e321      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f4:	e31e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091f6:	4b6e      	ldr	r3, [pc, #440]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091fe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009200:	4b6b      	ldr	r3, [pc, #428]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b04      	cmp	r3, #4
 800920a:	d10c      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009212:	4b67      	ldr	r3, [pc, #412]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	08db      	lsrs	r3, r3, #3
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	4a65      	ldr	r2, [pc, #404]	; (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800921e:	fa22 f303 	lsr.w	r3, r2, r3
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009224:	e01e      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009226:	4b62      	ldr	r3, [pc, #392]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d106      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800923a:	d102      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800923c:	4b5e      	ldr	r3, [pc, #376]	; (80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009240:	e010      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009242:	4b5b      	ldr	r3, [pc, #364]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800924e:	d106      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009256:	d102      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009258:	4b58      	ldr	r3, [pc, #352]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925c:	e002      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009262:	e2e7      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009264:	e2e6      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009266:	4b56      	ldr	r3, [pc, #344]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800926a:	e2e3      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009270:	e2e0      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009278:	f040 80a7 	bne.w	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800927c:	4b4c      	ldr	r3, [pc, #304]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009284:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800928c:	d055      	beq.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009294:	f200 8096 	bhi.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800929e:	f000 8084 	beq.w	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092a8:	f200 808c 	bhi.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b2:	d030      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ba:	f200 8083 	bhi.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092ca:	d012      	beq.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80092cc:	e07a      	b.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092ce:	4b38      	ldr	r3, [pc, #224]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092da:	d107      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fd73 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092ea:	e2a3      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f0:	e2a0      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092f2:	4b2f      	ldr	r3, [pc, #188]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092fe:	d107      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009300:	f107 0318 	add.w	r3, r7, #24
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fab9 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800930e:	e291      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009314:	e28e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009316:	4b26      	ldr	r3, [pc, #152]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800931e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009322:	d107      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009324:	f107 030c 	add.w	r3, r7, #12
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fbfb 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009332:	e27f      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009338:	e27c      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800933a:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800933c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009342:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b04      	cmp	r3, #4
 800934e:	d10c      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009356:	4b16      	ldr	r3, [pc, #88]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	08db      	lsrs	r3, r3, #3
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	4a14      	ldr	r2, [pc, #80]	; (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009362:	fa22 f303 	lsr.w	r3, r2, r3
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009368:	e01e      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009376:	d106      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800937e:	d102      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009384:	e010      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009386:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009392:	d106      	bne.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939a:	d102      	bne.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800939c:	4b07      	ldr	r3, [pc, #28]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a0:	e002      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093a6:	e245      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80093a8:	e244      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ae:	e241      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80093b0:	58024400 	.word	0x58024400
 80093b4:	03d09000 	.word	0x03d09000
 80093b8:	003d0900 	.word	0x003d0900
 80093bc:	017d7840 	.word	0x017d7840
 80093c0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c8:	e234      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	f040 809c 	bne.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80093d4:	4b9b      	ldr	r3, [pc, #620]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093e4:	d054      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ec:	f200 808b 	bhi.w	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093f6:	f000 8083 	beq.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009400:	f200 8081 	bhi.w	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940a:	d02f      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009412:	d878      	bhi.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009420:	d012      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009422:	e070      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009424:	4b87      	ldr	r3, [pc, #540]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009430:	d107      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fcc8 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009440:	e1f8      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009446:	e1f5      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009448:	4b7e      	ldr	r3, [pc, #504]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009454:	d107      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009456:	f107 0318 	add.w	r3, r7, #24
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fa0e 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009464:	e1e6      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946a:	e1e3      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800946c:	4b75      	ldr	r3, [pc, #468]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fb50 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009488:	e1d4      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e1d1      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009490:	4b6c      	ldr	r3, [pc, #432]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009498:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800949a:	4b6a      	ldr	r3, [pc, #424]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d10c      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094ac:	4b65      	ldr	r3, [pc, #404]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	08db      	lsrs	r3, r3, #3
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	4a64      	ldr	r2, [pc, #400]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094be:	e01e      	b.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094c0:	4b60      	ldr	r3, [pc, #384]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094cc:	d106      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094d4:	d102      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094d6:	4b5d      	ldr	r3, [pc, #372]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094da:	e010      	b.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094dc:	4b59      	ldr	r3, [pc, #356]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e8:	d106      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f0:	d102      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094f2:	4b57      	ldr	r3, [pc, #348]	; (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f6:	e002      	b.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094fc:	e19a      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80094fe:	e199      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009500:	4b54      	ldr	r3, [pc, #336]	; (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009504:	e196      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950a:	e193      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009512:	d173      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009514:	4b4b      	ldr	r3, [pc, #300]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800951c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009524:	d02f      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800952c:	d863      	bhi.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800953a:	d012      	beq.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800953c:	e05b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800953e:	4b41      	ldr	r3, [pc, #260]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800954a:	d107      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954c:	f107 0318 	add.w	r3, r7, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f000 f993 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800955a:	e16b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009560:	e168      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009562:	4b38      	ldr	r3, [pc, #224]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800956a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956e:	d107      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009570:	f107 030c 	add.w	r3, r7, #12
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fad5 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800957e:	e159      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009584:	e156      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009586:	4b2f      	ldr	r3, [pc, #188]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800958e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009590:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b04      	cmp	r3, #4
 800959a:	d10c      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095a2:	4b28      	ldr	r3, [pc, #160]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	08db      	lsrs	r3, r3, #3
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	4a26      	ldr	r2, [pc, #152]	; (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80095ae:	fa22 f303 	lsr.w	r3, r2, r3
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095b4:	e01e      	b.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095b6:	4b23      	ldr	r3, [pc, #140]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c2:	d106      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80095c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ca:	d102      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095cc:	4b1f      	ldr	r3, [pc, #124]	; (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d0:	e010      	b.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095d2:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095de:	d106      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80095e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095e6:	d102      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80095e8:	4b19      	ldr	r3, [pc, #100]	; (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ec:	e002      	b.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80095f2:	e11f      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80095f4:	e11e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095fa:	e11b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009602:	d13e      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	2b00      	cmp	r3, #0
 8009612:	d004      	beq.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961a:	d01d      	beq.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800961c:	e02e      	b.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800962a:	d107      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800962c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fbcb 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800963a:	e0fb      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009640:	e0f8      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009642:	bf00      	nop
 8009644:	58024400 	.word	0x58024400
 8009648:	03d09000 	.word	0x03d09000
 800964c:	003d0900 	.word	0x003d0900
 8009650:	017d7840 	.word	0x017d7840
 8009654:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009658:	4b79      	ldr	r3, [pc, #484]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009664:	d107      	bne.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009666:	f107 0318 	add.w	r3, r7, #24
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f906 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009674:	e0de      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967a:	e0db      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009680:	e0d8      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009688:	f040 8085 	bne.w	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800968c:	4b6c      	ldr	r3, [pc, #432]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800968e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009690:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009694:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800969c:	d06b      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a4:	d874      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ac:	d056      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b4:	d86c      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096bc:	d03b      	beq.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096c4:	d864      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096cc:	d021      	beq.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d4:	d85c      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096e2:	d004      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80096e4:	e054      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096e6:	f000 f8b3 	bl	8009850 <HAL_RCCEx_GetD3PCLK1Freq>
 80096ea:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80096ec:	e0a2      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096ee:	4b54      	ldr	r3, [pc, #336]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096fa:	d107      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fc:	f107 0318 	add.w	r3, r7, #24
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f8bb 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800970a:	e093      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009710:	e090      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009712:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800971a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971e:	d107      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009720:	f107 030c 	add.w	r3, r7, #12
 8009724:	4618      	mov	r0, r3
 8009726:	f000 f9fd 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800972e:	e081      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009734:	e07e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009736:	4b42      	ldr	r3, [pc, #264]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b04      	cmp	r3, #4
 8009740:	d109      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009742:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	08db      	lsrs	r3, r3, #3
 8009748:	f003 0303 	and.w	r3, r3, #3
 800974c:	4a3d      	ldr	r2, [pc, #244]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800974e:	fa22 f303 	lsr.w	r3, r2, r3
 8009752:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009754:	e06e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800975a:	e06b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800975c:	4b38      	ldr	r3, [pc, #224]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009768:	d102      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800976a:	4b37      	ldr	r3, [pc, #220]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800976e:	e061      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009774:	e05e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009776:	4b32      	ldr	r3, [pc, #200]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009782:	d102      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009784:	4b31      	ldr	r3, [pc, #196]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009788:	e054      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800978e:	e051      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009794:	e04e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800979c:	d148      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800979e:	4b28      	ldr	r3, [pc, #160]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ae:	d02a      	beq.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b6:	d838      	bhi.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097c4:	d00d      	beq.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80097c6:	e030      	b.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097c8:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097d4:	d102      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80097d6:	4b1d      	ldr	r3, [pc, #116]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097da:	e02b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097e0:	e028      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097e2:	4b17      	ldr	r3, [pc, #92]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097ee:	d107      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fae9 	bl	8009dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097fe:	e019      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009804:	e016      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800980e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009812:	d107      	bne.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009814:	f107 0318 	add.w	r3, r7, #24
 8009818:	4618      	mov	r0, r3
 800981a:	f000 f82f 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009822:	e007      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009828:	e004      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800982e:	e001      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009836:	4618      	mov	r0, r3
 8009838:	3740      	adds	r7, #64	; 0x40
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
 8009844:	03d09000 	.word	0x03d09000
 8009848:	003d0900 	.word	0x003d0900
 800984c:	017d7840 	.word	0x017d7840

08009850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009854:	f7fe fb88 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 8009858:	4602      	mov	r2, r0
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	091b      	lsrs	r3, r3, #4
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	4904      	ldr	r1, [pc, #16]	; (8009878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009866:	5ccb      	ldrb	r3, [r1, r3]
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009870:	4618      	mov	r0, r3
 8009872:	bd80      	pop	{r7, pc}
 8009874:	58024400 	.word	0x58024400
 8009878:	0800dc74 	.word	0x0800dc74

0800987c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800987c:	b480      	push	{r7}
 800987e:	b089      	sub	sp, #36	; 0x24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009884:	4ba1      	ldr	r3, [pc, #644]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800988e:	4b9f      	ldr	r3, [pc, #636]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	0b1b      	lsrs	r3, r3, #12
 8009894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800989a:	4b9c      	ldr	r3, [pc, #624]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098a6:	4b99      	ldr	r3, [pc, #612]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8111 	beq.w	8009aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	f000 8083 	beq.w	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f200 80a1 	bhi.w	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d056      	beq.n	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098e6:	e099      	b.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b88      	ldr	r3, [pc, #544]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02d      	beq.n	8009950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f4:	4b85      	ldr	r3, [pc, #532]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a84      	ldr	r2, [pc, #528]	; (8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b7b      	ldr	r3, [pc, #492]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800994e:	e087      	b.n	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b6a      	ldr	r3, [pc, #424]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009992:	e065      	b.n	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b59      	ldr	r3, [pc, #356]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d6:	e043      	b.n	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b48      	ldr	r3, [pc, #288]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a1a:	e021      	b.n	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2e:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a86:	ee17 2a90 	vmov	r2, s15
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab4:	ee17 2a90 	vmov	r2, s15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac0:	0e1b      	lsrs	r3, r3, #24
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae2:	ee17 2a90 	vmov	r2, s15
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aea:	e008      	b.n	8009afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	609a      	str	r2, [r3, #8]
}
 8009afe:	bf00      	nop
 8009b00:	3724      	adds	r7, #36	; 0x24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	03d09000 	.word	0x03d09000
 8009b14:	46000000 	.word	0x46000000
 8009b18:	4c742400 	.word	0x4c742400
 8009b1c:	4a742400 	.word	0x4a742400
 8009b20:	4bbebc20 	.word	0x4bbebc20

08009b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b089      	sub	sp, #36	; 0x24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b2c:	4ba1      	ldr	r3, [pc, #644]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b36:	4b9f      	ldr	r3, [pc, #636]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	0d1b      	lsrs	r3, r3, #20
 8009b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b42:	4b9c      	ldr	r3, [pc, #624]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b4e:	4b99      	ldr	r3, [pc, #612]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	08db      	lsrs	r3, r3, #3
 8009b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8111 	beq.w	8009d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	f000 8083 	beq.w	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	f200 80a1 	bhi.w	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d056      	beq.n	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b8e:	e099      	b.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b90:	4b88      	ldr	r3, [pc, #544]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d02d      	beq.n	8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b9c:	4b85      	ldr	r3, [pc, #532]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	08db      	lsrs	r3, r3, #3
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	4a84      	ldr	r2, [pc, #528]	; (8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	ee07 3a90 	vmov	s15, r3
 8009bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc6:	4b7b      	ldr	r3, [pc, #492]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bf6:	e087      	b.n	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0a:	4b6a      	ldr	r3, [pc, #424]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c3a:	e065      	b.n	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b59      	ldr	r3, [pc, #356]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c7e:	e043      	b.n	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c92:	4b48      	ldr	r3, [pc, #288]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cc2:	e021      	b.n	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd6:	4b37      	ldr	r3, [pc, #220]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d08:	4b2a      	ldr	r3, [pc, #168]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	0a5b      	lsrs	r3, r3, #9
 8009d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d2e:	ee17 2a90 	vmov	r2, s15
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d36:	4b1f      	ldr	r3, [pc, #124]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	0c1b      	lsrs	r3, r3, #16
 8009d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d40:	ee07 3a90 	vmov	s15, r3
 8009d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d5c:	ee17 2a90 	vmov	r2, s15
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d64:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d68:	0e1b      	lsrs	r3, r3, #24
 8009d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8a:	ee17 2a90 	vmov	r2, s15
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d92:	e008      	b.n	8009da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	609a      	str	r2, [r3, #8]
}
 8009da6:	bf00      	nop
 8009da8:	3724      	adds	r7, #36	; 0x24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	58024400 	.word	0x58024400
 8009db8:	03d09000 	.word	0x03d09000
 8009dbc:	46000000 	.word	0x46000000
 8009dc0:	4c742400 	.word	0x4c742400
 8009dc4:	4a742400 	.word	0x4a742400
 8009dc8:	4bbebc20 	.word	0x4bbebc20

08009dcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b089      	sub	sp, #36	; 0x24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dd4:	4ba0      	ldr	r3, [pc, #640]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009dde:	4b9e      	ldr	r3, [pc, #632]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	091b      	lsrs	r3, r3, #4
 8009de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009de8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009dea:	4b9b      	ldr	r3, [pc, #620]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009df4:	4b98      	ldr	r3, [pc, #608]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	08db      	lsrs	r3, r3, #3
 8009dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	fb02 f303 	mul.w	r3, r2, r3
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8111 	beq.w	800a03a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	f000 8083 	beq.w	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	f200 80a1 	bhi.w	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d056      	beq.n	8009ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e34:	e099      	b.n	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e36:	4b88      	ldr	r3, [pc, #544]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d02d      	beq.n	8009e9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e42:	4b85      	ldr	r3, [pc, #532]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	08db      	lsrs	r3, r3, #3
 8009e48:	f003 0303 	and.w	r3, r3, #3
 8009e4c:	4a83      	ldr	r2, [pc, #524]	; (800a05c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e52:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6c:	4b7a      	ldr	r3, [pc, #488]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e9c:	e087      	b.n	8009fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	ee07 3a90 	vmov	s15, r3
 8009ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb0:	4b69      	ldr	r3, [pc, #420]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ee0:	e065      	b.n	8009fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a068 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef4:	4b58      	ldr	r3, [pc, #352]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f08:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f24:	e043      	b.n	8009fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	ee07 3a90 	vmov	s15, r3
 8009f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f38:	4b47      	ldr	r3, [pc, #284]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f68:	e021      	b.n	8009fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	ee07 3a90 	vmov	s15, r3
 8009f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7c:	4b36      	ldr	r3, [pc, #216]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f90:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009fae:	4b2a      	ldr	r3, [pc, #168]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	0a5b      	lsrs	r3, r3, #9
 8009fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd4:	ee17 2a90 	vmov	r2, s15
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009fdc:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	0c1b      	lsrs	r3, r3, #16
 8009fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a002:	ee17 2a90 	vmov	r2, s15
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	0e1b      	lsrs	r3, r3, #24
 800a010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a020:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a024:	edd7 6a07 	vldr	s13, [r7, #28]
 800a028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a030:	ee17 2a90 	vmov	r2, s15
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a038:	e008      	b.n	800a04c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	609a      	str	r2, [r3, #8]
}
 800a04c:	bf00      	nop
 800a04e:	3724      	adds	r7, #36	; 0x24
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	58024400 	.word	0x58024400
 800a05c:	03d09000 	.word	0x03d09000
 800a060:	46000000 	.word	0x46000000
 800a064:	4c742400 	.word	0x4c742400
 800a068:	4a742400 	.word	0x4a742400
 800a06c:	4bbebc20 	.word	0x4bbebc20

0800a070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a07e:	4b53      	ldr	r3, [pc, #332]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b03      	cmp	r3, #3
 800a088:	d101      	bne.n	800a08e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e099      	b.n	800a1c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a08e:	4b4f      	ldr	r3, [pc, #316]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a4e      	ldr	r2, [pc, #312]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a09a:	f7f8 f965 	bl	8002368 <HAL_GetTick>
 800a09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0a0:	e008      	b.n	800a0b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0a2:	f7f8 f961 	bl	8002368 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d901      	bls.n	800a0b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e086      	b.n	800a1c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0b4:	4b45      	ldr	r3, [pc, #276]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f0      	bne.n	800a0a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0c0:	4b42      	ldr	r3, [pc, #264]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	031b      	lsls	r3, r3, #12
 800a0ce:	493f      	ldr	r1, [pc, #252]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	628b      	str	r3, [r1, #40]	; 0x28
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	025b      	lsls	r3, r3, #9
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	061b      	lsls	r3, r3, #24
 800a100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a104:	4931      	ldr	r1, [pc, #196]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a106:	4313      	orrs	r3, r2
 800a108:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a10a:	4b30      	ldr	r3, [pc, #192]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	492d      	ldr	r1, [pc, #180]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a11c:	4b2b      	ldr	r3, [pc, #172]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	f023 0220 	bic.w	r2, r3, #32
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	4928      	ldr	r1, [pc, #160]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a12e:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a132:	4a26      	ldr	r2, [pc, #152]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a134:	f023 0310 	bic.w	r3, r3, #16
 800a138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a13a:	4b24      	ldr	r3, [pc, #144]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a13c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a13e:	4b24      	ldr	r3, [pc, #144]	; (800a1d0 <RCCEx_PLL2_Config+0x160>)
 800a140:	4013      	ands	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	69d2      	ldr	r2, [r2, #28]
 800a146:	00d2      	lsls	r2, r2, #3
 800a148:	4920      	ldr	r1, [pc, #128]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a14e:	4b1f      	ldr	r3, [pc, #124]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	4a1e      	ldr	r2, [pc, #120]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a154:	f043 0310 	orr.w	r3, r3, #16
 800a158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a160:	4b1a      	ldr	r3, [pc, #104]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	4a19      	ldr	r2, [pc, #100]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a16a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a16c:	e00f      	b.n	800a18e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d106      	bne.n	800a182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a174:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a14      	ldr	r2, [pc, #80]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a17a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a17e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a180:	e005      	b.n	800a18e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a186:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a18c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a18e:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a0e      	ldr	r2, [pc, #56]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a194:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19a:	f7f8 f8e5 	bl	8002368 <HAL_GetTick>
 800a19e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1a0:	e008      	b.n	800a1b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1a2:	f7f8 f8e1 	bl	8002368 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d901      	bls.n	800a1b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e006      	b.n	800a1c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1b4:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <RCCEx_PLL2_Config+0x15c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0f0      	beq.n	800a1a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	ffff0007 	.word	0xffff0007

0800a1d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1e2:	4b53      	ldr	r3, [pc, #332]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	f003 0303 	and.w	r3, r3, #3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d101      	bne.n	800a1f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e099      	b.n	800a326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1f2:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a4e      	ldr	r2, [pc, #312]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1fe:	f7f8 f8b3 	bl	8002368 <HAL_GetTick>
 800a202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a204:	e008      	b.n	800a218 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a206:	f7f8 f8af 	bl	8002368 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e086      	b.n	800a326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a218:	4b45      	ldr	r3, [pc, #276]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1f0      	bne.n	800a206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a224:	4b42      	ldr	r3, [pc, #264]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	051b      	lsls	r3, r3, #20
 800a232:	493f      	ldr	r1, [pc, #252]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a234:	4313      	orrs	r3, r2
 800a236:	628b      	str	r3, [r1, #40]	; 0x28
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	3b01      	subs	r3, #1
 800a248:	025b      	lsls	r3, r3, #9
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	431a      	orrs	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	3b01      	subs	r3, #1
 800a254:	041b      	lsls	r3, r3, #16
 800a256:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	3b01      	subs	r3, #1
 800a262:	061b      	lsls	r3, r3, #24
 800a264:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a268:	4931      	ldr	r1, [pc, #196]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a26e:	4b30      	ldr	r3, [pc, #192]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	492d      	ldr	r1, [pc, #180]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a280:	4b2b      	ldr	r3, [pc, #172]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	4928      	ldr	r1, [pc, #160]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a292:	4b27      	ldr	r3, [pc, #156]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	4a26      	ldr	r2, [pc, #152]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a29c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a29e:	4b24      	ldr	r3, [pc, #144]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <RCCEx_PLL3_Config+0x160>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	69d2      	ldr	r2, [r2, #28]
 800a2aa:	00d2      	lsls	r2, r2, #3
 800a2ac:	4920      	ldr	r1, [pc, #128]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2b2:	4b1f      	ldr	r3, [pc, #124]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	4a1e      	ldr	r2, [pc, #120]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d106      	bne.n	800a2d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2c4:	4b1a      	ldr	r3, [pc, #104]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	4a19      	ldr	r2, [pc, #100]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2d0:	e00f      	b.n	800a2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d106      	bne.n	800a2e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2d8:	4b15      	ldr	r3, [pc, #84]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4a14      	ldr	r2, [pc, #80]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2e4:	e005      	b.n	800a2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2e6:	4b12      	ldr	r3, [pc, #72]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	4a11      	ldr	r2, [pc, #68]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a0e      	ldr	r2, [pc, #56]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2fe:	f7f8 f833 	bl	8002368 <HAL_GetTick>
 800a302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a304:	e008      	b.n	800a318 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a306:	f7f8 f82f 	bl	8002368 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d901      	bls.n	800a318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e006      	b.n	800a326 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <RCCEx_PLL3_Config+0x15c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0f0      	beq.n	800a306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a324:	7bfb      	ldrb	r3, [r7, #15]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	58024400 	.word	0x58024400
 800a334:	ffff0007 	.word	0xffff0007

0800a338 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e0f1      	b.n	800a52e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a78      	ldr	r2, [pc, #480]	; (800a538 <HAL_SPI_Init+0x200>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00f      	beq.n	800a37a <HAL_SPI_Init+0x42>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a77      	ldr	r2, [pc, #476]	; (800a53c <HAL_SPI_Init+0x204>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00a      	beq.n	800a37a <HAL_SPI_Init+0x42>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a75      	ldr	r2, [pc, #468]	; (800a540 <HAL_SPI_Init+0x208>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d005      	beq.n	800a37a <HAL_SPI_Init+0x42>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b0f      	cmp	r3, #15
 800a374:	d901      	bls.n	800a37a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e0d9      	b.n	800a52e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fba2 	bl	800aac4 <SPI_GetPacketSize>
 800a380:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a6c      	ldr	r2, [pc, #432]	; (800a538 <HAL_SPI_Init+0x200>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d00c      	beq.n	800a3a6 <HAL_SPI_Init+0x6e>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a6a      	ldr	r2, [pc, #424]	; (800a53c <HAL_SPI_Init+0x204>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d007      	beq.n	800a3a6 <HAL_SPI_Init+0x6e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a69      	ldr	r2, [pc, #420]	; (800a540 <HAL_SPI_Init+0x208>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d002      	beq.n	800a3a6 <HAL_SPI_Init+0x6e>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d811      	bhi.n	800a3ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3aa:	4a63      	ldr	r2, [pc, #396]	; (800a538 <HAL_SPI_Init+0x200>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d009      	beq.n	800a3c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a61      	ldr	r2, [pc, #388]	; (800a53c <HAL_SPI_Init+0x204>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <HAL_SPI_Init+0x8c>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a60      	ldr	r2, [pc, #384]	; (800a540 <HAL_SPI_Init+0x208>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d104      	bne.n	800a3ce <HAL_SPI_Init+0x96>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b10      	cmp	r3, #16
 800a3c8:	d901      	bls.n	800a3ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e0af      	b.n	800a52e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7f7 fbfe 	bl	8001be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0201 	bic.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a40a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a414:	d119      	bne.n	800a44a <HAL_SPI_Init+0x112>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a41e:	d103      	bne.n	800a428 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a424:	2b00      	cmp	r3, #0
 800a426:	d008      	beq.n	800a43a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10c      	bne.n	800a44a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a438:	d107      	bne.n	800a44a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a448:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	69da      	ldr	r2, [r3, #28]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a452:	431a      	orrs	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	ea42 0103 	orr.w	r1, r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	431a      	orrs	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	431a      	orrs	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4aa:	ea42 0103 	orr.w	r1, r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d113      	bne.n	800a4ea <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0201 	bic.w	r2, r2, #1
 800a4f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40013000 	.word	0x40013000
 800a53c:	40003800 	.word	0x40003800
 800a540:	40003c00 	.word	0x40003c00

0800a544 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	; 0x28
 800a548:	af02      	add	r7, sp, #8
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3320      	adds	r3, #32
 800a55a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_SPI_Transmit+0x2a>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e1d7      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a576:	f7f7 fef7 	bl	8002368 <HAL_GetTick>
 800a57a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b01      	cmp	r3, #1
 800a586:	d007      	beq.n	800a598 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a588:	2302      	movs	r3, #2
 800a58a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a594:	7efb      	ldrb	r3, [r7, #27]
 800a596:	e1c2      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <HAL_SPI_Transmit+0x60>
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d107      	bne.n	800a5b4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a5b0:	7efb      	ldrb	r3, [r7, #27]
 800a5b2:	e1b4      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	88fa      	ldrh	r2, [r7, #6]
 800a5ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	88fa      	ldrh	r2, [r7, #6]
 800a5d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a604:	d107      	bne.n	800a616 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a614:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	4b96      	ldr	r3, [pc, #600]	; (800a878 <HAL_SPI_Transmit+0x334>)
 800a61e:	4013      	ands	r3, r2
 800a620:	88f9      	ldrh	r1, [r7, #6]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	430b      	orrs	r3, r1
 800a628:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0201 	orr.w	r2, r2, #1
 800a638:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a642:	d107      	bne.n	800a654 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b0f      	cmp	r3, #15
 800a65a:	d947      	bls.n	800a6ec <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a65c:	e03f      	b.n	800a6de <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d114      	bne.n	800a696 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6812      	ldr	r2, [r2, #0]
 800a676:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a694:	e023      	b.n	800a6de <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a696:	f7f7 fe67 	bl	8002368 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d803      	bhi.n	800a6ae <HAL_SPI_Transmit+0x16a>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ac:	d102      	bne.n	800a6b4 <HAL_SPI_Transmit+0x170>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d114      	bne.n	800a6de <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f937 	bl	800a928 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e11f      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1b9      	bne.n	800a65e <HAL_SPI_Transmit+0x11a>
 800a6ea:	e0f2      	b.n	800a8d2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b07      	cmp	r3, #7
 800a6f2:	f240 80e7 	bls.w	800a8c4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6f6:	e05d      	b.n	800a7b4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b02      	cmp	r3, #2
 800a704:	d132      	bne.n	800a76c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d918      	bls.n	800a744 <HAL_SPI_Transmit+0x200>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d014      	beq.n	800a744 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72a:	1d1a      	adds	r2, r3, #4
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b02      	subs	r3, #2
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a742:	e037      	b.n	800a7b4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a748:	881a      	ldrh	r2, [r3, #0]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a752:	1c9a      	adds	r2, r3, #2
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	b29a      	uxth	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a76a:	e023      	b.n	800a7b4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76c:	f7f7 fdfc 	bl	8002368 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d803      	bhi.n	800a784 <HAL_SPI_Transmit+0x240>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a782:	d102      	bne.n	800a78a <HAL_SPI_Transmit+0x246>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d114      	bne.n	800a7b4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f8cc 	bl	800a928 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e0b4      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d19b      	bne.n	800a6f8 <HAL_SPI_Transmit+0x1b4>
 800a7c0:	e087      	b.n	800a8d2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d155      	bne.n	800a87c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d918      	bls.n	800a80e <HAL_SPI_Transmit+0x2ca>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d914      	bls.n	800a80e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6812      	ldr	r2, [r2, #0]
 800a7ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	1d1a      	adds	r2, r3, #4
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a800:	b29b      	uxth	r3, r3
 800a802:	3b04      	subs	r3, #4
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a80c:	e05a      	b.n	800a8c4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a814:	b29b      	uxth	r3, r3
 800a816:	2b01      	cmp	r3, #1
 800a818:	d917      	bls.n	800a84a <HAL_SPI_Transmit+0x306>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d013      	beq.n	800a84a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a826:	881a      	ldrh	r2, [r3, #0]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a830:	1c9a      	adds	r2, r3, #2
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b02      	subs	r3, #2
 800a840:	b29a      	uxth	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a848:	e03c      	b.n	800a8c4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3320      	adds	r3, #32
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a868:	b29b      	uxth	r3, r3
 800a86a:	3b01      	subs	r3, #1
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a874:	e026      	b.n	800a8c4 <HAL_SPI_Transmit+0x380>
 800a876:	bf00      	nop
 800a878:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a87c:	f7f7 fd74 	bl	8002368 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d803      	bhi.n	800a894 <HAL_SPI_Transmit+0x350>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a892:	d102      	bne.n	800a89a <HAL_SPI_Transmit+0x356>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d114      	bne.n	800a8c4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f844 	bl	800a928 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e02c      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f af78 	bne.w	800a7c2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2108      	movs	r1, #8
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f8c3 	bl	800aa68 <SPI_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d007      	beq.n	800a8f8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ee:	f043 0220 	orr.w	r2, r3, #32
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f815 	bl	800a928 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e000      	b.n	800a91e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a91c:	7efb      	ldrb	r3, [r7, #27]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3720      	adds	r7, #32
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop

0800a928 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699a      	ldr	r2, [r3, #24]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0208 	orr.w	r2, r2, #8
 800a946:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0210 	orr.w	r2, r2, #16
 800a956:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0201 	bic.w	r2, r2, #1
 800a966:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6919      	ldr	r1, [r3, #16]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b3c      	ldr	r3, [pc, #240]	; (800aa64 <SPI_CloseTransfer+0x13c>)
 800a974:	400b      	ands	r3, r1
 800a976:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a986:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b04      	cmp	r3, #4
 800a992:	d014      	beq.n	800a9be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00f      	beq.n	800a9be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	699a      	ldr	r2, [r3, #24]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f042 0220 	orr.w	r2, r2, #32
 800a9bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d014      	beq.n	800a9f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00f      	beq.n	800a9f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9da:	f043 0204 	orr.w	r2, r3, #4
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00f      	beq.n	800aa1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa04:	f043 0201 	orr.w	r2, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699a      	ldr	r2, [r3, #24]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00f      	beq.n	800aa48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2e:	f043 0208 	orr.w	r2, r3, #8
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800aa58:	bf00      	nop
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	fffffc90 	.word	0xfffffc90

0800aa68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	4613      	mov	r3, r2
 800aa76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa78:	e010      	b.n	800aa9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa7a:	f7f7 fc75 	bl	8002368 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d803      	bhi.n	800aa92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa90:	d102      	bne.n	800aa98 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e00f      	b.n	800aabc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	695a      	ldr	r2, [r3, #20]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	bf0c      	ite	eq
 800aaac:	2301      	moveq	r3, #1
 800aaae:	2300      	movne	r3, #0
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d0df      	beq.n	800aa7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad0:	095b      	lsrs	r3, r3, #5
 800aad2:	3301      	adds	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	3307      	adds	r3, #7
 800aae2:	08db      	lsrs	r3, r3, #3
 800aae4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d109      	bne.n	800ab24 <HAL_TIM_OC_Start_IT+0x28>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	bf14      	ite	ne
 800ab1c:	2301      	movne	r3, #1
 800ab1e:	2300      	moveq	r3, #0
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	e03c      	b.n	800ab9e <HAL_TIM_OC_Start_IT+0xa2>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	d109      	bne.n	800ab3e <HAL_TIM_OC_Start_IT+0x42>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	bf14      	ite	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	2300      	moveq	r3, #0
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	e02f      	b.n	800ab9e <HAL_TIM_OC_Start_IT+0xa2>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d109      	bne.n	800ab58 <HAL_TIM_OC_Start_IT+0x5c>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	bf14      	ite	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	2300      	moveq	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	e022      	b.n	800ab9e <HAL_TIM_OC_Start_IT+0xa2>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b0c      	cmp	r3, #12
 800ab5c:	d109      	bne.n	800ab72 <HAL_TIM_OC_Start_IT+0x76>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	bf14      	ite	ne
 800ab6a:	2301      	movne	r3, #1
 800ab6c:	2300      	moveq	r3, #0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	e015      	b.n	800ab9e <HAL_TIM_OC_Start_IT+0xa2>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d109      	bne.n	800ab8c <HAL_TIM_OC_Start_IT+0x90>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	bf14      	ite	ne
 800ab84:	2301      	movne	r3, #1
 800ab86:	2300      	moveq	r3, #0
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	e008      	b.n	800ab9e <HAL_TIM_OC_Start_IT+0xa2>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	bf14      	ite	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	2300      	moveq	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e0ec      	b.n	800ad80 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d104      	bne.n	800abb6 <HAL_TIM_OC_Start_IT+0xba>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abb4:	e023      	b.n	800abfe <HAL_TIM_OC_Start_IT+0x102>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b04      	cmp	r3, #4
 800abba:	d104      	bne.n	800abc6 <HAL_TIM_OC_Start_IT+0xca>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abc4:	e01b      	b.n	800abfe <HAL_TIM_OC_Start_IT+0x102>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d104      	bne.n	800abd6 <HAL_TIM_OC_Start_IT+0xda>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2202      	movs	r2, #2
 800abd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abd4:	e013      	b.n	800abfe <HAL_TIM_OC_Start_IT+0x102>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b0c      	cmp	r3, #12
 800abda:	d104      	bne.n	800abe6 <HAL_TIM_OC_Start_IT+0xea>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abe4:	e00b      	b.n	800abfe <HAL_TIM_OC_Start_IT+0x102>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b10      	cmp	r3, #16
 800abea:	d104      	bne.n	800abf6 <HAL_TIM_OC_Start_IT+0xfa>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abf4:	e003      	b.n	800abfe <HAL_TIM_OC_Start_IT+0x102>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b0c      	cmp	r3, #12
 800ac02:	d841      	bhi.n	800ac88 <HAL_TIM_OC_Start_IT+0x18c>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <HAL_TIM_OC_Start_IT+0x110>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac41 	.word	0x0800ac41
 800ac10:	0800ac89 	.word	0x0800ac89
 800ac14:	0800ac89 	.word	0x0800ac89
 800ac18:	0800ac89 	.word	0x0800ac89
 800ac1c:	0800ac53 	.word	0x0800ac53
 800ac20:	0800ac89 	.word	0x0800ac89
 800ac24:	0800ac89 	.word	0x0800ac89
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	0800ac65 	.word	0x0800ac65
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	0800ac89 	.word	0x0800ac89
 800ac38:	0800ac89 	.word	0x0800ac89
 800ac3c:	0800ac77 	.word	0x0800ac77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0202 	orr.w	r2, r2, #2
 800ac4e:	60da      	str	r2, [r3, #12]
      break;
 800ac50:	e01d      	b.n	800ac8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f042 0204 	orr.w	r2, r2, #4
 800ac60:	60da      	str	r2, [r3, #12]
      break;
 800ac62:	e014      	b.n	800ac8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f042 0208 	orr.w	r2, r2, #8
 800ac72:	60da      	str	r2, [r3, #12]
      break;
 800ac74:	e00b      	b.n	800ac8e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f042 0210 	orr.w	r2, r2, #16
 800ac84:	60da      	str	r2, [r3, #12]
      break;
 800ac86:	e002      	b.n	800ac8e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d174      	bne.n	800ad7e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fea9 	bl	800b9f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a38      	ldr	r2, [pc, #224]	; (800ad88 <HAL_TIM_OC_Start_IT+0x28c>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d013      	beq.n	800acd4 <HAL_TIM_OC_Start_IT+0x1d8>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a36      	ldr	r2, [pc, #216]	; (800ad8c <HAL_TIM_OC_Start_IT+0x290>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00e      	beq.n	800acd4 <HAL_TIM_OC_Start_IT+0x1d8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a35      	ldr	r2, [pc, #212]	; (800ad90 <HAL_TIM_OC_Start_IT+0x294>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d009      	beq.n	800acd4 <HAL_TIM_OC_Start_IT+0x1d8>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a33      	ldr	r2, [pc, #204]	; (800ad94 <HAL_TIM_OC_Start_IT+0x298>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_TIM_OC_Start_IT+0x1d8>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a32      	ldr	r2, [pc, #200]	; (800ad98 <HAL_TIM_OC_Start_IT+0x29c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d101      	bne.n	800acd8 <HAL_TIM_OC_Start_IT+0x1dc>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <HAL_TIM_OC_Start_IT+0x1de>
 800acd8:	2300      	movs	r3, #0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a25      	ldr	r2, [pc, #148]	; (800ad88 <HAL_TIM_OC_Start_IT+0x28c>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d022      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad00:	d01d      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a25      	ldr	r2, [pc, #148]	; (800ad9c <HAL_TIM_OC_Start_IT+0x2a0>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d018      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a23      	ldr	r2, [pc, #140]	; (800ada0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a22      	ldr	r2, [pc, #136]	; (800ada4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00e      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a19      	ldr	r2, [pc, #100]	; (800ad8c <HAL_TIM_OC_Start_IT+0x290>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a1e      	ldr	r2, [pc, #120]	; (800ada8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d004      	beq.n	800ad3e <HAL_TIM_OC_Start_IT+0x242>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <HAL_TIM_OC_Start_IT+0x294>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d115      	bne.n	800ad6a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	4b19      	ldr	r3, [pc, #100]	; (800adac <HAL_TIM_OC_Start_IT+0x2b0>)
 800ad46:	4013      	ands	r3, r2
 800ad48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b06      	cmp	r3, #6
 800ad4e:	d015      	beq.n	800ad7c <HAL_TIM_OC_Start_IT+0x280>
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad56:	d011      	beq.n	800ad7c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f042 0201 	orr.w	r2, r2, #1
 800ad66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad68:	e008      	b.n	800ad7c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0201 	orr.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	e000      	b.n	800ad7e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	40010000 	.word	0x40010000
 800ad8c:	40010400 	.word	0x40010400
 800ad90:	40014000 	.word	0x40014000
 800ad94:	40014400 	.word	0x40014400
 800ad98:	40014800 	.word	0x40014800
 800ad9c:	40000400 	.word	0x40000400
 800ada0:	40000800 	.word	0x40000800
 800ada4:	40000c00 	.word	0x40000c00
 800ada8:	40001800 	.word	0x40001800
 800adac:	00010007 	.word	0x00010007

0800adb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e049      	b.n	800ae56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7f7 f800 	bl	8001ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2202      	movs	r2, #2
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3304      	adds	r3, #4
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f000 fa90 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d122      	bne.n	800aeba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d11b      	bne.n	800aeba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f06f 0202 	mvn.w	r2, #2
 800ae8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fa19 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aea6:	e005      	b.n	800aeb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7f5 fbad 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa1c 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d122      	bne.n	800af0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d11b      	bne.n	800af0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f06f 0204 	mvn.w	r2, #4
 800aede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d003      	beq.n	800aefc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f9ef 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800aefa:	e005      	b.n	800af08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f5 fb83 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f9f2 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d122      	bne.n	800af62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b08      	cmp	r3, #8
 800af28:	d11b      	bne.n	800af62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f06f 0208 	mvn.w	r2, #8
 800af32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2204      	movs	r2, #4
 800af38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f9c5 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800af4e:	e005      	b.n	800af5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7f5 fb59 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f9c8 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0310 	and.w	r3, r3, #16
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d122      	bne.n	800afb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f003 0310 	and.w	r3, r3, #16
 800af7a:	2b10      	cmp	r3, #16
 800af7c:	d11b      	bne.n	800afb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f06f 0210 	mvn.w	r2, #16
 800af86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2208      	movs	r2, #8
 800af8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f99b 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800afa2:	e005      	b.n	800afb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f5 fb2f 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f99e 	bl	800b2ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d10e      	bne.n	800afe2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d107      	bne.n	800afe2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f06f 0201 	mvn.w	r2, #1
 800afda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f971 	bl	800b2c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afec:	2b80      	cmp	r3, #128	; 0x80
 800afee:	d10e      	bne.n	800b00e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affa:	2b80      	cmp	r3, #128	; 0x80
 800affc:	d107      	bne.n	800b00e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fe2f 	bl	800bc6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b01c:	d10e      	bne.n	800b03c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b028:	2b80      	cmp	r3, #128	; 0x80
 800b02a:	d107      	bne.n	800b03c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fe22 	bl	800bc80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b046:	2b40      	cmp	r3, #64	; 0x40
 800b048:	d10e      	bne.n	800b068 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b054:	2b40      	cmp	r3, #64	; 0x40
 800b056:	d107      	bne.n	800b068 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f94c 	bl	800b300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b20      	cmp	r3, #32
 800b074:	d10e      	bne.n	800b094 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b20      	cmp	r3, #32
 800b082:	d107      	bne.n	800b094 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0220 	mvn.w	r2, #32
 800b08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fde2 	bl	800bc58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	e0ff      	b.n	800b2ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b14      	cmp	r3, #20
 800b0c6:	f200 80f0 	bhi.w	800b2aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b125 	.word	0x0800b125
 800b0d4:	0800b2ab 	.word	0x0800b2ab
 800b0d8:	0800b2ab 	.word	0x0800b2ab
 800b0dc:	0800b2ab 	.word	0x0800b2ab
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b2ab 	.word	0x0800b2ab
 800b0e8:	0800b2ab 	.word	0x0800b2ab
 800b0ec:	0800b2ab 	.word	0x0800b2ab
 800b0f0:	0800b1a7 	.word	0x0800b1a7
 800b0f4:	0800b2ab 	.word	0x0800b2ab
 800b0f8:	0800b2ab 	.word	0x0800b2ab
 800b0fc:	0800b2ab 	.word	0x0800b2ab
 800b100:	0800b1e7 	.word	0x0800b1e7
 800b104:	0800b2ab 	.word	0x0800b2ab
 800b108:	0800b2ab 	.word	0x0800b2ab
 800b10c:	0800b2ab 	.word	0x0800b2ab
 800b110:	0800b229 	.word	0x0800b229
 800b114:	0800b2ab 	.word	0x0800b2ab
 800b118:	0800b2ab 	.word	0x0800b2ab
 800b11c:	0800b2ab 	.word	0x0800b2ab
 800b120:	0800b269 	.word	0x0800b269
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68b9      	ldr	r1, [r7, #8]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f98c 	bl	800b448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0208 	orr.w	r2, r2, #8
 800b13e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699a      	ldr	r2, [r3, #24]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0204 	bic.w	r2, r2, #4
 800b14e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6999      	ldr	r1, [r3, #24]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	619a      	str	r2, [r3, #24]
      break;
 800b162:	e0a5      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f9fc 	bl	800b568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	699a      	ldr	r2, [r3, #24]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b17e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699a      	ldr	r2, [r3, #24]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b18e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6999      	ldr	r1, [r3, #24]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	021a      	lsls	r2, r3, #8
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	619a      	str	r2, [r3, #24]
      break;
 800b1a4:	e084      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fa65 	bl	800b67c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	69da      	ldr	r2, [r3, #28]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0208 	orr.w	r2, r2, #8
 800b1c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	69da      	ldr	r2, [r3, #28]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0204 	bic.w	r2, r2, #4
 800b1d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69d9      	ldr	r1, [r3, #28]
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	61da      	str	r2, [r3, #28]
      break;
 800b1e4:	e064      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 facd 	bl	800b78c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69da      	ldr	r2, [r3, #28]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69da      	ldr	r2, [r3, #28]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69d9      	ldr	r1, [r3, #28]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	021a      	lsls	r2, r3, #8
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	61da      	str	r2, [r3, #28]
      break;
 800b226:	e043      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68b9      	ldr	r1, [r7, #8]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fb16 	bl	800b860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0208 	orr.w	r2, r2, #8
 800b242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 0204 	bic.w	r2, r2, #4
 800b252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	691a      	ldr	r2, [r3, #16]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b266:	e023      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fb5a 	bl	800b928 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	021a      	lsls	r2, r3, #8
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2a8:	e002      	b.n	800b2b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop

0800b2c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a40      	ldr	r2, [pc, #256]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d013      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b332:	d00f      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3d      	ldr	r2, [pc, #244]	; (800b42c <TIM_Base_SetConfig+0x118>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00b      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a3c      	ldr	r2, [pc, #240]	; (800b430 <TIM_Base_SetConfig+0x11c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3b      	ldr	r2, [pc, #236]	; (800b434 <TIM_Base_SetConfig+0x120>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d003      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a3a      	ldr	r2, [pc, #232]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d108      	bne.n	800b366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4313      	orrs	r3, r2
 800b364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2f      	ldr	r2, [pc, #188]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d01f      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b374:	d01b      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a2c      	ldr	r2, [pc, #176]	; (800b42c <TIM_Base_SetConfig+0x118>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d017      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a2b      	ldr	r2, [pc, #172]	; (800b430 <TIM_Base_SetConfig+0x11c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d013      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2a      	ldr	r2, [pc, #168]	; (800b434 <TIM_Base_SetConfig+0x120>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00f      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a29      	ldr	r2, [pc, #164]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00b      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a28      	ldr	r2, [pc, #160]	; (800b43c <TIM_Base_SetConfig+0x128>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d007      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a27      	ldr	r2, [pc, #156]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d003      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a26      	ldr	r2, [pc, #152]	; (800b444 <TIM_Base_SetConfig+0x130>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d108      	bne.n	800b3c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a10      	ldr	r2, [pc, #64]	; (800b428 <TIM_Base_SetConfig+0x114>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00f      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a12      	ldr	r2, [pc, #72]	; (800b438 <TIM_Base_SetConfig+0x124>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d00b      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a11      	ldr	r2, [pc, #68]	; (800b43c <TIM_Base_SetConfig+0x128>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d007      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a10      	ldr	r2, [pc, #64]	; (800b440 <TIM_Base_SetConfig+0x12c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d003      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a0f      	ldr	r2, [pc, #60]	; (800b444 <TIM_Base_SetConfig+0x130>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d103      	bne.n	800b414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	615a      	str	r2, [r3, #20]
}
 800b41a:	bf00      	nop
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	40010000 	.word	0x40010000
 800b42c:	40000400 	.word	0x40000400
 800b430:	40000800 	.word	0x40000800
 800b434:	40000c00 	.word	0x40000c00
 800b438:	40010400 	.word	0x40010400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800

0800b448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	f023 0201 	bic.w	r2, r3, #1
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4b37      	ldr	r3, [pc, #220]	; (800b550 <TIM_OC1_SetConfig+0x108>)
 800b474:	4013      	ands	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 0303 	bic.w	r3, r3, #3
 800b47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f023 0302 	bic.w	r3, r3, #2
 800b490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <TIM_OC1_SetConfig+0x10c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00f      	beq.n	800b4c4 <TIM_OC1_SetConfig+0x7c>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a2c      	ldr	r2, [pc, #176]	; (800b558 <TIM_OC1_SetConfig+0x110>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00b      	beq.n	800b4c4 <TIM_OC1_SetConfig+0x7c>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a2b      	ldr	r2, [pc, #172]	; (800b55c <TIM_OC1_SetConfig+0x114>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d007      	beq.n	800b4c4 <TIM_OC1_SetConfig+0x7c>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a2a      	ldr	r2, [pc, #168]	; (800b560 <TIM_OC1_SetConfig+0x118>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d003      	beq.n	800b4c4 <TIM_OC1_SetConfig+0x7c>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a29      	ldr	r2, [pc, #164]	; (800b564 <TIM_OC1_SetConfig+0x11c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d10c      	bne.n	800b4de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f023 0308 	bic.w	r3, r3, #8
 800b4ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f023 0304 	bic.w	r3, r3, #4
 800b4dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <TIM_OC1_SetConfig+0x10c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d00f      	beq.n	800b506 <TIM_OC1_SetConfig+0xbe>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <TIM_OC1_SetConfig+0x110>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00b      	beq.n	800b506 <TIM_OC1_SetConfig+0xbe>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a1a      	ldr	r2, [pc, #104]	; (800b55c <TIM_OC1_SetConfig+0x114>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d007      	beq.n	800b506 <TIM_OC1_SetConfig+0xbe>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a19      	ldr	r2, [pc, #100]	; (800b560 <TIM_OC1_SetConfig+0x118>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_OC1_SetConfig+0xbe>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a18      	ldr	r2, [pc, #96]	; (800b564 <TIM_OC1_SetConfig+0x11c>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d111      	bne.n	800b52a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b50c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	621a      	str	r2, [r3, #32]
}
 800b544:	bf00      	nop
 800b546:	371c      	adds	r7, #28
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	fffeff8f 	.word	0xfffeff8f
 800b554:	40010000 	.word	0x40010000
 800b558:	40010400 	.word	0x40010400
 800b55c:	40014000 	.word	0x40014000
 800b560:	40014400 	.word	0x40014400
 800b564:	40014800 	.word	0x40014800

0800b568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f023 0210 	bic.w	r2, r3, #16
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4b34      	ldr	r3, [pc, #208]	; (800b664 <TIM_OC2_SetConfig+0xfc>)
 800b594:	4013      	ands	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 0320 	bic.w	r3, r3, #32
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a29      	ldr	r2, [pc, #164]	; (800b668 <TIM_OC2_SetConfig+0x100>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d003      	beq.n	800b5d0 <TIM_OC2_SetConfig+0x68>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a28      	ldr	r2, [pc, #160]	; (800b66c <TIM_OC2_SetConfig+0x104>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10d      	bne.n	800b5ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	; (800b668 <TIM_OC2_SetConfig+0x100>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d00f      	beq.n	800b614 <TIM_OC2_SetConfig+0xac>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a1d      	ldr	r2, [pc, #116]	; (800b66c <TIM_OC2_SetConfig+0x104>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00b      	beq.n	800b614 <TIM_OC2_SetConfig+0xac>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a1c      	ldr	r2, [pc, #112]	; (800b670 <TIM_OC2_SetConfig+0x108>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d007      	beq.n	800b614 <TIM_OC2_SetConfig+0xac>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a1b      	ldr	r2, [pc, #108]	; (800b674 <TIM_OC2_SetConfig+0x10c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d003      	beq.n	800b614 <TIM_OC2_SetConfig+0xac>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a1a      	ldr	r2, [pc, #104]	; (800b678 <TIM_OC2_SetConfig+0x110>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d113      	bne.n	800b63c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b61a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	4313      	orrs	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	621a      	str	r2, [r3, #32]
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	feff8fff 	.word	0xfeff8fff
 800b668:	40010000 	.word	0x40010000
 800b66c:	40010400 	.word	0x40010400
 800b670:	40014000 	.word	0x40014000
 800b674:	40014400 	.word	0x40014400
 800b678:	40014800 	.word	0x40014800

0800b67c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4b33      	ldr	r3, [pc, #204]	; (800b774 <TIM_OC3_SetConfig+0xf8>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0303 	bic.w	r3, r3, #3
 800b6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	021b      	lsls	r3, r3, #8
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a28      	ldr	r2, [pc, #160]	; (800b778 <TIM_OC3_SetConfig+0xfc>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d003      	beq.n	800b6e2 <TIM_OC3_SetConfig+0x66>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a27      	ldr	r2, [pc, #156]	; (800b77c <TIM_OC3_SetConfig+0x100>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d10d      	bne.n	800b6fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	021b      	lsls	r3, r3, #8
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a1d      	ldr	r2, [pc, #116]	; (800b778 <TIM_OC3_SetConfig+0xfc>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00f      	beq.n	800b726 <TIM_OC3_SetConfig+0xaa>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a1c      	ldr	r2, [pc, #112]	; (800b77c <TIM_OC3_SetConfig+0x100>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d00b      	beq.n	800b726 <TIM_OC3_SetConfig+0xaa>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a1b      	ldr	r2, [pc, #108]	; (800b780 <TIM_OC3_SetConfig+0x104>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d007      	beq.n	800b726 <TIM_OC3_SetConfig+0xaa>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a1a      	ldr	r2, [pc, #104]	; (800b784 <TIM_OC3_SetConfig+0x108>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d003      	beq.n	800b726 <TIM_OC3_SetConfig+0xaa>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a19      	ldr	r2, [pc, #100]	; (800b788 <TIM_OC3_SetConfig+0x10c>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d113      	bne.n	800b74e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b72c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4313      	orrs	r3, r2
 800b740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	621a      	str	r2, [r3, #32]
}
 800b768:	bf00      	nop
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	fffeff8f 	.word	0xfffeff8f
 800b778:	40010000 	.word	0x40010000
 800b77c:	40010400 	.word	0x40010400
 800b780:	40014000 	.word	0x40014000
 800b784:	40014400 	.word	0x40014400
 800b788:	40014800 	.word	0x40014800

0800b78c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <TIM_OC4_SetConfig+0xbc>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	031b      	lsls	r3, r3, #12
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a19      	ldr	r2, [pc, #100]	; (800b84c <TIM_OC4_SetConfig+0xc0>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d00f      	beq.n	800b80c <TIM_OC4_SetConfig+0x80>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a18      	ldr	r2, [pc, #96]	; (800b850 <TIM_OC4_SetConfig+0xc4>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00b      	beq.n	800b80c <TIM_OC4_SetConfig+0x80>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a17      	ldr	r2, [pc, #92]	; (800b854 <TIM_OC4_SetConfig+0xc8>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d007      	beq.n	800b80c <TIM_OC4_SetConfig+0x80>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a16      	ldr	r2, [pc, #88]	; (800b858 <TIM_OC4_SetConfig+0xcc>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d003      	beq.n	800b80c <TIM_OC4_SetConfig+0x80>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a15      	ldr	r2, [pc, #84]	; (800b85c <TIM_OC4_SetConfig+0xd0>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d109      	bne.n	800b820 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	695b      	ldr	r3, [r3, #20]
 800b818:	019b      	lsls	r3, r3, #6
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	feff8fff 	.word	0xfeff8fff
 800b84c:	40010000 	.word	0x40010000
 800b850:	40010400 	.word	0x40010400
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800

0800b860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4b21      	ldr	r3, [pc, #132]	; (800b910 <TIM_OC5_SetConfig+0xb0>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b8a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	041b      	lsls	r3, r3, #16
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a18      	ldr	r2, [pc, #96]	; (800b914 <TIM_OC5_SetConfig+0xb4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d00f      	beq.n	800b8d6 <TIM_OC5_SetConfig+0x76>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a17      	ldr	r2, [pc, #92]	; (800b918 <TIM_OC5_SetConfig+0xb8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00b      	beq.n	800b8d6 <TIM_OC5_SetConfig+0x76>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a16      	ldr	r2, [pc, #88]	; (800b91c <TIM_OC5_SetConfig+0xbc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d007      	beq.n	800b8d6 <TIM_OC5_SetConfig+0x76>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a15      	ldr	r2, [pc, #84]	; (800b920 <TIM_OC5_SetConfig+0xc0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d003      	beq.n	800b8d6 <TIM_OC5_SetConfig+0x76>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a14      	ldr	r2, [pc, #80]	; (800b924 <TIM_OC5_SetConfig+0xc4>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d109      	bne.n	800b8ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	021b      	lsls	r3, r3, #8
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	621a      	str	r2, [r3, #32]
}
 800b904:	bf00      	nop
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	fffeff8f 	.word	0xfffeff8f
 800b914:	40010000 	.word	0x40010000
 800b918:	40010400 	.word	0x40010400
 800b91c:	40014000 	.word	0x40014000
 800b920:	40014400 	.word	0x40014400
 800b924:	40014800 	.word	0x40014800

0800b928 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4b22      	ldr	r3, [pc, #136]	; (800b9dc <TIM_OC6_SetConfig+0xb4>)
 800b954:	4013      	ands	r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	4313      	orrs	r3, r2
 800b962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b96a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	051b      	lsls	r3, r3, #20
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4313      	orrs	r3, r2
 800b976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a19      	ldr	r2, [pc, #100]	; (800b9e0 <TIM_OC6_SetConfig+0xb8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d00f      	beq.n	800b9a0 <TIM_OC6_SetConfig+0x78>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <TIM_OC6_SetConfig+0xbc>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d00b      	beq.n	800b9a0 <TIM_OC6_SetConfig+0x78>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <TIM_OC6_SetConfig+0xc0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d007      	beq.n	800b9a0 <TIM_OC6_SetConfig+0x78>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a16      	ldr	r2, [pc, #88]	; (800b9ec <TIM_OC6_SetConfig+0xc4>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d003      	beq.n	800b9a0 <TIM_OC6_SetConfig+0x78>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a15      	ldr	r2, [pc, #84]	; (800b9f0 <TIM_OC6_SetConfig+0xc8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d109      	bne.n	800b9b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	029b      	lsls	r3, r3, #10
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	621a      	str	r2, [r3, #32]
}
 800b9ce:	bf00      	nop
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	feff8fff 	.word	0xfeff8fff
 800b9e0:	40010000 	.word	0x40010000
 800b9e4:	40010400 	.word	0x40010400
 800b9e8:	40014000 	.word	0x40014000
 800b9ec:	40014400 	.word	0x40014400
 800b9f0:	40014800 	.word	0x40014800

0800b9f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f003 031f 	and.w	r3, r3, #31
 800ba06:	2201      	movs	r2, #1
 800ba08:	fa02 f303 	lsl.w	r3, r2, r3
 800ba0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	43db      	mvns	r3, r3
 800ba16:	401a      	ands	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6a1a      	ldr	r2, [r3, #32]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f003 031f 	and.w	r3, r3, #31
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	621a      	str	r2, [r3, #32]
}
 800ba32:	bf00      	nop
 800ba34:	371c      	adds	r7, #28
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
	...

0800ba40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d101      	bne.n	800ba58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba54:	2302      	movs	r3, #2
 800ba56:	e06d      	b.n	800bb34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a30      	ldr	r2, [pc, #192]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d004      	beq.n	800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a2f      	ldr	r2, [pc, #188]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d108      	bne.n	800ba9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	4313      	orrs	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a20      	ldr	r2, [pc, #128]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d022      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baca:	d01d      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d018      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a1c      	ldr	r2, [pc, #112]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d013      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1a      	ldr	r2, [pc, #104]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00e      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a15      	ldr	r2, [pc, #84]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d009      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d004      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a15      	ldr	r2, [pc, #84]	; (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d10c      	bne.n	800bb22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00
 800bb54:	40001800 	.word	0x40001800
 800bb58:	40014000 	.word	0x40014000

0800bb5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d101      	bne.n	800bb78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb74:	2302      	movs	r3, #2
 800bb76:	e065      	b.n	800bc44 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	041b      	lsls	r3, r3, #16
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a16      	ldr	r2, [pc, #88]	; (800bc50 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d004      	beq.n	800bc06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a14      	ldr	r2, [pc, #80]	; (800bc54 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d115      	bne.n	800bc32 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	051b      	lsls	r3, r3, #20
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	40010000 	.word	0x40010000
 800bc54:	40010400 	.word	0x40010400

0800bc58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e042      	b.n	800bd2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7f6 f951 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2224      	movs	r2, #36	; 0x24
 800bcc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 0201 	bic.w	r2, r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f92e 	bl	800bf38 <UART_SetConfig>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d101      	bne.n	800bce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e022      	b.n	800bd2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fe8a 	bl	800ca08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 ff11 	bl	800cb4c <UART_CheckIdleState>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08a      	sub	sp, #40	; 0x28
 800bd38:	af02      	add	r7, sp, #8
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4613      	mov	r3, r2
 800bd42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	f040 8083 	bne.w	800be56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_UART_Transmit+0x28>
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e07b      	b.n	800be58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_UART_Transmit+0x3a>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e074      	b.n	800be58 <HAL_UART_Transmit+0x124>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2221      	movs	r2, #33	; 0x21
 800bd82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd86:	f7f6 faef 	bl	8002368 <HAL_GetTick>
 800bd8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	88fa      	ldrh	r2, [r7, #6]
 800bd90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda4:	d108      	bne.n	800bdb8 <HAL_UART_Transmit+0x84>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d104      	bne.n	800bdb8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	61bb      	str	r3, [r7, #24]
 800bdb6:	e003      	b.n	800bdc0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bdc8:	e02c      	b.n	800be24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2180      	movs	r1, #128	; 0x80
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f000 ff04 	bl	800cbe2 <UART_WaitOnFlagUntilTimeout>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e039      	b.n	800be58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	61bb      	str	r3, [r7, #24]
 800be00:	e007      	b.n	800be12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	781a      	ldrb	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	3301      	adds	r3, #1
 800be10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be18:	b29b      	uxth	r3, r3
 800be1a:	3b01      	subs	r3, #1
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1cc      	bne.n	800bdca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2200      	movs	r2, #0
 800be38:	2140      	movs	r1, #64	; 0x40
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 fed1 	bl	800cbe2 <UART_WaitOnFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e006      	b.n	800be58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2220      	movs	r2, #32
 800be4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	e000      	b.n	800be58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be56:	2302      	movs	r3, #2
  }
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3720      	adds	r7, #32
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4613      	mov	r3, r2
 800be6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be74:	2b20      	cmp	r3, #32
 800be76:	d142      	bne.n	800befe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <HAL_UART_Receive_IT+0x24>
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e03b      	b.n	800bf00 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <HAL_UART_Receive_IT+0x36>
 800be92:	2302      	movs	r3, #2
 800be94:	e034      	b.n	800bf00 <HAL_UART_Receive_IT+0xa0>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <HAL_UART_Receive_IT+0xa8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d01f      	beq.n	800beee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d018      	beq.n	800beee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	613b      	str	r3, [r7, #16]
   return(result);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	623b      	str	r3, [r7, #32]
 800bedc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	69f9      	ldr	r1, [r7, #28]
 800bee0:	6a3a      	ldr	r2, [r7, #32]
 800bee2:	e841 2300 	strex	r3, r2, [r1]
 800bee6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1e6      	bne.n	800bebc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800beee:	88fb      	ldrh	r3, [r7, #6]
 800bef0:	461a      	mov	r2, r3
 800bef2:	68b9      	ldr	r1, [r7, #8]
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 ff3d 	bl	800cd74 <UART_Start_Receive_IT>
 800befa:	4603      	mov	r3, r0
 800befc:	e000      	b.n	800bf00 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800befe:	2302      	movs	r3, #2
  }
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3728      	adds	r7, #40	; 0x28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	58000c00 	.word	0x58000c00

0800bf0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf3c:	b092      	sub	sp, #72	; 0x48
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	431a      	orrs	r2, r3
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	431a      	orrs	r2, r3
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	4bbe      	ldr	r3, [pc, #760]	; (800c260 <UART_SetConfig+0x328>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf70:	430b      	orrs	r3, r1
 800bf72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	430a      	orrs	r2, r1
 800bf88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4ab3      	ldr	r2, [pc, #716]	; (800c264 <UART_SetConfig+0x32c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d004      	beq.n	800bfa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	4baf      	ldr	r3, [pc, #700]	; (800c268 <UART_SetConfig+0x330>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	6812      	ldr	r2, [r2, #0]
 800bfb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	f023 010f 	bic.w	r1, r3, #15
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4aa6      	ldr	r2, [pc, #664]	; (800c26c <UART_SetConfig+0x334>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d177      	bne.n	800c0c8 <UART_SetConfig+0x190>
 800bfd8:	4ba5      	ldr	r3, [pc, #660]	; (800c270 <UART_SetConfig+0x338>)
 800bfda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfe0:	2b28      	cmp	r3, #40	; 0x28
 800bfe2:	d86d      	bhi.n	800c0c0 <UART_SetConfig+0x188>
 800bfe4:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <UART_SetConfig+0xb4>)
 800bfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c091 	.word	0x0800c091
 800bff0:	0800c0c1 	.word	0x0800c0c1
 800bff4:	0800c0c1 	.word	0x0800c0c1
 800bff8:	0800c0c1 	.word	0x0800c0c1
 800bffc:	0800c0c1 	.word	0x0800c0c1
 800c000:	0800c0c1 	.word	0x0800c0c1
 800c004:	0800c0c1 	.word	0x0800c0c1
 800c008:	0800c0c1 	.word	0x0800c0c1
 800c00c:	0800c099 	.word	0x0800c099
 800c010:	0800c0c1 	.word	0x0800c0c1
 800c014:	0800c0c1 	.word	0x0800c0c1
 800c018:	0800c0c1 	.word	0x0800c0c1
 800c01c:	0800c0c1 	.word	0x0800c0c1
 800c020:	0800c0c1 	.word	0x0800c0c1
 800c024:	0800c0c1 	.word	0x0800c0c1
 800c028:	0800c0c1 	.word	0x0800c0c1
 800c02c:	0800c0a1 	.word	0x0800c0a1
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0c1 	.word	0x0800c0c1
 800c038:	0800c0c1 	.word	0x0800c0c1
 800c03c:	0800c0c1 	.word	0x0800c0c1
 800c040:	0800c0c1 	.word	0x0800c0c1
 800c044:	0800c0c1 	.word	0x0800c0c1
 800c048:	0800c0c1 	.word	0x0800c0c1
 800c04c:	0800c0a9 	.word	0x0800c0a9
 800c050:	0800c0c1 	.word	0x0800c0c1
 800c054:	0800c0c1 	.word	0x0800c0c1
 800c058:	0800c0c1 	.word	0x0800c0c1
 800c05c:	0800c0c1 	.word	0x0800c0c1
 800c060:	0800c0c1 	.word	0x0800c0c1
 800c064:	0800c0c1 	.word	0x0800c0c1
 800c068:	0800c0c1 	.word	0x0800c0c1
 800c06c:	0800c0b1 	.word	0x0800c0b1
 800c070:	0800c0c1 	.word	0x0800c0c1
 800c074:	0800c0c1 	.word	0x0800c0c1
 800c078:	0800c0c1 	.word	0x0800c0c1
 800c07c:	0800c0c1 	.word	0x0800c0c1
 800c080:	0800c0c1 	.word	0x0800c0c1
 800c084:	0800c0c1 	.word	0x0800c0c1
 800c088:	0800c0c1 	.word	0x0800c0c1
 800c08c:	0800c0b9 	.word	0x0800c0b9
 800c090:	2301      	movs	r3, #1
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c096:	e222      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c098:	2304      	movs	r3, #4
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09e:	e21e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0a6:	e21a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ae:	e216      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0b0:	2320      	movs	r3, #32
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b6:	e212      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0b8:	2340      	movs	r3, #64	; 0x40
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e20e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0c0:	2380      	movs	r3, #128	; 0x80
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c6:	e20a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a69      	ldr	r2, [pc, #420]	; (800c274 <UART_SetConfig+0x33c>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d130      	bne.n	800c134 <UART_SetConfig+0x1fc>
 800c0d2:	4b67      	ldr	r3, [pc, #412]	; (800c270 <UART_SetConfig+0x338>)
 800c0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d826      	bhi.n	800c12c <UART_SetConfig+0x1f4>
 800c0de:	a201      	add	r2, pc, #4	; (adr r2, 800c0e4 <UART_SetConfig+0x1ac>)
 800c0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e4:	0800c0fd 	.word	0x0800c0fd
 800c0e8:	0800c105 	.word	0x0800c105
 800c0ec:	0800c10d 	.word	0x0800c10d
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c11d 	.word	0x0800c11d
 800c0f8:	0800c125 	.word	0x0800c125
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c102:	e1ec      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c104:	2304      	movs	r3, #4
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10a:	e1e8      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c10c:	2308      	movs	r3, #8
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e1e4      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c114:	2310      	movs	r3, #16
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e1e0      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c11c:	2320      	movs	r3, #32
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e1dc      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e1d8      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c12c:	2380      	movs	r3, #128	; 0x80
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e1d4      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a4f      	ldr	r2, [pc, #316]	; (800c278 <UART_SetConfig+0x340>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d130      	bne.n	800c1a0 <UART_SetConfig+0x268>
 800c13e:	4b4c      	ldr	r3, [pc, #304]	; (800c270 <UART_SetConfig+0x338>)
 800c140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b05      	cmp	r3, #5
 800c148:	d826      	bhi.n	800c198 <UART_SetConfig+0x260>
 800c14a:	a201      	add	r2, pc, #4	; (adr r2, 800c150 <UART_SetConfig+0x218>)
 800c14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c150:	0800c169 	.word	0x0800c169
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c179 	.word	0x0800c179
 800c15c:	0800c181 	.word	0x0800c181
 800c160:	0800c189 	.word	0x0800c189
 800c164:	0800c191 	.word	0x0800c191
 800c168:	2300      	movs	r3, #0
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e1b6      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e1b2      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e1ae      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e1aa      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c188:	2320      	movs	r3, #32
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e1a6      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e1a2      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c198:	2380      	movs	r3, #128	; 0x80
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e19e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a35      	ldr	r2, [pc, #212]	; (800c27c <UART_SetConfig+0x344>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <UART_SetConfig+0x2d4>
 800c1aa:	4b31      	ldr	r3, [pc, #196]	; (800c270 <UART_SetConfig+0x338>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d826      	bhi.n	800c204 <UART_SetConfig+0x2cc>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <UART_SetConfig+0x284>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1dd 	.word	0x0800c1dd
 800c1c4:	0800c1e5 	.word	0x0800c1e5
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1da:	e180      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e17c      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1e4:	2308      	movs	r3, #8
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e178      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e174      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e170      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c1fc:	2340      	movs	r3, #64	; 0x40
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e16c      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c204:	2380      	movs	r3, #128	; 0x80
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e168      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <UART_SetConfig+0x348>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d142      	bne.n	800c29c <UART_SetConfig+0x364>
 800c216:	4b16      	ldr	r3, [pc, #88]	; (800c270 <UART_SetConfig+0x338>)
 800c218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d838      	bhi.n	800c294 <UART_SetConfig+0x35c>
 800c222:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <UART_SetConfig+0x2f0>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c285 	.word	0x0800c285
 800c23c:	0800c28d 	.word	0x0800c28d
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c246:	e14a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e146      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e142      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e13e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c260:	cfff69f3 	.word	0xcfff69f3
 800c264:	58000c00 	.word	0x58000c00
 800c268:	11fff4ff 	.word	0x11fff4ff
 800c26c:	40011000 	.word	0x40011000
 800c270:	58024400 	.word	0x58024400
 800c274:	40004400 	.word	0x40004400
 800c278:	40004800 	.word	0x40004800
 800c27c:	40004c00 	.word	0x40004c00
 800c280:	40005000 	.word	0x40005000
 800c284:	2320      	movs	r3, #32
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e128      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c28c:	2340      	movs	r3, #64	; 0x40
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c292:	e124      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c294:	2380      	movs	r3, #128	; 0x80
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29a:	e120      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4acb      	ldr	r2, [pc, #812]	; (800c5d0 <UART_SetConfig+0x698>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d176      	bne.n	800c394 <UART_SetConfig+0x45c>
 800c2a6:	4bcb      	ldr	r3, [pc, #812]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2ae:	2b28      	cmp	r3, #40	; 0x28
 800c2b0:	d86c      	bhi.n	800c38c <UART_SetConfig+0x454>
 800c2b2:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <UART_SetConfig+0x380>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c35d 	.word	0x0800c35d
 800c2bc:	0800c38d 	.word	0x0800c38d
 800c2c0:	0800c38d 	.word	0x0800c38d
 800c2c4:	0800c38d 	.word	0x0800c38d
 800c2c8:	0800c38d 	.word	0x0800c38d
 800c2cc:	0800c38d 	.word	0x0800c38d
 800c2d0:	0800c38d 	.word	0x0800c38d
 800c2d4:	0800c38d 	.word	0x0800c38d
 800c2d8:	0800c365 	.word	0x0800c365
 800c2dc:	0800c38d 	.word	0x0800c38d
 800c2e0:	0800c38d 	.word	0x0800c38d
 800c2e4:	0800c38d 	.word	0x0800c38d
 800c2e8:	0800c38d 	.word	0x0800c38d
 800c2ec:	0800c38d 	.word	0x0800c38d
 800c2f0:	0800c38d 	.word	0x0800c38d
 800c2f4:	0800c38d 	.word	0x0800c38d
 800c2f8:	0800c36d 	.word	0x0800c36d
 800c2fc:	0800c38d 	.word	0x0800c38d
 800c300:	0800c38d 	.word	0x0800c38d
 800c304:	0800c38d 	.word	0x0800c38d
 800c308:	0800c38d 	.word	0x0800c38d
 800c30c:	0800c38d 	.word	0x0800c38d
 800c310:	0800c38d 	.word	0x0800c38d
 800c314:	0800c38d 	.word	0x0800c38d
 800c318:	0800c375 	.word	0x0800c375
 800c31c:	0800c38d 	.word	0x0800c38d
 800c320:	0800c38d 	.word	0x0800c38d
 800c324:	0800c38d 	.word	0x0800c38d
 800c328:	0800c38d 	.word	0x0800c38d
 800c32c:	0800c38d 	.word	0x0800c38d
 800c330:	0800c38d 	.word	0x0800c38d
 800c334:	0800c38d 	.word	0x0800c38d
 800c338:	0800c37d 	.word	0x0800c37d
 800c33c:	0800c38d 	.word	0x0800c38d
 800c340:	0800c38d 	.word	0x0800c38d
 800c344:	0800c38d 	.word	0x0800c38d
 800c348:	0800c38d 	.word	0x0800c38d
 800c34c:	0800c38d 	.word	0x0800c38d
 800c350:	0800c38d 	.word	0x0800c38d
 800c354:	0800c38d 	.word	0x0800c38d
 800c358:	0800c385 	.word	0x0800c385
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e0bc      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c364:	2304      	movs	r3, #4
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e0b8      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c36c:	2308      	movs	r3, #8
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e0b4      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c374:	2310      	movs	r3, #16
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e0b0      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c37c:	2320      	movs	r3, #32
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c382:	e0ac      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c384:	2340      	movs	r3, #64	; 0x40
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38a:	e0a8      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c38c:	2380      	movs	r3, #128	; 0x80
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c392:	e0a4      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a8f      	ldr	r2, [pc, #572]	; (800c5d8 <UART_SetConfig+0x6a0>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d130      	bne.n	800c400 <UART_SetConfig+0x4c8>
 800c39e:	4b8d      	ldr	r3, [pc, #564]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	d826      	bhi.n	800c3f8 <UART_SetConfig+0x4c0>
 800c3aa:	a201      	add	r2, pc, #4	; (adr r2, 800c3b0 <UART_SetConfig+0x478>)
 800c3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b0:	0800c3c9 	.word	0x0800c3c9
 800c3b4:	0800c3d1 	.word	0x0800c3d1
 800c3b8:	0800c3d9 	.word	0x0800c3d9
 800c3bc:	0800c3e1 	.word	0x0800c3e1
 800c3c0:	0800c3e9 	.word	0x0800c3e9
 800c3c4:	0800c3f1 	.word	0x0800c3f1
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e086      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3d0:	2304      	movs	r3, #4
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e082      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3d8:	2308      	movs	r3, #8
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e07e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3e0:	2310      	movs	r3, #16
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e07a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3e8:	2320      	movs	r3, #32
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e076      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3f0:	2340      	movs	r3, #64	; 0x40
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f6:	e072      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c3f8:	2380      	movs	r3, #128	; 0x80
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fe:	e06e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a75      	ldr	r2, [pc, #468]	; (800c5dc <UART_SetConfig+0x6a4>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d130      	bne.n	800c46c <UART_SetConfig+0x534>
 800c40a:	4b72      	ldr	r3, [pc, #456]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40e:	f003 0307 	and.w	r3, r3, #7
 800c412:	2b05      	cmp	r3, #5
 800c414:	d826      	bhi.n	800c464 <UART_SetConfig+0x52c>
 800c416:	a201      	add	r2, pc, #4	; (adr r2, 800c41c <UART_SetConfig+0x4e4>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c435 	.word	0x0800c435
 800c420:	0800c43d 	.word	0x0800c43d
 800c424:	0800c445 	.word	0x0800c445
 800c428:	0800c44d 	.word	0x0800c44d
 800c42c:	0800c455 	.word	0x0800c455
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2300      	movs	r3, #0
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e050      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e04c      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e048      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e044      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e040      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e03c      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e038      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a5b      	ldr	r2, [pc, #364]	; (800c5e0 <UART_SetConfig+0x6a8>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x5a0>
 800c476:	4b57      	ldr	r3, [pc, #348]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x598>
 800c482:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0x550>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e01a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e016      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e012      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e00e      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e00a      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e006      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e002      	b.n	800c4de <UART_SetConfig+0x5a6>
 800c4d8:	2380      	movs	r3, #128	; 0x80
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a3f      	ldr	r2, [pc, #252]	; (800c5e0 <UART_SetConfig+0x6a8>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	f040 80f8 	bne.w	800c6da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4ee:	2b20      	cmp	r3, #32
 800c4f0:	dc46      	bgt.n	800c580 <UART_SetConfig+0x648>
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	f2c0 8082 	blt.w	800c5fc <UART_SetConfig+0x6c4>
 800c4f8:	3b02      	subs	r3, #2
 800c4fa:	2b1e      	cmp	r3, #30
 800c4fc:	d87e      	bhi.n	800c5fc <UART_SetConfig+0x6c4>
 800c4fe:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <UART_SetConfig+0x5cc>)
 800c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c504:	0800c587 	.word	0x0800c587
 800c508:	0800c5fd 	.word	0x0800c5fd
 800c50c:	0800c58f 	.word	0x0800c58f
 800c510:	0800c5fd 	.word	0x0800c5fd
 800c514:	0800c5fd 	.word	0x0800c5fd
 800c518:	0800c5fd 	.word	0x0800c5fd
 800c51c:	0800c59f 	.word	0x0800c59f
 800c520:	0800c5fd 	.word	0x0800c5fd
 800c524:	0800c5fd 	.word	0x0800c5fd
 800c528:	0800c5fd 	.word	0x0800c5fd
 800c52c:	0800c5fd 	.word	0x0800c5fd
 800c530:	0800c5fd 	.word	0x0800c5fd
 800c534:	0800c5fd 	.word	0x0800c5fd
 800c538:	0800c5fd 	.word	0x0800c5fd
 800c53c:	0800c5af 	.word	0x0800c5af
 800c540:	0800c5fd 	.word	0x0800c5fd
 800c544:	0800c5fd 	.word	0x0800c5fd
 800c548:	0800c5fd 	.word	0x0800c5fd
 800c54c:	0800c5fd 	.word	0x0800c5fd
 800c550:	0800c5fd 	.word	0x0800c5fd
 800c554:	0800c5fd 	.word	0x0800c5fd
 800c558:	0800c5fd 	.word	0x0800c5fd
 800c55c:	0800c5fd 	.word	0x0800c5fd
 800c560:	0800c5fd 	.word	0x0800c5fd
 800c564:	0800c5fd 	.word	0x0800c5fd
 800c568:	0800c5fd 	.word	0x0800c5fd
 800c56c:	0800c5fd 	.word	0x0800c5fd
 800c570:	0800c5fd 	.word	0x0800c5fd
 800c574:	0800c5fd 	.word	0x0800c5fd
 800c578:	0800c5fd 	.word	0x0800c5fd
 800c57c:	0800c5ef 	.word	0x0800c5ef
 800c580:	2b40      	cmp	r3, #64	; 0x40
 800c582:	d037      	beq.n	800c5f4 <UART_SetConfig+0x6bc>
 800c584:	e03a      	b.n	800c5fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c586:	f7fd f963 	bl	8009850 <HAL_RCCEx_GetD3PCLK1Freq>
 800c58a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c58c:	e03c      	b.n	800c608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c592:	4618      	mov	r0, r3
 800c594:	f7fd f972 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e034      	b.n	800c608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59e:	f107 0318 	add.w	r3, r7, #24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fd fabe 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ac:	e02c      	b.n	800c608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5ae:	4b09      	ldr	r3, [pc, #36]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0320 	and.w	r3, r3, #32
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d016      	beq.n	800c5e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5ba:	4b06      	ldr	r3, [pc, #24]	; (800c5d4 <UART_SetConfig+0x69c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	08db      	lsrs	r3, r3, #3
 800c5c0:	f003 0303 	and.w	r3, r3, #3
 800c5c4:	4a07      	ldr	r2, [pc, #28]	; (800c5e4 <UART_SetConfig+0x6ac>)
 800c5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5cc:	e01c      	b.n	800c608 <UART_SetConfig+0x6d0>
 800c5ce:	bf00      	nop
 800c5d0:	40011400 	.word	0x40011400
 800c5d4:	58024400 	.word	0x58024400
 800c5d8:	40007800 	.word	0x40007800
 800c5dc:	40007c00 	.word	0x40007c00
 800c5e0:	58000c00 	.word	0x58000c00
 800c5e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c5e8:	4b9d      	ldr	r3, [pc, #628]	; (800c860 <UART_SetConfig+0x928>)
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ec:	e00c      	b.n	800c608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5ee:	4b9d      	ldr	r3, [pc, #628]	; (800c864 <UART_SetConfig+0x92c>)
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f2:	e009      	b.n	800c608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e005      	b.n	800c608 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c606:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 81de 	beq.w	800c9cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c614:	4a94      	ldr	r2, [pc, #592]	; (800c868 <UART_SetConfig+0x930>)
 800c616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c61a:	461a      	mov	r2, r3
 800c61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c622:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	4613      	mov	r3, r2
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	4413      	add	r3, r2
 800c62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c630:	429a      	cmp	r2, r3
 800c632:	d305      	bcc.n	800c640 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c63a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d903      	bls.n	800c648 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c646:	e1c1      	b.n	800c9cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	2200      	movs	r2, #0
 800c64c:	60bb      	str	r3, [r7, #8]
 800c64e:	60fa      	str	r2, [r7, #12]
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	4a84      	ldr	r2, [pc, #528]	; (800c868 <UART_SetConfig+0x930>)
 800c656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	2200      	movs	r2, #0
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	607a      	str	r2, [r7, #4]
 800c662:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c66a:	f7f3 fe35 	bl	80002d8 <__aeabi_uldivmod>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4610      	mov	r0, r2
 800c674:	4619      	mov	r1, r3
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	f04f 0300 	mov.w	r3, #0
 800c67e:	020b      	lsls	r3, r1, #8
 800c680:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c684:	0202      	lsls	r2, r0, #8
 800c686:	6979      	ldr	r1, [r7, #20]
 800c688:	6849      	ldr	r1, [r1, #4]
 800c68a:	0849      	lsrs	r1, r1, #1
 800c68c:	2000      	movs	r0, #0
 800c68e:	460c      	mov	r4, r1
 800c690:	4605      	mov	r5, r0
 800c692:	eb12 0804 	adds.w	r8, r2, r4
 800c696:	eb43 0905 	adc.w	r9, r3, r5
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	469a      	mov	sl, r3
 800c6a2:	4693      	mov	fp, r2
 800c6a4:	4652      	mov	r2, sl
 800c6a6:	465b      	mov	r3, fp
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f3 fe14 	bl	80002d8 <__aeabi_uldivmod>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6be:	d308      	bcc.n	800c6d2 <UART_SetConfig+0x79a>
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c6:	d204      	bcs.n	800c6d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ce:	60da      	str	r2, [r3, #12]
 800c6d0:	e17c      	b.n	800c9cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c6d8:	e178      	b.n	800c9cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e2:	f040 80c5 	bne.w	800c870 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c6e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	dc48      	bgt.n	800c780 <UART_SetConfig+0x848>
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	db7b      	blt.n	800c7ea <UART_SetConfig+0x8b2>
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	d879      	bhi.n	800c7ea <UART_SetConfig+0x8b2>
 800c6f6:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <UART_SetConfig+0x7c4>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c787 	.word	0x0800c787
 800c700:	0800c78f 	.word	0x0800c78f
 800c704:	0800c7eb 	.word	0x0800c7eb
 800c708:	0800c7eb 	.word	0x0800c7eb
 800c70c:	0800c797 	.word	0x0800c797
 800c710:	0800c7eb 	.word	0x0800c7eb
 800c714:	0800c7eb 	.word	0x0800c7eb
 800c718:	0800c7eb 	.word	0x0800c7eb
 800c71c:	0800c7a7 	.word	0x0800c7a7
 800c720:	0800c7eb 	.word	0x0800c7eb
 800c724:	0800c7eb 	.word	0x0800c7eb
 800c728:	0800c7eb 	.word	0x0800c7eb
 800c72c:	0800c7eb 	.word	0x0800c7eb
 800c730:	0800c7eb 	.word	0x0800c7eb
 800c734:	0800c7eb 	.word	0x0800c7eb
 800c738:	0800c7eb 	.word	0x0800c7eb
 800c73c:	0800c7b7 	.word	0x0800c7b7
 800c740:	0800c7eb 	.word	0x0800c7eb
 800c744:	0800c7eb 	.word	0x0800c7eb
 800c748:	0800c7eb 	.word	0x0800c7eb
 800c74c:	0800c7eb 	.word	0x0800c7eb
 800c750:	0800c7eb 	.word	0x0800c7eb
 800c754:	0800c7eb 	.word	0x0800c7eb
 800c758:	0800c7eb 	.word	0x0800c7eb
 800c75c:	0800c7eb 	.word	0x0800c7eb
 800c760:	0800c7eb 	.word	0x0800c7eb
 800c764:	0800c7eb 	.word	0x0800c7eb
 800c768:	0800c7eb 	.word	0x0800c7eb
 800c76c:	0800c7eb 	.word	0x0800c7eb
 800c770:	0800c7eb 	.word	0x0800c7eb
 800c774:	0800c7eb 	.word	0x0800c7eb
 800c778:	0800c7eb 	.word	0x0800c7eb
 800c77c:	0800c7dd 	.word	0x0800c7dd
 800c780:	2b40      	cmp	r3, #64	; 0x40
 800c782:	d02e      	beq.n	800c7e2 <UART_SetConfig+0x8aa>
 800c784:	e031      	b.n	800c7ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c786:	f7fb fc1f 	bl	8007fc8 <HAL_RCC_GetPCLK1Freq>
 800c78a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c78c:	e033      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c78e:	f7fb fc31 	bl	8007ff4 <HAL_RCC_GetPCLK2Freq>
 800c792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c794:	e02f      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fd f86e 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e027      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a6:	f107 0318 	add.w	r3, r7, #24
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd f9ba 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b4:	e01f      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7b6:	4b2d      	ldr	r3, [pc, #180]	; (800c86c <UART_SetConfig+0x934>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d009      	beq.n	800c7d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7c2:	4b2a      	ldr	r3, [pc, #168]	; (800c86c <UART_SetConfig+0x934>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	08db      	lsrs	r3, r3, #3
 800c7c8:	f003 0303 	and.w	r3, r3, #3
 800c7cc:	4a24      	ldr	r2, [pc, #144]	; (800c860 <UART_SetConfig+0x928>)
 800c7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7d4:	e00f      	b.n	800c7f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c7d6:	4b22      	ldr	r3, [pc, #136]	; (800c860 <UART_SetConfig+0x928>)
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7da:	e00c      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7dc:	4b21      	ldr	r3, [pc, #132]	; (800c864 <UART_SetConfig+0x92c>)
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e0:	e009      	b.n	800c7f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e8:	e005      	b.n	800c7f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80e7 	beq.w	800c9cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c802:	4a19      	ldr	r2, [pc, #100]	; (800c868 <UART_SetConfig+0x930>)
 800c804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c808:	461a      	mov	r2, r3
 800c80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c810:	005a      	lsls	r2, r3, #1
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	441a      	add	r2, r3
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c822:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	2b0f      	cmp	r3, #15
 800c828:	d916      	bls.n	800c858 <UART_SetConfig+0x920>
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c830:	d212      	bcs.n	800c858 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	b29b      	uxth	r3, r3
 800c836:	f023 030f 	bic.w	r3, r3, #15
 800c83a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	b29b      	uxth	r3, r3
 800c842:	f003 0307 	and.w	r3, r3, #7
 800c846:	b29a      	uxth	r2, r3
 800c848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c84a:	4313      	orrs	r3, r2
 800c84c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c854:	60da      	str	r2, [r3, #12]
 800c856:	e0b9      	b.n	800c9cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c85e:	e0b5      	b.n	800c9cc <UART_SetConfig+0xa94>
 800c860:	03d09000 	.word	0x03d09000
 800c864:	003d0900 	.word	0x003d0900
 800c868:	0800dc8c 	.word	0x0800dc8c
 800c86c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c870:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c874:	2b20      	cmp	r3, #32
 800c876:	dc49      	bgt.n	800c90c <UART_SetConfig+0x9d4>
 800c878:	2b00      	cmp	r3, #0
 800c87a:	db7c      	blt.n	800c976 <UART_SetConfig+0xa3e>
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d87a      	bhi.n	800c976 <UART_SetConfig+0xa3e>
 800c880:	a201      	add	r2, pc, #4	; (adr r2, 800c888 <UART_SetConfig+0x950>)
 800c882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c886:	bf00      	nop
 800c888:	0800c913 	.word	0x0800c913
 800c88c:	0800c91b 	.word	0x0800c91b
 800c890:	0800c977 	.word	0x0800c977
 800c894:	0800c977 	.word	0x0800c977
 800c898:	0800c923 	.word	0x0800c923
 800c89c:	0800c977 	.word	0x0800c977
 800c8a0:	0800c977 	.word	0x0800c977
 800c8a4:	0800c977 	.word	0x0800c977
 800c8a8:	0800c933 	.word	0x0800c933
 800c8ac:	0800c977 	.word	0x0800c977
 800c8b0:	0800c977 	.word	0x0800c977
 800c8b4:	0800c977 	.word	0x0800c977
 800c8b8:	0800c977 	.word	0x0800c977
 800c8bc:	0800c977 	.word	0x0800c977
 800c8c0:	0800c977 	.word	0x0800c977
 800c8c4:	0800c977 	.word	0x0800c977
 800c8c8:	0800c943 	.word	0x0800c943
 800c8cc:	0800c977 	.word	0x0800c977
 800c8d0:	0800c977 	.word	0x0800c977
 800c8d4:	0800c977 	.word	0x0800c977
 800c8d8:	0800c977 	.word	0x0800c977
 800c8dc:	0800c977 	.word	0x0800c977
 800c8e0:	0800c977 	.word	0x0800c977
 800c8e4:	0800c977 	.word	0x0800c977
 800c8e8:	0800c977 	.word	0x0800c977
 800c8ec:	0800c977 	.word	0x0800c977
 800c8f0:	0800c977 	.word	0x0800c977
 800c8f4:	0800c977 	.word	0x0800c977
 800c8f8:	0800c977 	.word	0x0800c977
 800c8fc:	0800c977 	.word	0x0800c977
 800c900:	0800c977 	.word	0x0800c977
 800c904:	0800c977 	.word	0x0800c977
 800c908:	0800c969 	.word	0x0800c969
 800c90c:	2b40      	cmp	r3, #64	; 0x40
 800c90e:	d02e      	beq.n	800c96e <UART_SetConfig+0xa36>
 800c910:	e031      	b.n	800c976 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c912:	f7fb fb59 	bl	8007fc8 <HAL_RCC_GetPCLK1Freq>
 800c916:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c918:	e033      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c91a:	f7fb fb6b 	bl	8007ff4 <HAL_RCC_GetPCLK2Freq>
 800c91e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c920:	e02f      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c926:	4618      	mov	r0, r3
 800c928:	f7fc ffa8 	bl	800987c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c930:	e027      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c932:	f107 0318 	add.w	r3, r7, #24
 800c936:	4618      	mov	r0, r3
 800c938:	f7fd f8f4 	bl	8009b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e01f      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c942:	4b2d      	ldr	r3, [pc, #180]	; (800c9f8 <UART_SetConfig+0xac0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0320 	and.w	r3, r3, #32
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d009      	beq.n	800c962 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c94e:	4b2a      	ldr	r3, [pc, #168]	; (800c9f8 <UART_SetConfig+0xac0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	08db      	lsrs	r3, r3, #3
 800c954:	f003 0303 	and.w	r3, r3, #3
 800c958:	4a28      	ldr	r2, [pc, #160]	; (800c9fc <UART_SetConfig+0xac4>)
 800c95a:	fa22 f303 	lsr.w	r3, r2, r3
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c960:	e00f      	b.n	800c982 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c962:	4b26      	ldr	r3, [pc, #152]	; (800c9fc <UART_SetConfig+0xac4>)
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c966:	e00c      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c968:	4b25      	ldr	r3, [pc, #148]	; (800ca00 <UART_SetConfig+0xac8>)
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96c:	e009      	b.n	800c982 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c974:	e005      	b.n	800c982 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c976:	2300      	movs	r3, #0
 800c978:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c980:	bf00      	nop
    }

    if (pclk != 0U)
 800c982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c984:	2b00      	cmp	r3, #0
 800c986:	d021      	beq.n	800c9cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <UART_SetConfig+0xacc>)
 800c98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c992:	461a      	mov	r2, r3
 800c994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c996:	fbb3 f2f2 	udiv	r2, r3, r2
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	441a      	add	r2, r3
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	2b0f      	cmp	r3, #15
 800c9b0:	d909      	bls.n	800c9c6 <UART_SetConfig+0xa8e>
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b8:	d205      	bcs.n	800c9c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	60da      	str	r2, [r3, #12]
 800c9c4:	e002      	b.n	800c9cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c9e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3748      	adds	r7, #72	; 0x48
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9f6:	bf00      	nop
 800c9f8:	58024400 	.word	0x58024400
 800c9fc:	03d09000 	.word	0x03d09000
 800ca00:	003d0900 	.word	0x003d0900
 800ca04:	0800dc8c 	.word	0x0800dc8c

0800ca08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	f003 0302 	and.w	r3, r3, #2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	430a      	orrs	r2, r1
 800ca52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	f003 0304 	and.w	r3, r3, #4
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	430a      	orrs	r2, r1
 800ca74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	f003 0308 	and.w	r3, r3, #8
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00a      	beq.n	800caba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabe:	f003 0320 	and.w	r3, r3, #32
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00a      	beq.n	800cadc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01a      	beq.n	800cb1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	430a      	orrs	r2, r1
 800cafc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb06:	d10a      	bne.n	800cb1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00a      	beq.n	800cb40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	430a      	orrs	r2, r1
 800cb3e:	605a      	str	r2, [r3, #4]
  }
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb5c:	f7f5 fc04 	bl	8002368 <HAL_GetTick>
 800cb60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0308 	and.w	r3, r3, #8
 800cb6c:	2b08      	cmp	r3, #8
 800cb6e:	d10e      	bne.n	800cb8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f82f 	bl	800cbe2 <UART_WaitOnFlagUntilTimeout>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	e025      	b.n	800cbda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d10e      	bne.n	800cbba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f819 	bl	800cbe2 <UART_WaitOnFlagUntilTimeout>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e00f      	b.n	800cbda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2220      	movs	r2, #32
 800cbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2220      	movs	r2, #32
 800cbc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b09c      	sub	sp, #112	; 0x70
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	603b      	str	r3, [r7, #0]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf2:	e0a9      	b.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbfa:	f000 80a5 	beq.w	800cd48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbfe:	f7f5 fbb3 	bl	8002368 <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d302      	bcc.n	800cc14 <UART_WaitOnFlagUntilTimeout+0x32>
 800cc0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d140      	bne.n	800cc96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc1c:	e853 3f00 	ldrex	r3, [r3]
 800cc20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc28:	667b      	str	r3, [r7, #100]	; 0x64
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc3a:	e841 2300 	strex	r3, r2, [r1]
 800cc3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1e6      	bne.n	800cc14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	f023 0301 	bic.w	r3, r3, #1
 800cc5c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3308      	adds	r3, #8
 800cc64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc66:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc6e:	e841 2300 	strex	r3, r2, [r1]
 800cc72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e5      	bne.n	800cc46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2220      	movs	r2, #32
 800cc86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cc92:	2303      	movs	r3, #3
 800cc94:	e069      	b.n	800cd6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 0304 	and.w	r3, r3, #4
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d051      	beq.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccb2:	d149      	bne.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	e853 3f00 	ldrex	r3, [r3]
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ccd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccdc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cce4:	e841 2300 	strex	r3, r2, [r1]
 800cce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1e6      	bne.n	800ccbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	e853 3f00 	ldrex	r3, [r3]
 800ccfe:	613b      	str	r3, [r7, #16]
   return(result);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f023 0301 	bic.w	r3, r3, #1
 800cd06:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3308      	adds	r3, #8
 800cd0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd10:	623a      	str	r2, [r7, #32]
 800cd12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd14:	69f9      	ldr	r1, [r7, #28]
 800cd16:	6a3a      	ldr	r2, [r7, #32]
 800cd18:	e841 2300 	strex	r3, r2, [r1]
 800cd1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1e5      	bne.n	800ccf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2220      	movs	r2, #32
 800cd28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e010      	b.n	800cd6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69da      	ldr	r2, [r3, #28]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	4013      	ands	r3, r2
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	bf0c      	ite	eq
 800cd58:	2301      	moveq	r3, #1
 800cd5a:	2300      	movne	r3, #0
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	461a      	mov	r2, r3
 800cd60:	79fb      	ldrb	r3, [r7, #7]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	f43f af46 	beq.w	800cbf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3770      	adds	r7, #112	; 0x70
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
	...

0800cd74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b0a3      	sub	sp, #140	; 0x8c
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	88fa      	ldrh	r2, [r7, #6]
 800cd8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	88fa      	ldrh	r2, [r7, #6]
 800cd94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda6:	d10e      	bne.n	800cdc6 <UART_Start_Receive_IT+0x52>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d105      	bne.n	800cdbc <UART_Start_Receive_IT+0x48>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cdb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdba:	e02d      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	22ff      	movs	r2, #255	; 0xff
 800cdc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdc4:	e028      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10d      	bne.n	800cdea <UART_Start_Receive_IT+0x76>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d104      	bne.n	800cde0 <UART_Start_Receive_IT+0x6c>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdde:	e01b      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	227f      	movs	r2, #127	; 0x7f
 800cde4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cde8:	e016      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdf2:	d10d      	bne.n	800ce10 <UART_Start_Receive_IT+0x9c>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <UART_Start_Receive_IT+0x92>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	227f      	movs	r2, #127	; 0x7f
 800ce00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce04:	e008      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	223f      	movs	r2, #63	; 0x3f
 800ce0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce0e:	e003      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2222      	movs	r2, #34	; 0x22
 800ce24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce32:	e853 3f00 	ldrex	r3, [r3]
 800ce36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ce38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3308      	adds	r3, #8
 800ce48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ce4c:	673a      	str	r2, [r7, #112]	; 0x70
 800ce4e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce54:	e841 2300 	strex	r3, r2, [r1]
 800ce58:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ce5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1e3      	bne.n	800ce28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce68:	d153      	bne.n	800cf12 <UART_Start_Receive_IT+0x19e>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce70:	88fa      	ldrh	r2, [r7, #6]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d34d      	bcc.n	800cf12 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce7e:	d107      	bne.n	800ce90 <UART_Start_Receive_IT+0x11c>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	4a4b      	ldr	r2, [pc, #300]	; (800cfb8 <UART_Start_Receive_IT+0x244>)
 800ce8c:	671a      	str	r2, [r3, #112]	; 0x70
 800ce8e:	e002      	b.n	800ce96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4a4a      	ldr	r2, [pc, #296]	; (800cfbc <UART_Start_Receive_IT+0x248>)
 800ce94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d01a      	beq.n	800cedc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ceb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ced6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e4      	bne.n	800cea6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3308      	adds	r3, #8
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee6:	e853 3f00 	ldrex	r3, [r3]
 800ceea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cef2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3308      	adds	r3, #8
 800cefa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cefc:	64ba      	str	r2, [r7, #72]	; 0x48
 800cefe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e5      	bne.n	800cedc <UART_Start_Receive_IT+0x168>
 800cf10:	e04a      	b.n	800cfa8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf1a:	d107      	bne.n	800cf2c <UART_Start_Receive_IT+0x1b8>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d103      	bne.n	800cf2c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4a26      	ldr	r2, [pc, #152]	; (800cfc0 <UART_Start_Receive_IT+0x24c>)
 800cf28:	671a      	str	r2, [r3, #112]	; 0x70
 800cf2a:	e002      	b.n	800cf32 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4a25      	ldr	r2, [pc, #148]	; (800cfc4 <UART_Start_Receive_IT+0x250>)
 800cf30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d019      	beq.n	800cf76 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	e853 3f00 	ldrex	r3, [r3]
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cf56:	677b      	str	r3, [r7, #116]	; 0x74
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf60:	637b      	str	r3, [r7, #52]	; 0x34
 800cf62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e6      	bne.n	800cf42 <UART_Start_Receive_IT+0x1ce>
 800cf74:	e018      	b.n	800cfa8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	613b      	str	r3, [r7, #16]
   return(result);
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	f043 0320 	orr.w	r3, r3, #32
 800cf8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf94:	623b      	str	r3, [r7, #32]
 800cf96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	69f9      	ldr	r1, [r7, #28]
 800cf9a:	6a3a      	ldr	r2, [r7, #32]
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e6      	bne.n	800cf76 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	378c      	adds	r7, #140	; 0x8c
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	0800d581 	.word	0x0800d581
 800cfbc:	0800d289 	.word	0x0800d289
 800cfc0:	0800d129 	.word	0x0800d129
 800cfc4:	0800cfc9 	.word	0x0800cfc9

0800cfc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b096      	sub	sp, #88	; 0x58
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfd6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe0:	2b22      	cmp	r3, #34	; 0x22
 800cfe2:	f040 8095 	bne.w	800d110 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cff0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cff4:	b2d9      	uxtb	r1, r3
 800cff6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d000:	400a      	ands	r2, r1
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d016:	b29b      	uxth	r3, r3
 800d018:	3b01      	subs	r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d028:	b29b      	uxth	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d178      	bne.n	800d120 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	e853 3f00 	ldrex	r3, [r3]
 800d03a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d042:	653b      	str	r3, [r7, #80]	; 0x50
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	461a      	mov	r2, r3
 800d04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04c:	647b      	str	r3, [r7, #68]	; 0x44
 800d04e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d054:	e841 2300 	strex	r3, r2, [r1]
 800d058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e6      	bne.n	800d02e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3308      	adds	r3, #8
 800d066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	e853 3f00 	ldrex	r3, [r3]
 800d06e:	623b      	str	r3, [r7, #32]
   return(result);
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	f023 0301 	bic.w	r3, r3, #1
 800d076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d080:	633a      	str	r2, [r7, #48]	; 0x30
 800d082:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d088:	e841 2300 	strex	r3, r2, [r1]
 800d08c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e5      	bne.n	800d060 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2220      	movs	r2, #32
 800d098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d12e      	bne.n	800d108 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	e853 3f00 	ldrex	r3, [r3]
 800d0bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f023 0310 	bic.w	r3, r3, #16
 800d0c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ce:	61fb      	str	r3, [r7, #28]
 800d0d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d2:	69b9      	ldr	r1, [r7, #24]
 800d0d4:	69fa      	ldr	r2, [r7, #28]
 800d0d6:	e841 2300 	strex	r3, r2, [r1]
 800d0da:	617b      	str	r3, [r7, #20]
   return(result);
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e6      	bne.n	800d0b0 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	f003 0310 	and.w	r3, r3, #16
 800d0ec:	2b10      	cmp	r3, #16
 800d0ee:	d103      	bne.n	800d0f8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2210      	movs	r2, #16
 800d0f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0fe:	4619      	mov	r1, r3
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7fe ff0d 	bl	800bf20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d106:	e00b      	b.n	800d120 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7f3 fdcb 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800d10e:	e007      	b.n	800d120 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	699a      	ldr	r2, [r3, #24]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f042 0208 	orr.w	r2, r2, #8
 800d11e:	619a      	str	r2, [r3, #24]
}
 800d120:	bf00      	nop
 800d122:	3758      	adds	r7, #88	; 0x58
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b096      	sub	sp, #88	; 0x58
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d136:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d140:	2b22      	cmp	r3, #34	; 0x22
 800d142:	f040 8095 	bne.w	800d270 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d154:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d156:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d15a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d15e:	4013      	ands	r3, r2
 800d160:	b29a      	uxth	r2, r3
 800d162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d164:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d16a:	1c9a      	adds	r2, r3, #2
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d176:	b29b      	uxth	r3, r3
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d178      	bne.n	800d280 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	e853 3f00 	ldrex	r3, [r3]
 800d19a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d1ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e6      	bne.n	800d18e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	e853 3f00 	ldrex	r3, [r3]
 800d1ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	f023 0301 	bic.w	r3, r3, #1
 800d1d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e8:	e841 2300 	strex	r3, r2, [r1]
 800d1ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1e5      	bne.n	800d1c0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d206:	2b01      	cmp	r3, #1
 800d208:	d12e      	bne.n	800d268 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	e853 3f00 	ldrex	r3, [r3]
 800d21c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f023 0310 	bic.w	r3, r3, #16
 800d224:	647b      	str	r3, [r7, #68]	; 0x44
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d22e:	61bb      	str	r3, [r7, #24]
 800d230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d232:	6979      	ldr	r1, [r7, #20]
 800d234:	69ba      	ldr	r2, [r7, #24]
 800d236:	e841 2300 	strex	r3, r2, [r1]
 800d23a:	613b      	str	r3, [r7, #16]
   return(result);
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1e6      	bne.n	800d210 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	69db      	ldr	r3, [r3, #28]
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b10      	cmp	r3, #16
 800d24e:	d103      	bne.n	800d258 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2210      	movs	r2, #16
 800d256:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7fe fe5d 	bl	800bf20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d266:	e00b      	b.n	800d280 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7f3 fd1b 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800d26e:	e007      	b.n	800d280 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	699a      	ldr	r2, [r3, #24]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f042 0208 	orr.w	r2, r2, #8
 800d27e:	619a      	str	r2, [r3, #24]
}
 800d280:	bf00      	nop
 800d282:	3758      	adds	r7, #88	; 0x58
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b0a6      	sub	sp, #152	; 0x98
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d296:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2be:	2b22      	cmp	r3, #34	; 0x22
 800d2c0:	f040 814d 	bne.w	800d55e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d2ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d2ce:	e0f4      	b.n	800d4ba <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d2da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d2de:	b2d9      	uxtb	r1, r3
 800d2e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ea:	400a      	ands	r2, r1
 800d2ec:	b2d2      	uxtb	r2, r2
 800d2ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d300:	b29b      	uxth	r3, r3
 800d302:	3b01      	subs	r3, #1
 800d304:	b29a      	uxth	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d053      	beq.n	800d3ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d011      	beq.n	800d352 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d32e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00b      	beq.n	800d352 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2201      	movs	r2, #1
 800d340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d348:	f043 0201 	orr.w	r2, r3, #1
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d011      	beq.n	800d382 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d35e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00b      	beq.n	800d382 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2202      	movs	r2, #2
 800d370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d378:	f043 0204 	orr.w	r2, r3, #4
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d386:	f003 0304 	and.w	r3, r3, #4
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d011      	beq.n	800d3b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d38e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00b      	beq.n	800d3b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2204      	movs	r2, #4
 800d3a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3a8:	f043 0202 	orr.w	r2, r3, #2
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d006      	beq.n	800d3ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7fe fda5 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d171      	bne.n	800d4ba <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3de:	e853 3f00 	ldrex	r3, [r3]
 800d3e2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d3e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3fa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d3fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d400:	e841 2300 	strex	r3, r2, [r1]
 800d404:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1e4      	bne.n	800d3d6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3308      	adds	r3, #8
 800d412:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d416:	e853 3f00 	ldrex	r3, [r3]
 800d41a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d41c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d41e:	4b56      	ldr	r3, [pc, #344]	; (800d578 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800d420:	4013      	ands	r3, r2
 800d422:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3308      	adds	r3, #8
 800d42a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d42c:	657a      	str	r2, [r7, #84]	; 0x54
 800d42e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d434:	e841 2300 	strex	r3, r2, [r1]
 800d438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1e5      	bne.n	800d40c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2220      	movs	r2, #32
 800d444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d452:	2b01      	cmp	r3, #1
 800d454:	d12e      	bne.n	800d4b4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	f023 0310 	bic.w	r3, r3, #16
 800d470:	67bb      	str	r3, [r7, #120]	; 0x78
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d47a:	643b      	str	r3, [r7, #64]	; 0x40
 800d47c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e6      	bne.n	800d45c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	f003 0310 	and.w	r3, r3, #16
 800d498:	2b10      	cmp	r3, #16
 800d49a:	d103      	bne.n	800d4a4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7fe fd37 	bl	800bf20 <HAL_UARTEx_RxEventCallback>
 800d4b2:	e002      	b.n	800d4ba <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7f3 fbf5 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d006      	beq.n	800d4d0 <UART_RxISR_8BIT_FIFOEN+0x248>
 800d4c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f47f af00 	bne.w	800d2d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d4da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d045      	beq.n	800d56e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d23e      	bcs.n	800d56e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f8:	6a3b      	ldr	r3, [r7, #32]
 800d4fa:	e853 3f00 	ldrex	r3, [r3]
 800d4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d506:	673b      	str	r3, [r7, #112]	; 0x70
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3308      	adds	r3, #8
 800d50e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d518:	e841 2300 	strex	r3, r2, [r1]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e5      	bne.n	800d4f0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a15      	ldr	r2, [pc, #84]	; (800d57c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d528:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	e853 3f00 	ldrex	r3, [r3]
 800d536:	60bb      	str	r3, [r7, #8]
   return(result);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f043 0320 	orr.w	r3, r3, #32
 800d53e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	6979      	ldr	r1, [r7, #20]
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	613b      	str	r3, [r7, #16]
   return(result);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e6      	bne.n	800d52a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d55c:	e007      	b.n	800d56e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	699a      	ldr	r2, [r3, #24]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f042 0208 	orr.w	r2, r2, #8
 800d56c:	619a      	str	r2, [r3, #24]
}
 800d56e:	bf00      	nop
 800d570:	3798      	adds	r7, #152	; 0x98
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	effffffe 	.word	0xeffffffe
 800d57c:	0800cfc9 	.word	0x0800cfc9

0800d580 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b0a8      	sub	sp, #160	; 0xa0
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d58e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b6:	2b22      	cmp	r3, #34	; 0x22
 800d5b8:	f040 8151 	bne.w	800d85e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5c6:	e0f8      	b.n	800d7ba <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d5da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d5de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5f0:	1c9a      	adds	r2, r3, #2
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	3b01      	subs	r3, #1
 800d600:	b29a      	uxth	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d616:	f003 0307 	and.w	r3, r3, #7
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d053      	beq.n	800d6c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d61e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d011      	beq.n	800d64e <UART_RxISR_16BIT_FIFOEN+0xce>
 800d62a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00b      	beq.n	800d64e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2201      	movs	r2, #1
 800d63c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d644:	f043 0201 	orr.w	r2, r3, #1
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d64e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d652:	f003 0302 	and.w	r3, r3, #2
 800d656:	2b00      	cmp	r3, #0
 800d658:	d011      	beq.n	800d67e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d65a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00b      	beq.n	800d67e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2202      	movs	r2, #2
 800d66c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d674:	f043 0204 	orr.w	r2, r3, #4
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d67e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d011      	beq.n	800d6ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d68a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00b      	beq.n	800d6ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2204      	movs	r2, #4
 800d69c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a4:	f043 0202 	orr.w	r2, r3, #2
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d006      	beq.n	800d6c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7fe fc27 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d173      	bne.n	800d7ba <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6da:	e853 3f00 	ldrex	r3, [r3]
 800d6de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d6e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6f6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e4      	bne.n	800d6d2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3308      	adds	r3, #8
 800d70e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d71a:	4b57      	ldr	r3, [pc, #348]	; (800d878 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800d71c:	4013      	ands	r3, r2
 800d71e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3308      	adds	r3, #8
 800d728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d72c:	65ba      	str	r2, [r7, #88]	; 0x58
 800d72e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d734:	e841 2300 	strex	r3, r2, [r1]
 800d738:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e3      	bne.n	800d708 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2220      	movs	r2, #32
 800d744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d752:	2b01      	cmp	r3, #1
 800d754:	d12e      	bne.n	800d7b4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76c:	f023 0310 	bic.w	r3, r3, #16
 800d770:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d77a:	647b      	str	r3, [r7, #68]	; 0x44
 800d77c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d782:	e841 2300 	strex	r3, r2, [r1]
 800d786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e6      	bne.n	800d75c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	f003 0310 	and.w	r3, r3, #16
 800d798:	2b10      	cmp	r3, #16
 800d79a:	d103      	bne.n	800d7a4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2210      	movs	r2, #16
 800d7a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7fe fbb7 	bl	800bf20 <HAL_UARTEx_RxEventCallback>
 800d7b2:	e002      	b.n	800d7ba <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7f3 fa75 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d7ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d006      	beq.n	800d7d0 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d7c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7c6:	f003 0320 	and.w	r3, r3, #32
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f47f aefc 	bne.w	800d5c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d7da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d045      	beq.n	800d86e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d7e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d23e      	bcs.n	800d86e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	e853 3f00 	ldrex	r3, [r3]
 800d7fe:	623b      	str	r3, [r7, #32]
   return(result);
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d806:	677b      	str	r3, [r7, #116]	; 0x74
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d810:	633a      	str	r2, [r7, #48]	; 0x30
 800d812:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d818:	e841 2300 	strex	r3, r2, [r1]
 800d81c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1e5      	bne.n	800d7f0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a15      	ldr	r2, [pc, #84]	; (800d87c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d828:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	e853 3f00 	ldrex	r3, [r3]
 800d836:	60fb      	str	r3, [r7, #12]
   return(result);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f043 0320 	orr.w	r3, r3, #32
 800d83e:	673b      	str	r3, [r7, #112]	; 0x70
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d848:	61fb      	str	r3, [r7, #28]
 800d84a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d84c:	69b9      	ldr	r1, [r7, #24]
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	e841 2300 	strex	r3, r2, [r1]
 800d854:	617b      	str	r3, [r7, #20]
   return(result);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e6      	bne.n	800d82a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d85c:	e007      	b.n	800d86e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	699a      	ldr	r2, [r3, #24]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f042 0208 	orr.w	r2, r2, #8
 800d86c:	619a      	str	r2, [r3, #24]
}
 800d86e:	bf00      	nop
 800d870:	37a0      	adds	r7, #160	; 0xa0
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	effffffe 	.word	0xeffffffe
 800d87c:	0800d129 	.word	0x0800d129

0800d880 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af02      	add	r7, sp, #8
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	1d3b      	adds	r3, r7, #4
 800d88a:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d101      	bne.n	800d8a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800d89c:	2302      	movs	r3, #2
 800d89e:	e046      	b.n	800d92e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2224      	movs	r2, #36	; 0x24
 800d8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f022 0201 	bic.w	r2, r2, #1
 800d8be:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d105      	bne.n	800d8e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800d8da:	1d3b      	adds	r3, r7, #4
 800d8dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 f910 	bl	800db06 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f042 0201 	orr.w	r2, r2, #1
 800d8f4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8f6:	f7f4 fd37 	bl	8002368 <HAL_GetTick>
 800d8fa:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	2200      	movs	r2, #0
 800d906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f7ff f969 	bl	800cbe2 <UART_WaitOnFlagUntilTimeout>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d002      	beq.n	800d91c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800d916:	2303      	movs	r3, #3
 800d918:	75fb      	strb	r3, [r7, #23]
 800d91a:	e003      	b.n	800d924 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2220      	movs	r2, #32
 800d920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800d936:	b480      	push	{r7}
 800d938:	b089      	sub	sp, #36	; 0x24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d944:	2b01      	cmp	r3, #1
 800d946:	d101      	bne.n	800d94c <HAL_UARTEx_EnableStopMode+0x16>
 800d948:	2302      	movs	r3, #2
 800d94a:	e021      	b.n	800d990 <HAL_UARTEx_EnableStopMode+0x5a>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	60bb      	str	r3, [r7, #8]
   return(result);
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f043 0302 	orr.w	r3, r3, #2
 800d968:	61fb      	str	r3, [r7, #28]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	61bb      	str	r3, [r7, #24]
 800d974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	6979      	ldr	r1, [r7, #20]
 800d978:	69ba      	ldr	r2, [r7, #24]
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	613b      	str	r3, [r7, #16]
   return(result);
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e6      	bne.n	800d954 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3724      	adds	r7, #36	; 0x24
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d101      	bne.n	800d9b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	e027      	b.n	800da02 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2224      	movs	r2, #36	; 0x24
 800d9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f022 0201 	bic.w	r2, r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b084      	sub	sp, #16
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d101      	bne.n	800da26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da22:	2302      	movs	r3, #2
 800da24:	e02d      	b.n	800da82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2224      	movs	r2, #36	; 0x24
 800da32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f022 0201 	bic.w	r2, r2, #1
 800da4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	430a      	orrs	r2, r1
 800da60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f872 	bl	800db4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2220      	movs	r2, #32
 800da74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d101      	bne.n	800daa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da9e:	2302      	movs	r3, #2
 800daa0:	e02d      	b.n	800dafe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2224      	movs	r2, #36	; 0x24
 800daae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f022 0201 	bic.w	r2, r2, #1
 800dac8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	683a      	ldr	r2, [r7, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 f834 	bl	800db4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2220      	movs	r2, #32
 800daf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800db06:	b480      	push	{r7}
 800db08:	b085      	sub	sp, #20
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	60f8      	str	r0, [r7, #12]
 800db0e:	1d3b      	adds	r3, r7, #4
 800db10:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f023 0210 	bic.w	r2, r3, #16
 800db1e:	893b      	ldrh	r3, [r7, #8]
 800db20:	4619      	mov	r1, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800db34:	7abb      	ldrb	r3, [r7, #10]
 800db36:	061a      	lsls	r2, r3, #24
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	430a      	orrs	r2, r1
 800db3e:	605a      	str	r2, [r3, #4]
}
 800db40:	bf00      	nop
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d108      	bne.n	800db6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db6c:	e031      	b.n	800dbd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db6e:	2310      	movs	r3, #16
 800db70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db72:	2310      	movs	r3, #16
 800db74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	0e5b      	lsrs	r3, r3, #25
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f003 0307 	and.w	r3, r3, #7
 800db84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	0f5b      	lsrs	r3, r3, #29
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	f003 0307 	and.w	r3, r3, #7
 800db94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db96:	7bbb      	ldrb	r3, [r7, #14]
 800db98:	7b3a      	ldrb	r2, [r7, #12]
 800db9a:	4911      	ldr	r1, [pc, #68]	; (800dbe0 <UARTEx_SetNbDataToProcess+0x94>)
 800db9c:	5c8a      	ldrb	r2, [r1, r2]
 800db9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dba2:	7b3a      	ldrb	r2, [r7, #12]
 800dba4:	490f      	ldr	r1, [pc, #60]	; (800dbe4 <UARTEx_SetNbDataToProcess+0x98>)
 800dba6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dba8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
 800dbb6:	7b7a      	ldrb	r2, [r7, #13]
 800dbb8:	4909      	ldr	r1, [pc, #36]	; (800dbe0 <UARTEx_SetNbDataToProcess+0x94>)
 800dbba:	5c8a      	ldrb	r2, [r1, r2]
 800dbbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dbc0:	7b7a      	ldrb	r2, [r7, #13]
 800dbc2:	4908      	ldr	r1, [pc, #32]	; (800dbe4 <UARTEx_SetNbDataToProcess+0x98>)
 800dbc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dbd2:	bf00      	nop
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	0800dca4 	.word	0x0800dca4
 800dbe4:	0800dcac 	.word	0x0800dcac

0800dbe8 <__libc_init_array>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	4d0d      	ldr	r5, [pc, #52]	; (800dc20 <__libc_init_array+0x38>)
 800dbec:	4c0d      	ldr	r4, [pc, #52]	; (800dc24 <__libc_init_array+0x3c>)
 800dbee:	1b64      	subs	r4, r4, r5
 800dbf0:	10a4      	asrs	r4, r4, #2
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	42a6      	cmp	r6, r4
 800dbf6:	d109      	bne.n	800dc0c <__libc_init_array+0x24>
 800dbf8:	4d0b      	ldr	r5, [pc, #44]	; (800dc28 <__libc_init_array+0x40>)
 800dbfa:	4c0c      	ldr	r4, [pc, #48]	; (800dc2c <__libc_init_array+0x44>)
 800dbfc:	f000 f820 	bl	800dc40 <_init>
 800dc00:	1b64      	subs	r4, r4, r5
 800dc02:	10a4      	asrs	r4, r4, #2
 800dc04:	2600      	movs	r6, #0
 800dc06:	42a6      	cmp	r6, r4
 800dc08:	d105      	bne.n	800dc16 <__libc_init_array+0x2e>
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
 800dc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc10:	4798      	blx	r3
 800dc12:	3601      	adds	r6, #1
 800dc14:	e7ee      	b.n	800dbf4 <__libc_init_array+0xc>
 800dc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc1a:	4798      	blx	r3
 800dc1c:	3601      	adds	r6, #1
 800dc1e:	e7f2      	b.n	800dc06 <__libc_init_array+0x1e>
 800dc20:	0800dcbc 	.word	0x0800dcbc
 800dc24:	0800dcbc 	.word	0x0800dcbc
 800dc28:	0800dcbc 	.word	0x0800dcbc
 800dc2c:	0800dcc0 	.word	0x0800dcc0

0800dc30 <memset>:
 800dc30:	4402      	add	r2, r0
 800dc32:	4603      	mov	r3, r0
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d100      	bne.n	800dc3a <memset+0xa>
 800dc38:	4770      	bx	lr
 800dc3a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc3e:	e7f9      	b.n	800dc34 <memset+0x4>

0800dc40 <_init>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr

0800dc4c <_fini>:
 800dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4e:	bf00      	nop
 800dc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc52:	bc08      	pop	{r3}
 800dc54:	469e      	mov	lr, r3
 800dc56:	4770      	bx	lr
