
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010040  08010040  00020040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  08010050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d0  240000a0  080100e4  000300a0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000670  080100e4  00030670  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a35  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036cd  00000000  00000000  00053af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b10  00000000  00000000  000571c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019c8  00000000  00000000  00058cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b5ee  00000000  00000000  0005a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023fbf  00000000  00000000  00095c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018148e  00000000  00000000  000b9c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023b0db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077ec  00000000  00000000  0023b12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ffd0 	.word	0x0800ffd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	0800ffd0 	.word	0x0800ffd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fa44 	bl	8007ab4 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
                                1000);
  if (ret != HAL_OK)
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fb1e 	bl	8007c9c <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
                                 1000);
    if (ret != HAL_OK)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
      output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
    }
  }
  return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000288 	.word	0x24000288
 80006a0:	0800ffe8 	.word	0x0800ffe8
 80006a4:	0800fff4 	.word	0x0800fff4

080006a8 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

  int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f00f fb60 	bl	800fda4 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
  return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a9f      	ldr	r2, [pc, #636]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 800071c:	4293      	cmp	r3, r2
 800071e:	f040 820b 	bne.w	8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x428>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000722:	4b9e      	ldr	r3, [pc, #632]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	f000 809f 	beq.w	800086a <HAL_TIM_OC_DelayElapsedCallback+0x15a>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 800072c:	bf00      	nop
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	489b      	ldr	r0, [pc, #620]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000734:	f007 f8fc 	bl	8007930 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f7      	bne.n	800072e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 800073e:	2301      	movs	r3, #1
 8000740:	2201      	movs	r2, #1
 8000742:	4998      	ldr	r1, [pc, #608]	; (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000744:	4898      	ldr	r0, [pc, #608]	; (80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 8000746:	f00b f971 	bl	800ba2c <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000750:	4b94      	ldr	r3, [pc, #592]	; (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x294>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b92      	ldr	r3, [pc, #584]	; (80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x298>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000766:	601a      	str	r2, [r3, #0]

		uint32_t current_step = DAC_OUT[step];
 8000768:	4b90      	ldr	r3, [pc, #576]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x29c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b90      	ldr	r3, [pc, #576]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000776:	4b8d      	ldr	r3, [pc, #564]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x29c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b8c      	ldr	r3, [pc, #560]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 800077e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	488b      	ldr	r0, [pc, #556]	; (80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 8000788:	f003 ff91 	bl	80046ae <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800078c:	2100      	movs	r1, #0
 800078e:	4889      	ldr	r0, [pc, #548]	; (80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 8000790:	f003 ff3b 	bl	800460a <HAL_DAC_Start>

        HAL_ADC_Stop_DMA(&hadc1);
 8000794:	4888      	ldr	r0, [pc, #544]	; (80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 8000796:	f002 fd6b 	bl	8003270 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 800079a:	2220      	movs	r2, #32
 800079c:	4987      	ldr	r1, [pc, #540]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800079e:	4886      	ldr	r0, [pc, #536]	; (80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80007a0:	f002 fca2 	bl	80030e8 <HAL_ADC_Start_DMA>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_TIM_OC_DelayElapsedCallback+0x9e>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 80007aa:	f001 faa9 	bl	8001d00 <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007b0:	8b5b      	ldrh	r3, [r3, #26]
 80007b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 80007b4:	4b81      	ldr	r3, [pc, #516]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007b6:	8b9b      	ldrh	r3, [r3, #28]
 80007b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 80007ba:	4b80      	ldr	r3, [pc, #512]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007bc:	8bdb      	ldrh	r3, [r3, #30]
 80007be:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 80007c0:	4b7e      	ldr	r3, [pc, #504]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	853b      	strh	r3, [r7, #40]	; 0x28

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80007c6:	22aa      	movs	r2, #170	; 0xaa
 80007c8:	4b7d      	ldr	r3, [pc, #500]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007ca:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80007cc:	22aa      	movs	r2, #170	; 0xaa
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007d0:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80007d2:	4b7c      	ldr	r3, [pc, #496]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b78      	ldr	r3, [pc, #480]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007de:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80007e0:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b76      	ldr	r3, [pc, #472]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007e8:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80007ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007f4:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 80007f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 80007fc:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80007fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b29b      	uxth	r3, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000808:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 800080a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b6c      	ldr	r3, [pc, #432]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000810:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 800081c:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 800081e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000824:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	b29b      	uxth	r3, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b64      	ldr	r3, [pc, #400]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000830:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000832:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000838:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 800083a:	4a61      	ldr	r2, [pc, #388]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 800083c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000840:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 8000842:	4a5f      	ldr	r2, [pc, #380]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000844:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000848:	7353      	strb	r3, [r2, #13]


		erpa_seq++;
 800084a:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 8000854:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <HAL_TIM_OC_DelayElapsedCallback+0x15a>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	220e      	movs	r2, #14
 8000862:	4957      	ldr	r1, [pc, #348]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000864:	4858      	ldr	r0, [pc, #352]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 8000866:	f00c feab 	bl	800d5c0 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 800086a:	4b58      	ldr	r3, [pc, #352]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 81ae 	beq.w	8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x4c0>
      {
        if (hk_counter == HK_CADENCE)
 8000874:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2201      	movs	r2, #1
 800087a:	4293      	cmp	r3, r2
 800087c:	f040 8156 	bne.w	8000b2c <HAL_TIM_OC_DelayElapsedCallback+0x41c>
        {

        	int16_t *i2c_values = i2c();
 8000880:	f7ff ff12 	bl	80006a8 <i2c>
 8000884:	6278      	str	r0, [r7, #36]	; 0x24

        	HAL_ADC_Stop_DMA(&hadc3);
 8000886:	4853      	ldr	r0, [pc, #332]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000888:	f002 fcf2 	bl	8003270 <HAL_ADC_Stop_DMA>

        	if (HAL_ADC_Start_DMA(&hadc3,
 800088c:	2220      	movs	r2, #32
 800088e:	4952      	ldr	r1, [pc, #328]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000890:	4850      	ldr	r0, [pc, #320]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000892:	f002 fc29 	bl	80030e8 <HAL_ADC_Start_DMA>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_TIM_OC_DelayElapsedCallback+0x190>
        			(uint32_t *)aADC3ConvertedData,
					ADC_CONVERTED_DATA_BUFFER_SIZE)
        			!= HAL_OK) {
        		Error_Handler();
 800089c:	f001 fa30 	bl	8001d00 <Error_Handler>
        	}

        	uint16_t vrefint = aADC3ConvertedData[1];
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 80008a2:	885b      	ldrh	r3, [r3, #2]
 80008a4:	847b      	strh	r3, [r7, #34]	; 0x22
        	uint16_t vsense = aADC3ConvertedData[2];
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 80008a8:	889b      	ldrh	r3, [r3, #4]
 80008aa:	843b      	strh	r3, [r7, #32]
        	uint16_t PF9 = aADC3ConvertedData[0];
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	83fb      	strh	r3, [r7, #30]

        	HAL_ADC_Stop_DMA(&hadc1);
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80008b4:	f002 fcdc 	bl	8003270 <HAL_ADC_Stop_DMA>
        	if (HAL_ADC_Start_DMA(&hadc1,
 80008b8:	2220      	movs	r2, #32
 80008ba:	4940      	ldr	r1, [pc, #256]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008bc:	483e      	ldr	r0, [pc, #248]	; (80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 80008be:	f002 fc13 	bl	80030e8 <HAL_ADC_Start_DMA>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_TIM_OC_DelayElapsedCallback+0x1bc>
        			(uint32_t *)aADCxConvertedData,
					ADC_CONVERTED_DATA_BUFFER_SIZE)
        			!= HAL_OK) {
        		Error_Handler();
 80008c8:	f001 fa1a 	bl	8001d00 <Error_Handler>
        	}

        	uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 80008cc:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008ce:	889b      	ldrh	r3, [r3, #4]
 80008d0:	83bb      	strh	r3, [r7, #28]
        	uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008d4:	885b      	ldrh	r3, [r3, #2]
 80008d6:	837b      	strh	r3, [r7, #26]
        	uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008da:	891b      	ldrh	r3, [r3, #8]
 80008dc:	833b      	strh	r3, [r7, #24]
        	uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008e0:	895b      	ldrh	r3, [r3, #10]
 80008e2:	82fb      	strh	r3, [r7, #22]
        	uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008e6:	899b      	ldrh	r3, [r3, #12]
 80008e8:	82bb      	strh	r3, [r7, #20]
        	uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008ec:	89db      	ldrh	r3, [r3, #14]
 80008ee:	827b      	strh	r3, [r7, #18]
        	uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008f2:	8a1b      	ldrh	r3, [r3, #16]
 80008f4:	823b      	strh	r3, [r7, #16]
        	uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008f8:	8a5b      	ldrh	r3, [r3, #18]
 80008fa:	81fb      	strh	r3, [r7, #14]
        	uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 80008fe:	8a9b      	ldrh	r3, [r3, #20]
 8000900:	81bb      	strh	r3, [r7, #12]
        	uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000904:	8adb      	ldrh	r3, [r3, #22]
 8000906:	817b      	strh	r3, [r7, #10]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000908:	22cc      	movs	r2, #204	; 0xcc
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800090c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 800090e:	22cc      	movs	r2, #204	; 0xcc
 8000910:	4b32      	ldr	r3, [pc, #200]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000912:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	b29b      	uxth	r3, r3
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000920:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800092a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 800092c:	8c3b      	ldrh	r3, [r7, #32]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000936:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000938:	8c3b      	ldrh	r3, [r7, #32]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800093e:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b29b      	uxth	r3, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800094a:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 800094c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000952:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095a:	121b      	asrs	r3, r3, #8
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000960:	721a      	strb	r2, [r3, #8]
            hk_buf[9] = (i2c_values[0] & 0xFF);
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800096c:	725a      	strb	r2, [r3, #9]
            hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3302      	adds	r3, #2
 8000972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000976:	121b      	asrs	r3, r3, #8
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800097c:	729a      	strb	r2, [r3, #10]
            hk_buf[11] = (i2c_values[1] & 0xFF);
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	3302      	adds	r3, #2
 8000982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 800098a:	72da      	strb	r2, [r3, #11]
            hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	3304      	adds	r3, #4
 8000990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000994:	121b      	asrs	r3, r3, #8
 8000996:	e025      	b.n	80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x2d4>
 8000998:	24000430 	.word	0x24000430
 800099c:	24000655 	.word	0x24000655
 80009a0:	58020400 	.word	0x58020400
 80009a4:	2400060c 	.word	0x2400060c
 80009a8:	2400035c 	.word	0x2400035c
 80009ac:	24000600 	.word	0x24000600
 80009b0:	24000000 	.word	0x24000000
 80009b4:	24000274 	.word	0x24000274
 80009b8:	240000bc 	.word	0x240000bc
 80009bc:	24000580 	.word	0x24000580
 80009c0:	24000610 	.word	0x24000610
 80009c4:	2400061e 	.word	0x2400061e
 80009c8:	2400047c 	.word	0x2400047c
 80009cc:	24000656 	.word	0x24000656
 80009d0:	24000650 	.word	0x24000650
 80009d4:	24000120 	.word	0x24000120
 80009d8:	240005c0 	.word	0x240005c0
 80009dc:	24000628 	.word	0x24000628
 80009e0:	2400064e 	.word	0x2400064e
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b7c      	ldr	r3, [pc, #496]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 80009e8:	731a      	strb	r2, [r3, #12]
            hk_buf[13] = (i2c_values[2] & 0xFF);
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	3304      	adds	r3, #4
 80009ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b78      	ldr	r3, [pc, #480]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 80009f6:	735a      	strb	r2, [r3, #13]
            hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3306      	adds	r3, #6
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	121b      	asrs	r3, r3, #8
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b74      	ldr	r3, [pc, #464]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a06:	739a      	strb	r2, [r3, #14]
            hk_buf[15] = (i2c_values[3] & 0xFF);
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	3306      	adds	r3, #6
 8000a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a14:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000a16:	8bbb      	ldrh	r3, [r7, #28]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a20:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000a22:	8bbb      	ldrh	r3, [r7, #28]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a28:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000a2a:	8b7b      	ldrh	r3, [r7, #26]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a34:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000a36:	8b7b      	ldrh	r3, [r7, #26]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a3c:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000a3e:	8b3b      	ldrh	r3, [r7, #24]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a48:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000a4a:	8b3b      	ldrh	r3, [r7, #24]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a50:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000a52:	8afb      	ldrh	r3, [r7, #22]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a5c:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b5d      	ldr	r3, [pc, #372]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a64:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000a66:	8abb      	ldrh	r3, [r7, #20]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a70:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000a72:	8abb      	ldrh	r3, [r7, #20]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a78:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000a7a:	8a7b      	ldrh	r3, [r7, #18]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a84:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000a86:	8a7b      	ldrh	r3, [r7, #18]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a8c:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000a8e:	8a3b      	ldrh	r3, [r7, #16]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000a98:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000a9a:	8a3b      	ldrh	r3, [r7, #16]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b4e      	ldr	r3, [pc, #312]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000aa0:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000aac:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000ab4:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000ac0:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000ace:	897b      	ldrh	r3, [r7, #10]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000ad8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000adc:	897b      	ldrh	r3, [r7, #10]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000ae2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PF9 & 0xFF00) >> 8);
 8000ae6:	8bfb      	ldrh	r3, [r7, #30]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PF9 & 0xFF);
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x4cc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <HAL_TIM_OC_DelayElapsedCallback+0x402>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	2226      	movs	r2, #38	; 0x26
 8000b0a:	4933      	ldr	r1, [pc, #204]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000b0c:	4834      	ldr	r0, [pc, #208]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x4d0>)
 8000b0e:	f00c fd57 	bl	800d5c0 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x4d4>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_TIM_OC_DelayElapsedCallback+0x4d8>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <HAL_TIM_OC_DelayElapsedCallback+0x4d8>)
 8000b22:	801a      	strh	r2, [r3, #0]

          free(i2c_values);
 8000b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b26:	f00f f945 	bl	800fdb4 <free>
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000b2a:	e051      	b.n	8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x4c0>
          hk_counter++;
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x4d4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x4d4>)
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	e04b      	b.n	8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x4c0>
  else if (htim == &htim1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <HAL_TIM_OC_DelayElapsedCallback+0x4dc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d147      	bne.n	8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x4c0>
      if (PMT_ON)
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <HAL_TIM_OC_DelayElapsedCallback+0x4e0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d043      	beq.n	8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x4c0>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000b48:	bf00      	nop
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <HAL_TIM_OC_DelayElapsedCallback+0x4e4>)
 8000b50:	f006 feee 	bl	8007930 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f7      	bne.n	8000b4a <HAL_TIM_OC_DelayElapsedCallback+0x43a>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4926      	ldr	r1, [pc, #152]	; (8000bf8 <HAL_TIM_OC_DelayElapsedCallback+0x4e8>)
 8000b60:	4826      	ldr	r0, [pc, #152]	; (8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x4ec>)
 8000b62:	f00a ff63 	bl	800ba2c <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <HAL_TIM_OC_DelayElapsedCallback+0x4e8>)
 8000b6e:	785b      	ldrb	r3, [r3, #1]
 8000b70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x4ec>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x4ec>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b82:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000b84:	22bb      	movs	r2, #187	; 0xbb
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000b88:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000b8a:	22bb      	movs	r2, #187	; 0xbb
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000b8e:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x4f4>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000b9c:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x4f4>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000ba6:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000baa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000bae:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bb6:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x4f4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x4f4>)
 8000bc2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	2206      	movs	r2, #6
 8000bc8:	490d      	ldr	r1, [pc, #52]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x4d0>)
 8000bcc:	f00c fcf8 	bl	800d5c0 <HAL_UART_Transmit>
}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000628 	.word	0x24000628
 8000bdc:	24000656 	.word	0x24000656
 8000be0:	2400047c 	.word	0x2400047c
 8000be4:	24000650 	.word	0x24000650
 8000be8:	2400064e 	.word	0x2400064e
 8000bec:	240003e4 	.word	0x240003e4
 8000bf0:	24000654 	.word	0x24000654
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	24000608 	.word	0x24000608
 8000bfc:	240002d4 	.word	0x240002d4
 8000c00:	24000620 	.word	0x24000620
 8000c04:	24000626 	.word	0x24000626

08000c08 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	4998      	ldr	r1, [pc, #608]	; (8000e74 <HAL_UART_RxCpltCallback+0x26c>)
 8000c14:	4898      	ldr	r0, [pc, #608]	; (8000e78 <HAL_UART_RxCpltCallback+0x270>)
 8000c16:	f00c fd69 	bl	800d6ec <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000c1a:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <HAL_UART_RxCpltCallback+0x26c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b1d      	cmp	r3, #29
 8000c24:	f200 8121 	bhi.w	8000e6a <HAL_UART_RxCpltCallback+0x262>
 8000c28:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <HAL_UART_RxCpltCallback+0x28>)
 8000c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2e:	bf00      	nop
 8000c30:	08000d35 	.word	0x08000d35
 8000c34:	08000d51 	.word	0x08000d51
 8000c38:	08000d6d 	.word	0x08000d6d
 8000c3c:	08000d8d 	.word	0x08000d8d
 8000c40:	08000dad 	.word	0x08000dad
 8000c44:	08000dc9 	.word	0x08000dc9
 8000c48:	08000de9 	.word	0x08000de9
 8000c4c:	08000e09 	.word	0x08000e09
 8000c50:	08000cc5 	.word	0x08000cc5
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000ca9 	.word	0x08000ca9
 8000c60:	08000e25 	.word	0x08000e25
 8000c64:	08000e35 	.word	0x08000e35
 8000c68:	08000e45 	.word	0x08000e45
 8000c6c:	08000e55 	.word	0x08000e55
 8000c70:	08000e3d 	.word	0x08000e3d
 8000c74:	08000e4d 	.word	0x08000e4d
 8000c78:	08000e5d 	.word	0x08000e5d
 8000c7c:	08000d43 	.word	0x08000d43
 8000c80:	08000d5f 	.word	0x08000d5f
 8000c84:	08000d7d 	.word	0x08000d7d
 8000c88:	08000d9d 	.word	0x08000d9d
 8000c8c:	08000dbb 	.word	0x08000dbb
 8000c90:	08000dd9 	.word	0x08000dd9
 8000c94:	08000df9 	.word	0x08000df9
 8000c98:	08000e17 	.word	0x08000e17
 8000c9c:	08000ce1 	.word	0x08000ce1
 8000ca0:	08000cf9 	.word	0x08000cf9
 8000ca4:	08000d11 	.word	0x08000d11
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000ca8:	4b74      	ldr	r3, [pc, #464]	; (8000e7c <HAL_UART_RxCpltCallback+0x274>)
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	2201      	movs	r2, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 fe56 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000cb4:	e0d9      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000cb6:	4b71      	ldr	r3, [pc, #452]	; (8000e7c <HAL_UART_RxCpltCallback+0x274>)
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 fe4f 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000cc2:	e0d2      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_UART_RxCpltCallback+0x274>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 fe48 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000cd0:	e0cb      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <HAL_UART_RxCpltCallback+0x274>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f006 fe41 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000cde:	e0c4      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1B:
  {
    if (step < 7)
 8000ce0:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	f200 80bd 	bhi.w	8000e64 <HAL_UART_RxCpltCallback+0x25c>
    {
      step++;
 8000cea:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000cf4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000cf6:	e0b5      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x25c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000cf8:	4b61      	ldr	r3, [pc, #388]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 80b3 	beq.w	8000e68 <HAL_UART_RxCpltCallback+0x260>
    {
      step--;
 8000d02:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000d0c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d0e:	e0ab      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x260>
  }
  case 0x1D: {
	if (!auto_sweep) {
 8000d10:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <HAL_UART_RxCpltCallback+0x27c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d106      	bne.n	8000d26 <HAL_UART_RxCpltCallback+0x11e>
		auto_sweep = 1;
 8000d18:	4b5a      	ldr	r3, [pc, #360]	; (8000e84 <HAL_UART_RxCpltCallback+0x27c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
		step = 0;
 8000d1e:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
	} else {
		auto_sweep = 0;
		step = 0;
	}
  	break;
 8000d24:	e0a1      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
		auto_sweep = 0;
 8000d26:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_UART_RxCpltCallback+0x27c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
		step = 0;
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <HAL_UART_RxCpltCallback+0x278>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
  	break;
 8000d32:	e09a      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
   }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000d34:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <HAL_UART_RxCpltCallback+0x280>)
 8000d36:	2120      	movs	r1, #32
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f006 fe10 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d40:	e093      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000d42:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <HAL_UART_RxCpltCallback+0x280>)
 8000d44:	2120      	movs	r1, #32
 8000d46:	2200      	movs	r2, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f006 fe09 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d4e:	e08c      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <HAL_UART_RxCpltCallback+0x280>)
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	2201      	movs	r2, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 fe02 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d5c:	e085      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <HAL_UART_RxCpltCallback+0x280>)
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	2200      	movs	r2, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 fdfb 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d6a:	e07e      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	2201      	movs	r2, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fdf3 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d7a:	e076      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	2200      	movs	r2, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 fdeb 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d8a:	e06e      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	2201      	movs	r2, #1
 8000d94:	4618      	mov	r0, r3
 8000d96:	f006 fde3 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000d9a:	e066      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da2:	2200      	movs	r2, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f006 fddb 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000daa:	e05e      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000dac:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	2201      	movs	r2, #1
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fdd4 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000db8:	e057      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fdcd 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000dc6:	e050      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fdc5 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000dd6:	e048      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	2200      	movs	r2, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fdbd 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000de6:	e040      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	2201      	movs	r2, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fdb5 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000df6:	e038      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fdad 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000e06:	e030      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fda6 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000e14:	e029      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_UART_RxCpltCallback+0x284>)
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f006 fd9f 	bl	8007960 <HAL_GPIO_WritePin>
    break;
 8000e22:	e022      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000e24:	f001 fd6a 	bl	80028fc <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f007 fb3c 	bl	80084a8 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000e30:	f7ff fbd4 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_UART_RxCpltCallback+0x288>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
    break;
 8000e3a:	e016      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_RxCpltCallback+0x288>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
    break;
 8000e42:	e012      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_RxCpltCallback+0x28c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
    break;
 8000e4a:	e00e      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_RxCpltCallback+0x28c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    break;
 8000e52:	e00a      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_UART_RxCpltCallback+0x290>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
    break;
 8000e5a:	e006      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_RxCpltCallback+0x290>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    break;
 8000e62:	e002      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
    break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <HAL_UART_RxCpltCallback+0x262>
    break;
 8000e68:	bf00      	nop
  }
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2400050c 	.word	0x2400050c
 8000e78:	2400047c 	.word	0x2400047c
 8000e7c:	58021400 	.word	0x58021400
 8000e80:	24000600 	.word	0x24000600
 8000e84:	24000604 	.word	0x24000604
 8000e88:	58020400 	.word	0x58020400
 8000e8c:	58020800 	.word	0x58020800
 8000e90:	24000654 	.word	0x24000654
 8000e94:	24000655 	.word	0x24000655
 8000e98:	24000656 	.word	0x24000656

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f001 fc76 	bl	8002790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f87e 	bl	8000fa4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea8:	f000 f902 	bl	80010b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 fd90 	bl	80019d0 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000eb0:	f000 fb04 	bl	80014bc <MX_DAC1_Init>
  MX_TIM1_Init();
 8000eb4:	f000 fc2e 	bl	8001714 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb8:	f000 fcbc 	bl	8001834 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ebc:	f000 fb3a 	bl	8001534 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ec0:	f000 fb78 	bl	80015b4 <MX_SPI1_Init>
  MX_DMA_Init();
 8000ec4:	f000 fd5c 	bl	8001980 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ec8:	f000 f920 	bl	800110c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ecc:	f000 fd0c 	bl	80018e8 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000ed0:	f000 fa70 	bl	80013b4 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000ed4:	f000 fbc6 	bl	8001664 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000ed8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ee0:	4829      	ldr	r0, [pc, #164]	; (8000f88 <main+0xec>)
 8000ee2:	f003 f91f 	bl	8004124 <HAL_ADCEx_Calibration_Start>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <main+0x54>
  {
    /* Calibration Error */
    Error_Handler();
 8000eec:	f000 ff08 	bl	8001d00 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000ef0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ef4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ef8:	4824      	ldr	r0, [pc, #144]	; (8000f8c <main+0xf0>)
 8000efa:	f003 f913 	bl	8004124 <HAL_ADCEx_Calibration_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <main+0x6c>
  {
	/* Calibration Error */
	Error_Handler();
 8000f04:	f000 fefc 	bl	8001d00 <Error_Handler>
  }


  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4821      	ldr	r0, [pc, #132]	; (8000f90 <main+0xf4>)
 8000f0c:	f00b fa3c 	bl	800c388 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f10:	210c      	movs	r1, #12
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <main+0xf8>)
 8000f14:	f00b fa38 	bl	800c388 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000f18:	bf00      	nop
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <main+0xfc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d0f7      	beq.n	8000f1a <main+0x7e>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000f2a:	bf00      	nop
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <main+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f3a:	d1f7      	bne.n	8000f2c <main+0x90>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <main+0x100>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <main+0x100>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <main+0x100>)
 8000f4a:	225b      	movs	r2, #91	; 0x5b
 8000f4c:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <main+0x100>)
 8000f50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <main+0xfc>)
 8000f56:	f00e fd47 	bl	800f9e8 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <main+0xc8>
      Error_Handler();
 8000f60:	f000 fece 	bl	8001d00 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <main+0xfc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <main+0xfc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f72:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <main+0xfc>)
 8000f76:	f00e fd92 	bl	800fa9e <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <main+0x104>)
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <main+0xfc>)
 8000f80:	f00c fbb4 	bl	800d6ec <HAL_UART_Receive_IT>
 8000f84:	e7f9      	b.n	8000f7a <main+0xde>
 8000f86:	bf00      	nop
 8000f88:	240000bc 	.word	0x240000bc
 8000f8c:	24000120 	.word	0x24000120
 8000f90:	240003e4 	.word	0x240003e4
 8000f94:	24000430 	.word	0x24000430
 8000f98:	2400047c 	.word	0x2400047c
 8000f9c:	24000570 	.word	0x24000570
 8000fa0:	2400050c 	.word	0x2400050c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09c      	sub	sp, #112	; 0x70
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	224c      	movs	r2, #76	; 0x4c
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00e ff06 	bl	800fdc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00e ff00 	bl	800fdc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f007 faab 	bl	8008520 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <SystemClock_Config+0x100>)
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <SystemClock_Config+0x100>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <SystemClock_Config+0x100>)
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <SystemClock_Config+0x104>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <SystemClock_Config+0x104>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <SystemClock_Config+0x104>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001000:	bf00      	nop
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <SystemClock_Config+0x104>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100e:	d1f8      	bne.n	8001002 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <SystemClock_Config+0x108>)
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <SystemClock_Config+0x108>)
 8001016:	f023 0303 	bic.w	r3, r3, #3
 800101a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101c:	2302      	movs	r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001020:	2301      	movs	r3, #1
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800102c:	2300      	movs	r3, #0
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001030:	2304      	movs	r3, #4
 8001032:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001034:	230c      	movs	r3, #12
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001044:	230c      	movs	r3, #12
 8001046:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001048:	2300      	movs	r3, #0
 800104a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fa9d 	bl	8008594 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 fe4e 	bl	8001d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	233f      	movs	r3, #63	; 0x3f
 8001066:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2303      	movs	r3, #3
 800106a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800106c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001070:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f007 feb0 	bl	8008df0 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001096:	f000 fe33 	bl	8001d00 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3770      	adds	r7, #112	; 0x70
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	58000400 	.word	0x58000400
 80010a8:	58024800 	.word	0x58024800
 80010ac:	58024400 	.word	0x58024400

080010b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0b0      	sub	sp, #192	; 0xc0
 80010b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	22bc      	movs	r2, #188	; 0xbc
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00e fe81 	bl	800fdc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010cc:	2309      	movs	r3, #9
 80010ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010e0:	2320      	movs	r3, #32
 80010e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80010e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 fa08 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80010fe:	f000 fdff 	bl	8001d00 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	37c0      	adds	r7, #192	; 0xc0
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001130:	4b90      	ldr	r3, [pc, #576]	; (8001374 <MX_ADC1_Init+0x268>)
 8001132:	4a91      	ldr	r2, [pc, #580]	; (8001378 <MX_ADC1_Init+0x26c>)
 8001134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001136:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <MX_ADC1_Init+0x268>)
 8001138:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <MX_ADC1_Init+0x268>)
 8001140:	2208      	movs	r2, #8
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001144:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <MX_ADC1_Init+0x268>)
 8001146:	2201      	movs	r2, #1
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <MX_ADC1_Init+0x268>)
 800114c:	2204      	movs	r2, #4
 800114e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <MX_ADC1_Init+0x268>)
 8001152:	2200      	movs	r2, #0
 8001154:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001156:	4b87      	ldr	r3, [pc, #540]	; (8001374 <MX_ADC1_Init+0x268>)
 8001158:	2201      	movs	r2, #1
 800115a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 800115c:	4b85      	ldr	r3, [pc, #532]	; (8001374 <MX_ADC1_Init+0x268>)
 800115e:	220e      	movs	r2, #14
 8001160:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001162:	4b84      	ldr	r3, [pc, #528]	; (8001374 <MX_ADC1_Init+0x268>)
 8001164:	2200      	movs	r2, #0
 8001166:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001168:	4b82      	ldr	r3, [pc, #520]	; (8001374 <MX_ADC1_Init+0x268>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116e:	4b81      	ldr	r3, [pc, #516]	; (8001374 <MX_ADC1_Init+0x268>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001174:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <MX_ADC1_Init+0x268>)
 8001176:	2203      	movs	r2, #3
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800117a:	4b7e      	ldr	r3, [pc, #504]	; (8001374 <MX_ADC1_Init+0x268>)
 800117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001182:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <MX_ADC1_Init+0x268>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001188:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <MX_ADC1_Init+0x268>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001190:	4878      	ldr	r0, [pc, #480]	; (8001374 <MX_ADC1_Init+0x268>)
 8001192:	f001 fe07 	bl	8002da4 <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 fdb0 	bl	8001d00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4872      	ldr	r0, [pc, #456]	; (8001374 <MX_ADC1_Init+0x268>)
 80011ac:	f003 f81e 	bl	80041ec <HAL_ADCEx_MultiModeConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011b6:	f000 fda3 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <MX_ADC1_Init+0x270>)
 80011bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011be:	2306      	movs	r3, #6
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011c2:	2307      	movs	r3, #7
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011cc:	2304      	movs	r3, #4
 80011ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	4865      	ldr	r0, [pc, #404]	; (8001374 <MX_ADC1_Init+0x268>)
 80011de:	f002 f8b3 	bl	8003348 <HAL_ADC_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80011e8:	f000 fd8a 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <MX_ADC1_Init+0x274>)
 80011ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011f0:	230c      	movs	r3, #12
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	485e      	ldr	r0, [pc, #376]	; (8001374 <MX_ADC1_Init+0x268>)
 80011fa:	f002 f8a5 	bl	8003348 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001204:	f000 fd7c 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <MX_ADC1_Init+0x278>)
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800120c:	2312      	movs	r3, #18
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4857      	ldr	r0, [pc, #348]	; (8001374 <MX_ADC1_Init+0x268>)
 8001216:	f002 f897 	bl	8003348 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001220:	f000 fd6e 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <MX_ADC1_Init+0x27c>)
 8001226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001228:	2318      	movs	r3, #24
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4850      	ldr	r0, [pc, #320]	; (8001374 <MX_ADC1_Init+0x268>)
 8001232:	f002 f889 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800123c:	f000 fd60 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_ADC1_Init+0x280>)
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4849      	ldr	r0, [pc, #292]	; (8001374 <MX_ADC1_Init+0x268>)
 8001250:	f002 f87a 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800125a:	f000 fd51 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <MX_ADC1_Init+0x284>)
 8001260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001262:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4841      	ldr	r0, [pc, #260]	; (8001374 <MX_ADC1_Init+0x268>)
 800126e:	f002 f86b 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001278:	f000 fd42 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <MX_ADC1_Init+0x288>)
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001280:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	483a      	ldr	r0, [pc, #232]	; (8001374 <MX_ADC1_Init+0x268>)
 800128c:	f002 f85c 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001296:	f000 fd33 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <MX_ADC1_Init+0x28c>)
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800129e:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4832      	ldr	r0, [pc, #200]	; (8001374 <MX_ADC1_Init+0x268>)
 80012aa:	f002 f84d 	bl	8003348 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012b4:	f000 fd24 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <MX_ADC1_Init+0x290>)
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012bc:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	482b      	ldr	r0, [pc, #172]	; (8001374 <MX_ADC1_Init+0x268>)
 80012c8:	f002 f83e 	bl	8003348 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80012d2:	f000 fd15 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <MX_ADC1_Init+0x294>)
 80012d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4823      	ldr	r0, [pc, #140]	; (8001374 <MX_ADC1_Init+0x268>)
 80012e6:	f002 f82f 	bl	8003348 <HAL_ADC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80012f0:	f000 fd06 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_ADC1_Init+0x298>)
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80012f8:	f240 2306 	movw	r3, #518	; 0x206
 80012fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	481c      	ldr	r0, [pc, #112]	; (8001374 <MX_ADC1_Init+0x268>)
 8001304:	f002 f820 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800130e:	f000 fcf7 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_ADC1_Init+0x29c>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001316:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_ADC1_Init+0x268>)
 8001322:	f002 f811 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 800132c:	f000 fce8 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_ADC1_Init+0x2a0>)
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001334:	f240 2312 	movw	r3, #530	; 0x212
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_ADC1_Init+0x268>)
 8001340:	f002 f802 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 800134a:	f000 fcd9 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_ADC1_Init+0x2a4>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001352:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_ADC1_Init+0x268>)
 800135e:	f001 fff3 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8001368:	f000 fcca 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	240000bc 	.word	0x240000bc
 8001378:	40022000 	.word	0x40022000
 800137c:	08600004 	.word	0x08600004
 8001380:	0c900008 	.word	0x0c900008
 8001384:	10c00010 	.word	0x10c00010
 8001388:	14f00020 	.word	0x14f00020
 800138c:	19200040 	.word	0x19200040
 8001390:	1d500080 	.word	0x1d500080
 8001394:	21800100 	.word	0x21800100
 8001398:	25b00200 	.word	0x25b00200
 800139c:	2a000400 	.word	0x2a000400
 80013a0:	2e300800 	.word	0x2e300800
 80013a4:	3ac04000 	.word	0x3ac04000
 80013a8:	3ef08000 	.word	0x3ef08000
 80013ac:	43210000 	.word	0x43210000
 80013b0:	47520000 	.word	0x47520000

080013b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <MX_ADC3_Init+0xf8>)
 80013d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_ADC3_Init+0xf4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xf4>)
 800140a:	2203      	movs	r2, #3
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_ADC3_Init+0xf4>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001426:	f001 fcbd 	bl	8002da4 <HAL_ADC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001430:	f000 fc66 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_ADC3_Init+0xfc>)
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001438:	2306      	movs	r3, #6
 800143a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800143c:	2307      	movs	r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001440:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001446:	2304      	movs	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001458:	f001 ff76 	bl	8003348 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 fc4d 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_ADC3_Init+0x100>)
 8001468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800146a:	230c      	movs	r3, #12
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001474:	f001 ff68 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800147e:	f000 fc3f 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_ADC3_Init+0x104>)
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001486:	2312      	movs	r3, #18
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_ADC3_Init+0xf4>)
 8001490:	f001 ff5a 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800149a:	f000 fc31 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000120 	.word	0x24000120
 80014ac:	58026000 	.word	0x58026000
 80014b0:	cfb80000 	.word	0xcfb80000
 80014b4:	cb840000 	.word	0xcb840000
 80014b8:	08600004 	.word	0x08600004

080014bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2224      	movs	r2, #36	; 0x24
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00e fc7b 	bl	800fdc4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_DAC1_Init+0x70>)
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <MX_DAC1_Init+0x74>)
 80014d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d4:	4815      	ldr	r0, [pc, #84]	; (800152c <MX_DAC1_Init+0x70>)
 80014d6:	f003 f876 	bl	80045c6 <HAL_DAC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014e0:	f000 fc0e 	bl	8001d00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <MX_DAC1_Init+0x70>)
 8001500:	f003 f8fa 	bl	80046f8 <HAL_DAC_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800150a:	f000 fbf9 	bl	8001d00 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2210      	movs	r2, #16
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_DAC1_Init+0x70>)
 8001516:	f003 f8ef 	bl	80046f8 <HAL_DAC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001520:	f000 fbee 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24000274 	.word	0x24000274
 8001530:	40007400 	.word	0x40007400

08001534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_I2C1_Init+0x74>)
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <MX_I2C1_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <MX_I2C1_Init+0x7c>)
 8001542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_I2C1_Init+0x74>)
 800154c:	2201      	movs	r2, #1
 800154e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156e:	480e      	ldr	r0, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001570:	f006 fa10 	bl	8007994 <HAL_I2C_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157a:	f000 fbc1 	bl	8001d00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001582:	f006 fef9 	bl	8008378 <HAL_I2CEx_ConfigAnalogFilter>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800158c:	f000 fbb8 	bl	8001d00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001590:	2100      	movs	r1, #0
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001594:	f006 ff3b 	bl	800840e <HAL_I2CEx_ConfigDigitalFilter>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 fbaf 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24000288 	.word	0x24000288
 80015ac:	40005400 	.word	0x40005400
 80015b0:	20303e5d 	.word	0x20303e5d

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_SPI1_Init+0xa8>)
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <MX_SPI1_Init+0xac>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_SPI1_Init+0xa8>)
 80015c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_SPI1_Init+0xa8>)
 80015c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_SPI1_Init+0xa8>)
 80015d0:	220f      	movs	r2, #15
 80015d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_SPI1_Init+0xa8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_SPI1_Init+0xa8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_SPI1_Init+0xa8>)
 80015e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_SPI1_Init+0xa8>)
 80015ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80015ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_SPI1_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_SPI1_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_SPI1_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_SPI1_Init+0xa8>)
 8001604:	2200      	movs	r2, #0
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI1_Init+0xa8>)
 800160a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_SPI1_Init+0xa8>)
 8001612:	2200      	movs	r2, #0
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_SPI1_Init+0xa8>)
 8001618:	2200      	movs	r2, #0
 800161a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI1_Init+0xa8>)
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_SPI1_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI1_Init+0xa8>)
 800162a:	2200      	movs	r2, #0
 800162c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_SPI1_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI1_Init+0xa8>)
 8001636:	2200      	movs	r2, #0
 8001638:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_SPI1_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI1_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_SPI1_Init+0xa8>)
 8001648:	f00a f8ea 	bl	800b820 <HAL_SPI_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001652:	f000 fb55 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240002d4 	.word	0x240002d4
 8001660:	40013000 	.word	0x40013000

08001664 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_SPI2_Init+0xa8>)
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <MX_SPI2_Init+0xac>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <MX_SPI2_Init+0xa8>)
 8001670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001674:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_SPI2_Init+0xa8>)
 8001678:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800167c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_SPI2_Init+0xa8>)
 8001680:	220f      	movs	r2, #15
 8001682:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_SPI2_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_SPI2_Init+0xa8>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_SPI2_Init+0xa8>)
 8001692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001696:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_SPI2_Init+0xa8>)
 800169a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800169e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_SPI2_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_SPI2_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_SPI2_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_SPI2_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_SPI2_Init+0xa8>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_SPI2_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI2_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI2_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI2_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI2_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_SPI2_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI2_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_SPI2_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI2_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_SPI2_Init+0xa8>)
 80016f8:	f00a f892 	bl	800b820 <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001702:	f000 fafd 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2400035c 	.word	0x2400035c
 8001710:	40003800 	.word	0x40003800

08001714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b096      	sub	sp, #88	; 0x58
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	222c      	movs	r2, #44	; 0x2c
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00e fb3f 	bl	800fdc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <MX_TIM1_Init+0x118>)
 8001748:	4a39      	ldr	r2, [pc, #228]	; (8001830 <MX_TIM1_Init+0x11c>)
 800174a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <MX_TIM1_Init+0x118>)
 800174e:	2263      	movs	r2, #99	; 0x63
 8001750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <MX_TIM1_Init+0x118>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <MX_TIM1_Init+0x118>)
 800175a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_TIM1_Init+0x118>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <MX_TIM1_Init+0x118>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <MX_TIM1_Init+0x118>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001772:	482e      	ldr	r0, [pc, #184]	; (800182c <MX_TIM1_Init+0x118>)
 8001774:	f00a ff62 	bl	800c63c <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800177e:	f000 fabf 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001792:	4619      	mov	r1, r3
 8001794:	4825      	ldr	r0, [pc, #148]	; (800182c <MX_TIM1_Init+0x118>)
 8001796:	f00b fd99 	bl	800d2cc <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 faae 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a4:	2360      	movs	r3, #96	; 0x60
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 80017a8:	f240 13df 	movw	r3, #479	; 0x1df
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4818      	ldr	r0, [pc, #96]	; (800182c <MX_TIM1_Init+0x118>)
 80017cc:	f00b f8ac 	bl	800c928 <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80017d6:	f000 fa93 	bl	8001d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM1_Init+0x118>)
 8001810:	f00b fdea 	bl	800d3e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800181a:	f000 fa71 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM1_Init+0x118>)
 8001820:	f000 fd82 	bl	8002328 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	; 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	240003e4 	.word	0x240003e4
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <MX_TIM2_Init+0xb0>)
 800185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_TIM2_Init+0xb0>)
 8001862:	2263      	movs	r2, #99	; 0x63
 8001864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <MX_TIM2_Init+0xb0>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_TIM2_Init+0xb0>)
 800186e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_TIM2_Init+0xb0>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_TIM2_Init+0xb0>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <MX_TIM2_Init+0xb0>)
 8001882:	f00a fedb 	bl	800c63c <HAL_TIM_PWM_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 fa38 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4811      	ldr	r0, [pc, #68]	; (80018e4 <MX_TIM2_Init+0xb0>)
 80018a0:	f00b fd14 	bl	800d2cc <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018aa:	f000 fa29 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ae:	2360      	movs	r3, #96	; 0x60
 80018b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 80018b2:	f240 13df 	movw	r3, #479	; 0x1df
 80018b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	220c      	movs	r2, #12
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_TIM2_Init+0xb0>)
 80018c8:	f00b f82e 	bl	800c928 <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018d2:	f000 fa15 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <MX_TIM2_Init+0xb0>)
 80018d8:	f000 fd26 	bl	8002328 <HAL_TIM_MspPostInit>

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	24000430 	.word	0x24000430

080018e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_USART1_UART_Init+0x90>)
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <MX_USART1_UART_Init+0x94>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_USART1_UART_Init+0x90>)
 80018f4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80018f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_USART1_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_USART1_UART_Init+0x90>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_USART1_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_USART1_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001932:	f00b fdf5 	bl	800d520 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800193c:	f000 f9e0 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001944:	f00e f917 	bl	800fb76 <HAL_UARTEx_SetTxFifoThreshold>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800194e:	f000 f9d7 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4808      	ldr	r0, [pc, #32]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001956:	f00e f94c 	bl	800fbf2 <HAL_UARTEx_SetRxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001960:	f000 f9ce 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_USART1_UART_Init+0x90>)
 8001966:	f00e f8cd 	bl	800fb04 <HAL_UARTEx_DisableFifoMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001970:	f000 f9c6 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2400047c 	.word	0x2400047c
 800197c:	40011000 	.word	0x40011000

08001980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_DMA_Init+0x4c>)
 8001988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <MX_DMA_Init+0x4c>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_DMA_Init+0x4c>)
 8001998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	200b      	movs	r0, #11
 80019aa:	f002 fdd8 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019ae:	200b      	movs	r0, #11
 80019b0:	f002 fdef 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	200c      	movs	r0, #12
 80019ba:	f002 fdd0 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019be:	200c      	movs	r0, #12
 80019c0:	f002 fde7 	bl	8004592 <HAL_NVIC_EnableIRQ>

}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <MX_GPIO_Init+0x168>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <MX_GPIO_Init+0x168>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <MX_GPIO_Init+0x168>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <MX_GPIO_Init+0x168>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	21c0      	movs	r1, #192	; 0xc0
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <MX_GPIO_Init+0x16c>)
 8001aa0:	f005 ff5e 	bl	8007960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001aaa:	4825      	ldr	r0, [pc, #148]	; (8001b40 <MX_GPIO_Init+0x170>)
 8001aac:	f005 ff58 	bl	8007960 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2160      	movs	r1, #96	; 0x60
 8001ab4:	4823      	ldr	r0, [pc, #140]	; (8001b44 <MX_GPIO_Init+0x174>)
 8001ab6:	f005 ff53 	bl	8007960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_GPIO_Init+0x16c>)
 8001ad2:	f005 fd7d 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ad6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ada:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_GPIO_Init+0x170>)
 8001af0:	f005 fd6e 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b04:	2307      	movs	r3, #7
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_GPIO_Init+0x178>)
 8001b10:	f005 fd5e 	bl	80075d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b14:	2360      	movs	r3, #96	; 0x60
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <MX_GPIO_Init+0x174>)
 8001b2c:	f005 fd50 	bl	80075d0 <HAL_GPIO_Init>

}
 8001b30:	bf00      	nop
 8001b32:	3730      	adds	r7, #48	; 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58021400 	.word	0x58021400
 8001b40:	58020800 	.word	0x58020800
 8001b44:	58020400 	.word	0x58020400
 8001b48:	58020c00 	.word	0x58020c00

08001b4c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d129      	bne.n	8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	2320      	movs	r3, #32
 8001b62:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	dd1d      	ble.n	8001ba6 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b7a:	f3bf 8f4f 	dsb	sy
}
 8001b7e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b20      	subs	r3, #32
 8001b92:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dcf2      	bgt.n	8001b80 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b9a:	f3bf 8f4f 	dsb	sy
}
 8001b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba0:	f3bf 8f6f 	isb	sy
}
 8001ba4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001ba6:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001ba8:	481a      	ldr	r0, [pc, #104]	; (8001c14 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001baa:	f001 fb61 	bl	8003270 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001bae:	e02c      	b.n	8001c0a <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d128      	bne.n	8001c0a <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dd1d      	ble.n	8001c02 <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd6:	f3bf 8f4f 	dsb	sy
}
 8001bda:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3320      	adds	r3, #32
 8001be8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3b20      	subs	r3, #32
 8001bee:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	dcf2      	bgt.n	8001bdc <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf6:	f3bf 8f4f 	dsb	sy
}
 8001bfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bfc:	f3bf 8f6f 	isb	sy
}
 8001c00:	bf00      	nop
}
 8001c02:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001c06:	f001 fb33 	bl	8003270 <HAL_ADC_Stop_DMA>
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240000bc 	.word	0x240000bc
 8001c18:	24000580 	.word	0x24000580
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	24000120 	.word	0x24000120

08001c24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d129      	bne.n	8001c88 <HAL_ADC_ConvCpltCallback+0x64>
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	2320      	movs	r3, #32
 8001c3a:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dd1d      	ble.n	8001c7e <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c52:	f3bf 8f4f 	dsb	sy
}
 8001c56:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	3320      	adds	r3, #32
 8001c64:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b20      	subs	r3, #32
 8001c6a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dcf2      	bgt.n	8001c58 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c72:	f3bf 8f4f 	dsb	sy
}
 8001c76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c78:	f3bf 8f6f 	isb	sy
}
 8001c7c:	bf00      	nop
}
 8001c7e:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001c80:	481a      	ldr	r0, [pc, #104]	; (8001cec <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c82:	f001 faf5 	bl	8003270 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001c86:	e02c      	b.n	8001ce2 <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d128      	bne.n	8001ce2 <HAL_ADC_ConvCpltCallback+0xbe>
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_ADC_ConvCpltCallback+0xd8>)
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	2320      	movs	r3, #32
 8001c96:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dd1d      	ble.n	8001cda <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3b20      	subs	r3, #32
 8001cc6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dcf2      	bgt.n	8001cb4 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cce:	f3bf 8f4f 	dsb	sy
}
 8001cd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cd4:	f3bf 8f6f 	isb	sy
}
 8001cd8:	bf00      	nop
}
 8001cda:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cde:	f001 fac7 	bl	8003270 <HAL_ADC_Stop_DMA>
}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	240000bc 	.word	0x240000bc
 8001cf0:	240005a0 	.word	0x240005a0
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	24000120 	.word	0x24000120
 8001cfc:	240005e0 	.word	0x240005e0

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <Error_Handler+0x8>
	...

08001d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_MspInit+0x30>)
 8001d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d18:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_MspInit+0x30>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_MspInit+0x30>)
 8001d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	58024400 	.word	0x58024400

08001d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_ADC_MspInit+0x248>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f040 80ad 	bne.w	8001ebe <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d64:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d6a:	4a88      	ldr	r2, [pc, #544]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d74:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a80      	ldr	r2, [pc, #512]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a79      	ldr	r2, [pc, #484]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001dfa:	2333      	movs	r3, #51	; 0x33
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4860      	ldr	r0, [pc, #384]	; (8001f90 <HAL_ADC_MspInit+0x250>)
 8001e0e:	f005 fbdf 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e12:	23cf      	movs	r3, #207	; 0xcf
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e16:	2303      	movs	r3, #3
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	485b      	ldr	r0, [pc, #364]	; (8001f94 <HAL_ADC_MspInit+0x254>)
 8001e26:	f005 fbd3 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4856      	ldr	r0, [pc, #344]	; (8001f98 <HAL_ADC_MspInit+0x258>)
 8001e3e:	f005 fbc7 	bl	80075d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4851      	ldr	r0, [pc, #324]	; (8001f9c <HAL_ADC_MspInit+0x25c>)
 8001e58:	f005 fbba 	bl	80075d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e5e:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_ADC_MspInit+0x264>)
 8001e60:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e64:	2209      	movs	r2, #9
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea0:	483f      	ldr	r0, [pc, #252]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001ea2:	f002 fd59 	bl	8004958 <HAL_DMA_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001eac:	f7ff ff28 	bl	8001d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001eb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eb6:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_ADC_MspInit+0x260>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ebc:	e05f      	b.n	8001f7e <HAL_ADC_MspInit+0x23e>
  else if(hadc->Instance==ADC3)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a39      	ldr	r2, [pc, #228]	; (8001fa8 <HAL_ADC_MspInit+0x268>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d15a      	bne.n	8001f7e <HAL_ADC_MspInit+0x23e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_ADC_MspInit+0x24c>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4820      	ldr	r0, [pc, #128]	; (8001f9c <HAL_ADC_MspInit+0x25c>)
 8001f1a:	f005 fb59 	bl	80075d0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_ADC_MspInit+0x270>)
 8001f22:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f26:	2273      	movs	r2, #115	; 0x73
 8001f28:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f44:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f54:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f62:	4812      	ldr	r0, [pc, #72]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f64:	f002 fcf8 	bl	8004958 <HAL_DMA_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_ADC_MspInit+0x232>
      Error_Handler();
 8001f6e:	f7ff fec7 	bl	8001d00 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_ADC_MspInit+0x26c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f7e:	bf00      	nop
 8001f80:	3738      	adds	r7, #56	; 0x38
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020000 	.word	0x58020000
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	58021400 	.word	0x58021400
 8001fa0:	24000184 	.word	0x24000184
 8001fa4:	40020010 	.word	0x40020010
 8001fa8:	58026000 	.word	0x58026000
 8001fac:	240001fc 	.word	0x240001fc
 8001fb0:	40020028 	.word	0x40020028

08001fb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_DAC_MspInit+0x80>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d129      	bne.n	800202a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8001fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8001fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8001fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_DAC_MspInit+0x84>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002012:	2330      	movs	r3, #48	; 0x30
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_DAC_MspInit+0x88>)
 8002026:	f005 fad3 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40007400 	.word	0x40007400
 8002038:	58024400 	.word	0x58024400
 800203c:	58020000 	.word	0x58020000

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0b8      	sub	sp, #224	; 0xe0
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	22bc      	movs	r2, #188	; 0xbc
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f00d feaf 	bl	800fdc4 <memset>
  if(hi2c->Instance==I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <HAL_I2C_MspInit+0xc0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d142      	bne.n	80020f6 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002070:	2308      	movs	r3, #8
 8002072:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	4618      	mov	r0, r3
 8002080:	f007 fa42 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800208a:	f7ff fe39 	bl	8001d00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b4:	2312      	movs	r3, #18
 80020b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c6:	2304      	movs	r3, #4
 80020c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <HAL_I2C_MspInit+0xc8>)
 80020d4:	f005 fa7c 	bl	80075d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 80020da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 80020e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_I2C_MspInit+0xc4>)
 80020ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	37e0      	adds	r7, #224	; 0xe0
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400
 8002104:	58024400 	.word	0x58024400
 8002108:	58020400 	.word	0x58020400

0800210c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0ba      	sub	sp, #232	; 0xe8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	22bc      	movs	r2, #188	; 0xbc
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f00d fe49 	bl	800fdc4 <memset>
  if(hspi->Instance==SPI1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_SPI_MspInit+0x150>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d142      	bne.n	80021c2 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002142:	2300      	movs	r3, #0
 8002144:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4618      	mov	r0, r3
 800214c:	f007 f9dc 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002156:	f7ff fdd3 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002160:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_SPI_MspInit+0x154>)
 8002162:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	4a38      	ldr	r2, [pc, #224]	; (8002260 <HAL_SPI_MspInit+0x154>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002196:	2318      	movs	r3, #24
 8002198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ae:	2305      	movs	r3, #5
 80021b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021b8:	4619      	mov	r1, r3
 80021ba:	482a      	ldr	r0, [pc, #168]	; (8002264 <HAL_SPI_MspInit+0x158>)
 80021bc:	f005 fa08 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021c0:	e047      	b.n	8002252 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a28      	ldr	r2, [pc, #160]	; (8002268 <HAL_SPI_MspInit+0x15c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d142      	bne.n	8002252 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	4618      	mov	r0, r3
 80021dc:	f007 f994 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_SPI_MspInit+0xde>
      Error_Handler();
 80021e6:	f7ff fd8b 	bl	8001d00 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_SPI_MspInit+0x154>)
 80021ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_SPI_MspInit+0x154>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_SPI_MspInit+0x154>)
 80021fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_SPI_MspInit+0x154>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_SPI_MspInit+0x154>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002226:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800222a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002240:	2305      	movs	r3, #5
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <HAL_SPI_MspInit+0x158>)
 800224e:	f005 f9bf 	bl	80075d0 <HAL_GPIO_Init>
}
 8002252:	bf00      	nop
 8002254:	37e8      	adds	r7, #232	; 0xe8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40013000 	.word	0x40013000
 8002260:	58024400 	.word	0x58024400
 8002264:	58020400 	.word	0x58020400
 8002268:	40003800 	.word	0x40003800

0800226c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_TIM_PWM_MspInit+0xb4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d12f      	bne.n	80022de <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 8002280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 8002290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2018      	movs	r0, #24
 80022a2:	f002 f95c 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022a6:	2018      	movs	r0, #24
 80022a8:	f002 f973 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2019      	movs	r0, #25
 80022b2:	f002 f954 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022b6:	2019      	movs	r0, #25
 80022b8:	f002 f96b 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	201a      	movs	r0, #26
 80022c2:	f002 f94c 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022c6:	201a      	movs	r0, #26
 80022c8:	f002 f963 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	201b      	movs	r0, #27
 80022d2:	f002 f944 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022d6:	201b      	movs	r0, #27
 80022d8:	f002 f95b 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022dc:	e01b      	b.n	8002316 <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e6:	d116      	bne.n	8002316 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 80022ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_TIM_PWM_MspInit+0xb8>)
 80022fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	201c      	movs	r0, #28
 800230c:	f002 f927 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002310:	201c      	movs	r0, #28
 8002312:	f002 f93e 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	58024400 	.word	0x58024400

08002328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_TIM_MspPostInit+0xb8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d120      	bne.n	800238c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <HAL_TIM_MspPostInit+0xc0>)
 8002386:	f005 f923 	bl	80075d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800238a:	e024      	b.n	80023d6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d11f      	bne.n	80023d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_TIM_MspPostInit+0xbc>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c6:	2301      	movs	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_TIM_MspPostInit+0xc4>)
 80023d2:	f005 f8fd 	bl	80075d0 <HAL_GPIO_Init>
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58020000 	.word	0x58020000
 80023ec:	58020400 	.word	0x58020400

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0b8      	sub	sp, #224	; 0xe0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	22bc      	movs	r2, #188	; 0xbc
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f00d fcd7 	bl	800fdc4 <memset>
  if(huart->Instance==USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_UART_MspInit+0xd0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d14a      	bne.n	80024b6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f007 f86a 	bl	8009508 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800243a:	f7ff fc61 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 8002440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 8002450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_UART_MspInit+0xd4>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800247a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002494:	2307      	movs	r3, #7
 8002496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800249e:	4619      	mov	r1, r3
 80024a0:	4809      	ldr	r0, [pc, #36]	; (80024c8 <HAL_UART_MspInit+0xd8>)
 80024a2:	f005 f895 	bl	80075d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2025      	movs	r0, #37	; 0x25
 80024ac:	f002 f857 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b0:	2025      	movs	r0, #37	; 0x25
 80024b2:	f002 f86e 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	37e0      	adds	r7, #224	; 0xe0
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40011000 	.word	0x40011000
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58020000 	.word	0x58020000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <NMI_Handler+0x4>

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002518:	f000 f9ac 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Stream0_IRQHandler+0x10>)
 8002526:	f003 fd41 	bl	8005fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000184 	.word	0x24000184

08002534 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Stream1_IRQHandler+0x10>)
 800253a:	f003 fd37 	bl	8005fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	240001fc 	.word	0x240001fc

08002548 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <TIM1_BRK_IRQHandler+0x10>)
 800254e:	f00a f8cc 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	240003e4 	.word	0x240003e4

0800255c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM1_UP_IRQHandler+0x10>)
 8002562:	f00a f8c2 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	240003e4 	.word	0x240003e4

08002570 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002576:	f00a f8b8 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	240003e4 	.word	0x240003e4

08002584 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM1_CC_IRQHandler+0x10>)
 800258a:	f00a f8ae 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	240003e4 	.word	0x240003e4

08002598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM2_IRQHandler+0x10>)
 800259e:	f00a f8a4 	bl	800c6ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	24000430 	.word	0x24000430

080025ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <USART1_IRQHandler+0x10>)
 80025b2:	f00b f8f1 	bl	800d798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2400047c 	.word	0x2400047c

080025c0 <_sbrk>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
 80025f0:	f00d fbae 	bl	800fd50 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	24080000 	.word	0x24080000
 8002620:	00000400 	.word	0x00000400
 8002624:	24000658 	.word	0x24000658
 8002628:	24000670 	.word	0x24000670

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <SystemInit+0xe4>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a36      	ldr	r2, [pc, #216]	; (8002710 <SystemInit+0xe4>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002640:	4b34      	ldr	r3, [pc, #208]	; (8002714 <SystemInit+0xe8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	2b06      	cmp	r3, #6
 800264a:	d807      	bhi.n	800265c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <SystemInit+0xe8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 030f 	bic.w	r3, r3, #15
 8002654:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <SystemInit+0xe8>)
 8002656:	f043 0307 	orr.w	r3, r3, #7
 800265a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800265c:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <SystemInit+0xec>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2d      	ldr	r2, [pc, #180]	; (8002718 <SystemInit+0xec>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <SystemInit+0xec>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <SystemInit+0xec>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4929      	ldr	r1, [pc, #164]	; (8002718 <SystemInit+0xec>)
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <SystemInit+0xf0>)
 8002676:	4013      	ands	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <SystemInit+0xe8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <SystemInit+0xe8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 030f 	bic.w	r3, r3, #15
 800268e:	4a21      	ldr	r2, [pc, #132]	; (8002714 <SystemInit+0xe8>)
 8002690:	f043 0307 	orr.w	r3, r3, #7
 8002694:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <SystemInit+0xec>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <SystemInit+0xec>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <SystemInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <SystemInit+0xec>)
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <SystemInit+0xf4>)
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <SystemInit+0xec>)
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <SystemInit+0xf8>)
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <SystemInit+0xec>)
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <SystemInit+0xfc>)
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <SystemInit+0xec>)
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <SystemInit+0xec>)
 80026c2:	4a19      	ldr	r2, [pc, #100]	; (8002728 <SystemInit+0xfc>)
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <SystemInit+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <SystemInit+0xec>)
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <SystemInit+0xfc>)
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <SystemInit+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <SystemInit+0xec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <SystemInit+0xec>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <SystemInit+0xec>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <SystemInit+0x100>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <SystemInit+0x104>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f6:	d202      	bcs.n	80026fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <SystemInit+0x108>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <SystemInit+0x10c>)
 8002700:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002704:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	52002000 	.word	0x52002000
 8002718:	58024400 	.word	0x58024400
 800271c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002720:	02020200 	.word	0x02020200
 8002724:	01ff0000 	.word	0x01ff0000
 8002728:	01010280 	.word	0x01010280
 800272c:	5c001000 	.word	0x5c001000
 8002730:	ffff0000 	.word	0xffff0000
 8002734:	51008108 	.word	0x51008108
 8002738:	52004000 	.word	0x52004000

0800273c <Reset_Handler>:
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002774 <LoopFillZerobss+0xe>
 8002740:	f7ff ff74 	bl	800262c <SystemInit>
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <LoopFillZerobss+0x12>)
 8002746:	490d      	ldr	r1, [pc, #52]	; (800277c <LoopFillZerobss+0x16>)
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <LoopFillZerobss+0x1a>)
 800274a:	2300      	movs	r3, #0
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:
 800274e:	58d4      	ldr	r4, [r2, r3]
 8002750:	50c4      	str	r4, [r0, r3]
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:
 8002754:	18c4      	adds	r4, r0, r3
 8002756:	428c      	cmp	r4, r1
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <LoopFillZerobss+0x1e>)
 800275c:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <LoopFillZerobss+0x22>)
 800275e:	2300      	movs	r3, #0
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:
 8002766:	42a2      	cmp	r2, r4
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>
 800276a:	f00d faf7 	bl	800fd5c <__libc_init_array>
 800276e:	f7fe fb95 	bl	8000e9c <main>
 8002772:	4770      	bx	lr
 8002774:	24080000 	.word	0x24080000
 8002778:	24000000 	.word	0x24000000
 800277c:	24000094 	.word	0x24000094
 8002780:	08010050 	.word	0x08010050
 8002784:	240000a0 	.word	0x240000a0
 8002788:	24000670 	.word	0x24000670

0800278c <ADC3_IRQHandler>:
 800278c:	e7fe      	b.n	800278c <ADC3_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002796:	2003      	movs	r0, #3
 8002798:	f001 fed6 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800279c:	f006 fcde 	bl	800915c <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4913      	ldr	r1, [pc, #76]	; (80027fc <HAL_Init+0x6c>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_Init+0x68>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_Init+0x6c>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_Init+0x70>)
 80027d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_Init+0x74>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f814 	bl	8002808 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e002      	b.n	80027f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ea:	f7ff fa8f 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	58024400 	.word	0x58024400
 80027fc:	08010000 	.word	0x08010000
 8002800:	24000024 	.word	0x24000024
 8002804:	24000020 	.word	0x24000020

08002808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_InitTick+0x60>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e021      	b.n	8002860 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_InitTick+0x64>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_InitTick+0x60>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f001 febb 	bl	80045ae <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	f001 fe85 	bl	800455e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x68>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2400002c 	.word	0x2400002c
 800286c:	24000020 	.word	0x24000020
 8002870:	24000028 	.word	0x24000028

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2400002c 	.word	0x2400002c
 8002898:	2400065c 	.word	0x2400065c

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2400065c 	.word	0x2400065c

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2400002c 	.word	0x2400002c

080028fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_SuspendTick+0x1c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_SuspendTick+0x1c>)
 8002906:	f023 0302 	bic.w	r3, r3, #2
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetREVID+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0c1b      	lsrs	r3, r3, #16
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	5c001000 	.word	0x5c001000

08002934 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	609a      	str	r2, [r3, #8]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	611a      	str	r2, [r3, #16]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
  }
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3330      	adds	r3, #48	; 0x30
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	211f      	movs	r1, #31
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	f003 011f 	and.w	r1, r3, #31
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f023 0203 	bic.w	r2, r3, #3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3314      	adds	r3, #20
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	0e5b      	lsrs	r3, r3, #25
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0d1b      	lsrs	r3, r3, #20
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2107      	movs	r1, #7
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0d1b      	lsrs	r3, r3, #20
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0318 	and.w	r3, r3, #24
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b64:	40d9      	lsrs	r1, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	400b      	ands	r3, r1
 8002b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	000fffff 	.word	0x000fffff

08002b88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 031f 	and.w	r3, r3, #31
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6093      	str	r3, [r2, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	5fffffc0 	.word	0x5fffffc0

08002bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	6fffffc0 	.word	0x6fffffc0

08002c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c2c:	d101      	bne.n	8002c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <LL_ADC_Enable+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	7fffffc0 	.word	0x7fffffc0

08002c68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <LL_ADC_Disable+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	7fffffc0 	.word	0x7fffffc0

08002c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <LL_ADC_IsEnabled+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_ADC_IsEnabled+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d101      	bne.n	8002cce <LL_ADC_IsDisableOngoing+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_ADC_IsDisableOngoing+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_ADC_REG_StartConversion+0x24>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	7fffffc0 	.word	0x7fffffc0

08002d04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_ADC_REG_StopConversion+0x24>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	7fffffc0 	.word	0x7fffffc0

08002d2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d101      	bne.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <LL_ADC_INJ_StopConversion+0x24>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	7fffffc0 	.word	0x7fffffc0

08002d7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e18f      	b.n	80030de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fe ffb7 	bl	8001d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff feef 	bl	8002bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fed5 	bl	8002ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff0a 	bl	8002c18 <LL_ADC_IsInternalRegulatorEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d114      	bne.n	8002e34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff feee 	bl	8002bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_ADC_Init+0x290>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	4a87      	ldr	r2, [pc, #540]	; (8003038 <HAL_ADC_Init+0x294>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	3301      	adds	r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e26:	e002      	b.n	8002e2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f9      	bne.n	8002e28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff feed 	bl	8002c18 <LL_ADC_IsInternalRegulatorEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f043 0210 	orr.w	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff61 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002e6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 8129 	bne.w	80030cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 8125 	bne.w	80030cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fefa 	bl	8002c90 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d136      	bne.n	8002f10 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_ADC_Init+0x298>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_Init+0x112>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	; (8003040 <HAL_ADC_Init+0x29c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_ADC_Init+0x130>
 8002eb6:	4861      	ldr	r0, [pc, #388]	; (800303c <HAL_ADC_Init+0x298>)
 8002eb8:	f7ff feea 	bl	8002c90 <LL_ADC_IsEnabled>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	4860      	ldr	r0, [pc, #384]	; (8003040 <HAL_ADC_Init+0x29c>)
 8002ec0:	f7ff fee6 	bl	8002c90 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e008      	b.n	8002ee6 <HAL_ADC_Init+0x142>
 8002ed4:	485b      	ldr	r0, [pc, #364]	; (8003044 <HAL_ADC_Init+0x2a0>)
 8002ed6:	f7ff fedb 	bl	8002c90 <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a53      	ldr	r2, [pc, #332]	; (800303c <HAL_ADC_Init+0x298>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_Init+0x15a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_ADC_Init+0x29c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x15e>
 8002efe:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_ADC_Init+0x2a4>)
 8002f00:	e000      	b.n	8002f04 <HAL_ADC_Init+0x160>
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_ADC_Init+0x2a8>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7ff fd12 	bl	8002934 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f10:	f7ff fd04 	bl	800291c <HAL_GetREVID>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d914      	bls.n	8002f48 <HAL_ADC_Init+0x1a4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d110      	bne.n	8002f48 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7d5b      	ldrb	r3, [r3, #21]
 8002f2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7f1b      	ldrb	r3, [r3, #28]
 8002f3c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f3e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f40:	f043 030c 	orr.w	r3, r3, #12
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e00d      	b.n	8002f64 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7d5b      	ldrb	r3, [r3, #21]
 8002f4c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f52:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f58:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7f1b      	ldrb	r3, [r3, #28]
 8002f5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7f1b      	ldrb	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	045b      	lsls	r3, r3, #17
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_ADC_Init+0x2ac>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff febc 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fede 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8002fc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15f      	bne.n	8003088 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15c      	bne.n	8003088 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7d1b      	ldrb	r3, [r3, #20]
 8002fd2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_ADC_Init+0x2b0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d130      	bne.n	800305c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_ADC_Init+0x2b4>)
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300e:	3a01      	subs	r2, #1
 8003010:	0411      	lsls	r1, r2, #16
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003022:	430a      	orrs	r2, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	e01c      	b.n	800306c <HAL_ADC_Init+0x2c8>
 8003032:	bf00      	nop
 8003034:	24000020 	.word	0x24000020
 8003038:	053e2d63 	.word	0x053e2d63
 800303c:	40022000 	.word	0x40022000
 8003040:	40022100 	.word	0x40022100
 8003044:	58026000 	.word	0x58026000
 8003048:	40022300 	.word	0x40022300
 800304c:	58026300 	.word	0x58026300
 8003050:	fff0c003 	.word	0xfff0c003
 8003054:	ffffbffc 	.word	0xffffbffc
 8003058:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 feea 	bl	8003e5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10c      	bne.n	80030aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f023 010f 	bic.w	r1, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 020f 	bic.w	r2, r2, #15
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
 80030ca:	e007      	b.n	80030dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f043 0210 	orr.w	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop

080030e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_ADC_Start_DMA+0x168>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_ADC_Start_DMA+0x20>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a54      	ldr	r2, [pc, #336]	; (8003254 <HAL_ADC_Start_DMA+0x16c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_ADC_Start_DMA+0x24>
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_ADC_Start_DMA+0x170>)
 800310a:	e000      	b.n	800310e <HAL_ADC_Start_DMA+0x26>
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_ADC_Start_DMA+0x174>)
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd3a 	bl	8002b88 <LL_ADC_GetMultimode>
 8003114:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe06 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 808c 	bne.w	8003240 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Start_DMA+0x4e>
 8003132:	2302      	movs	r3, #2
 8003134:	e087      	b.n	8003246 <HAL_ADC_Start_DMA+0x15e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d002      	beq.n	8003150 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d170      	bne.n	8003232 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fd05 	bl	8003b60 <ADC_Enable>
 8003156:	4603      	mov	r3, r0
 8003158:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d163      	bne.n	8003228 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003164:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_ADC_Start_DMA+0x178>)
 8003166:	4013      	ands	r3, r2
 8003168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a37      	ldr	r2, [pc, #220]	; (8003254 <HAL_ADC_Start_DMA+0x16c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d002      	beq.n	8003180 <HAL_ADC_Start_DMA+0x98>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e000      	b.n	8003182 <HAL_ADC_Start_DMA+0x9a>
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_ADC_Start_DMA+0x168>)
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4293      	cmp	r3, r2
 8003188:	d002      	beq.n	8003190 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f023 0206 	bic.w	r2, r3, #6
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58
 80031b4:	e002      	b.n	80031bc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_ADC_Start_DMA+0x17c>)
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <HAL_ADC_Start_DMA+0x180>)
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_ADC_Start_DMA+0x184>)
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	221c      	movs	r2, #28
 80031da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0210 	orr.w	r2, r2, #16
 80031f2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7ff fc5f 	bl	8002ac2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3340      	adds	r3, #64	; 0x40
 800320e:	4619      	mov	r1, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f001 fefc 	bl	8005010 <HAL_DMA_Start_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fd5b 	bl	8002cdc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003226:	e00d      	b.n	8003244 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003230:	e008      	b.n	8003244 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800323e:	e001      	b.n	8003244 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003240:	2302      	movs	r3, #2
 8003242:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40022000 	.word	0x40022000
 8003254:	40022100 	.word	0x40022100
 8003258:	40022300 	.word	0x40022300
 800325c:	58026300 	.word	0x58026300
 8003260:	fffff0fe 	.word	0xfffff0fe
 8003264:	08003d33 	.word	0x08003d33
 8003268:	08003e0b 	.word	0x08003e0b
 800326c:	08003e27 	.word	0x08003e27

08003270 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Stop_DMA+0x16>
 8003282:	2302      	movs	r3, #2
 8003284:	e04f      	b.n	8003326 <HAL_ADC_Stop_DMA+0xb6>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800328e:	2103      	movs	r1, #3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fba9 	bl	80039e8 <ADC_ConversionStop>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d13d      	bne.n	800331c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0203 	bic.w	r2, r2, #3
 80032ae:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d10f      	bne.n	80032de <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 f90e 	bl	80054e4 <HAL_DMA_Abort>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0210 	bic.w	r2, r2, #16
 80032ec:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fcbd 	bl	8003c74 <ADC_Disable>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e002      	b.n	8003306 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fcb7 	bl	8003c74 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_ADC_Stop_DMA+0xc0>)
 8003312:	4013      	ands	r3, r2
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	ffffeefe 	.word	0xffffeefe

08003334 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b0a1      	sub	sp, #132	; 0x84
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a9d      	ldr	r2, [pc, #628]	; (80035d8 <HAL_ADC_ConfigChannel+0x290>)
 8003362:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x2a>
 800336e:	2302      	movs	r3, #2
 8003370:	e321      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x66e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fcd4 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 8306 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x62>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2201      	movs	r2, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	e016      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80033c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	69d1      	ldr	r1, [r2, #28]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	430b      	orrs	r3, r1
 80033e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fb39 	bl	8002a6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fc95 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003402:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fcb7 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 800340e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 80b3 	bne.w	800357e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80af 	bne.w	800357e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	461a      	mov	r2, r3
 800342e:	f7ff fb5b 	bl	8002ae8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_ADC_ConfigChannel+0x294>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800343a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800343e:	d10b      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x110>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	e01d      	b.n	8003494 <HAL_ADC_ConfigChannel+0x14c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_ADC_ConfigChannel+0x136>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	e00a      	b.n	8003494 <HAL_ADC_ConfigChannel+0x14c>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d027      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	f7ff fa76 	bl	800299c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6919      	ldr	r1, [r3, #16]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	7e5b      	ldrb	r3, [r3, #25]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x17e>
 80034c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034c4:	e000      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x180>
 80034c6:	2300      	movs	r3, #0
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff faa0 	bl	8002a0e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6919      	ldr	r1, [r3, #16]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7e1b      	ldrb	r3, [r3, #24]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x19c>
 80034de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x19e>
 80034e4:	2300      	movs	r3, #0
 80034e6:	461a      	mov	r2, r3
 80034e8:	f7ff fa78 	bl	80029dc <LL_ADC_SetDataRightShift>
 80034ec:	e047      	b.n	800357e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	069b      	lsls	r3, r3, #26
 80034fe:	429a      	cmp	r2, r3
 8003500:	d107      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003510:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	069b      	lsls	r3, r3, #26
 8003522:	429a      	cmp	r2, r3
 8003524:	d107      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003534:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	069b      	lsls	r3, r3, #26
 8003546:	429a      	cmp	r2, r3
 8003548:	d107      	bne.n	800355a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003558:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	069b      	lsls	r3, r3, #26
 800356a:	429a      	cmp	r2, r3
 800356c:	d107      	bne.n	800357e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800357c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fb84 	bl	8002c90 <LL_ADC_IsEnabled>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 820d 	bne.w	80039aa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	461a      	mov	r2, r3
 800359e:	f7ff facf 	bl	8002b40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_ADC_ConfigChannel+0x290>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	f040 8133 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d110      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x298>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	0e9b      	lsrs	r3, r3, #26
 80035c4:	3301      	adds	r3, #1
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	bf94      	ite	ls
 80035ce:	2301      	movls	r3, #1
 80035d0:	2300      	movhi	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e01e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x2cc>
 80035d6:	bf00      	nop
 80035d8:	47ff0000 	.word	0x47ff0000
 80035dc:	5c001000 	.word	0x5c001000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b09      	cmp	r3, #9
 800360c:	bf94      	ite	ls
 800360e:	2301      	movls	r3, #1
 8003610:	2300      	movhi	r3, #0
 8003612:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003614:	2b00      	cmp	r3, #0
 8003616:	d079      	beq.n	800370c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x2ec>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	3301      	adds	r3, #1
 800362c:	069b      	lsls	r3, r3, #26
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003632:	e015      	b.n	8003660 <HAL_ADC_ConfigChannel+0x318>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003644:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3301      	adds	r3, #1
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x338>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	3301      	adds	r3, #1
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	e017      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x368>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	ea42 0103 	orr.w	r1, r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x38e>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	051b      	lsls	r3, r3, #20
 80036d4:	e018      	b.n	8003708 <HAL_ADC_ConfigChannel+0x3c0>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e003      	b.n	80036fa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003708:	430b      	orrs	r3, r1
 800370a:	e07e      	b.n	800380a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003714:	2b00      	cmp	r3, #0
 8003716:	d107      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3e0>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	3301      	adds	r3, #1
 8003720:	069b      	lsls	r3, r3, #26
 8003722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003726:	e015      	b.n	8003754 <HAL_ADC_ConfigChannel+0x40c>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	069b      	lsls	r3, r3, #26
 8003750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x42c>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	3301      	adds	r3, #1
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	e017      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x45c>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	61bb      	str	r3, [r7, #24]
  return result;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x488>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	3b1e      	subs	r3, #30
 80037c8:	051b      	lsls	r3, r3, #20
 80037ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ce:	e01b      	b.n	8003808 <HAL_ADC_ConfigChannel+0x4c0>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	60fb      	str	r3, [r7, #12]
  return result;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e003      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f003 021f 	and.w	r2, r3, #31
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	3b1e      	subs	r3, #30
 8003802:	051b      	lsls	r3, r3, #20
 8003804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003808:	430b      	orrs	r3, r1
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	4619      	mov	r1, r3
 8003810:	f7ff f96a 	bl	8002ae8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f280 80c6 	bge.w	80039aa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_ADC_ConfigChannel+0x4ea>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a65      	ldr	r2, [pc, #404]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x4ee>
 8003832:	4b65      	ldr	r3, [pc, #404]	; (80039c8 <HAL_ADC_ConfigChannel+0x680>)
 8003834:	e000      	b.n	8003838 <HAL_ADC_ConfigChannel+0x4f0>
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_ADC_ConfigChannel+0x684>)
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f8a1 	bl	8002980 <LL_ADC_GetCommonPathInternalCh>
 800383e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x50c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5d      	ldr	r2, [pc, #372]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10e      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x52a>
 8003854:	485a      	ldr	r0, [pc, #360]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003856:	f7ff fa1b 	bl	8002c90 <LL_ADC_IsEnabled>
 800385a:	4604      	mov	r4, r0
 800385c:	4859      	ldr	r0, [pc, #356]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 800385e:	f7ff fa17 	bl	8002c90 <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	4323      	orrs	r3, r4
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e008      	b.n	8003884 <HAL_ADC_ConfigChannel+0x53c>
 8003872:	4857      	ldr	r0, [pc, #348]	; (80039d0 <HAL_ADC_ConfigChannel+0x688>)
 8003874:	f7ff fa0c 	bl	8002c90 <LL_ADC_IsEnabled>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07d      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_ADC_ConfigChannel+0x68c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d130      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x5ac>
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12b      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <HAL_ADC_ConfigChannel+0x688>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	f040 8081 	bne.w	80039aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a44      	ldr	r2, [pc, #272]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x574>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a43      	ldr	r2, [pc, #268]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x578>
 80038bc:	4a42      	ldr	r2, [pc, #264]	; (80039c8 <HAL_ADC_ConfigChannel+0x680>)
 80038be:	e000      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x57a>
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_ADC_ConfigChannel+0x684>)
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7ff f845 	bl	800295a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_ADC_ConfigChannel+0x690>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	099b      	lsrs	r3, r3, #6
 80038d6:	4a41      	ldr	r2, [pc, #260]	; (80039dc <HAL_ADC_ConfigChannel+0x694>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038e4:	e002      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f9      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f2:	e05a      	b.n	80039aa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <HAL_ADC_ConfigChannel+0x698>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d11e      	bne.n	800393c <HAL_ADC_ConfigChannel+0x5f4>
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_ADC_ConfigChannel+0x688>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d14b      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x5de>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_ADC_ConfigChannel+0x5e2>
 8003926:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_ADC_ConfigChannel+0x680>)
 8003928:	e000      	b.n	800392c <HAL_ADC_ConfigChannel+0x5e4>
 800392a:	4a28      	ldr	r2, [pc, #160]	; (80039cc <HAL_ADC_ConfigChannel+0x684>)
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7ff f810 	bl	800295a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800393a:	e036      	b.n	80039aa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <HAL_ADC_ConfigChannel+0x69c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d131      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x662>
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d12c      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_ADC_ConfigChannel+0x688>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d127      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_ADC_ConfigChannel+0x626>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x62a>
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_ADC_ConfigChannel+0x680>)
 8003970:	e000      	b.n	8003974 <HAL_ADC_ConfigChannel+0x62c>
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_ADC_ConfigChannel+0x684>)
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7fe ffec 	bl	800295a <LL_ADC_SetCommonPathInternalCh>
 8003982:	e012      	b.n	80039aa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003996:	e008      	b.n	80039aa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3784      	adds	r7, #132	; 0x84
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd90      	pop	{r4, r7, pc}
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40022100 	.word	0x40022100
 80039c8:	40022300 	.word	0x40022300
 80039cc:	58026300 	.word	0x58026300
 80039d0:	58026000 	.word	0x58026000
 80039d4:	cb840000 	.word	0xcb840000
 80039d8:	24000020 	.word	0x24000020
 80039dc:	053e2d63 	.word	0x053e2d63
 80039e0:	c7520000 	.word	0xc7520000
 80039e4:	cfb80000 	.word	0xcfb80000

080039e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff f994 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003a04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f9b6 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8003a10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8098 	beq.w	8003b50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d02a      	beq.n	8003a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7d5b      	ldrb	r3, [r3, #21]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d126      	bne.n	8003a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7d1b      	ldrb	r3, [r3, #20]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d122      	bne.n	8003a84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a42:	e014      	b.n	8003a6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4a45      	ldr	r2, [pc, #276]	; (8003b5c <ADC_ConversionStop+0x174>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d90d      	bls.n	8003a68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	f043 0210 	orr.w	r2, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e074      	b.n	8003b52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d1e3      	bne.n	8003a44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d014      	beq.n	8003ab4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f94c 	bl	8002d2c <LL_ADC_REG_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff f909 	bl	8002cb6 <LL_ADC_IsDisableOngoing>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f928 	bl	8002d04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d014      	beq.n	8003ae4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff f95c 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f8f1 	bl	8002cb6 <LL_ADC_IsDisableOngoing>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f938 	bl	8002d54 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d005      	beq.n	8003af6 <ADC_ConversionStop+0x10e>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d105      	bne.n	8003afc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003af0:	230c      	movs	r3, #12
 8003af2:	617b      	str	r3, [r7, #20]
        break;
 8003af4:	e005      	b.n	8003b02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003af6:	2308      	movs	r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
        break;
 8003afa:	e002      	b.n	8003b02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003afc:	2304      	movs	r3, #4
 8003afe:	617b      	str	r3, [r7, #20]
        break;
 8003b00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b02:	f7fe fecb 	bl	800289c <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b08:	e01b      	b.n	8003b42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b0a:	f7fe fec7 	bl	800289c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d914      	bls.n	8003b42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1dc      	bne.n	8003b0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000cdbff 	.word	0x000cdbff

08003b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f88f 	bl	8002c90 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d16e      	bne.n	8003c56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <ADC_Enable+0x100>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e05a      	b.n	8003c58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f84a 	bl	8002c40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fe76 	bl	800289c <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <ADC_Enable+0x104>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <ADC_Enable+0x66>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <ADC_Enable+0x108>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <ADC_Enable+0x6a>
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <ADC_Enable+0x10c>)
 8003bc8:	e000      	b.n	8003bcc <ADC_Enable+0x6c>
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <ADC_Enable+0x110>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe ffdb 	bl	8002b88 <LL_ADC_GetMultimode>
 8003bd2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <ADC_Enable+0x108>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d002      	beq.n	8003be4 <ADC_Enable+0x84>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e000      	b.n	8003be6 <ADC_Enable+0x86>
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <ADC_Enable+0x104>)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02c      	beq.n	8003c48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d130      	bne.n	8003c56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf4:	e028      	b.n	8003c48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f848 	bl	8002c90 <LL_ADC_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f818 	bl	8002c40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c10:	f7fe fe44 	bl	800289c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d914      	bls.n	8003c48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d00d      	beq.n	8003c48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f043 0210 	orr.w	r2, r3, #16
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d1cf      	bne.n	8003bf6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	8000003f 	.word	0x8000003f
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40022100 	.word	0x40022100
 8003c6c:	40022300 	.word	0x40022300
 8003c70:	58026300 	.word	0x58026300

08003c74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff f818 	bl	8002cb6 <LL_ADC_IsDisableOngoing>
 8003c86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe ffff 	bl	8002c90 <LL_ADC_IsEnabled>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d047      	beq.n	8003d28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d144      	bne.n	8003d28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030d 	and.w	r3, r3, #13
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10c      	bne.n	8003cc6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ffd9 	bl	8002c68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cbe:	f7fe fded 	bl	800289c <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cc4:	e029      	b.n	8003d1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e023      	b.n	8003d2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ce2:	f7fe fddb 	bl	800289c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d914      	bls.n	8003d1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e007      	b.n	8003d2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1dc      	bne.n	8003ce2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d14b      	bne.n	8003de4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d021      	beq.n	8003daa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fe6a 	bl	8002a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d032      	beq.n	8003ddc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d12b      	bne.n	8003ddc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11f      	bne.n	8003ddc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
 8003da8:	e018      	b.n	8003ddc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7fd ff21 	bl	8001c24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003de2:	e00e      	b.n	8003e02 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7ff fa9f 	bl	8003334 <HAL_ADC_ErrorCallback>
}
 8003df6:	e004      	b.n	8003e02 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fd fe97 	bl	8001b4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f043 0204 	orr.w	r2, r3, #4
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fa71 	bl	8003334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a79      	ldr	r2, [pc, #484]	; (8004050 <ADC_ConfigureBoostMode+0x1f4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <ADC_ConfigureBoostMode+0x1c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a78      	ldr	r2, [pc, #480]	; (8004054 <ADC_ConfigureBoostMode+0x1f8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d109      	bne.n	8003e8c <ADC_ConfigureBoostMode+0x30>
 8003e78:	4b77      	ldr	r3, [pc, #476]	; (8004058 <ADC_ConfigureBoostMode+0x1fc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e008      	b.n	8003e9e <ADC_ConfigureBoostMode+0x42>
 8003e8c:	4b73      	ldr	r3, [pc, #460]	; (800405c <ADC_ConfigureBoostMode+0x200>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01c      	beq.n	8003edc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ea2:	f005 fad5 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8003ea6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eb0:	d010      	beq.n	8003ed4 <ADC_ConfigureBoostMode+0x78>
 8003eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eb6:	d871      	bhi.n	8003f9c <ADC_ConfigureBoostMode+0x140>
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d002      	beq.n	8003ec4 <ADC_ConfigureBoostMode+0x68>
 8003ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec2:	d16b      	bne.n	8003f9c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
        break;
 8003ed2:	e066      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	60fb      	str	r3, [r7, #12]
        break;
 8003eda:	e062      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003edc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ee0:	f006 fa58 	bl	800a394 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ee4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003eee:	d051      	beq.n	8003f94 <ADC_ConfigureBoostMode+0x138>
 8003ef0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ef4:	d854      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003ef6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003efa:	d047      	beq.n	8003f8c <ADC_ConfigureBoostMode+0x130>
 8003efc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f00:	d84e      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f06:	d03d      	beq.n	8003f84 <ADC_ConfigureBoostMode+0x128>
 8003f08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f0c:	d848      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f12:	d033      	beq.n	8003f7c <ADC_ConfigureBoostMode+0x120>
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d842      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f1e:	d029      	beq.n	8003f74 <ADC_ConfigureBoostMode+0x118>
 8003f20:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f24:	d83c      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f2a:	d01a      	beq.n	8003f62 <ADC_ConfigureBoostMode+0x106>
 8003f2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f30:	d836      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f36:	d014      	beq.n	8003f62 <ADC_ConfigureBoostMode+0x106>
 8003f38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f3c:	d830      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f42:	d00e      	beq.n	8003f62 <ADC_ConfigureBoostMode+0x106>
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f48:	d82a      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f4e:	d008      	beq.n	8003f62 <ADC_ConfigureBoostMode+0x106>
 8003f50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f54:	d824      	bhi.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
 8003f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f5a:	d002      	beq.n	8003f62 <ADC_ConfigureBoostMode+0x106>
 8003f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f60:	d11e      	bne.n	8003fa0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0c9b      	lsrs	r3, r3, #18
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	60fb      	str	r3, [r7, #12]
        break;
 8003f72:	e016      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
        break;
 8003f7a:	e012      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	60fb      	str	r3, [r7, #12]
        break;
 8003f82:	e00e      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	60fb      	str	r3, [r7, #12]
        break;
 8003f8a:	e00a      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	09db      	lsrs	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
        break;
 8003f92:	e006      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
        break;
 8003f9a:	e002      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
        break;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003fa0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003fa2:	f7fe fcbb 	bl	800291c <HAL_GetREVID>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d815      	bhi.n	8003fdc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <ADC_ConfigureBoostMode+0x204>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d908      	bls.n	8003fca <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fc8:	e03e      	b.n	8004048 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd8:	609a      	str	r2, [r3, #8]
}
 8003fda:	e035      	b.n	8004048 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <ADC_ConfigureBoostMode+0x208>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d808      	bhi.n	8003ffc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ff8:	609a      	str	r2, [r3, #8]
}
 8003ffa:	e025      	b.n	8004048 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <ADC_ConfigureBoostMode+0x20c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d80a      	bhi.n	800401a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	e016      	b.n	8004048 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <ADC_ConfigureBoostMode+0x210>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d80a      	bhi.n	8004038 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004034:	609a      	str	r2, [r3, #8]
}
 8004036:	e007      	b.n	8004048 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40022000 	.word	0x40022000
 8004054:	40022100 	.word	0x40022100
 8004058:	40022300 	.word	0x40022300
 800405c:	58026300 	.word	0x58026300
 8004060:	01312d00 	.word	0x01312d00
 8004064:	005f5e10 	.word	0x005f5e10
 8004068:	00bebc20 	.word	0x00bebc20
 800406c:	017d7840 	.word	0x017d7840

08004070 <LL_ADC_IsEnabled>:
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <LL_ADC_IsEnabled+0x18>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <LL_ADC_IsEnabled+0x1a>
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <LL_ADC_StartCalibration>:
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <LL_ADC_StartCalibration+0x38>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	3ffeffc0 	.word	0x3ffeffc0

080040d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e8:	d101      	bne.n	80040ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_REG_IsConversionOngoing>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d101      	bne.n	8004114 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_ADCEx_Calibration_Start+0x1e>
 800413e:	2302      	movs	r3, #2
 8004140:	e04c      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xb8>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff fd92 	bl	8003c74 <ADC_Disable>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d135      	bne.n	80041c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004160:	4013      	ands	r3, r2
 8004162:	f043 0202 	orr.w	r2, r3, #2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff90 	bl	8004098 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004178:	e014      	b.n	80041a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3301      	adds	r3, #1
 800417e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d30d      	bcc.n	80041a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f023 0312 	bic.w	r3, r3, #18
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e01b      	b.n	80041dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff93 	bl	80040d4 <LL_ADC_IsCalibrationOnGoing>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e2      	bne.n	800417a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f023 0303 	bic.w	r3, r3, #3
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
 80041c4:	e005      	b.n	80041d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	ffffeefd 	.word	0xffffeefd
 80041e8:	25c3f800 	.word	0x25c3f800

080041ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b09f      	sub	sp, #124	; 0x7c
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004206:	2302      	movs	r3, #2
 8004208:	e0be      	b.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
 8004218:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d102      	bne.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004224:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	e001      	b.n	800422e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e09d      	b.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff54 	bl	80040fc <LL_ADC_REG_IsConversionOngoing>
 8004254:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff4e 	bl	80040fc <LL_ADC_REG_IsConversionOngoing>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d17f      	bne.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004268:	2b00      	cmp	r3, #0
 800426a:	d17c      	bne.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a47      	ldr	r2, [pc, #284]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a46      	ldr	r2, [pc, #280]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004280:	4b45      	ldr	r3, [pc, #276]	; (8004398 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004282:	e000      	b.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004284:	4b45      	ldr	r3, [pc, #276]	; (800439c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004286:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d039      	beq.n	8004304 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	431a      	orrs	r2, r3
 800429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3a      	ldr	r2, [pc, #232]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a38      	ldr	r2, [pc, #224]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10e      	bne.n	80042d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042b6:	4836      	ldr	r0, [pc, #216]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042b8:	f7ff feda 	bl	8004070 <LL_ADC_IsEnabled>
 80042bc:	4604      	mov	r4, r0
 80042be:	4835      	ldr	r0, [pc, #212]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042c0:	f7ff fed6 	bl	8004070 <LL_ADC_IsEnabled>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4323      	orrs	r3, r4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e008      	b.n	80042e6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042d4:	4832      	ldr	r0, [pc, #200]	; (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042d6:	f7ff fecb 	bl	8004070 <LL_ADC_IsEnabled>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d047      	beq.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	6892      	ldr	r2, [r2, #8]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004302:	e03a      	b.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10e      	bne.n	8004342 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004324:	481a      	ldr	r0, [pc, #104]	; (8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004326:	f7ff fea3 	bl	8004070 <LL_ADC_IsEnabled>
 800432a:	4604      	mov	r4, r0
 800432c:	4819      	ldr	r0, [pc, #100]	; (8004394 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800432e:	f7ff fe9f 	bl	8004070 <LL_ADC_IsEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	4323      	orrs	r3, r4
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e008      	b.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004342:	4817      	ldr	r0, [pc, #92]	; (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004344:	f7ff fe94 	bl	8004070 <LL_ADC_IsEnabled>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800435e:	4013      	ands	r3, r2
 8004360:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004362:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004364:	e009      	b.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004378:	e000      	b.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800437a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004384:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004388:	4618      	mov	r0, r3
 800438a:	377c      	adds	r7, #124	; 0x7c
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}
 8004390:	40022000 	.word	0x40022000
 8004394:	40022100 	.word	0x40022100
 8004398:	40022300 	.word	0x40022300
 800439c:	58026300 	.word	0x58026300
 80043a0:	58026000 	.word	0x58026000
 80043a4:	fffff0e0 	.word	0xfffff0e0

080043a8 <__NVIC_SetPriorityGrouping>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <__NVIC_SetPriorityGrouping+0x40>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <__NVIC_SetPriorityGrouping+0x40>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	05fa0000 	.word	0x05fa0000

080043f0 <__NVIC_GetPriorityGrouping>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	; (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004514:	d301      	bcc.n	800451a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <SysTick_Config+0x40>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004522:	210f      	movs	r1, #15
 8004524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004528:	f7ff ff8e 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <SysTick_Config+0x40>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <SysTick_Config+0x40>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff29 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800456c:	f7ff ff40 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff90 	bl	800449c <NVIC_EncodePriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff5f 	bl	8004448 <__NVIC_SetPriority>
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff33 	bl	800440c <__NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa4 	bl	8004504 <SysTick_Config>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e014      	b.n	8004602 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fd fce3 	bl	8001fb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	795b      	ldrb	r3, [r3, #5]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_DAC_Start+0x16>
 800461c:	2302      	movs	r3, #2
 800461e:	e040      	b.n	80046a2 <HAL_DAC_Start+0x98>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11d      	bne.n	8004694 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	e014      	b.n	8004694 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2102      	movs	r1, #2
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0202 	orr.w	r2, r2, #2
 8004692:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3308      	adds	r3, #8
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e004      	b.n	80046e2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	3314      	adds	r3, #20
 80046e0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	461a      	mov	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	795b      	ldrb	r3, [r3, #5]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_DAC_ConfigChannel+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e11d      	b.n	800494c <HAL_DAC_ConfigChannel+0x254>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2202      	movs	r2, #2
 800471a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d174      	bne.n	800480e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004724:	f7fe f8ba 	bl	800289c <HAL_GetTick>
 8004728:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d134      	bne.n	800479a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004730:	e011      	b.n	8004756 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004732:	f7fe f8b3 	bl	800289c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d90a      	bls.n	8004756 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f043 0208 	orr.w	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2203      	movs	r2, #3
 8004750:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0fa      	b.n	800494c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475c:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <HAL_DAC_ConfigChannel+0x25c>)
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004764:	2001      	movs	r0, #1
 8004766:	f7fe f8a5 	bl	80028b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	6992      	ldr	r2, [r2, #24]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40
 8004774:	e01e      	b.n	80047b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004776:	f7fe f891 	bl	800289c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d90a      	bls.n	800479a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f043 0208 	orr.w	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2203      	movs	r2, #3
 8004794:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0d8      	b.n	800494c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	dbe8      	blt.n	8004776 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80047a4:	2001      	movs	r0, #1
 80047a6:	f7fe f885 	bl	80028b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	6992      	ldr	r2, [r2, #24]
 80047b2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	ea02 0103 	and.w	r1, r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	409a      	lsls	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	21ff      	movs	r1, #255	; 0xff
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	ea02 0103 	and.w	r1, r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	409a      	lsls	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d11d      	bne.n	8004852 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	221f      	movs	r2, #31
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4013      	ands	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2207      	movs	r2, #7
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4013      	ands	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e00f      	b.n	800489c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d102      	bne.n	800488a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004884:	2301      	movs	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e008      	b.n	800489c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004892:	2301      	movs	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e001      	b.n	800489c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43da      	mvns	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	400a      	ands	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4013      	ands	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	22c0      	movs	r2, #192	; 0xc0
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43da      	mvns	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	400a      	ands	r2, r1
 800493c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20008000 	.word	0x20008000

08004958 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004960:	f7fd ff9c 	bl	800289c <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e316      	b.n	8004f9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a66      	ldr	r2, [pc, #408]	; (8004b10 <HAL_DMA_Init+0x1b8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04a      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a65      	ldr	r2, [pc, #404]	; (8004b14 <HAL_DMA_Init+0x1bc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d045      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a63      	ldr	r2, [pc, #396]	; (8004b18 <HAL_DMA_Init+0x1c0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d040      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a62      	ldr	r2, [pc, #392]	; (8004b1c <HAL_DMA_Init+0x1c4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d03b      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a60      	ldr	r2, [pc, #384]	; (8004b20 <HAL_DMA_Init+0x1c8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d036      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5f      	ldr	r2, [pc, #380]	; (8004b24 <HAL_DMA_Init+0x1cc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d031      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5d      	ldr	r2, [pc, #372]	; (8004b28 <HAL_DMA_Init+0x1d0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02c      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_DMA_Init+0x1d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d027      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5a      	ldr	r2, [pc, #360]	; (8004b30 <HAL_DMA_Init+0x1d8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d022      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a59      	ldr	r2, [pc, #356]	; (8004b34 <HAL_DMA_Init+0x1dc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01d      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a57      	ldr	r2, [pc, #348]	; (8004b38 <HAL_DMA_Init+0x1e0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d018      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a56      	ldr	r2, [pc, #344]	; (8004b3c <HAL_DMA_Init+0x1e4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a54      	ldr	r2, [pc, #336]	; (8004b40 <HAL_DMA_Init+0x1e8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00e      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <HAL_DMA_Init+0x1ec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a51      	ldr	r2, [pc, #324]	; (8004b48 <HAL_DMA_Init+0x1f0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_DMA_Init+0xb8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a50      	ldr	r2, [pc, #320]	; (8004b4c <HAL_DMA_Init+0x1f4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_DMA_Init+0xbc>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_DMA_Init+0xbe>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 813b 	beq.w	8004c92 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <HAL_DMA_Init+0x1b8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a36      	ldr	r2, [pc, #216]	; (8004b14 <HAL_DMA_Init+0x1bc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <HAL_DMA_Init+0x1c0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a33      	ldr	r2, [pc, #204]	; (8004b1c <HAL_DMA_Init+0x1c4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a31      	ldr	r2, [pc, #196]	; (8004b20 <HAL_DMA_Init+0x1c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a30      	ldr	r2, [pc, #192]	; (8004b24 <HAL_DMA_Init+0x1cc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2e      	ldr	r2, [pc, #184]	; (8004b28 <HAL_DMA_Init+0x1d0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2d      	ldr	r2, [pc, #180]	; (8004b2c <HAL_DMA_Init+0x1d4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <HAL_DMA_Init+0x1d8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <HAL_DMA_Init+0x1dc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <HAL_DMA_Init+0x1e0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_DMA_Init+0x1e4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a25      	ldr	r2, [pc, #148]	; (8004b40 <HAL_DMA_Init+0x1e8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <HAL_DMA_Init+0x1ec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <HAL_DMA_Init+0x1f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_Init+0x174>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <HAL_DMA_Init+0x1f4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <HAL_DMA_Init+0x186>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <HAL_DMA_Init+0x196>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004aee:	e02f      	b.n	8004b50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af0:	f7fd fed4 	bl	800289c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d928      	bls.n	8004b50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2203      	movs	r2, #3
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e246      	b.n	8004f9e <HAL_DMA_Init+0x646>
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1c8      	bne.n	8004af0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4b83      	ldr	r3, [pc, #524]	; (8004d78 <HAL_DMA_Init+0x420>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4313      	orrs	r3, r2
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004bb4:	4b71      	ldr	r3, [pc, #452]	; (8004d7c <HAL_DMA_Init+0x424>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b71      	ldr	r3, [pc, #452]	; (8004d80 <HAL_DMA_Init+0x428>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc0:	d328      	bcc.n	8004c14 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b28      	cmp	r3, #40	; 0x28
 8004bc8:	d903      	bls.n	8004bd2 <HAL_DMA_Init+0x27a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd0:	d917      	bls.n	8004c02 <HAL_DMA_Init+0x2aa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd8:	d903      	bls.n	8004be2 <HAL_DMA_Init+0x28a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b42      	cmp	r3, #66	; 0x42
 8004be0:	d90f      	bls.n	8004c02 <HAL_DMA_Init+0x2aa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b46      	cmp	r3, #70	; 0x46
 8004be8:	d903      	bls.n	8004bf2 <HAL_DMA_Init+0x29a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b48      	cmp	r3, #72	; 0x48
 8004bf0:	d907      	bls.n	8004c02 <HAL_DMA_Init+0x2aa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b4e      	cmp	r3, #78	; 0x4e
 8004bf8:	d905      	bls.n	8004c06 <HAL_DMA_Init+0x2ae>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b52      	cmp	r3, #82	; 0x52
 8004c00:	d801      	bhi.n	8004c06 <HAL_DMA_Init+0x2ae>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_Init+0x2b0>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c12:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d117      	bne.n	8004c6e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f002 fb33 	bl	80072bc <DMA_CheckFifoParam>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e197      	b.n	8004f9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 fa6e 	bl	8007158 <DMA_CalcBaseAndBitshift>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	223f      	movs	r2, #63	; 0x3f
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	e0cd      	b.n	8004e2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <HAL_DMA_Init+0x42c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a39      	ldr	r2, [pc, #228]	; (8004d88 <HAL_DMA_Init+0x430>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a38      	ldr	r2, [pc, #224]	; (8004d8c <HAL_DMA_Init+0x434>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a36      	ldr	r2, [pc, #216]	; (8004d90 <HAL_DMA_Init+0x438>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a35      	ldr	r2, [pc, #212]	; (8004d94 <HAL_DMA_Init+0x43c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <HAL_DMA_Init+0x440>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a32      	ldr	r2, [pc, #200]	; (8004d9c <HAL_DMA_Init+0x444>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_DMA_Init+0x38a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_DMA_Init+0x448>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA_Init+0x38e>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_DMA_Init+0x390>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8097 	beq.w	8004e1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <HAL_DMA_Init+0x42c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d021      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <HAL_DMA_Init+0x430>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01c      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <HAL_DMA_Init+0x434>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d017      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_DMA_Init+0x438>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d012      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <HAL_DMA_Init+0x43c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00d      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_DMA_Init+0x440>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d008      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_DMA_Init+0x444>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_Init+0x3e4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_DMA_Init+0x448>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <HAL_DMA_Init+0x44c>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d020      	beq.n	8004da8 <HAL_DMA_Init+0x450>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	d102      	bne.n	8004d74 <HAL_DMA_Init+0x41c>
 8004d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d72:	e01a      	b.n	8004daa <HAL_DMA_Init+0x452>
 8004d74:	2300      	movs	r3, #0
 8004d76:	e018      	b.n	8004daa <HAL_DMA_Init+0x452>
 8004d78:	fe10803f 	.word	0xfe10803f
 8004d7c:	5c001000 	.word	0x5c001000
 8004d80:	ffff0000 	.word	0xffff0000
 8004d84:	58025408 	.word	0x58025408
 8004d88:	5802541c 	.word	0x5802541c
 8004d8c:	58025430 	.word	0x58025430
 8004d90:	58025444 	.word	0x58025444
 8004d94:	58025458 	.word	0x58025458
 8004d98:	5802546c 	.word	0x5802546c
 8004d9c:	58025480 	.word	0x58025480
 8004da0:	58025494 	.word	0x58025494
 8004da4:	fffe000f 	.word	0xfffe000f
 8004da8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b6e      	ldr	r3, [pc, #440]	; (8004fa8 <HAL_DMA_Init+0x650>)
 8004df0:	4413      	add	r3, r2
 8004df2:	4a6e      	ldr	r2, [pc, #440]	; (8004fac <HAL_DMA_Init+0x654>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	009a      	lsls	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f002 f9a9 	bl	8007158 <DMA_CalcBaseAndBitshift>
 8004e06:	4603      	mov	r3, r0
 8004e08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	409a      	lsls	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e008      	b.n	8004e2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2240      	movs	r2, #64	; 0x40
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2203      	movs	r2, #3
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0b7      	b.n	8004f9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5f      	ldr	r2, [pc, #380]	; (8004fb0 <HAL_DMA_Init+0x658>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d072      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5d      	ldr	r2, [pc, #372]	; (8004fb4 <HAL_DMA_Init+0x65c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d06d      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5c      	ldr	r2, [pc, #368]	; (8004fb8 <HAL_DMA_Init+0x660>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d068      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5a      	ldr	r2, [pc, #360]	; (8004fbc <HAL_DMA_Init+0x664>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d063      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a59      	ldr	r2, [pc, #356]	; (8004fc0 <HAL_DMA_Init+0x668>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d05e      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a57      	ldr	r2, [pc, #348]	; (8004fc4 <HAL_DMA_Init+0x66c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d059      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a56      	ldr	r2, [pc, #344]	; (8004fc8 <HAL_DMA_Init+0x670>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d054      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a54      	ldr	r2, [pc, #336]	; (8004fcc <HAL_DMA_Init+0x674>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d04f      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a53      	ldr	r2, [pc, #332]	; (8004fd0 <HAL_DMA_Init+0x678>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04a      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a51      	ldr	r2, [pc, #324]	; (8004fd4 <HAL_DMA_Init+0x67c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d045      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a50      	ldr	r2, [pc, #320]	; (8004fd8 <HAL_DMA_Init+0x680>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d040      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a4e      	ldr	r2, [pc, #312]	; (8004fdc <HAL_DMA_Init+0x684>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d03b      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4d      	ldr	r2, [pc, #308]	; (8004fe0 <HAL_DMA_Init+0x688>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d036      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	; (8004fe4 <HAL_DMA_Init+0x68c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <HAL_DMA_Init+0x690>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02c      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_DMA_Init+0x694>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d027      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a47      	ldr	r2, [pc, #284]	; (8004ff0 <HAL_DMA_Init+0x698>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a45      	ldr	r2, [pc, #276]	; (8004ff4 <HAL_DMA_Init+0x69c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a44      	ldr	r2, [pc, #272]	; (8004ff8 <HAL_DMA_Init+0x6a0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <HAL_DMA_Init+0x6a4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <HAL_DMA_Init+0x6a8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3f      	ldr	r2, [pc, #252]	; (8005004 <HAL_DMA_Init+0x6ac>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3e      	ldr	r2, [pc, #248]	; (8005008 <HAL_DMA_Init+0x6b0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_DMA_Init+0x5c6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3c      	ldr	r2, [pc, #240]	; (800500c <HAL_DMA_Init+0x6b4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_DMA_Init+0x5ca>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_DMA_Init+0x5cc>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d032      	beq.n	8004f8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f002 fa43 	bl	80073b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d102      	bne.n	8004f3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <HAL_DMA_Init+0x624>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d80c      	bhi.n	8004f7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f002 fac0 	bl	80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	e008      	b.n	8004f8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	a7fdabf8 	.word	0xa7fdabf8
 8004fac:	cccccccd 	.word	0xcccccccd
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8
 8004ff0:	58025408 	.word	0x58025408
 8004ff4:	5802541c 	.word	0x5802541c
 8004ff8:	58025430 	.word	0x58025430
 8004ffc:	58025444 	.word	0x58025444
 8005000:	58025458 	.word	0x58025458
 8005004:	5802546c 	.word	0x5802546c
 8005008:	58025480 	.word	0x58025480
 800500c:	58025494 	.word	0x58025494

08005010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e226      	b.n	800547a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_DMA_Start_IT+0x2a>
 8005036:	2302      	movs	r3, #2
 8005038:	e21f      	b.n	800547a <HAL_DMA_Start_IT+0x46a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 820a 	bne.w	8005464 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a68      	ldr	r2, [pc, #416]	; (8005204 <HAL_DMA_Start_IT+0x1f4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d04a      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a66      	ldr	r2, [pc, #408]	; (8005208 <HAL_DMA_Start_IT+0x1f8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d045      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a65      	ldr	r2, [pc, #404]	; (800520c <HAL_DMA_Start_IT+0x1fc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d040      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a63      	ldr	r2, [pc, #396]	; (8005210 <HAL_DMA_Start_IT+0x200>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d03b      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a62      	ldr	r2, [pc, #392]	; (8005214 <HAL_DMA_Start_IT+0x204>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d036      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a60      	ldr	r2, [pc, #384]	; (8005218 <HAL_DMA_Start_IT+0x208>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d031      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5f      	ldr	r2, [pc, #380]	; (800521c <HAL_DMA_Start_IT+0x20c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02c      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5d      	ldr	r2, [pc, #372]	; (8005220 <HAL_DMA_Start_IT+0x210>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d027      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a5c      	ldr	r2, [pc, #368]	; (8005224 <HAL_DMA_Start_IT+0x214>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5a      	ldr	r2, [pc, #360]	; (8005228 <HAL_DMA_Start_IT+0x218>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a59      	ldr	r2, [pc, #356]	; (800522c <HAL_DMA_Start_IT+0x21c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a57      	ldr	r2, [pc, #348]	; (8005230 <HAL_DMA_Start_IT+0x220>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a56      	ldr	r2, [pc, #344]	; (8005234 <HAL_DMA_Start_IT+0x224>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a54      	ldr	r2, [pc, #336]	; (8005238 <HAL_DMA_Start_IT+0x228>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a53      	ldr	r2, [pc, #332]	; (800523c <HAL_DMA_Start_IT+0x22c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_Start_IT+0xee>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a51      	ldr	r2, [pc, #324]	; (8005240 <HAL_DMA_Start_IT+0x230>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d108      	bne.n	8005110 <HAL_DMA_Start_IT+0x100>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e007      	b.n	8005120 <HAL_DMA_Start_IT+0x110>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f001 fe6a 	bl	8006e00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a34      	ldr	r2, [pc, #208]	; (8005204 <HAL_DMA_Start_IT+0x1f4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a33      	ldr	r2, [pc, #204]	; (8005208 <HAL_DMA_Start_IT+0x1f8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a31      	ldr	r2, [pc, #196]	; (800520c <HAL_DMA_Start_IT+0x1fc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a30      	ldr	r2, [pc, #192]	; (8005210 <HAL_DMA_Start_IT+0x200>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <HAL_DMA_Start_IT+0x204>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <HAL_DMA_Start_IT+0x208>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_DMA_Start_IT+0x20c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <HAL_DMA_Start_IT+0x210>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <HAL_DMA_Start_IT+0x214>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a27      	ldr	r2, [pc, #156]	; (8005228 <HAL_DMA_Start_IT+0x218>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a25      	ldr	r2, [pc, #148]	; (800522c <HAL_DMA_Start_IT+0x21c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a24      	ldr	r2, [pc, #144]	; (8005230 <HAL_DMA_Start_IT+0x220>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_DMA_Start_IT+0x224>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <HAL_DMA_Start_IT+0x228>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	; (800523c <HAL_DMA_Start_IT+0x22c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_Start_IT+0x1bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <HAL_DMA_Start_IT+0x230>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_DMA_Start_IT+0x1c0>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_DMA_Start_IT+0x1c2>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d036      	beq.n	8005244 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 021e 	bic.w	r2, r3, #30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0216 	orr.w	r2, r2, #22
 80051e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03e      	beq.n	8005270 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0208 	orr.w	r2, r2, #8
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e035      	b.n	8005270 <HAL_DMA_Start_IT+0x260>
 8005204:	40020010 	.word	0x40020010
 8005208:	40020028 	.word	0x40020028
 800520c:	40020040 	.word	0x40020040
 8005210:	40020058 	.word	0x40020058
 8005214:	40020070 	.word	0x40020070
 8005218:	40020088 	.word	0x40020088
 800521c:	400200a0 	.word	0x400200a0
 8005220:	400200b8 	.word	0x400200b8
 8005224:	40020410 	.word	0x40020410
 8005228:	40020428 	.word	0x40020428
 800522c:	40020440 	.word	0x40020440
 8005230:	40020458 	.word	0x40020458
 8005234:	40020470 	.word	0x40020470
 8005238:	40020488 	.word	0x40020488
 800523c:	400204a0 	.word	0x400204a0
 8005240:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 020e 	bic.w	r2, r3, #14
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 020a 	orr.w	r2, r2, #10
 8005256:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0204 	orr.w	r2, r2, #4
 800526e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a83      	ldr	r2, [pc, #524]	; (8005484 <HAL_DMA_Start_IT+0x474>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d072      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a82      	ldr	r2, [pc, #520]	; (8005488 <HAL_DMA_Start_IT+0x478>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d06d      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a80      	ldr	r2, [pc, #512]	; (800548c <HAL_DMA_Start_IT+0x47c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d068      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7f      	ldr	r2, [pc, #508]	; (8005490 <HAL_DMA_Start_IT+0x480>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d063      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7d      	ldr	r2, [pc, #500]	; (8005494 <HAL_DMA_Start_IT+0x484>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d05e      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a7c      	ldr	r2, [pc, #496]	; (8005498 <HAL_DMA_Start_IT+0x488>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d059      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7a      	ldr	r2, [pc, #488]	; (800549c <HAL_DMA_Start_IT+0x48c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d054      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a79      	ldr	r2, [pc, #484]	; (80054a0 <HAL_DMA_Start_IT+0x490>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d04f      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a77      	ldr	r2, [pc, #476]	; (80054a4 <HAL_DMA_Start_IT+0x494>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d04a      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a76      	ldr	r2, [pc, #472]	; (80054a8 <HAL_DMA_Start_IT+0x498>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d045      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a74      	ldr	r2, [pc, #464]	; (80054ac <HAL_DMA_Start_IT+0x49c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d040      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a73      	ldr	r2, [pc, #460]	; (80054b0 <HAL_DMA_Start_IT+0x4a0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d03b      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a71      	ldr	r2, [pc, #452]	; (80054b4 <HAL_DMA_Start_IT+0x4a4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d036      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a70      	ldr	r2, [pc, #448]	; (80054b8 <HAL_DMA_Start_IT+0x4a8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d031      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6e      	ldr	r2, [pc, #440]	; (80054bc <HAL_DMA_Start_IT+0x4ac>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d02c      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6d      	ldr	r2, [pc, #436]	; (80054c0 <HAL_DMA_Start_IT+0x4b0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d027      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6b      	ldr	r2, [pc, #428]	; (80054c4 <HAL_DMA_Start_IT+0x4b4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d022      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6a      	ldr	r2, [pc, #424]	; (80054c8 <HAL_DMA_Start_IT+0x4b8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d01d      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a68      	ldr	r2, [pc, #416]	; (80054cc <HAL_DMA_Start_IT+0x4bc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d018      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a67      	ldr	r2, [pc, #412]	; (80054d0 <HAL_DMA_Start_IT+0x4c0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a65      	ldr	r2, [pc, #404]	; (80054d4 <HAL_DMA_Start_IT+0x4c4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00e      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <HAL_DMA_Start_IT+0x4c8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d009      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a62      	ldr	r2, [pc, #392]	; (80054dc <HAL_DMA_Start_IT+0x4cc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_DMA_Start_IT+0x350>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <HAL_DMA_Start_IT+0x4d0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_DMA_Start_IT+0x354>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_DMA_Start_IT+0x356>
 8005364:	2300      	movs	r3, #0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01a      	beq.n	80053a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005386:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a37      	ldr	r2, [pc, #220]	; (8005484 <HAL_DMA_Start_IT+0x474>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a36      	ldr	r2, [pc, #216]	; (8005488 <HAL_DMA_Start_IT+0x478>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a34      	ldr	r2, [pc, #208]	; (800548c <HAL_DMA_Start_IT+0x47c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a33      	ldr	r2, [pc, #204]	; (8005490 <HAL_DMA_Start_IT+0x480>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a31      	ldr	r2, [pc, #196]	; (8005494 <HAL_DMA_Start_IT+0x484>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a30      	ldr	r2, [pc, #192]	; (8005498 <HAL_DMA_Start_IT+0x488>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2e      	ldr	r2, [pc, #184]	; (800549c <HAL_DMA_Start_IT+0x48c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <HAL_DMA_Start_IT+0x490>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <HAL_DMA_Start_IT+0x494>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <HAL_DMA_Start_IT+0x498>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a28      	ldr	r2, [pc, #160]	; (80054ac <HAL_DMA_Start_IT+0x49c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <HAL_DMA_Start_IT+0x4a0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <HAL_DMA_Start_IT+0x4a4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <HAL_DMA_Start_IT+0x4a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_DMA_Start_IT+0x4ac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_Start_IT+0x430>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_DMA_Start_IT+0x4b0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <HAL_DMA_Start_IT+0x442>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e012      	b.n	8005478 <HAL_DMA_Start_IT+0x468>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e009      	b.n	8005478 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40020010 	.word	0x40020010
 8005488:	40020028 	.word	0x40020028
 800548c:	40020040 	.word	0x40020040
 8005490:	40020058 	.word	0x40020058
 8005494:	40020070 	.word	0x40020070
 8005498:	40020088 	.word	0x40020088
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400200b8 	.word	0x400200b8
 80054a4:	40020410 	.word	0x40020410
 80054a8:	40020428 	.word	0x40020428
 80054ac:	40020440 	.word	0x40020440
 80054b0:	40020458 	.word	0x40020458
 80054b4:	40020470 	.word	0x40020470
 80054b8:	40020488 	.word	0x40020488
 80054bc:	400204a0 	.word	0x400204a0
 80054c0:	400204b8 	.word	0x400204b8
 80054c4:	58025408 	.word	0x58025408
 80054c8:	5802541c 	.word	0x5802541c
 80054cc:	58025430 	.word	0x58025430
 80054d0:	58025444 	.word	0x58025444
 80054d4:	58025458 	.word	0x58025458
 80054d8:	5802546c 	.word	0x5802546c
 80054dc:	58025480 	.word	0x58025480
 80054e0:	58025494 	.word	0x58025494

080054e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7fd f9d6 	bl	800289c <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e2dc      	b.n	8005ab6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d008      	beq.n	800551a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e2cd      	b.n	8005ab6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a76      	ldr	r2, [pc, #472]	; (80056f8 <HAL_DMA_Abort+0x214>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d04a      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a74      	ldr	r2, [pc, #464]	; (80056fc <HAL_DMA_Abort+0x218>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d045      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a73      	ldr	r2, [pc, #460]	; (8005700 <HAL_DMA_Abort+0x21c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d040      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a71      	ldr	r2, [pc, #452]	; (8005704 <HAL_DMA_Abort+0x220>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d03b      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a70      	ldr	r2, [pc, #448]	; (8005708 <HAL_DMA_Abort+0x224>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d036      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6e      	ldr	r2, [pc, #440]	; (800570c <HAL_DMA_Abort+0x228>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d031      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6d      	ldr	r2, [pc, #436]	; (8005710 <HAL_DMA_Abort+0x22c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d02c      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <HAL_DMA_Abort+0x230>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d027      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6a      	ldr	r2, [pc, #424]	; (8005718 <HAL_DMA_Abort+0x234>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d022      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a68      	ldr	r2, [pc, #416]	; (800571c <HAL_DMA_Abort+0x238>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01d      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a67      	ldr	r2, [pc, #412]	; (8005720 <HAL_DMA_Abort+0x23c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_DMA_Abort+0x240>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a64      	ldr	r2, [pc, #400]	; (8005728 <HAL_DMA_Abort+0x244>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a62      	ldr	r2, [pc, #392]	; (800572c <HAL_DMA_Abort+0x248>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a61      	ldr	r2, [pc, #388]	; (8005730 <HAL_DMA_Abort+0x24c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_DMA_Abort+0xd6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5f      	ldr	r2, [pc, #380]	; (8005734 <HAL_DMA_Abort+0x250>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d101      	bne.n	80055be <HAL_DMA_Abort+0xda>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_DMA_Abort+0xdc>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 021e 	bic.w	r2, r2, #30
 80055d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e00a      	b.n	8005602 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 020e 	bic.w	r2, r2, #14
 80055fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <HAL_DMA_Abort+0x214>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d072      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <HAL_DMA_Abort+0x218>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d06d      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a39      	ldr	r2, [pc, #228]	; (8005700 <HAL_DMA_Abort+0x21c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d068      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a37      	ldr	r2, [pc, #220]	; (8005704 <HAL_DMA_Abort+0x220>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d063      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a36      	ldr	r2, [pc, #216]	; (8005708 <HAL_DMA_Abort+0x224>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d05e      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a34      	ldr	r2, [pc, #208]	; (800570c <HAL_DMA_Abort+0x228>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d059      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a33      	ldr	r2, [pc, #204]	; (8005710 <HAL_DMA_Abort+0x22c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d054      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a31      	ldr	r2, [pc, #196]	; (8005714 <HAL_DMA_Abort+0x230>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d04f      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a30      	ldr	r2, [pc, #192]	; (8005718 <HAL_DMA_Abort+0x234>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d04a      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a2e      	ldr	r2, [pc, #184]	; (800571c <HAL_DMA_Abort+0x238>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d045      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2d      	ldr	r2, [pc, #180]	; (8005720 <HAL_DMA_Abort+0x23c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d040      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <HAL_DMA_Abort+0x240>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d03b      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <HAL_DMA_Abort+0x244>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d036      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <HAL_DMA_Abort+0x248>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d031      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a27      	ldr	r2, [pc, #156]	; (8005730 <HAL_DMA_Abort+0x24c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d02c      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	; (8005734 <HAL_DMA_Abort+0x250>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d027      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a24      	ldr	r2, [pc, #144]	; (8005738 <HAL_DMA_Abort+0x254>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d022      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_DMA_Abort+0x258>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01d      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <HAL_DMA_Abort+0x25c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_DMA_Abort+0x260>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <HAL_DMA_Abort+0x264>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_DMA_Abort+0x268>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_DMA_Abort+0x26c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_Abort+0x20e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a19      	ldr	r2, [pc, #100]	; (8005754 <HAL_DMA_Abort+0x270>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d132      	bne.n	8005758 <HAL_DMA_Abort+0x274>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e031      	b.n	800575a <HAL_DMA_Abort+0x276>
 80056f6:	bf00      	nop
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	58025408 	.word	0x58025408
 800573c:	5802541c 	.word	0x5802541c
 8005740:	58025430 	.word	0x58025430
 8005744:	58025444 	.word	0x58025444
 8005748:	58025458 	.word	0x58025458
 800574c:	5802546c 	.word	0x5802546c
 8005750:	58025480 	.word	0x58025480
 8005754:	58025494 	.word	0x58025494
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800576c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6d      	ldr	r2, [pc, #436]	; (8005928 <HAL_DMA_Abort+0x444>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d04a      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6b      	ldr	r2, [pc, #428]	; (800592c <HAL_DMA_Abort+0x448>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d045      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <HAL_DMA_Abort+0x44c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d040      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <HAL_DMA_Abort+0x450>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d03b      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a67      	ldr	r2, [pc, #412]	; (8005938 <HAL_DMA_Abort+0x454>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d036      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_DMA_Abort+0x458>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d031      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a64      	ldr	r2, [pc, #400]	; (8005940 <HAL_DMA_Abort+0x45c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d02c      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a62      	ldr	r2, [pc, #392]	; (8005944 <HAL_DMA_Abort+0x460>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d027      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a61      	ldr	r2, [pc, #388]	; (8005948 <HAL_DMA_Abort+0x464>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a5f      	ldr	r2, [pc, #380]	; (800594c <HAL_DMA_Abort+0x468>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d01d      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a5e      	ldr	r2, [pc, #376]	; (8005950 <HAL_DMA_Abort+0x46c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5c      	ldr	r2, [pc, #368]	; (8005954 <HAL_DMA_Abort+0x470>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_DMA_Abort+0x474>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a59      	ldr	r2, [pc, #356]	; (800595c <HAL_DMA_Abort+0x478>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a58      	ldr	r2, [pc, #352]	; (8005960 <HAL_DMA_Abort+0x47c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_DMA_Abort+0x32a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a56      	ldr	r2, [pc, #344]	; (8005964 <HAL_DMA_Abort+0x480>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d108      	bne.n	8005820 <HAL_DMA_Abort+0x33c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e007      	b.n	8005830 <HAL_DMA_Abort+0x34c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005830:	e013      	b.n	800585a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005832:	f7fd f833 	bl	800289c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b05      	cmp	r3, #5
 800583e:	d90c      	bls.n	800585a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2203      	movs	r2, #3
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e12d      	b.n	8005ab6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2f      	ldr	r2, [pc, #188]	; (8005928 <HAL_DMA_Abort+0x444>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_DMA_Abort+0x448>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_DMA_Abort+0x44c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a2a      	ldr	r2, [pc, #168]	; (8005934 <HAL_DMA_Abort+0x450>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a29      	ldr	r2, [pc, #164]	; (8005938 <HAL_DMA_Abort+0x454>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <HAL_DMA_Abort+0x458>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a26      	ldr	r2, [pc, #152]	; (8005940 <HAL_DMA_Abort+0x45c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <HAL_DMA_Abort+0x460>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a23      	ldr	r2, [pc, #140]	; (8005948 <HAL_DMA_Abort+0x464>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a21      	ldr	r2, [pc, #132]	; (800594c <HAL_DMA_Abort+0x468>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_DMA_Abort+0x46c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <HAL_DMA_Abort+0x470>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <HAL_DMA_Abort+0x474>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_DMA_Abort+0x478>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1a      	ldr	r2, [pc, #104]	; (8005960 <HAL_DMA_Abort+0x47c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_Abort+0x422>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a18      	ldr	r2, [pc, #96]	; (8005964 <HAL_DMA_Abort+0x480>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_DMA_Abort+0x426>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_DMA_Abort+0x428>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02b      	beq.n	8005968 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	223f      	movs	r2, #63	; 0x3f
 8005920:	409a      	lsls	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	609a      	str	r2, [r3, #8]
 8005926:	e02a      	b.n	800597e <HAL_DMA_Abort+0x49a>
 8005928:	40020010 	.word	0x40020010
 800592c:	40020028 	.word	0x40020028
 8005930:	40020040 	.word	0x40020040
 8005934:	40020058 	.word	0x40020058
 8005938:	40020070 	.word	0x40020070
 800593c:	40020088 	.word	0x40020088
 8005940:	400200a0 	.word	0x400200a0
 8005944:	400200b8 	.word	0x400200b8
 8005948:	40020410 	.word	0x40020410
 800594c:	40020428 	.word	0x40020428
 8005950:	40020440 	.word	0x40020440
 8005954:	40020458 	.word	0x40020458
 8005958:	40020470 	.word	0x40020470
 800595c:	40020488 	.word	0x40020488
 8005960:	400204a0 	.word	0x400204a0
 8005964:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4f      	ldr	r2, [pc, #316]	; (8005ac0 <HAL_DMA_Abort+0x5dc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d072      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a4d      	ldr	r2, [pc, #308]	; (8005ac4 <HAL_DMA_Abort+0x5e0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d06d      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <HAL_DMA_Abort+0x5e4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d068      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <HAL_DMA_Abort+0x5e8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d063      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a49      	ldr	r2, [pc, #292]	; (8005ad0 <HAL_DMA_Abort+0x5ec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d05e      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_DMA_Abort+0x5f0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d059      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <HAL_DMA_Abort+0x5f4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d054      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a44      	ldr	r2, [pc, #272]	; (8005adc <HAL_DMA_Abort+0x5f8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d04f      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a43      	ldr	r2, [pc, #268]	; (8005ae0 <HAL_DMA_Abort+0x5fc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04a      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <HAL_DMA_Abort+0x600>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d045      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <HAL_DMA_Abort+0x604>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d040      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3e      	ldr	r2, [pc, #248]	; (8005aec <HAL_DMA_Abort+0x608>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d03b      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <HAL_DMA_Abort+0x60c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d036      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <HAL_DMA_Abort+0x610>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d031      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <HAL_DMA_Abort+0x614>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d02c      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_DMA_Abort+0x618>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d027      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <HAL_DMA_Abort+0x61c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a35      	ldr	r2, [pc, #212]	; (8005b04 <HAL_DMA_Abort+0x620>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01d      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <HAL_DMA_Abort+0x624>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a32      	ldr	r2, [pc, #200]	; (8005b0c <HAL_DMA_Abort+0x628>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a31      	ldr	r2, [pc, #196]	; (8005b10 <HAL_DMA_Abort+0x62c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2f      	ldr	r2, [pc, #188]	; (8005b14 <HAL_DMA_Abort+0x630>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2e      	ldr	r2, [pc, #184]	; (8005b18 <HAL_DMA_Abort+0x634>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_DMA_Abort+0x58a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2c      	ldr	r2, [pc, #176]	; (8005b1c <HAL_DMA_Abort+0x638>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_DMA_Abort+0x58e>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_DMA_Abort+0x590>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
 8005b00:	58025408 	.word	0x58025408
 8005b04:	5802541c 	.word	0x5802541c
 8005b08:	58025430 	.word	0x58025430
 8005b0c:	58025444 	.word	0x58025444
 8005b10:	58025458 	.word	0x58025458
 8005b14:	5802546c 	.word	0x5802546c
 8005b18:	58025480 	.word	0x58025480
 8005b1c:	58025494 	.word	0x58025494

08005b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e237      	b.n	8005fa2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2280      	movs	r2, #128	; 0x80
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e22c      	b.n	8005fa2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_DMA_Abort_IT+0x1a0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04a      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5b      	ldr	r2, [pc, #364]	; (8005cc4 <HAL_DMA_Abort_IT+0x1a4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d045      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a59      	ldr	r2, [pc, #356]	; (8005cc8 <HAL_DMA_Abort_IT+0x1a8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d040      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a58      	ldr	r2, [pc, #352]	; (8005ccc <HAL_DMA_Abort_IT+0x1ac>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d03b      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a56      	ldr	r2, [pc, #344]	; (8005cd0 <HAL_DMA_Abort_IT+0x1b0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d036      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a55      	ldr	r2, [pc, #340]	; (8005cd4 <HAL_DMA_Abort_IT+0x1b4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d031      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a53      	ldr	r2, [pc, #332]	; (8005cd8 <HAL_DMA_Abort_IT+0x1b8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02c      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a52      	ldr	r2, [pc, #328]	; (8005cdc <HAL_DMA_Abort_IT+0x1bc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d027      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <HAL_DMA_Abort_IT+0x1c0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d022      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a4f      	ldr	r2, [pc, #316]	; (8005ce4 <HAL_DMA_Abort_IT+0x1c4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a4d      	ldr	r2, [pc, #308]	; (8005ce8 <HAL_DMA_Abort_IT+0x1c8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a4c      	ldr	r2, [pc, #304]	; (8005cec <HAL_DMA_Abort_IT+0x1cc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a4a      	ldr	r2, [pc, #296]	; (8005cf0 <HAL_DMA_Abort_IT+0x1d0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a49      	ldr	r2, [pc, #292]	; (8005cf4 <HAL_DMA_Abort_IT+0x1d4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a47      	ldr	r2, [pc, #284]	; (8005cf8 <HAL_DMA_Abort_IT+0x1d8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Abort_IT+0xc8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a46      	ldr	r2, [pc, #280]	; (8005cfc <HAL_DMA_Abort_IT+0x1dc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Abort_IT+0xcc>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_DMA_Abort_IT+0xce>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8086 	beq.w	8005d00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <HAL_DMA_Abort_IT+0x1a0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_DMA_Abort_IT+0x1a4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d045      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <HAL_DMA_Abort_IT+0x1a8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d040      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_DMA_Abort_IT+0x1ac>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d03b      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <HAL_DMA_Abort_IT+0x1b0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d036      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_DMA_Abort_IT+0x1b4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d031      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <HAL_DMA_Abort_IT+0x1b8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02c      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <HAL_DMA_Abort_IT+0x1bc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d027      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <HAL_DMA_Abort_IT+0x1c0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <HAL_DMA_Abort_IT+0x1c4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01d      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <HAL_DMA_Abort_IT+0x1c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <HAL_DMA_Abort_IT+0x1cc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_DMA_Abort_IT+0x1d0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <HAL_DMA_Abort_IT+0x1d4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_DMA_Abort_IT+0x1d8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x17c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <HAL_DMA_Abort_IT+0x1dc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <HAL_DMA_Abort_IT+0x18e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e178      	b.n	8005fa0 <HAL_DMA_Abort_IT+0x480>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e16f      	b.n	8005fa0 <HAL_DMA_Abort_IT+0x480>
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 020e 	bic.w	r2, r2, #14
 8005d0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6c      	ldr	r2, [pc, #432]	; (8005ec8 <HAL_DMA_Abort_IT+0x3a8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6b      	ldr	r2, [pc, #428]	; (8005ecc <HAL_DMA_Abort_IT+0x3ac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a69      	ldr	r2, [pc, #420]	; (8005ed0 <HAL_DMA_Abort_IT+0x3b0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a68      	ldr	r2, [pc, #416]	; (8005ed4 <HAL_DMA_Abort_IT+0x3b4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a66      	ldr	r2, [pc, #408]	; (8005ed8 <HAL_DMA_Abort_IT+0x3b8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a65      	ldr	r2, [pc, #404]	; (8005edc <HAL_DMA_Abort_IT+0x3bc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a63      	ldr	r2, [pc, #396]	; (8005ee0 <HAL_DMA_Abort_IT+0x3c0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a62      	ldr	r2, [pc, #392]	; (8005ee4 <HAL_DMA_Abort_IT+0x3c4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <HAL_DMA_Abort_IT+0x3c8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <HAL_DMA_Abort_IT+0x3cc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5d      	ldr	r2, [pc, #372]	; (8005ef0 <HAL_DMA_Abort_IT+0x3d0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5c      	ldr	r2, [pc, #368]	; (8005ef4 <HAL_DMA_Abort_IT+0x3d4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5a      	ldr	r2, [pc, #360]	; (8005ef8 <HAL_DMA_Abort_IT+0x3d8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a59      	ldr	r2, [pc, #356]	; (8005efc <HAL_DMA_Abort_IT+0x3dc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_DMA_Abort_IT+0x3e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x290>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_DMA_Abort_IT+0x3e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <HAL_DMA_Abort_IT+0x2a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e007      	b.n	8005dd2 <HAL_DMA_Abort_IT+0x2b2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0201 	bic.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3c      	ldr	r2, [pc, #240]	; (8005ec8 <HAL_DMA_Abort_IT+0x3a8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d072      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_DMA_Abort_IT+0x3ac>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d06d      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a39      	ldr	r2, [pc, #228]	; (8005ed0 <HAL_DMA_Abort_IT+0x3b0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d068      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a37      	ldr	r2, [pc, #220]	; (8005ed4 <HAL_DMA_Abort_IT+0x3b4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d063      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a36      	ldr	r2, [pc, #216]	; (8005ed8 <HAL_DMA_Abort_IT+0x3b8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d05e      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a34      	ldr	r2, [pc, #208]	; (8005edc <HAL_DMA_Abort_IT+0x3bc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d059      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <HAL_DMA_Abort_IT+0x3c0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d054      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <HAL_DMA_Abort_IT+0x3c4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d04f      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a30      	ldr	r2, [pc, #192]	; (8005ee8 <HAL_DMA_Abort_IT+0x3c8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04a      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <HAL_DMA_Abort_IT+0x3cc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d045      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_DMA_Abort_IT+0x3d0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <HAL_DMA_Abort_IT+0x3d4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d03b      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <HAL_DMA_Abort_IT+0x3d8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d036      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a28      	ldr	r2, [pc, #160]	; (8005efc <HAL_DMA_Abort_IT+0x3dc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d031      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <HAL_DMA_Abort_IT+0x3e0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d02c      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a25      	ldr	r2, [pc, #148]	; (8005f04 <HAL_DMA_Abort_IT+0x3e4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a24      	ldr	r2, [pc, #144]	; (8005f08 <HAL_DMA_Abort_IT+0x3e8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <HAL_DMA_Abort_IT+0x3ec>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <HAL_DMA_Abort_IT+0x3f0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <HAL_DMA_Abort_IT+0x3f4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <HAL_DMA_Abort_IT+0x3f8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_DMA_Abort_IT+0x3fc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <HAL_DMA_Abort_IT+0x400>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_DMA_Abort_IT+0x3a2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <HAL_DMA_Abort_IT+0x404>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d132      	bne.n	8005f28 <HAL_DMA_Abort_IT+0x408>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e031      	b.n	8005f2a <HAL_DMA_Abort_IT+0x40a>
 8005ec6:	bf00      	nop
 8005ec8:	40020010 	.word	0x40020010
 8005ecc:	40020028 	.word	0x40020028
 8005ed0:	40020040 	.word	0x40020040
 8005ed4:	40020058 	.word	0x40020058
 8005ed8:	40020070 	.word	0x40020070
 8005edc:	40020088 	.word	0x40020088
 8005ee0:	400200a0 	.word	0x400200a0
 8005ee4:	400200b8 	.word	0x400200b8
 8005ee8:	40020410 	.word	0x40020410
 8005eec:	40020428 	.word	0x40020428
 8005ef0:	40020440 	.word	0x40020440
 8005ef4:	40020458 	.word	0x40020458
 8005ef8:	40020470 	.word	0x40020470
 8005efc:	40020488 	.word	0x40020488
 8005f00:	400204a0 	.word	0x400204a0
 8005f04:	400204b8 	.word	0x400204b8
 8005f08:	58025408 	.word	0x58025408
 8005f0c:	5802541c 	.word	0x5802541c
 8005f10:	58025430 	.word	0x58025430
 8005f14:	58025444 	.word	0x58025444
 8005f18:	58025458 	.word	0x58025458
 8005f1c:	5802546c 	.word	0x5802546c
 8005f20:	58025480 	.word	0x58025480
 8005f24:	58025494 	.word	0x58025494
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d028      	beq.n	8005f80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop

08005fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fb8:	4b67      	ldr	r3, [pc, #412]	; (8006158 <HAL_DMA_IRQHandler+0x1ac>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_DMA_IRQHandler+0x1b0>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	0a9b      	lsrs	r3, r3, #10
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a5f      	ldr	r2, [pc, #380]	; (8006160 <HAL_DMA_IRQHandler+0x1b4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d04a      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5d      	ldr	r2, [pc, #372]	; (8006164 <HAL_DMA_IRQHandler+0x1b8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d045      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a5c      	ldr	r2, [pc, #368]	; (8006168 <HAL_DMA_IRQHandler+0x1bc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d040      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5a      	ldr	r2, [pc, #360]	; (800616c <HAL_DMA_IRQHandler+0x1c0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d03b      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a59      	ldr	r2, [pc, #356]	; (8006170 <HAL_DMA_IRQHandler+0x1c4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d036      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a57      	ldr	r2, [pc, #348]	; (8006174 <HAL_DMA_IRQHandler+0x1c8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d031      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a56      	ldr	r2, [pc, #344]	; (8006178 <HAL_DMA_IRQHandler+0x1cc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d02c      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a54      	ldr	r2, [pc, #336]	; (800617c <HAL_DMA_IRQHandler+0x1d0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d027      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a53      	ldr	r2, [pc, #332]	; (8006180 <HAL_DMA_IRQHandler+0x1d4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d022      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a51      	ldr	r2, [pc, #324]	; (8006184 <HAL_DMA_IRQHandler+0x1d8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01d      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a50      	ldr	r2, [pc, #320]	; (8006188 <HAL_DMA_IRQHandler+0x1dc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d018      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a4e      	ldr	r2, [pc, #312]	; (800618c <HAL_DMA_IRQHandler+0x1e0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a4d      	ldr	r2, [pc, #308]	; (8006190 <HAL_DMA_IRQHandler+0x1e4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00e      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a4b      	ldr	r2, [pc, #300]	; (8006194 <HAL_DMA_IRQHandler+0x1e8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a4a      	ldr	r2, [pc, #296]	; (8006198 <HAL_DMA_IRQHandler+0x1ec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_DMA_IRQHandler+0xd2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a48      	ldr	r2, [pc, #288]	; (800619c <HAL_DMA_IRQHandler+0x1f0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d101      	bne.n	8006082 <HAL_DMA_IRQHandler+0xd6>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <HAL_DMA_IRQHandler+0xd8>
 8006082:	2300      	movs	r3, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 842b 	beq.w	80068e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2208      	movs	r2, #8
 8006094:	409a      	lsls	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80a2 	beq.w	80061e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2e      	ldr	r2, [pc, #184]	; (8006160 <HAL_DMA_IRQHandler+0x1b4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d04a      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <HAL_DMA_IRQHandler+0x1b8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d045      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <HAL_DMA_IRQHandler+0x1bc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d040      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2a      	ldr	r2, [pc, #168]	; (800616c <HAL_DMA_IRQHandler+0x1c0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d03b      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a28      	ldr	r2, [pc, #160]	; (8006170 <HAL_DMA_IRQHandler+0x1c4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d036      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_DMA_IRQHandler+0x1c8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d031      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a25      	ldr	r2, [pc, #148]	; (8006178 <HAL_DMA_IRQHandler+0x1cc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d02c      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a24      	ldr	r2, [pc, #144]	; (800617c <HAL_DMA_IRQHandler+0x1d0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d027      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <HAL_DMA_IRQHandler+0x1d4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a21      	ldr	r2, [pc, #132]	; (8006184 <HAL_DMA_IRQHandler+0x1d8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <HAL_DMA_IRQHandler+0x1dc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_DMA_IRQHandler+0x1e0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <HAL_DMA_IRQHandler+0x1e4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <HAL_DMA_IRQHandler+0x1e8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_DMA_IRQHandler+0x1ec>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_DMA_IRQHandler+0x194>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_DMA_IRQHandler+0x1f0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d12f      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x1f4>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf14      	ite	ne
 800614e:	2301      	movne	r3, #1
 8006150:	2300      	moveq	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	e02e      	b.n	80061b4 <HAL_DMA_IRQHandler+0x208>
 8006156:	bf00      	nop
 8006158:	24000020 	.word	0x24000020
 800615c:	1b4e81b5 	.word	0x1b4e81b5
 8006160:	40020010 	.word	0x40020010
 8006164:	40020028 	.word	0x40020028
 8006168:	40020040 	.word	0x40020040
 800616c:	40020058 	.word	0x40020058
 8006170:	40020070 	.word	0x40020070
 8006174:	40020088 	.word	0x40020088
 8006178:	400200a0 	.word	0x400200a0
 800617c:	400200b8 	.word	0x400200b8
 8006180:	40020410 	.word	0x40020410
 8006184:	40020428 	.word	0x40020428
 8006188:	40020440 	.word	0x40020440
 800618c:	40020458 	.word	0x40020458
 8006190:	40020470 	.word	0x40020470
 8006194:	40020488 	.word	0x40020488
 8006198:	400204a0 	.word	0x400204a0
 800619c:	400204b8 	.word	0x400204b8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d015      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0204 	bic.w	r2, r2, #4
 80061c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2208      	movs	r2, #8
 80061d2:	409a      	lsls	r2, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06e      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a69      	ldr	r2, [pc, #420]	; (80063a4 <HAL_DMA_IRQHandler+0x3f8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d04a      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a67      	ldr	r2, [pc, #412]	; (80063a8 <HAL_DMA_IRQHandler+0x3fc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d045      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a66      	ldr	r2, [pc, #408]	; (80063ac <HAL_DMA_IRQHandler+0x400>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d040      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a64      	ldr	r2, [pc, #400]	; (80063b0 <HAL_DMA_IRQHandler+0x404>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d03b      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a63      	ldr	r2, [pc, #396]	; (80063b4 <HAL_DMA_IRQHandler+0x408>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d036      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a61      	ldr	r2, [pc, #388]	; (80063b8 <HAL_DMA_IRQHandler+0x40c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a60      	ldr	r2, [pc, #384]	; (80063bc <HAL_DMA_IRQHandler+0x410>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a5e      	ldr	r2, [pc, #376]	; (80063c0 <HAL_DMA_IRQHandler+0x414>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5d      	ldr	r2, [pc, #372]	; (80063c4 <HAL_DMA_IRQHandler+0x418>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5b      	ldr	r2, [pc, #364]	; (80063c8 <HAL_DMA_IRQHandler+0x41c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5a      	ldr	r2, [pc, #360]	; (80063cc <HAL_DMA_IRQHandler+0x420>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a58      	ldr	r2, [pc, #352]	; (80063d0 <HAL_DMA_IRQHandler+0x424>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a57      	ldr	r2, [pc, #348]	; (80063d4 <HAL_DMA_IRQHandler+0x428>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a55      	ldr	r2, [pc, #340]	; (80063d8 <HAL_DMA_IRQHandler+0x42c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a54      	ldr	r2, [pc, #336]	; (80063dc <HAL_DMA_IRQHandler+0x430>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_DMA_IRQHandler+0x2ee>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a52      	ldr	r2, [pc, #328]	; (80063e0 <HAL_DMA_IRQHandler+0x434>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10a      	bne.n	80062b0 <HAL_DMA_IRQHandler+0x304>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bf14      	ite	ne
 80062a8:	2301      	movne	r3, #1
 80062aa:	2300      	moveq	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e003      	b.n	80062b8 <HAL_DMA_IRQHandler+0x30c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2201      	movs	r2, #1
 80062c6:	409a      	lsls	r2, r3
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d0:	f043 0202 	orr.w	r2, r3, #2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2204      	movs	r2, #4
 80062e2:	409a      	lsls	r2, r3
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 808f 	beq.w	800640c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_DMA_IRQHandler+0x3f8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d04a      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <HAL_DMA_IRQHandler+0x3fc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d045      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a29      	ldr	r2, [pc, #164]	; (80063ac <HAL_DMA_IRQHandler+0x400>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d040      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <HAL_DMA_IRQHandler+0x404>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d03b      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_DMA_IRQHandler+0x408>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d036      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <HAL_DMA_IRQHandler+0x40c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_DMA_IRQHandler+0x410>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d02c      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_DMA_IRQHandler+0x414>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d027      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_DMA_IRQHandler+0x418>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d022      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_DMA_IRQHandler+0x41c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_DMA_IRQHandler+0x420>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_DMA_IRQHandler+0x424>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_DMA_IRQHandler+0x428>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_DMA_IRQHandler+0x42c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_DMA_IRQHandler+0x430>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_DMA_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_DMA_IRQHandler+0x434>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d12a      	bne.n	80063e4 <HAL_DMA_IRQHandler+0x438>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	e023      	b.n	80063ec <HAL_DMA_IRQHandler+0x440>
 80063a4:	40020010 	.word	0x40020010
 80063a8:	40020028 	.word	0x40020028
 80063ac:	40020040 	.word	0x40020040
 80063b0:	40020058 	.word	0x40020058
 80063b4:	40020070 	.word	0x40020070
 80063b8:	40020088 	.word	0x40020088
 80063bc:	400200a0 	.word	0x400200a0
 80063c0:	400200b8 	.word	0x400200b8
 80063c4:	40020410 	.word	0x40020410
 80063c8:	40020428 	.word	0x40020428
 80063cc:	40020440 	.word	0x40020440
 80063d0:	40020458 	.word	0x40020458
 80063d4:	40020470 	.word	0x40020470
 80063d8:	40020488 	.word	0x40020488
 80063dc:	400204a0 	.word	0x400204a0
 80063e0:	400204b8 	.word	0x400204b8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	2204      	movs	r2, #4
 80063fa:	409a      	lsls	r2, r3
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	f043 0204 	orr.w	r2, r3, #4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2210      	movs	r2, #16
 8006416:	409a      	lsls	r2, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a6 	beq.w	800656e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a85      	ldr	r2, [pc, #532]	; (800663c <HAL_DMA_IRQHandler+0x690>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04a      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a83      	ldr	r2, [pc, #524]	; (8006640 <HAL_DMA_IRQHandler+0x694>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d045      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a82      	ldr	r2, [pc, #520]	; (8006644 <HAL_DMA_IRQHandler+0x698>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d040      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a80      	ldr	r2, [pc, #512]	; (8006648 <HAL_DMA_IRQHandler+0x69c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d03b      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a7f      	ldr	r2, [pc, #508]	; (800664c <HAL_DMA_IRQHandler+0x6a0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d036      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7d      	ldr	r2, [pc, #500]	; (8006650 <HAL_DMA_IRQHandler+0x6a4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d031      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a7c      	ldr	r2, [pc, #496]	; (8006654 <HAL_DMA_IRQHandler+0x6a8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d02c      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7a      	ldr	r2, [pc, #488]	; (8006658 <HAL_DMA_IRQHandler+0x6ac>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d027      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a79      	ldr	r2, [pc, #484]	; (800665c <HAL_DMA_IRQHandler+0x6b0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a77      	ldr	r2, [pc, #476]	; (8006660 <HAL_DMA_IRQHandler+0x6b4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01d      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a76      	ldr	r2, [pc, #472]	; (8006664 <HAL_DMA_IRQHandler+0x6b8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a74      	ldr	r2, [pc, #464]	; (8006668 <HAL_DMA_IRQHandler+0x6bc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a73      	ldr	r2, [pc, #460]	; (800666c <HAL_DMA_IRQHandler+0x6c0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a71      	ldr	r2, [pc, #452]	; (8006670 <HAL_DMA_IRQHandler+0x6c4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a70      	ldr	r2, [pc, #448]	; (8006674 <HAL_DMA_IRQHandler+0x6c8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x516>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6e      	ldr	r2, [pc, #440]	; (8006678 <HAL_DMA_IRQHandler+0x6cc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10a      	bne.n	80064d8 <HAL_DMA_IRQHandler+0x52c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	e009      	b.n	80064ec <HAL_DMA_IRQHandler+0x540>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d03e      	beq.n	800656e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2210      	movs	r2, #16
 80064fa:	409a      	lsls	r2, r3
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d108      	bne.n	800652e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d024      	beq.n	800656e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
 800652c:	e01f      	b.n	800656e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01b      	beq.n	800656e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
 800653e:	e016      	b.n	800656e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0208 	bic.w	r2, r2, #8
 800655c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2220      	movs	r2, #32
 8006578:	409a      	lsls	r2, r3
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8110 	beq.w	80067a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <HAL_DMA_IRQHandler+0x690>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d04a      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_DMA_IRQHandler+0x694>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d045      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <HAL_DMA_IRQHandler+0x698>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d040      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_DMA_IRQHandler+0x69c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d03b      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a26      	ldr	r2, [pc, #152]	; (800664c <HAL_DMA_IRQHandler+0x6a0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d036      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_DMA_IRQHandler+0x6a4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d031      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a23      	ldr	r2, [pc, #140]	; (8006654 <HAL_DMA_IRQHandler+0x6a8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d02c      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a22      	ldr	r2, [pc, #136]	; (8006658 <HAL_DMA_IRQHandler+0x6ac>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d027      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a20      	ldr	r2, [pc, #128]	; (800665c <HAL_DMA_IRQHandler+0x6b0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d022      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_DMA_IRQHandler+0x6b4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d01d      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_DMA_IRQHandler+0x6b8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d018      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_DMA_IRQHandler+0x6bc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1a      	ldr	r2, [pc, #104]	; (800666c <HAL_DMA_IRQHandler+0x6c0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00e      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_DMA_IRQHandler+0x6c4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <HAL_DMA_IRQHandler+0x6c8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_DMA_IRQHandler+0x678>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_DMA_IRQHandler+0x6cc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d12b      	bne.n	800667c <HAL_DMA_IRQHandler+0x6d0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	bf14      	ite	ne
 8006632:	2301      	movne	r3, #1
 8006634:	2300      	moveq	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	e02a      	b.n	8006690 <HAL_DMA_IRQHandler+0x6e4>
 800663a:	bf00      	nop
 800663c:	40020010 	.word	0x40020010
 8006640:	40020028 	.word	0x40020028
 8006644:	40020040 	.word	0x40020040
 8006648:	40020058 	.word	0x40020058
 800664c:	40020070 	.word	0x40020070
 8006650:	40020088 	.word	0x40020088
 8006654:	400200a0 	.word	0x400200a0
 8006658:	400200b8 	.word	0x400200b8
 800665c:	40020410 	.word	0x40020410
 8006660:	40020428 	.word	0x40020428
 8006664:	40020440 	.word	0x40020440
 8006668:	40020458 	.word	0x40020458
 800666c:	40020470 	.word	0x40020470
 8006670:	40020488 	.word	0x40020488
 8006674:	400204a0 	.word	0x400204a0
 8006678:	400204b8 	.word	0x400204b8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8087 	beq.w	80067a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2220      	movs	r2, #32
 80066a0:	409a      	lsls	r2, r3
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d139      	bne.n	8006726 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0216 	bic.w	r2, r2, #22
 80066c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <HAL_DMA_IRQHandler+0x736>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0208 	bic.w	r2, r2, #8
 80066f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	223f      	movs	r2, #63	; 0x3f
 80066fc:	409a      	lsls	r2, r3
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 834a 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
          }
          return;
 8006724:	e344      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d018      	beq.n	8006766 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d108      	bne.n	8006754 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02c      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
 8006752:	e027      	b.n	80067a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d023      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
 8006764:	e01e      	b.n	80067a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10f      	bne.n	8006794 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0210 	bic.w	r2, r2, #16
 8006782:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8306 	beq.w	8006dba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8088 	beq.w	80068cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2204      	movs	r2, #4
 80067c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a7a      	ldr	r2, [pc, #488]	; (80069b4 <HAL_DMA_IRQHandler+0xa08>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d04a      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a79      	ldr	r2, [pc, #484]	; (80069b8 <HAL_DMA_IRQHandler+0xa0c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d045      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a77      	ldr	r2, [pc, #476]	; (80069bc <HAL_DMA_IRQHandler+0xa10>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d040      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a76      	ldr	r2, [pc, #472]	; (80069c0 <HAL_DMA_IRQHandler+0xa14>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d03b      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a74      	ldr	r2, [pc, #464]	; (80069c4 <HAL_DMA_IRQHandler+0xa18>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d036      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a73      	ldr	r2, [pc, #460]	; (80069c8 <HAL_DMA_IRQHandler+0xa1c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d031      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a71      	ldr	r2, [pc, #452]	; (80069cc <HAL_DMA_IRQHandler+0xa20>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02c      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a70      	ldr	r2, [pc, #448]	; (80069d0 <HAL_DMA_IRQHandler+0xa24>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d027      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a6e      	ldr	r2, [pc, #440]	; (80069d4 <HAL_DMA_IRQHandler+0xa28>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d022      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a6d      	ldr	r2, [pc, #436]	; (80069d8 <HAL_DMA_IRQHandler+0xa2c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01d      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a6b      	ldr	r2, [pc, #428]	; (80069dc <HAL_DMA_IRQHandler+0xa30>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_DMA_IRQHandler+0xa34>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a68      	ldr	r2, [pc, #416]	; (80069e4 <HAL_DMA_IRQHandler+0xa38>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a67      	ldr	r2, [pc, #412]	; (80069e8 <HAL_DMA_IRQHandler+0xa3c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a65      	ldr	r2, [pc, #404]	; (80069ec <HAL_DMA_IRQHandler+0xa40>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <HAL_DMA_IRQHandler+0x8b8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a64      	ldr	r2, [pc, #400]	; (80069f0 <HAL_DMA_IRQHandler+0xa44>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <HAL_DMA_IRQHandler+0x8ca>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e007      	b.n	8006886 <HAL_DMA_IRQHandler+0x8da>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	429a      	cmp	r2, r3
 8006890:	d307      	bcc.n	80068a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f2      	bne.n	8006886 <HAL_DMA_IRQHandler+0x8da>
 80068a0:	e000      	b.n	80068a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2203      	movs	r2, #3
 80068b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068ba:	e003      	b.n	80068c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8272 	beq.w	8006dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
 80068de:	e26c      	b.n	8006dba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a43      	ldr	r2, [pc, #268]	; (80069f4 <HAL_DMA_IRQHandler+0xa48>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d022      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a42      	ldr	r2, [pc, #264]	; (80069f8 <HAL_DMA_IRQHandler+0xa4c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d01d      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a40      	ldr	r2, [pc, #256]	; (80069fc <HAL_DMA_IRQHandler+0xa50>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a3f      	ldr	r2, [pc, #252]	; (8006a00 <HAL_DMA_IRQHandler+0xa54>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <HAL_DMA_IRQHandler+0xa58>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <HAL_DMA_IRQHandler+0xa5c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a3a      	ldr	r2, [pc, #232]	; (8006a0c <HAL_DMA_IRQHandler+0xa60>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_DMA_IRQHandler+0x984>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a39      	ldr	r2, [pc, #228]	; (8006a10 <HAL_DMA_IRQHandler+0xa64>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <HAL_DMA_IRQHandler+0x988>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <HAL_DMA_IRQHandler+0x98a>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 823f 	beq.w	8006dba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2204      	movs	r2, #4
 800694e:	409a      	lsls	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	4013      	ands	r3, r2
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80cd 	beq.w	8006af4 <HAL_DMA_IRQHandler+0xb48>
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80c7 	beq.w	8006af4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2204      	movs	r2, #4
 8006970:	409a      	lsls	r2, r3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d049      	beq.n	8006a14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8210 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800699c:	e20a      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8206 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069b0:	e200      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe08>
 80069b2:	bf00      	nop
 80069b4:	40020010 	.word	0x40020010
 80069b8:	40020028 	.word	0x40020028
 80069bc:	40020040 	.word	0x40020040
 80069c0:	40020058 	.word	0x40020058
 80069c4:	40020070 	.word	0x40020070
 80069c8:	40020088 	.word	0x40020088
 80069cc:	400200a0 	.word	0x400200a0
 80069d0:	400200b8 	.word	0x400200b8
 80069d4:	40020410 	.word	0x40020410
 80069d8:	40020428 	.word	0x40020428
 80069dc:	40020440 	.word	0x40020440
 80069e0:	40020458 	.word	0x40020458
 80069e4:	40020470 	.word	0x40020470
 80069e8:	40020488 	.word	0x40020488
 80069ec:	400204a0 	.word	0x400204a0
 80069f0:	400204b8 	.word	0x400204b8
 80069f4:	58025408 	.word	0x58025408
 80069f8:	5802541c 	.word	0x5802541c
 80069fc:	58025430 	.word	0x58025430
 8006a00:	58025444 	.word	0x58025444
 8006a04:	58025458 	.word	0x58025458
 8006a08:	5802546c 	.word	0x5802546c
 8006a0c:	58025480 	.word	0x58025480
 8006a10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d160      	bne.n	8006ae0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7f      	ldr	r2, [pc, #508]	; (8006c20 <HAL_DMA_IRQHandler+0xc74>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d04a      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7d      	ldr	r2, [pc, #500]	; (8006c24 <HAL_DMA_IRQHandler+0xc78>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d045      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7c      	ldr	r2, [pc, #496]	; (8006c28 <HAL_DMA_IRQHandler+0xc7c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d040      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a7a      	ldr	r2, [pc, #488]	; (8006c2c <HAL_DMA_IRQHandler+0xc80>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d03b      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a79      	ldr	r2, [pc, #484]	; (8006c30 <HAL_DMA_IRQHandler+0xc84>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d036      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a77      	ldr	r2, [pc, #476]	; (8006c34 <HAL_DMA_IRQHandler+0xc88>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d031      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a76      	ldr	r2, [pc, #472]	; (8006c38 <HAL_DMA_IRQHandler+0xc8c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d02c      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a74      	ldr	r2, [pc, #464]	; (8006c3c <HAL_DMA_IRQHandler+0xc90>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d027      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a73      	ldr	r2, [pc, #460]	; (8006c40 <HAL_DMA_IRQHandler+0xc94>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a71      	ldr	r2, [pc, #452]	; (8006c44 <HAL_DMA_IRQHandler+0xc98>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01d      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a70      	ldr	r2, [pc, #448]	; (8006c48 <HAL_DMA_IRQHandler+0xc9c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d018      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a6e      	ldr	r2, [pc, #440]	; (8006c4c <HAL_DMA_IRQHandler+0xca0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a6d      	ldr	r2, [pc, #436]	; (8006c50 <HAL_DMA_IRQHandler+0xca4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a6b      	ldr	r2, [pc, #428]	; (8006c54 <HAL_DMA_IRQHandler+0xca8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6a      	ldr	r2, [pc, #424]	; (8006c58 <HAL_DMA_IRQHandler+0xcac>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_DMA_IRQHandler+0xb12>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a68      	ldr	r2, [pc, #416]	; (8006c5c <HAL_DMA_IRQHandler+0xcb0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0xb24>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0208 	bic.w	r2, r2, #8
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e007      	b.n	8006ae0 <HAL_DMA_IRQHandler+0xb34>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0204 	bic.w	r2, r2, #4
 8006ade:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8165 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006af2:	e15f      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2202      	movs	r2, #2
 8006afe:	409a      	lsls	r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80c5 	beq.w	8006c94 <HAL_DMA_IRQHandler+0xce8>
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80bf 	beq.w	8006c94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2202      	movs	r2, #2
 8006b20:	409a      	lsls	r2, r3
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d018      	beq.n	8006b62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 813a 	beq.w	8006db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b4c:	e134      	b.n	8006db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8130 	beq.w	8006db8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b60:	e12a      	b.n	8006db8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f040 8089 	bne.w	8006c80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2b      	ldr	r2, [pc, #172]	; (8006c20 <HAL_DMA_IRQHandler+0xc74>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <HAL_DMA_IRQHandler+0xc78>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a28      	ldr	r2, [pc, #160]	; (8006c28 <HAL_DMA_IRQHandler+0xc7c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <HAL_DMA_IRQHandler+0xc80>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <HAL_DMA_IRQHandler+0xc84>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <HAL_DMA_IRQHandler+0xc88>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a22      	ldr	r2, [pc, #136]	; (8006c38 <HAL_DMA_IRQHandler+0xc8c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <HAL_DMA_IRQHandler+0xc90>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <HAL_DMA_IRQHandler+0xc94>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_DMA_IRQHandler+0xc98>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <HAL_DMA_IRQHandler+0xc9c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <HAL_DMA_IRQHandler+0xca0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <HAL_DMA_IRQHandler+0xca4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <HAL_DMA_IRQHandler+0xca8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <HAL_DMA_IRQHandler+0xcac>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xc62>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <HAL_DMA_IRQHandler+0xcb0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d128      	bne.n	8006c60 <HAL_DMA_IRQHandler+0xcb4>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0214 	bic.w	r2, r2, #20
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e027      	b.n	8006c70 <HAL_DMA_IRQHandler+0xcc4>
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 020a 	bic.w	r2, r2, #10
 8006c6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8097 	beq.w	8006db8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c92:	e091      	b.n	8006db8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8088 	beq.w	8006dba <HAL_DMA_IRQHandler+0xe0e>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8082 	beq.w	8006dba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a41      	ldr	r2, [pc, #260]	; (8006dc0 <HAL_DMA_IRQHandler+0xe14>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d04a      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3f      	ldr	r2, [pc, #252]	; (8006dc4 <HAL_DMA_IRQHandler+0xe18>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d045      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3e      	ldr	r2, [pc, #248]	; (8006dc8 <HAL_DMA_IRQHandler+0xe1c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d040      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3c      	ldr	r2, [pc, #240]	; (8006dcc <HAL_DMA_IRQHandler+0xe20>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d03b      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a3b      	ldr	r2, [pc, #236]	; (8006dd0 <HAL_DMA_IRQHandler+0xe24>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d036      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a39      	ldr	r2, [pc, #228]	; (8006dd4 <HAL_DMA_IRQHandler+0xe28>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d031      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a38      	ldr	r2, [pc, #224]	; (8006dd8 <HAL_DMA_IRQHandler+0xe2c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d02c      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a36      	ldr	r2, [pc, #216]	; (8006ddc <HAL_DMA_IRQHandler+0xe30>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d027      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a35      	ldr	r2, [pc, #212]	; (8006de0 <HAL_DMA_IRQHandler+0xe34>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a33      	ldr	r2, [pc, #204]	; (8006de4 <HAL_DMA_IRQHandler+0xe38>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d01d      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a32      	ldr	r2, [pc, #200]	; (8006de8 <HAL_DMA_IRQHandler+0xe3c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a30      	ldr	r2, [pc, #192]	; (8006dec <HAL_DMA_IRQHandler+0xe40>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <HAL_DMA_IRQHandler+0xe44>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <HAL_DMA_IRQHandler+0xe48>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2c      	ldr	r2, [pc, #176]	; (8006df8 <HAL_DMA_IRQHandler+0xe4c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xdaa>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <HAL_DMA_IRQHandler+0xe50>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d108      	bne.n	8006d68 <HAL_DMA_IRQHandler+0xdbc>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 021c 	bic.w	r2, r2, #28
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e007      	b.n	8006d78 <HAL_DMA_IRQHandler+0xdcc>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 020e 	bic.w	r2, r2, #14
 8006d76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2201      	movs	r2, #1
 8006d82:	409a      	lsls	r2, r3
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	e004      	b.n	8006dba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006db0:	bf00      	nop
 8006db2:	e002      	b.n	8006dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006dba:	3728      	adds	r7, #40	; 0x28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8

08006e00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a7f      	ldr	r2, [pc, #508]	; (800701c <DMA_SetConfig+0x21c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d072      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a7d      	ldr	r2, [pc, #500]	; (8007020 <DMA_SetConfig+0x220>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d06d      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7c      	ldr	r2, [pc, #496]	; (8007024 <DMA_SetConfig+0x224>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d068      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a7a      	ldr	r2, [pc, #488]	; (8007028 <DMA_SetConfig+0x228>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d063      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a79      	ldr	r2, [pc, #484]	; (800702c <DMA_SetConfig+0x22c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d05e      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a77      	ldr	r2, [pc, #476]	; (8007030 <DMA_SetConfig+0x230>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d059      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a76      	ldr	r2, [pc, #472]	; (8007034 <DMA_SetConfig+0x234>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d054      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a74      	ldr	r2, [pc, #464]	; (8007038 <DMA_SetConfig+0x238>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04f      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a73      	ldr	r2, [pc, #460]	; (800703c <DMA_SetConfig+0x23c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d04a      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a71      	ldr	r2, [pc, #452]	; (8007040 <DMA_SetConfig+0x240>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d045      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a70      	ldr	r2, [pc, #448]	; (8007044 <DMA_SetConfig+0x244>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d040      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6e      	ldr	r2, [pc, #440]	; (8007048 <DMA_SetConfig+0x248>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d03b      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a6d      	ldr	r2, [pc, #436]	; (800704c <DMA_SetConfig+0x24c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d036      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6b      	ldr	r2, [pc, #428]	; (8007050 <DMA_SetConfig+0x250>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d031      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6a      	ldr	r2, [pc, #424]	; (8007054 <DMA_SetConfig+0x254>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d02c      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a68      	ldr	r2, [pc, #416]	; (8007058 <DMA_SetConfig+0x258>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d027      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a67      	ldr	r2, [pc, #412]	; (800705c <DMA_SetConfig+0x25c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a65      	ldr	r2, [pc, #404]	; (8007060 <DMA_SetConfig+0x260>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01d      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a64      	ldr	r2, [pc, #400]	; (8007064 <DMA_SetConfig+0x264>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a62      	ldr	r2, [pc, #392]	; (8007068 <DMA_SetConfig+0x268>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a61      	ldr	r2, [pc, #388]	; (800706c <DMA_SetConfig+0x26c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a5f      	ldr	r2, [pc, #380]	; (8007070 <DMA_SetConfig+0x270>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a5e      	ldr	r2, [pc, #376]	; (8007074 <DMA_SetConfig+0x274>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <DMA_SetConfig+0x10a>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5c      	ldr	r2, [pc, #368]	; (8007078 <DMA_SetConfig+0x278>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d101      	bne.n	8006f0e <DMA_SetConfig+0x10e>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <DMA_SetConfig+0x110>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00d      	beq.n	8006f30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a39      	ldr	r2, [pc, #228]	; (800701c <DMA_SetConfig+0x21c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d04a      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a38      	ldr	r2, [pc, #224]	; (8007020 <DMA_SetConfig+0x220>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d045      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a36      	ldr	r2, [pc, #216]	; (8007024 <DMA_SetConfig+0x224>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d040      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a35      	ldr	r2, [pc, #212]	; (8007028 <DMA_SetConfig+0x228>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03b      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a33      	ldr	r2, [pc, #204]	; (800702c <DMA_SetConfig+0x22c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d036      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a32      	ldr	r2, [pc, #200]	; (8007030 <DMA_SetConfig+0x230>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d031      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a30      	ldr	r2, [pc, #192]	; (8007034 <DMA_SetConfig+0x234>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d02c      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <DMA_SetConfig+0x238>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d027      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2d      	ldr	r2, [pc, #180]	; (800703c <DMA_SetConfig+0x23c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <DMA_SetConfig+0x240>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01d      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <DMA_SetConfig+0x244>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a29      	ldr	r2, [pc, #164]	; (8007048 <DMA_SetConfig+0x248>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a27      	ldr	r2, [pc, #156]	; (800704c <DMA_SetConfig+0x24c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a26      	ldr	r2, [pc, #152]	; (8007050 <DMA_SetConfig+0x250>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a24      	ldr	r2, [pc, #144]	; (8007054 <DMA_SetConfig+0x254>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <DMA_SetConfig+0x1d0>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a23      	ldr	r2, [pc, #140]	; (8007058 <DMA_SetConfig+0x258>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d101      	bne.n	8006fd4 <DMA_SetConfig+0x1d4>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <DMA_SetConfig+0x1d6>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d059      	beq.n	800708e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	223f      	movs	r2, #63	; 0x3f
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d138      	bne.n	800707c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800701a:	e086      	b.n	800712a <DMA_SetConfig+0x32a>
 800701c:	40020010 	.word	0x40020010
 8007020:	40020028 	.word	0x40020028
 8007024:	40020040 	.word	0x40020040
 8007028:	40020058 	.word	0x40020058
 800702c:	40020070 	.word	0x40020070
 8007030:	40020088 	.word	0x40020088
 8007034:	400200a0 	.word	0x400200a0
 8007038:	400200b8 	.word	0x400200b8
 800703c:	40020410 	.word	0x40020410
 8007040:	40020428 	.word	0x40020428
 8007044:	40020440 	.word	0x40020440
 8007048:	40020458 	.word	0x40020458
 800704c:	40020470 	.word	0x40020470
 8007050:	40020488 	.word	0x40020488
 8007054:	400204a0 	.word	0x400204a0
 8007058:	400204b8 	.word	0x400204b8
 800705c:	58025408 	.word	0x58025408
 8007060:	5802541c 	.word	0x5802541c
 8007064:	58025430 	.word	0x58025430
 8007068:	58025444 	.word	0x58025444
 800706c:	58025458 	.word	0x58025458
 8007070:	5802546c 	.word	0x5802546c
 8007074:	58025480 	.word	0x58025480
 8007078:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]
}
 800708c:	e04d      	b.n	800712a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a29      	ldr	r2, [pc, #164]	; (8007138 <DMA_SetConfig+0x338>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d022      	beq.n	80070de <DMA_SetConfig+0x2de>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a27      	ldr	r2, [pc, #156]	; (800713c <DMA_SetConfig+0x33c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01d      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a26      	ldr	r2, [pc, #152]	; (8007140 <DMA_SetConfig+0x340>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d018      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a24      	ldr	r2, [pc, #144]	; (8007144 <DMA_SetConfig+0x344>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a23      	ldr	r2, [pc, #140]	; (8007148 <DMA_SetConfig+0x348>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a21      	ldr	r2, [pc, #132]	; (800714c <DMA_SetConfig+0x34c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a20      	ldr	r2, [pc, #128]	; (8007150 <DMA_SetConfig+0x350>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <DMA_SetConfig+0x2de>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <DMA_SetConfig+0x354>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <DMA_SetConfig+0x2e2>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <DMA_SetConfig+0x2e4>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d020      	beq.n	800712a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	2201      	movs	r2, #1
 80070f2:	409a      	lsls	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d108      	bne.n	800711a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	60da      	str	r2, [r3, #12]
}
 8007118:	e007      	b.n	800712a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	58025408 	.word	0x58025408
 800713c:	5802541c 	.word	0x5802541c
 8007140:	58025430 	.word	0x58025430
 8007144:	58025444 	.word	0x58025444
 8007148:	58025458 	.word	0x58025458
 800714c:	5802546c 	.word	0x5802546c
 8007150:	58025480 	.word	0x58025480
 8007154:	58025494 	.word	0x58025494

08007158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a42      	ldr	r2, [pc, #264]	; (8007270 <DMA_CalcBaseAndBitshift+0x118>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d04a      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a41      	ldr	r2, [pc, #260]	; (8007274 <DMA_CalcBaseAndBitshift+0x11c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d045      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a3f      	ldr	r2, [pc, #252]	; (8007278 <DMA_CalcBaseAndBitshift+0x120>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d040      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3e      	ldr	r2, [pc, #248]	; (800727c <DMA_CalcBaseAndBitshift+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d03b      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3c      	ldr	r2, [pc, #240]	; (8007280 <DMA_CalcBaseAndBitshift+0x128>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d036      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a3b      	ldr	r2, [pc, #236]	; (8007284 <DMA_CalcBaseAndBitshift+0x12c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d031      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a39      	ldr	r2, [pc, #228]	; (8007288 <DMA_CalcBaseAndBitshift+0x130>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02c      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a38      	ldr	r2, [pc, #224]	; (800728c <DMA_CalcBaseAndBitshift+0x134>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d027      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a36      	ldr	r2, [pc, #216]	; (8007290 <DMA_CalcBaseAndBitshift+0x138>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d022      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a35      	ldr	r2, [pc, #212]	; (8007294 <DMA_CalcBaseAndBitshift+0x13c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d01d      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a33      	ldr	r2, [pc, #204]	; (8007298 <DMA_CalcBaseAndBitshift+0x140>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d018      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <DMA_CalcBaseAndBitshift+0x144>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <DMA_CalcBaseAndBitshift+0x148>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2f      	ldr	r2, [pc, #188]	; (80072a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2d      	ldr	r2, [pc, #180]	; (80072a8 <DMA_CalcBaseAndBitshift+0x150>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <DMA_CalcBaseAndBitshift+0xa8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2c      	ldr	r2, [pc, #176]	; (80072ac <DMA_CalcBaseAndBitshift+0x154>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d101      	bne.n	8007204 <DMA_CalcBaseAndBitshift+0xac>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <DMA_CalcBaseAndBitshift+0xae>
 8007204:	2300      	movs	r3, #0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d024      	beq.n	8007254 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	3b10      	subs	r3, #16
 8007212:	4a27      	ldr	r2, [pc, #156]	; (80072b0 <DMA_CalcBaseAndBitshift+0x158>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007224:	5cd3      	ldrb	r3, [r2, r3]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b03      	cmp	r3, #3
 8007230:	d908      	bls.n	8007244 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <DMA_CalcBaseAndBitshift+0x160>)
 800723a:	4013      	ands	r3, r2
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	659a      	str	r2, [r3, #88]	; 0x58
 8007242:	e00d      	b.n	8007260 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <DMA_CalcBaseAndBitshift+0x160>)
 800724c:	4013      	ands	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6593      	str	r3, [r2, #88]	; 0x58
 8007252:	e005      	b.n	8007260 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40020010 	.word	0x40020010
 8007274:	40020028 	.word	0x40020028
 8007278:	40020040 	.word	0x40020040
 800727c:	40020058 	.word	0x40020058
 8007280:	40020070 	.word	0x40020070
 8007284:	40020088 	.word	0x40020088
 8007288:	400200a0 	.word	0x400200a0
 800728c:	400200b8 	.word	0x400200b8
 8007290:	40020410 	.word	0x40020410
 8007294:	40020428 	.word	0x40020428
 8007298:	40020440 	.word	0x40020440
 800729c:	40020458 	.word	0x40020458
 80072a0:	40020470 	.word	0x40020470
 80072a4:	40020488 	.word	0x40020488
 80072a8:	400204a0 	.word	0x400204a0
 80072ac:	400204b8 	.word	0x400204b8
 80072b0:	aaaaaaab 	.word	0xaaaaaaab
 80072b4:	08010010 	.word	0x08010010
 80072b8:	fffffc00 	.word	0xfffffc00

080072bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d120      	bne.n	8007312 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d858      	bhi.n	800738a <DMA_CheckFifoParam+0xce>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <DMA_CheckFifoParam+0x24>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	08007303 	.word	0x08007303
 80072e8:	080072f1 	.word	0x080072f1
 80072ec:	0800738b 	.word	0x0800738b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d048      	beq.n	800738e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007300:	e045      	b.n	800738e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800730a:	d142      	bne.n	8007392 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007310:	e03f      	b.n	8007392 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731a:	d123      	bne.n	8007364 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	2b03      	cmp	r3, #3
 8007322:	d838      	bhi.n	8007396 <DMA_CheckFifoParam+0xda>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <DMA_CheckFifoParam+0x70>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007343 	.word	0x08007343
 8007334:	0800733d 	.word	0x0800733d
 8007338:	08007355 	.word	0x08007355
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
        break;
 8007340:	e030      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d025      	beq.n	800739a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007352:	e022      	b.n	800739a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800735c:	d11f      	bne.n	800739e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007362:	e01c      	b.n	800739e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	2b02      	cmp	r3, #2
 800736a:	d902      	bls.n	8007372 <DMA_CheckFifoParam+0xb6>
 800736c:	2b03      	cmp	r3, #3
 800736e:	d003      	beq.n	8007378 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007370:	e018      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	73fb      	strb	r3, [r7, #15]
        break;
 8007376:	e015      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	73fb      	strb	r3, [r7, #15]
    break;
 8007388:	e00b      	b.n	80073a2 <DMA_CheckFifoParam+0xe6>
        break;
 800738a:	bf00      	nop
 800738c:	e00a      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        break;
 800738e:	bf00      	nop
 8007390:	e008      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007392:	bf00      	nop
 8007394:	e006      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007396:	bf00      	nop
 8007398:	e004      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        break;
 800739a:	bf00      	nop
 800739c:	e002      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
        break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <DMA_CheckFifoParam+0xe8>
    break;
 80073a2:	bf00      	nop
    }
  }

  return status;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop

080073b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a38      	ldr	r2, [pc, #224]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a36      	ldr	r2, [pc, #216]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a35      	ldr	r2, [pc, #212]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a33      	ldr	r2, [pc, #204]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a32      	ldr	r2, [pc, #200]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a30      	ldr	r2, [pc, #192]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2f      	ldr	r2, [pc, #188]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2d      	ldr	r2, [pc, #180]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d101      	bne.n	8007416 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01a      	beq.n	8007452 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	3b08      	subs	r3, #8
 8007424:	4a28      	ldr	r2, [pc, #160]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	091b      	lsrs	r3, r3, #4
 800742c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4b26      	ldr	r3, [pc, #152]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a24      	ldr	r2, [pc, #144]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007440:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007450:	e024      	b.n	800749c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	3b10      	subs	r3, #16
 800745a:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d806      	bhi.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a1b      	ldr	r2, [pc, #108]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d902      	bls.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3308      	adds	r3, #8
 8007478:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800748c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	2201      	movs	r2, #1
 8007496:	409a      	lsls	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	58025408 	.word	0x58025408
 80074ac:	5802541c 	.word	0x5802541c
 80074b0:	58025430 	.word	0x58025430
 80074b4:	58025444 	.word	0x58025444
 80074b8:	58025458 	.word	0x58025458
 80074bc:	5802546c 	.word	0x5802546c
 80074c0:	58025480 	.word	0x58025480
 80074c4:	58025494 	.word	0x58025494
 80074c8:	cccccccd 	.word	0xcccccccd
 80074cc:	16009600 	.word	0x16009600
 80074d0:	58025880 	.word	0x58025880
 80074d4:	aaaaaaab 	.word	0xaaaaaaab
 80074d8:	400204b8 	.word	0x400204b8
 80074dc:	4002040f 	.word	0x4002040f
 80074e0:	10008200 	.word	0x10008200
 80074e4:	40020880 	.word	0x40020880

080074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d04a      	beq.n	8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d847      	bhi.n	8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d022      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a24      	ldr	r2, [pc, #144]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d01d      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a22      	ldr	r2, [pc, #136]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d018      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a21      	ldr	r2, [pc, #132]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007570:	671a      	str	r2, [r3, #112]	; 0x70
 8007572:	e009      	b.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a11      	ldr	r2, [pc, #68]	; (80075cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007586:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	2201      	movs	r2, #1
 800758e:	409a      	lsls	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	58025408 	.word	0x58025408
 80075a4:	5802541c 	.word	0x5802541c
 80075a8:	58025430 	.word	0x58025430
 80075ac:	58025444 	.word	0x58025444
 80075b0:	58025458 	.word	0x58025458
 80075b4:	5802546c 	.word	0x5802546c
 80075b8:	58025480 	.word	0x58025480
 80075bc:	58025494 	.word	0x58025494
 80075c0:	1600963f 	.word	0x1600963f
 80075c4:	58025940 	.word	0x58025940
 80075c8:	1000823f 	.word	0x1000823f
 80075cc:	40020940 	.word	0x40020940

080075d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075de:	4b89      	ldr	r3, [pc, #548]	; (8007804 <HAL_GPIO_Init+0x234>)
 80075e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075e2:	e194      	b.n	800790e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	2101      	movs	r1, #1
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	4013      	ands	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8186 	beq.w	8007908 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d005      	beq.n	8007614 <HAL_GPIO_Init+0x44>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d130      	bne.n	8007676 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	2203      	movs	r2, #3
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4313      	orrs	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800764a:	2201      	movs	r2, #1
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	f003 0201 	and.w	r2, r3, #1
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4313      	orrs	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d017      	beq.n	80076b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	2203      	movs	r2, #3
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	43db      	mvns	r3, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	4013      	ands	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689a      	ldr	r2, [r3, #8]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d123      	bne.n	8007706 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	08da      	lsrs	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3208      	adds	r2, #8
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	220f      	movs	r2, #15
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	43db      	mvns	r3, r3
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	4013      	ands	r3, r2
 80076e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	08da      	lsrs	r2, r3, #3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3208      	adds	r2, #8
 8007700:	69b9      	ldr	r1, [r7, #24]
 8007702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	2203      	movs	r2, #3
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4013      	ands	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 0203 	and.w	r2, r3, #3
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 80e0 	beq.w	8007908 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007748:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <HAL_GPIO_Init+0x238>)
 800774a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800774e:	4a2e      	ldr	r2, [pc, #184]	; (8007808 <HAL_GPIO_Init+0x238>)
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007758:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <HAL_GPIO_Init+0x238>)
 800775a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007766:	4a29      	ldr	r2, [pc, #164]	; (800780c <HAL_GPIO_Init+0x23c>)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	089b      	lsrs	r3, r3, #2
 800776c:	3302      	adds	r3, #2
 800776e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	220f      	movs	r2, #15
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	43db      	mvns	r3, r3
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	4013      	ands	r3, r2
 8007788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a20      	ldr	r2, [pc, #128]	; (8007810 <HAL_GPIO_Init+0x240>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d052      	beq.n	8007838 <HAL_GPIO_Init+0x268>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1f      	ldr	r2, [pc, #124]	; (8007814 <HAL_GPIO_Init+0x244>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d031      	beq.n	80077fe <HAL_GPIO_Init+0x22e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <HAL_GPIO_Init+0x248>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d02b      	beq.n	80077fa <HAL_GPIO_Init+0x22a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a1d      	ldr	r2, [pc, #116]	; (800781c <HAL_GPIO_Init+0x24c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d025      	beq.n	80077f6 <HAL_GPIO_Init+0x226>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <HAL_GPIO_Init+0x250>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01f      	beq.n	80077f2 <HAL_GPIO_Init+0x222>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_GPIO_Init+0x254>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d019      	beq.n	80077ee <HAL_GPIO_Init+0x21e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <HAL_GPIO_Init+0x258>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <HAL_GPIO_Init+0x21a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a19      	ldr	r2, [pc, #100]	; (800782c <HAL_GPIO_Init+0x25c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00d      	beq.n	80077e6 <HAL_GPIO_Init+0x216>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_GPIO_Init+0x260>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d007      	beq.n	80077e2 <HAL_GPIO_Init+0x212>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a17      	ldr	r2, [pc, #92]	; (8007834 <HAL_GPIO_Init+0x264>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d101      	bne.n	80077de <HAL_GPIO_Init+0x20e>
 80077da:	2309      	movs	r3, #9
 80077dc:	e02d      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077de:	230a      	movs	r3, #10
 80077e0:	e02b      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077e2:	2308      	movs	r3, #8
 80077e4:	e029      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077e6:	2307      	movs	r3, #7
 80077e8:	e027      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077ea:	2306      	movs	r3, #6
 80077ec:	e025      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077ee:	2305      	movs	r3, #5
 80077f0:	e023      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077f2:	2304      	movs	r3, #4
 80077f4:	e021      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077f6:	2303      	movs	r3, #3
 80077f8:	e01f      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e01d      	b.n	800783a <HAL_GPIO_Init+0x26a>
 80077fe:	2301      	movs	r3, #1
 8007800:	e01b      	b.n	800783a <HAL_GPIO_Init+0x26a>
 8007802:	bf00      	nop
 8007804:	58000080 	.word	0x58000080
 8007808:	58024400 	.word	0x58024400
 800780c:	58000400 	.word	0x58000400
 8007810:	58020000 	.word	0x58020000
 8007814:	58020400 	.word	0x58020400
 8007818:	58020800 	.word	0x58020800
 800781c:	58020c00 	.word	0x58020c00
 8007820:	58021000 	.word	0x58021000
 8007824:	58021400 	.word	0x58021400
 8007828:	58021800 	.word	0x58021800
 800782c:	58021c00 	.word	0x58021c00
 8007830:	58022000 	.word	0x58022000
 8007834:	58022400 	.word	0x58022400
 8007838:	2300      	movs	r3, #0
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	f002 0203 	and.w	r2, r2, #3
 8007840:	0092      	lsls	r2, r2, #2
 8007842:	4093      	lsls	r3, r2
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4313      	orrs	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800784a:	4938      	ldr	r1, [pc, #224]	; (800792c <HAL_GPIO_Init+0x35c>)
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	089b      	lsrs	r3, r3, #2
 8007850:	3302      	adds	r3, #2
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	43db      	mvns	r3, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	4013      	ands	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800787e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	43db      	mvns	r3, r3
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	4013      	ands	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80078ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f ae63 	bne.w	80075e4 <HAL_GPIO_Init+0x14>
  }
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	3724      	adds	r7, #36	; 0x24
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	58000400 	.word	0x58000400

08007930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	887b      	ldrh	r3, [r7, #2]
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
 800794c:	e001      	b.n	8007952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	807b      	strh	r3, [r7, #2]
 800796c:	4613      	mov	r3, r2
 800796e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007970:	787b      	ldrb	r3, [r7, #1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007976:	887a      	ldrh	r2, [r7, #2]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800797c:	e003      	b.n	8007986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800797e:	887b      	ldrh	r3, [r7, #2]
 8007980:	041a      	lsls	r2, r3, #16
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	619a      	str	r2, [r3, #24]
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e07f      	b.n	8007aa6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fa fb40 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2224      	movs	r2, #36	; 0x24
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d107      	bne.n	8007a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a0a:	609a      	str	r2, [r3, #8]
 8007a0c:	e006      	b.n	8007a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d104      	bne.n	8007a2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <HAL_I2C_Init+0x11c>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	02008000 	.word	0x02008000

08007ab4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	817b      	strh	r3, [r7, #10]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	f040 80da 	bne.w	8007c8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_I2C_Master_Transmit+0x30>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e0d3      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007aec:	f7fa fed6 	bl	800289c <HAL_GetTick>
 8007af0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	2319      	movs	r3, #25
 8007af8:	2201      	movs	r2, #1
 8007afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f9e6 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e0be      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2221      	movs	r2, #33	; 0x21
 8007b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2210      	movs	r2, #16
 8007b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	893a      	ldrh	r2, [r7, #8]
 8007b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2bff      	cmp	r3, #255	; 0xff
 8007b3e:	d90e      	bls.n	8007b5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	22ff      	movs	r2, #255	; 0xff
 8007b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	8979      	ldrh	r1, [r7, #10]
 8007b4e:	4b51      	ldr	r3, [pc, #324]	; (8007c94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fbdc 	bl	8008314 <I2C_TransferConfig>
 8007b5c:	e06c      	b.n	8007c38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	8979      	ldrh	r1, [r7, #10]
 8007b70:	4b48      	ldr	r3, [pc, #288]	; (8007c94 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fbcb 	bl	8008314 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b7e:	e05b      	b.n	8007c38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	6a39      	ldr	r1, [r7, #32]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f9e3 	bl	8007f50 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e07b      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d034      	beq.n	8007c38 <HAL_I2C_Master_Transmit+0x184>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d130      	bne.n	8007c38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2180      	movs	r1, #128	; 0x80
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f975 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e04d      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2bff      	cmp	r3, #255	; 0xff
 8007bf8:	d90e      	bls.n	8007c18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	22ff      	movs	r2, #255	; 0xff
 8007bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	8979      	ldrh	r1, [r7, #10]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fb7f 	bl	8008314 <I2C_TransferConfig>
 8007c16:	e00f      	b.n	8007c38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	8979      	ldrh	r1, [r7, #10]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fb6e 	bl	8008314 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d19e      	bne.n	8007b80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f9c2 	bl	8007fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e01a      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6859      	ldr	r1, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c6a:	400b      	ands	r3, r1
 8007c6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	80002000 	.word	0x80002000
 8007c98:	fe00e800 	.word	0xfe00e800

08007c9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	460b      	mov	r3, r1
 8007caa:	817b      	strh	r3, [r7, #10]
 8007cac:	4613      	mov	r3, r2
 8007cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	f040 80db 	bne.w	8007e74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_I2C_Master_Receive+0x30>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e0d4      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cd4:	f7fa fde2 	bl	800289c <HAL_GetTick>
 8007cd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2319      	movs	r3, #25
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f8f2 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e0bf      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2222      	movs	r2, #34	; 0x22
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2210      	movs	r2, #16
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	893a      	ldrh	r2, [r7, #8]
 8007d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2bff      	cmp	r3, #255	; 0xff
 8007d26:	d90e      	bls.n	8007d46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	22ff      	movs	r2, #255	; 0xff
 8007d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	8979      	ldrh	r1, [r7, #10]
 8007d36:	4b52      	ldr	r3, [pc, #328]	; (8007e80 <HAL_I2C_Master_Receive+0x1e4>)
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fae8 	bl	8008314 <I2C_TransferConfig>
 8007d44:	e06d      	b.n	8007e22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	8979      	ldrh	r1, [r7, #10]
 8007d58:	4b49      	ldr	r3, [pc, #292]	; (8007e80 <HAL_I2C_Master_Receive+0x1e4>)
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fad7 	bl	8008314 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d66:	e05c      	b.n	8007e22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	6a39      	ldr	r1, [r7, #32]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f96b 	bl	8008048 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e07c      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d034      	beq.n	8007e22 <HAL_I2C_Master_Receive+0x186>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d130      	bne.n	8007e22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f880 	bl	8007ed0 <I2C_WaitOnFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e04d      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2bff      	cmp	r3, #255	; 0xff
 8007de2:	d90e      	bls.n	8007e02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	22ff      	movs	r2, #255	; 0xff
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	8979      	ldrh	r1, [r7, #10]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fa8a 	bl	8008314 <I2C_TransferConfig>
 8007e00:	e00f      	b.n	8007e22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	8979      	ldrh	r1, [r7, #10]
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fa79 	bl	8008314 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d19d      	bne.n	8007d68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	6a39      	ldr	r1, [r7, #32]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f8cd 	bl	8007fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e01a      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2220      	movs	r2, #32
 8007e46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <HAL_I2C_Master_Receive+0x1e8>)
 8007e54:	400b      	ands	r3, r1
 8007e56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e74:	2302      	movs	r3, #2
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	80002400 	.word	0x80002400
 8007e84:	fe00e800 	.word	0xfe00e800

08007e88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d103      	bne.n	8007ea6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d007      	beq.n	8007ec4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	619a      	str	r2, [r3, #24]
  }
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ee0:	e022      	b.n	8007f28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee8:	d01e      	beq.n	8007f28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eea:	f7fa fcd7 	bl	800289c <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d302      	bcc.n	8007f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d113      	bne.n	8007f28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e00f      	b.n	8007f48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4013      	ands	r3, r2
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d0cd      	beq.n	8007ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f5c:	e02c      	b.n	8007fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f8ea 	bl	800813c <I2C_IsErrorOccurred>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e02a      	b.n	8007fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f78:	d01e      	beq.n	8007fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7fa fc8f 	bl	800289c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d113      	bne.n	8007fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	f043 0220 	orr.w	r2, r3, #32
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e007      	b.n	8007fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d1cb      	bne.n	8007f5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fdc:	e028      	b.n	8008030 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f8aa 	bl	800813c <I2C_IsErrorOccurred>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e026      	b.n	8008040 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff2:	f7fa fc53 	bl	800289c <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d302      	bcc.n	8008008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d113      	bne.n	8008030 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e007      	b.n	8008040 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	d1cf      	bne.n	8007fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008054:	e064      	b.n	8008120 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f86e 	bl	800813c <I2C_IsErrorOccurred>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e062      	b.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b20      	cmp	r3, #32
 8008076:	d138      	bne.n	80080ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b04      	cmp	r3, #4
 8008084:	d105      	bne.n	8008092 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e04e      	b.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b10      	cmp	r3, #16
 800809e:	d107      	bne.n	80080b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2210      	movs	r2, #16
 80080a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2204      	movs	r2, #4
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44
 80080ae:	e002      	b.n	80080b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2220      	movs	r2, #32
 80080bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80080ca:	400b      	ands	r3, r1
 80080cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e022      	b.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ea:	f7fa fbd7 	bl	800289c <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d302      	bcc.n	8008100 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008104:	f043 0220 	orr.w	r2, r3, #32
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e007      	b.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b04      	cmp	r3, #4
 800812c:	d193      	bne.n	8008056 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	fe00e800 	.word	0xfe00e800

0800813c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08a      	sub	sp, #40	; 0x28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d075      	beq.n	8008254 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2210      	movs	r2, #16
 800816e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008170:	e056      	b.n	8008220 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008178:	d052      	beq.n	8008220 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fa fb8f 	bl	800289c <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <I2C_IsErrorOccurred+0x54>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d147      	bne.n	8008220 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b2:	d12e      	bne.n	8008212 <I2C_IsErrorOccurred+0xd6>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ba:	d02a      	beq.n	8008212 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80081bc:	7cfb      	ldrb	r3, [r7, #19]
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d027      	beq.n	8008212 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081d2:	f7fa fb63 	bl	800289c <HAL_GetTick>
 80081d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d8:	e01b      	b.n	8008212 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081da:	f7fa fb5f 	bl	800289c <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b19      	cmp	r3, #25
 80081e6:	d914      	bls.n	8008212 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b20      	cmp	r3, #32
 800821e:	d1dc      	bne.n	80081da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b20      	cmp	r3, #32
 800822c:	d003      	beq.n	8008236 <I2C_IsErrorOccurred+0xfa>
 800822e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008232:	2b00      	cmp	r3, #0
 8008234:	d09d      	beq.n	8008172 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2220      	movs	r2, #32
 8008244:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	f043 0304 	orr.w	r3, r3, #4
 800824c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	f043 0308 	orr.w	r3, r3, #8
 800828e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	f043 0302 	orr.w	r3, r3, #2
 80082b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80082c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01c      	beq.n	8008304 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff fddc 	bl	8007e88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6859      	ldr	r1, [r3, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <I2C_IsErrorOccurred+0x1d4>)
 80082dc:	400b      	ands	r3, r1
 80082de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008308:	4618      	mov	r0, r3
 800830a:	3728      	adds	r7, #40	; 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	fe00e800 	.word	0xfe00e800

08008314 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	817b      	strh	r3, [r7, #10]
 8008322:	4613      	mov	r3, r2
 8008324:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800832c:	7a7b      	ldrb	r3, [r7, #9]
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008334:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	4313      	orrs	r3, r2
 800833e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008342:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	0d5b      	lsrs	r3, r3, #21
 800834e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <I2C_TransferConfig+0x60>)
 8008354:	430b      	orrs	r3, r1
 8008356:	43db      	mvns	r3, r3
 8008358:	ea02 0103 	and.w	r1, r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	03ff63ff 	.word	0x03ff63ff

08008378 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b20      	cmp	r3, #32
 800838c:	d138      	bne.n	8008400 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008398:	2302      	movs	r3, #2
 800839a:	e032      	b.n	8008402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	; 0x24
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0201 	bic.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6819      	ldr	r1, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f042 0201 	orr.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b20      	cmp	r3, #32
 8008422:	d139      	bne.n	8008498 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800842e:	2302      	movs	r3, #2
 8008430:	e033      	b.n	800849a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2224      	movs	r2, #36	; 0x24
 800843e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0201 	bic.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008460:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008498:	2302      	movs	r3, #2
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
	...

080084a8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f023 0201 	bic.w	r2, r3, #1
 80084bc:	4916      	ldr	r1, [pc, #88]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80084c4:	4b14      	ldr	r3, [pc, #80]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4a13      	ldr	r2, [pc, #76]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084ca:	f023 0305 	bic.w	r3, r3, #5
 80084ce:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80084d0:	4b11      	ldr	r3, [pc, #68]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	4a10      	ldr	r2, [pc, #64]	; (8008518 <HAL_PWR_EnterSTOPMode+0x70>)
 80084d6:	f023 0302 	bic.w	r3, r3, #2
 80084da:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <HAL_PWR_EnterSTOPMode+0x74>)
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	4a0e      	ldr	r2, [pc, #56]	; (800851c <HAL_PWR_EnterSTOPMode+0x74>)
 80084e2:	f043 0304 	orr.w	r3, r3, #4
 80084e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80084e8:	f3bf 8f4f 	dsb	sy
}
 80084ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80084ee:	f3bf 8f6f 	isb	sy
}
 80084f2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80084fa:	bf30      	wfi
 80084fc:	e000      	b.n	8008500 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80084fe:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <HAL_PWR_EnterSTOPMode+0x74>)
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	4a05      	ldr	r2, [pc, #20]	; (800851c <HAL_PWR_EnterSTOPMode+0x74>)
 8008506:	f023 0304 	bic.w	r3, r3, #4
 800850a:	6113      	str	r3, [r2, #16]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	58024800 	.word	0x58024800
 800851c:	e000ed00 	.word	0xe000ed00

08008520 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <HAL_PWREx_ConfigSupply+0x70>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d00a      	beq.n	800854a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008534:	4b16      	ldr	r3, [pc, #88]	; (8008590 <HAL_PWREx_ConfigSupply+0x70>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d001      	beq.n	8008546 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e01f      	b.n	8008586 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e01d      	b.n	8008586 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800854a:	4b11      	ldr	r3, [pc, #68]	; (8008590 <HAL_PWREx_ConfigSupply+0x70>)
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f023 0207 	bic.w	r2, r3, #7
 8008552:	490f      	ldr	r1, [pc, #60]	; (8008590 <HAL_PWREx_ConfigSupply+0x70>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4313      	orrs	r3, r2
 8008558:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800855a:	f7fa f99f 	bl	800289c <HAL_GetTick>
 800855e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008560:	e009      	b.n	8008576 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008562:	f7fa f99b 	bl	800289c <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008570:	d901      	bls.n	8008576 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e007      	b.n	8008586 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_PWREx_ConfigSupply+0x70>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800857e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008582:	d1ee      	bne.n	8008562 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	58024800 	.word	0x58024800

08008594 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f000 bc1d 	b.w	8008de2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8087 	beq.w	80086c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085b6:	4b99      	ldr	r3, [pc, #612]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085c0:	4b96      	ldr	r3, [pc, #600]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80085c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d007      	beq.n	80085dc <HAL_RCC_OscConfig+0x48>
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	2b18      	cmp	r3, #24
 80085d0:	d110      	bne.n	80085f4 <HAL_RCC_OscConfig+0x60>
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	f003 0303 	and.w	r3, r3, #3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d10b      	bne.n	80085f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085dc:	4b8f      	ldr	r3, [pc, #572]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d06c      	beq.n	80086c2 <HAL_RCC_OscConfig+0x12e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d168      	bne.n	80086c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e3f6      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085fc:	d106      	bne.n	800860c <HAL_RCC_OscConfig+0x78>
 80085fe:	4b87      	ldr	r3, [pc, #540]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a86      	ldr	r2, [pc, #536]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e02e      	b.n	800866a <HAL_RCC_OscConfig+0xd6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10c      	bne.n	800862e <HAL_RCC_OscConfig+0x9a>
 8008614:	4b81      	ldr	r3, [pc, #516]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a80      	ldr	r2, [pc, #512]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800861a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	4b7e      	ldr	r3, [pc, #504]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a7d      	ldr	r2, [pc, #500]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e01d      	b.n	800866a <HAL_RCC_OscConfig+0xd6>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008636:	d10c      	bne.n	8008652 <HAL_RCC_OscConfig+0xbe>
 8008638:	4b78      	ldr	r3, [pc, #480]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a77      	ldr	r2, [pc, #476]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800863e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4b75      	ldr	r3, [pc, #468]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a74      	ldr	r2, [pc, #464]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800864a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e00b      	b.n	800866a <HAL_RCC_OscConfig+0xd6>
 8008652:	4b72      	ldr	r3, [pc, #456]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a71      	ldr	r2, [pc, #452]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	4b6f      	ldr	r3, [pc, #444]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a6e      	ldr	r2, [pc, #440]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008668:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d013      	beq.n	800869a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008672:	f7fa f913 	bl	800289c <HAL_GetTick>
 8008676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008678:	e008      	b.n	800868c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800867a:	f7fa f90f 	bl	800289c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b64      	cmp	r3, #100	; 0x64
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e3aa      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800868c:	4b63      	ldr	r3, [pc, #396]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f0      	beq.n	800867a <HAL_RCC_OscConfig+0xe6>
 8008698:	e014      	b.n	80086c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869a:	f7fa f8ff 	bl	800289c <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a2:	f7fa f8fb 	bl	800289c <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b64      	cmp	r3, #100	; 0x64
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e396      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086b4:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1f0      	bne.n	80086a2 <HAL_RCC_OscConfig+0x10e>
 80086c0:	e000      	b.n	80086c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80cb 	beq.w	8008868 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d2:	4b52      	ldr	r3, [pc, #328]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086dc:	4b4f      	ldr	r3, [pc, #316]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <HAL_RCC_OscConfig+0x164>
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	2b18      	cmp	r3, #24
 80086ec:	d156      	bne.n	800879c <HAL_RCC_OscConfig+0x208>
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d151      	bne.n	800879c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086f8:	4b48      	ldr	r3, [pc, #288]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCC_OscConfig+0x17c>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e368      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008710:	4b42      	ldr	r3, [pc, #264]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f023 0219 	bic.w	r2, r3, #25
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	493f      	ldr	r1, [pc, #252]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800871e:	4313      	orrs	r3, r2
 8008720:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008722:	f7fa f8bb 	bl	800289c <HAL_GetTick>
 8008726:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800872a:	f7fa f8b7 	bl	800289c <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e352      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800873c:	4b37      	ldr	r3, [pc, #220]	; (800881c <HAL_RCC_OscConfig+0x288>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008748:	f7fa f8e8 	bl	800291c <HAL_GetREVID>
 800874c:	4603      	mov	r3, r0
 800874e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008752:	4293      	cmp	r3, r2
 8008754:	d817      	bhi.n	8008786 <HAL_RCC_OscConfig+0x1f2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d108      	bne.n	8008770 <HAL_RCC_OscConfig+0x1dc>
 800875e:	4b2f      	ldr	r3, [pc, #188]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008766:	4a2d      	ldr	r2, [pc, #180]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800876e:	e07b      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008770:	4b2a      	ldr	r3, [pc, #168]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	031b      	lsls	r3, r3, #12
 800877e:	4927      	ldr	r1, [pc, #156]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008780:	4313      	orrs	r3, r2
 8008782:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008784:	e070      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008786:	4b25      	ldr	r3, [pc, #148]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	4921      	ldr	r1, [pc, #132]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008796:	4313      	orrs	r3, r2
 8008798:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800879a:	e065      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d048      	beq.n	8008836 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f023 0219 	bic.w	r2, r3, #25
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	491a      	ldr	r1, [pc, #104]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b6:	f7fa f871 	bl	800289c <HAL_GetTick>
 80087ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087bc:	e008      	b.n	80087d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087be:	f7fa f86d 	bl	800289c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d901      	bls.n	80087d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e308      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0f0      	beq.n	80087be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087dc:	f7fa f89e 	bl	800291c <HAL_GetREVID>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d81a      	bhi.n	8008820 <HAL_RCC_OscConfig+0x28c>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d108      	bne.n	8008804 <HAL_RCC_OscConfig+0x270>
 80087f2:	4b0a      	ldr	r3, [pc, #40]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087fa:	4a08      	ldr	r2, [pc, #32]	; (800881c <HAL_RCC_OscConfig+0x288>)
 80087fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	e031      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	031b      	lsls	r3, r3, #12
 8008812:	4902      	ldr	r1, [pc, #8]	; (800881c <HAL_RCC_OscConfig+0x288>)
 8008814:	4313      	orrs	r3, r2
 8008816:	604b      	str	r3, [r1, #4]
 8008818:	e026      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
 800881a:	bf00      	nop
 800881c:	58024400 	.word	0x58024400
 8008820:	4b9a      	ldr	r3, [pc, #616]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	061b      	lsls	r3, r3, #24
 800882e:	4997      	ldr	r1, [pc, #604]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008830:	4313      	orrs	r3, r2
 8008832:	604b      	str	r3, [r1, #4]
 8008834:	e018      	b.n	8008868 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008836:	4b95      	ldr	r3, [pc, #596]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a94      	ldr	r2, [pc, #592]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008842:	f7fa f82b 	bl	800289c <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800884a:	f7fa f827 	bl	800289c <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e2c2      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800885c:	4b8b      	ldr	r3, [pc, #556]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f0      	bne.n	800884a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80a9 	beq.w	80089c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008876:	4b85      	ldr	r3, [pc, #532]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008880:	4b82      	ldr	r3, [pc, #520]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b08      	cmp	r3, #8
 800888a:	d007      	beq.n	800889c <HAL_RCC_OscConfig+0x308>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b18      	cmp	r3, #24
 8008890:	d13a      	bne.n	8008908 <HAL_RCC_OscConfig+0x374>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d135      	bne.n	8008908 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800889c:	4b7b      	ldr	r3, [pc, #492]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_RCC_OscConfig+0x320>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d001      	beq.n	80088b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e296      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088b4:	f7fa f832 	bl	800291c <HAL_GetREVID>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80088be:	4293      	cmp	r3, r2
 80088c0:	d817      	bhi.n	80088f2 <HAL_RCC_OscConfig+0x35e>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d108      	bne.n	80088dc <HAL_RCC_OscConfig+0x348>
 80088ca:	4b70      	ldr	r3, [pc, #448]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80088d2:	4a6e      	ldr	r2, [pc, #440]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80088d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088da:	e075      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088dc:	4b6b      	ldr	r3, [pc, #428]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	069b      	lsls	r3, r3, #26
 80088ea:	4968      	ldr	r1, [pc, #416]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088f0:	e06a      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088f2:	4b66      	ldr	r3, [pc, #408]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	061b      	lsls	r3, r3, #24
 8008900:	4962      	ldr	r1, [pc, #392]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008902:	4313      	orrs	r3, r2
 8008904:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008906:	e05f      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d042      	beq.n	8008996 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008910:	4b5e      	ldr	r3, [pc, #376]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a5d      	ldr	r2, [pc, #372]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891c:	f7f9 ffbe 	bl	800289c <HAL_GetTick>
 8008920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008924:	f7f9 ffba 	bl	800289c <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e255      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008936:	4b55      	ldr	r3, [pc, #340]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f0      	beq.n	8008924 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008942:	f7f9 ffeb 	bl	800291c <HAL_GetREVID>
 8008946:	4603      	mov	r3, r0
 8008948:	f241 0203 	movw	r2, #4099	; 0x1003
 800894c:	4293      	cmp	r3, r2
 800894e:	d817      	bhi.n	8008980 <HAL_RCC_OscConfig+0x3ec>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	2b20      	cmp	r3, #32
 8008956:	d108      	bne.n	800896a <HAL_RCC_OscConfig+0x3d6>
 8008958:	4b4c      	ldr	r3, [pc, #304]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008960:	4a4a      	ldr	r2, [pc, #296]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008966:	6053      	str	r3, [r2, #4]
 8008968:	e02e      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
 800896a:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	069b      	lsls	r3, r3, #26
 8008978:	4944      	ldr	r1, [pc, #272]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800897a:	4313      	orrs	r3, r2
 800897c:	604b      	str	r3, [r1, #4]
 800897e:	e023      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
 8008980:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	061b      	lsls	r3, r3, #24
 800898e:	493f      	ldr	r1, [pc, #252]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008990:	4313      	orrs	r3, r2
 8008992:	60cb      	str	r3, [r1, #12]
 8008994:	e018      	b.n	80089c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008996:	4b3d      	ldr	r3, [pc, #244]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a3c      	ldr	r2, [pc, #240]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 800899c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a2:	f7f9 ff7b 	bl	800289c <HAL_GetTick>
 80089a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089a8:	e008      	b.n	80089bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089aa:	f7f9 ff77 	bl	800289c <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e212      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1f0      	bne.n	80089aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d036      	beq.n	8008a42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d019      	beq.n	8008a10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089dc:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80089de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e8:	f7f9 ff58 	bl	800289c <HAL_GetTick>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089ee:	e008      	b.n	8008a02 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089f0:	f7f9 ff54 	bl	800289c <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e1ef      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a02:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0f0      	beq.n	80089f0 <HAL_RCC_OscConfig+0x45c>
 8008a0e:	e018      	b.n	8008a42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a10:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a14:	4a1d      	ldr	r2, [pc, #116]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a16:	f023 0301 	bic.w	r3, r3, #1
 8008a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1c:	f7f9 ff3e 	bl	800289c <HAL_GetTick>
 8008a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a24:	f7f9 ff3a 	bl	800289c <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e1d5      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f0      	bne.n	8008a24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d039      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d01c      	beq.n	8008a90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a0c      	ldr	r2, [pc, #48]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a62:	f7f9 ff1b 	bl	800289c <HAL_GetTick>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a68:	e008      	b.n	8008a7c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a6a:	f7f9 ff17 	bl	800289c <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e1b2      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <HAL_RCC_OscConfig+0x4f8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0f0      	beq.n	8008a6a <HAL_RCC_OscConfig+0x4d6>
 8008a88:	e01b      	b.n	8008ac2 <HAL_RCC_OscConfig+0x52e>
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a90:	4b9b      	ldr	r3, [pc, #620]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a9a      	ldr	r2, [pc, #616]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a9c:	f7f9 fefe 	bl	800289c <HAL_GetTick>
 8008aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008aa4:	f7f9 fefa 	bl	800289c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e195      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ab6:	4b92      	ldr	r3, [pc, #584]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8081 	beq.w	8008bd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ad0:	4b8c      	ldr	r3, [pc, #560]	; (8008d04 <HAL_RCC_OscConfig+0x770>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a8b      	ldr	r2, [pc, #556]	; (8008d04 <HAL_RCC_OscConfig+0x770>)
 8008ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008adc:	f7f9 fede 	bl	800289c <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ae4:	f7f9 feda 	bl	800289c <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b64      	cmp	r3, #100	; 0x64
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e175      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008af6:	4b83      	ldr	r3, [pc, #524]	; (8008d04 <HAL_RCC_OscConfig+0x770>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d106      	bne.n	8008b18 <HAL_RCC_OscConfig+0x584>
 8008b0a:	4b7d      	ldr	r3, [pc, #500]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0e:	4a7c      	ldr	r2, [pc, #496]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b10:	f043 0301 	orr.w	r3, r3, #1
 8008b14:	6713      	str	r3, [r2, #112]	; 0x70
 8008b16:	e02d      	b.n	8008b74 <HAL_RCC_OscConfig+0x5e0>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10c      	bne.n	8008b3a <HAL_RCC_OscConfig+0x5a6>
 8008b20:	4b77      	ldr	r3, [pc, #476]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b24:	4a76      	ldr	r2, [pc, #472]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b2c:	4b74      	ldr	r3, [pc, #464]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b30:	4a73      	ldr	r2, [pc, #460]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b32:	f023 0304 	bic.w	r3, r3, #4
 8008b36:	6713      	str	r3, [r2, #112]	; 0x70
 8008b38:	e01c      	b.n	8008b74 <HAL_RCC_OscConfig+0x5e0>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d10c      	bne.n	8008b5c <HAL_RCC_OscConfig+0x5c8>
 8008b42:	4b6f      	ldr	r3, [pc, #444]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b46:	4a6e      	ldr	r2, [pc, #440]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b48:	f043 0304 	orr.w	r3, r3, #4
 8008b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b4e:	4b6c      	ldr	r3, [pc, #432]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b52:	4a6b      	ldr	r2, [pc, #428]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	6713      	str	r3, [r2, #112]	; 0x70
 8008b5a:	e00b      	b.n	8008b74 <HAL_RCC_OscConfig+0x5e0>
 8008b5c:	4b68      	ldr	r3, [pc, #416]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b60:	4a67      	ldr	r2, [pc, #412]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b62:	f023 0301 	bic.w	r3, r3, #1
 8008b66:	6713      	str	r3, [r2, #112]	; 0x70
 8008b68:	4b65      	ldr	r3, [pc, #404]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	4a64      	ldr	r2, [pc, #400]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b6e:	f023 0304 	bic.w	r3, r3, #4
 8008b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d015      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b7c:	f7f9 fe8e 	bl	800289c <HAL_GetTick>
 8008b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b82:	e00a      	b.n	8008b9a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b84:	f7f9 fe8a 	bl	800289c <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e123      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b9a:	4b59      	ldr	r3, [pc, #356]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0ee      	beq.n	8008b84 <HAL_RCC_OscConfig+0x5f0>
 8008ba6:	e014      	b.n	8008bd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba8:	f7f9 fe78 	bl	800289c <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bae:	e00a      	b.n	8008bc6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bb0:	f7f9 fe74 	bl	800289c <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e10d      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bc6:	4b4e      	ldr	r3, [pc, #312]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1ee      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8102 	beq.w	8008de0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008bdc:	4b48      	ldr	r3, [pc, #288]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008be4:	2b18      	cmp	r3, #24
 8008be6:	f000 80bd 	beq.w	8008d64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	f040 809e 	bne.w	8008d30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bf4:	4b42      	ldr	r3, [pc, #264]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a41      	ldr	r2, [pc, #260]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c00:	f7f9 fe4c 	bl	800289c <HAL_GetTick>
 8008c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c08:	f7f9 fe48 	bl	800289c <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e0e3      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c1a:	4b39      	ldr	r3, [pc, #228]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c26:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c2a:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_RCC_OscConfig+0x774>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c36:	0112      	lsls	r2, r2, #4
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	4931      	ldr	r1, [pc, #196]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c44:	3b01      	subs	r3, #1
 8008c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	025b      	lsls	r3, r3, #9
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	061b      	lsls	r3, r3, #24
 8008c6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c70:	4923      	ldr	r1, [pc, #140]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008c76:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	4a21      	ldr	r2, [pc, #132]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c82:	4b1f      	ldr	r3, [pc, #124]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c86:	4b21      	ldr	r3, [pc, #132]	; (8008d0c <HAL_RCC_OscConfig+0x778>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c8e:	00d2      	lsls	r2, r2, #3
 8008c90:	491b      	ldr	r1, [pc, #108]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	f023 020c 	bic.w	r2, r3, #12
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	4917      	ldr	r1, [pc, #92]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	f023 0202 	bic.w	r2, r3, #2
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	4912      	ldr	r1, [pc, #72]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	4a0d      	ldr	r2, [pc, #52]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008cde:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a07      	ldr	r2, [pc, #28]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <HAL_RCC_OscConfig+0x76c>)
 8008cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf6:	f7f9 fdd1 	bl	800289c <HAL_GetTick>
 8008cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cfc:	e011      	b.n	8008d22 <HAL_RCC_OscConfig+0x78e>
 8008cfe:	bf00      	nop
 8008d00:	58024400 	.word	0x58024400
 8008d04:	58024800 	.word	0x58024800
 8008d08:	fffffc0c 	.word	0xfffffc0c
 8008d0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d10:	f7f9 fdc4 	bl	800289c <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e05f      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d22:	4b32      	ldr	r3, [pc, #200]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCC_OscConfig+0x77c>
 8008d2e:	e057      	b.n	8008de0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d30:	4b2e      	ldr	r3, [pc, #184]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2d      	ldr	r2, [pc, #180]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3c:	f7f9 fdae 	bl	800289c <HAL_GetTick>
 8008d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d44:	f7f9 fdaa 	bl	800289c <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e045      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d56:	4b25      	ldr	r3, [pc, #148]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f0      	bne.n	8008d44 <HAL_RCC_OscConfig+0x7b0>
 8008d62:	e03d      	b.n	8008de0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d64:	4b21      	ldr	r3, [pc, #132]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d6a:	4b20      	ldr	r3, [pc, #128]	; (8008dec <HAL_RCC_OscConfig+0x858>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d031      	beq.n	8008ddc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f003 0203 	and.w	r2, r3, #3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d12a      	bne.n	8008ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	091b      	lsrs	r3, r3, #4
 8008d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d122      	bne.n	8008ddc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d11a      	bne.n	8008ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	0a5b      	lsrs	r3, r3, #9
 8008daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d111      	bne.n	8008ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d108      	bne.n	8008ddc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	0e1b      	lsrs	r3, r3, #24
 8008dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d001      	beq.n	8008de0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3730      	adds	r7, #48	; 0x30
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400

08008df0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e19c      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e04:	4b8a      	ldr	r3, [pc, #552]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d910      	bls.n	8008e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e12:	4b87      	ldr	r3, [pc, #540]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f023 020f 	bic.w	r2, r3, #15
 8008e1a:	4985      	ldr	r1, [pc, #532]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e22:	4b83      	ldr	r3, [pc, #524]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d001      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e184      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	4b7b      	ldr	r3, [pc, #492]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d908      	bls.n	8008e62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e50:	4b78      	ldr	r3, [pc, #480]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	4975      	ldr	r1, [pc, #468]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d010      	beq.n	8008e90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695a      	ldr	r2, [r3, #20]
 8008e72:	4b70      	ldr	r3, [pc, #448]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d908      	bls.n	8008e90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e7e:	4b6d      	ldr	r3, [pc, #436]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	496a      	ldr	r1, [pc, #424]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d010      	beq.n	8008ebe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	4b64      	ldr	r3, [pc, #400]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d908      	bls.n	8008ebe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eac:	4b61      	ldr	r3, [pc, #388]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	495e      	ldr	r1, [pc, #376]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69da      	ldr	r2, [r3, #28]
 8008ece:	4b59      	ldr	r3, [pc, #356]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d908      	bls.n	8008eec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008eda:	4b56      	ldr	r3, [pc, #344]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	4953      	ldr	r1, [pc, #332]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d010      	beq.n	8008f1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	4b4d      	ldr	r3, [pc, #308]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d908      	bls.n	8008f1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f08:	4b4a      	ldr	r3, [pc, #296]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	f023 020f 	bic.w	r2, r3, #15
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	4947      	ldr	r1, [pc, #284]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d055      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f26:	4b43      	ldr	r3, [pc, #268]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	4940      	ldr	r1, [pc, #256]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f40:	4b3c      	ldr	r3, [pc, #240]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d121      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0f6      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d107      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f58:	4b36      	ldr	r3, [pc, #216]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0ea      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d107      	bne.n	8008f80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f70:	4b30      	ldr	r3, [pc, #192]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0de      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f80:	4b2c      	ldr	r3, [pc, #176]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0d6      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f023 0207 	bic.w	r2, r3, #7
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4925      	ldr	r1, [pc, #148]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa2:	f7f9 fc7b 	bl	800289c <HAL_GetTick>
 8008fa6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fa8:	e00a      	b.n	8008fc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008faa:	f7f9 fc77 	bl	800289c <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d901      	bls.n	8008fc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e0be      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc0:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d1eb      	bne.n	8008faa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d010      	beq.n	8009000 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	4b14      	ldr	r3, [pc, #80]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d208      	bcs.n	8009000 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fee:	4b11      	ldr	r3, [pc, #68]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f023 020f 	bic.w	r2, r3, #15
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	490e      	ldr	r1, [pc, #56]	; (8009034 <HAL_RCC_ClockConfig+0x244>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d214      	bcs.n	8009038 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800900e:	4b08      	ldr	r3, [pc, #32]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f023 020f 	bic.w	r2, r3, #15
 8009016:	4906      	ldr	r1, [pc, #24]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800901e:	4b04      	ldr	r3, [pc, #16]	; (8009030 <HAL_RCC_ClockConfig+0x240>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d005      	beq.n	8009038 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e086      	b.n	800913e <HAL_RCC_ClockConfig+0x34e>
 8009030:	52002000 	.word	0x52002000
 8009034:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d010      	beq.n	8009066 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691a      	ldr	r2, [r3, #16]
 8009048:	4b3f      	ldr	r3, [pc, #252]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009050:	429a      	cmp	r2, r3
 8009052:	d208      	bcs.n	8009066 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009054:	4b3c      	ldr	r3, [pc, #240]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	4939      	ldr	r1, [pc, #228]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009062:	4313      	orrs	r3, r2
 8009064:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d010      	beq.n	8009094 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	4b34      	ldr	r3, [pc, #208]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800907e:	429a      	cmp	r2, r3
 8009080:	d208      	bcs.n	8009094 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009082:	4b31      	ldr	r3, [pc, #196]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	492e      	ldr	r1, [pc, #184]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009090:	4313      	orrs	r3, r2
 8009092:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b00      	cmp	r3, #0
 800909e:	d010      	beq.n	80090c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	4b28      	ldr	r3, [pc, #160]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d208      	bcs.n	80090c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090b0:	4b25      	ldr	r3, [pc, #148]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4922      	ldr	r1, [pc, #136]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d010      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69da      	ldr	r2, [r3, #28]
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090da:	429a      	cmp	r2, r3
 80090dc:	d208      	bcs.n	80090f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80090de:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	4917      	ldr	r1, [pc, #92]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090f0:	f000 f834 	bl	800915c <HAL_RCC_GetSysClockFreq>
 80090f4:	4602      	mov	r2, r0
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	f003 030f 	and.w	r3, r3, #15
 8009100:	4912      	ldr	r1, [pc, #72]	; (800914c <HAL_RCC_ClockConfig+0x35c>)
 8009102:	5ccb      	ldrb	r3, [r1, r3]
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <HAL_RCC_ClockConfig+0x358>)
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	4a0d      	ldr	r2, [pc, #52]	; (800914c <HAL_RCC_ClockConfig+0x35c>)
 8009118:	5cd3      	ldrb	r3, [r2, r3]
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <HAL_RCC_ClockConfig+0x360>)
 8009126:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009128:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <HAL_RCC_ClockConfig+0x364>)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <HAL_RCC_ClockConfig+0x368>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f7f9 fb68 	bl	8002808 <HAL_InitTick>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	58024400 	.word	0x58024400
 800914c:	08010000 	.word	0x08010000
 8009150:	24000024 	.word	0x24000024
 8009154:	24000020 	.word	0x24000020
 8009158:	24000028 	.word	0x24000028

0800915c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800915c:	b480      	push	{r7}
 800915e:	b089      	sub	sp, #36	; 0x24
 8009160:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009162:	4bb3      	ldr	r3, [pc, #716]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800916a:	2b18      	cmp	r3, #24
 800916c:	f200 8155 	bhi.w	800941a <HAL_RCC_GetSysClockFreq+0x2be>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	080091dd 	.word	0x080091dd
 800917c:	0800941b 	.word	0x0800941b
 8009180:	0800941b 	.word	0x0800941b
 8009184:	0800941b 	.word	0x0800941b
 8009188:	0800941b 	.word	0x0800941b
 800918c:	0800941b 	.word	0x0800941b
 8009190:	0800941b 	.word	0x0800941b
 8009194:	0800941b 	.word	0x0800941b
 8009198:	08009203 	.word	0x08009203
 800919c:	0800941b 	.word	0x0800941b
 80091a0:	0800941b 	.word	0x0800941b
 80091a4:	0800941b 	.word	0x0800941b
 80091a8:	0800941b 	.word	0x0800941b
 80091ac:	0800941b 	.word	0x0800941b
 80091b0:	0800941b 	.word	0x0800941b
 80091b4:	0800941b 	.word	0x0800941b
 80091b8:	08009209 	.word	0x08009209
 80091bc:	0800941b 	.word	0x0800941b
 80091c0:	0800941b 	.word	0x0800941b
 80091c4:	0800941b 	.word	0x0800941b
 80091c8:	0800941b 	.word	0x0800941b
 80091cc:	0800941b 	.word	0x0800941b
 80091d0:	0800941b 	.word	0x0800941b
 80091d4:	0800941b 	.word	0x0800941b
 80091d8:	0800920f 	.word	0x0800920f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091dc:	4b94      	ldr	r3, [pc, #592]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091e8:	4b91      	ldr	r3, [pc, #580]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	08db      	lsrs	r3, r3, #3
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	4a90      	ldr	r2, [pc, #576]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091f4:	fa22 f303 	lsr.w	r3, r2, r3
 80091f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80091fa:	e111      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80091fc:	4b8d      	ldr	r3, [pc, #564]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091fe:	61bb      	str	r3, [r7, #24]
    break;
 8009200:	e10e      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009202:	4b8d      	ldr	r3, [pc, #564]	; (8009438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009204:	61bb      	str	r3, [r7, #24]
    break;
 8009206:	e10b      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009208:	4b8c      	ldr	r3, [pc, #560]	; (800943c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800920a:	61bb      	str	r3, [r7, #24]
    break;
 800920c:	e108      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800920e:	4b88      	ldr	r3, [pc, #544]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009218:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	091b      	lsrs	r3, r3, #4
 800921e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009222:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009224:	4b82      	ldr	r3, [pc, #520]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800922e:	4b80      	ldr	r3, [pc, #512]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80e1 	beq.w	8009414 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b02      	cmp	r3, #2
 8009256:	f000 8083 	beq.w	8009360 <HAL_RCC_GetSysClockFreq+0x204>
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b02      	cmp	r3, #2
 800925e:	f200 80a1 	bhi.w	80093a4 <HAL_RCC_GetSysClockFreq+0x248>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_RCC_GetSysClockFreq+0x114>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d056      	beq.n	800931c <HAL_RCC_GetSysClockFreq+0x1c0>
 800926e:	e099      	b.n	80093a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009270:	4b6f      	ldr	r3, [pc, #444]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d02d      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800927c:	4b6c      	ldr	r3, [pc, #432]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	4a6b      	ldr	r2, [pc, #428]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a6:	4b62      	ldr	r3, [pc, #392]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80092d6:	e087      	b.n	80093e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e8>
 80092e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ea:	4b51      	ldr	r3, [pc, #324]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80092fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800930e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800931a:	e065      	b.n	80093e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009448 <HAL_RCC_GetSysClockFreq+0x2ec>
 800932a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932e:	4b40      	ldr	r3, [pc, #256]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009342:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800935e:	e043      	b.n	80093e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800944c <HAL_RCC_GetSysClockFreq+0x2f0>
 800936e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009372:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009382:	ed97 6a02 	vldr	s12, [r7, #8]
 8009386:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009440 <HAL_RCC_GetSysClockFreq+0x2e4>
 800938a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093a2:	e021      	b.n	80093e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009448 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80093e8:	4b11      	ldr	r3, [pc, #68]	; (8009430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	0a5b      	lsrs	r3, r3, #9
 80093ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f2:	3301      	adds	r3, #1
 80093f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009400:	edd7 6a07 	vldr	s13, [r7, #28]
 8009404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800940c:	ee17 3a90 	vmov	r3, s15
 8009410:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009412:	e005      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	61bb      	str	r3, [r7, #24]
    break;
 8009418:	e002      	b.n	8009420 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800941c:	61bb      	str	r3, [r7, #24]
    break;
 800941e:	bf00      	nop
  }

  return sysclockfreq;
 8009420:	69bb      	ldr	r3, [r7, #24]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3724      	adds	r7, #36	; 0x24
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	58024400 	.word	0x58024400
 8009434:	03d09000 	.word	0x03d09000
 8009438:	003d0900 	.word	0x003d0900
 800943c:	017d7840 	.word	0x017d7840
 8009440:	46000000 	.word	0x46000000
 8009444:	4c742400 	.word	0x4c742400
 8009448:	4a742400 	.word	0x4a742400
 800944c:	4bbebc20 	.word	0x4bbebc20

08009450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009456:	f7ff fe81 	bl	800915c <HAL_RCC_GetSysClockFreq>
 800945a:	4602      	mov	r2, r0
 800945c:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	0a1b      	lsrs	r3, r3, #8
 8009462:	f003 030f 	and.w	r3, r3, #15
 8009466:	490f      	ldr	r1, [pc, #60]	; (80094a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009468:	5ccb      	ldrb	r3, [r1, r3]
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	fa22 f303 	lsr.w	r3, r2, r3
 8009472:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800947e:	5cd3      	ldrb	r3, [r2, r3]
 8009480:	f003 031f 	and.w	r3, r3, #31
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	fa22 f303 	lsr.w	r3, r2, r3
 800948a:	4a07      	ldr	r2, [pc, #28]	; (80094a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800948c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800948e:	4a07      	ldr	r2, [pc, #28]	; (80094ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009496:	681b      	ldr	r3, [r3, #0]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	58024400 	.word	0x58024400
 80094a4:	08010000 	.word	0x08010000
 80094a8:	24000024 	.word	0x24000024
 80094ac:	24000020 	.word	0x24000020

080094b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094b4:	f7ff ffcc 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 80094b8:	4602      	mov	r2, r0
 80094ba:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	4904      	ldr	r1, [pc, #16]	; (80094d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094c6:	5ccb      	ldrb	r3, [r1, r3]
 80094c8:	f003 031f 	and.w	r3, r3, #31
 80094cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58024400 	.word	0x58024400
 80094d8:	08010000 	.word	0x08010000

080094dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80094e0:	f7ff ffb6 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 80094e4:	4602      	mov	r2, r0
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	0a1b      	lsrs	r3, r3, #8
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	4904      	ldr	r1, [pc, #16]	; (8009504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094f2:	5ccb      	ldrb	r3, [r1, r3]
 80094f4:	f003 031f 	and.w	r3, r3, #31
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	58024400 	.word	0x58024400
 8009504:	08010000 	.word	0x08010000

08009508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009510:	2300      	movs	r3, #0
 8009512:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009514:	2300      	movs	r3, #0
 8009516:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d03f      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800952c:	d02a      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800952e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009532:	d824      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009538:	d018      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800953a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800953e:	d81e      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009548:	d007      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800954a:	e018      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800954c:	4ba3      	ldr	r3, [pc, #652]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4aa2      	ldr	r2, [pc, #648]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009558:	e015      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2102      	movs	r1, #2
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fff9 	bl	800b558 <RCCEx_PLL2_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800956a:	e00c      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3324      	adds	r3, #36	; 0x24
 8009570:	2102      	movs	r1, #2
 8009572:	4618      	mov	r0, r3
 8009574:	f002 f8a2 	bl	800b6bc <RCCEx_PLL3_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800957c:	e003      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
      break;
 8009582:	e000      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d109      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800958c:	4b93      	ldr	r3, [pc, #588]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800958e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009598:	4990      	ldr	r1, [pc, #576]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800959a:	4313      	orrs	r3, r2
 800959c:	650b      	str	r3, [r1, #80]	; 0x50
 800959e:	e001      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d03d      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d826      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095d5 	.word	0x080095d5
 80095c4:	080095e3 	.word	0x080095e3
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d4:	4b81      	ldr	r3, [pc, #516]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	4a80      	ldr	r2, [pc, #512]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095e0:	e015      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 ffb5 	bl	800b558 <RCCEx_PLL2_Config>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095f2:	e00c      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f002 f85e 	bl	800b6bc <RCCEx_PLL3_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009604:	e003      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
      break;
 800960a:	e000      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800960c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009614:	4b71      	ldr	r3, [pc, #452]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009618:	f023 0207 	bic.w	r2, r3, #7
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	496e      	ldr	r1, [pc, #440]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009622:	4313      	orrs	r3, r2
 8009624:	650b      	str	r3, [r1, #80]	; 0x50
 8009626:	e001      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009634:	2b00      	cmp	r3, #0
 8009636:	d042      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009640:	d02b      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009646:	d825      	bhi.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009648:	2bc0      	cmp	r3, #192	; 0xc0
 800964a:	d028      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800964c:	2bc0      	cmp	r3, #192	; 0xc0
 800964e:	d821      	bhi.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d016      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009654:	2b80      	cmp	r3, #128	; 0x80
 8009656:	d81d      	bhi.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800965c:	2b40      	cmp	r3, #64	; 0x40
 800965e:	d007      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009660:	e018      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009662:	4b5e      	ldr	r3, [pc, #376]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800966e:	e017      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	2100      	movs	r1, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f001 ff6e 	bl	800b558 <RCCEx_PLL2_Config>
 800967c:	4603      	mov	r3, r0
 800967e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009680:	e00e      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3324      	adds	r3, #36	; 0x24
 8009686:	2100      	movs	r1, #0
 8009688:	4618      	mov	r0, r3
 800968a:	f002 f817 	bl	800b6bc <RCCEx_PLL3_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009692:	e005      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	75fb      	strb	r3, [r7, #23]
      break;
 8009698:	e002      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800969a:	bf00      	nop
 800969c:	e000      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800969e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d109      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80096a6:	4b4d      	ldr	r3, [pc, #308]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b2:	494a      	ldr	r1, [pc, #296]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	650b      	str	r3, [r1, #80]	; 0x50
 80096b8:	e001      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d049      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096d4:	d030      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80096d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096da:	d82a      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80096dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096e0:	d02c      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80096e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096e6:	d824      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80096e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ec:	d018      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80096ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096f2:	d81e      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80096f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096fc:	d007      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80096fe:	e018      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009700:	4b36      	ldr	r3, [pc, #216]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	4a35      	ldr	r2, [pc, #212]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800970a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800970c:	e017      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f001 ff1f 	bl	800b558 <RCCEx_PLL2_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800971e:	e00e      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3324      	adds	r3, #36	; 0x24
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f001 ffc8 	bl	800b6bc <RCCEx_PLL3_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009730:	e005      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	75fb      	strb	r3, [r7, #23]
      break;
 8009736:	e002      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009738:	bf00      	nop
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800973c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009748:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009752:	4922      	ldr	r1, [pc, #136]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009754:	4313      	orrs	r3, r2
 8009756:	658b      	str	r3, [r1, #88]	; 0x58
 8009758:	e001      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009766:	2b00      	cmp	r3, #0
 8009768:	d04b      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009774:	d030      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800977a:	d82a      	bhi.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800977c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009780:	d02e      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009786:	d824      	bhi.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800978c:	d018      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800978e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009792:	d81e      	bhi.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800979c:	d007      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800979e:	e018      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a0d      	ldr	r2, [pc, #52]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ac:	e019      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3304      	adds	r3, #4
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 fecf 	bl	800b558 <RCCEx_PLL2_Config>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097be:	e010      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3324      	adds	r3, #36	; 0x24
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 ff78 	bl	800b6bc <RCCEx_PLL3_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097d0:	e007      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
      break;
 80097d6:	e004      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80097dc:	58024400 	.word	0x58024400
      break;
 80097e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097e8:	4b99      	ldr	r3, [pc, #612]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097f6:	4996      	ldr	r1, [pc, #600]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	658b      	str	r3, [r1, #88]	; 0x58
 80097fc:	e001      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d032      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009812:	2b30      	cmp	r3, #48	; 0x30
 8009814:	d01c      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009816:	2b30      	cmp	r3, #48	; 0x30
 8009818:	d817      	bhi.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800981a:	2b20      	cmp	r3, #32
 800981c:	d00c      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d813      	bhi.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009826:	2b10      	cmp	r3, #16
 8009828:	d10f      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4b89      	ldr	r3, [pc, #548]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4a88      	ldr	r2, [pc, #544]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009836:	e00e      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	2102      	movs	r1, #2
 800983e:	4618      	mov	r0, r3
 8009840:	f001 fe8a 	bl	800b558 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009848:	e005      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      break;
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800985c:	4b7c      	ldr	r3, [pc, #496]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800985e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009868:	4979      	ldr	r1, [pc, #484]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800986a:	4313      	orrs	r3, r2
 800986c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800986e:	e001      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d047      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009888:	d030      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800988a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800988e:	d82a      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009894:	d02c      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800989a:	d824      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a0:	d018      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80098a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a6:	d81e      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80098ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b0:	d007      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80098b2:	e018      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4b66      	ldr	r3, [pc, #408]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a65      	ldr	r2, [pc, #404]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098c0:	e017      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 fe45 	bl	800b558 <RCCEx_PLL2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098d2:	e00e      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 feee 	bl	800b6bc <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098e4:	e005      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ea:	e002      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80098f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098f8:	4b55      	ldr	r3, [pc, #340]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009904:	4952      	ldr	r1, [pc, #328]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009906:	4313      	orrs	r3, r2
 8009908:	650b      	str	r3, [r1, #80]	; 0x50
 800990a:	e001      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d049      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009924:	d02e      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800992a:	d828      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800992c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009930:	d02a      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009936:	d822      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800993c:	d026      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800993e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009942:	d81c      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009948:	d010      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800994a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800994e:	d816      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01d      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009958:	d111      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3304      	adds	r3, #4
 800995e:	2101      	movs	r1, #1
 8009960:	4618      	mov	r0, r3
 8009962:	f001 fdf9 	bl	800b558 <RCCEx_PLL2_Config>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800996a:	e012      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3324      	adds	r3, #36	; 0x24
 8009970:	2101      	movs	r1, #1
 8009972:	4618      	mov	r0, r3
 8009974:	f001 fea2 	bl	800b6bc <RCCEx_PLL3_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800997c:	e009      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
      break;
 8009982:	e006      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009984:	bf00      	nop
 8009986:	e004      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009988:	bf00      	nop
 800998a:	e002      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800998c:	bf00      	nop
 800998e:	e000      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009998:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800999a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a4:	492a      	ldr	r1, [pc, #168]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	650b      	str	r3, [r1, #80]	; 0x50
 80099aa:	e001      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d04d      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c6:	d02e      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80099c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099cc:	d828      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80099ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d2:	d02a      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d822      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80099da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099de:	d026      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80099e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099e4:	d81c      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80099e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ea:	d010      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80099ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099f0:	d816      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01d      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80099f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099fa:	d111      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	2101      	movs	r1, #1
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fda8 	bl	800b558 <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a0c:	e012      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3324      	adds	r3, #36	; 0x24
 8009a12:	2101      	movs	r1, #1
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 fe51 	bl	800b6bc <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a1e:	e009      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]
      break;
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a26:	bf00      	nop
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e002      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a2e:	bf00      	nop
 8009a30:	e000      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10c      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a48:	4901      	ldr	r1, [pc, #4]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8009a4e:	e003      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d02f      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a6c:	d00e      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a72:	d814      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d015      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a7c:	d10f      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a7e:	4baf      	ldr	r3, [pc, #700]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	4aae      	ldr	r2, [pc, #696]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009a8a:	e00c      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	2101      	movs	r1, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fd60 	bl	800b558 <RCCEx_PLL2_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009a9c:	e003      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d109      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009aac:	4ba3      	ldr	r3, [pc, #652]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab8:	49a0      	ldr	r1, [pc, #640]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	650b      	str	r3, [r1, #80]	; 0x50
 8009abe:	e001      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d032      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d81b      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009b17 	.word	0x08009b17
 8009ae4:	08009af1 	.word	0x08009af1
 8009ae8:	08009aff 	.word	0x08009aff
 8009aec:	08009b17 	.word	0x08009b17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af0:	4b92      	ldr	r3, [pc, #584]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	4a91      	ldr	r2, [pc, #580]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009afc:	e00c      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3304      	adds	r3, #4
 8009b02:	2102      	movs	r1, #2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fd27 	bl	800b558 <RCCEx_PLL2_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b0e:	e003      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	75fb      	strb	r3, [r7, #23]
      break;
 8009b14:	e000      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b1e:	4b87      	ldr	r3, [pc, #540]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b22:	f023 0203 	bic.w	r2, r3, #3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	4984      	ldr	r1, [pc, #528]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b30:	e001      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 8086 	beq.w	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b44:	4b7e      	ldr	r3, [pc, #504]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a7d      	ldr	r2, [pc, #500]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b50:	f7f8 fea4 	bl	800289c <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b56:	e009      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b58:	f7f8 fea0 	bl	800289c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b64      	cmp	r3, #100	; 0x64
 8009b64:	d902      	bls.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	75fb      	strb	r3, [r7, #23]
        break;
 8009b6a:	e005      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b6c:	4b74      	ldr	r3, [pc, #464]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0ef      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d166      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b7e:	4b6f      	ldr	r3, [pc, #444]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b88:	4053      	eors	r3, r2
 8009b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d013      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b92:	4b6a      	ldr	r3, [pc, #424]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b9c:	4b67      	ldr	r3, [pc, #412]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba0:	4a66      	ldr	r2, [pc, #408]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ba6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ba8:	4b64      	ldr	r3, [pc, #400]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bac:	4a63      	ldr	r2, [pc, #396]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009bb4:	4a61      	ldr	r2, [pc, #388]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc4:	d115      	bne.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc6:	f7f8 fe69 	bl	800289c <HAL_GetTick>
 8009bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bcc:	e00b      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bce:	f7f8 fe65 	bl	800289c <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d902      	bls.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	75fb      	strb	r3, [r7, #23]
            break;
 8009be4:	e005      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009be6:	4b55      	ldr	r3, [pc, #340]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0ed      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d126      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c06:	d10d      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009c08:	4b4c      	ldr	r3, [pc, #304]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c16:	0919      	lsrs	r1, r3, #4
 8009c18:	4b4a      	ldr	r3, [pc, #296]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009c1a:	400b      	ands	r3, r1
 8009c1c:	4947      	ldr	r1, [pc, #284]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	610b      	str	r3, [r1, #16]
 8009c22:	e005      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009c24:	4b45      	ldr	r3, [pc, #276]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	4a44      	ldr	r2, [pc, #272]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c2e:	6113      	str	r3, [r2, #16]
 8009c30:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c3e:	493f      	ldr	r1, [pc, #252]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	670b      	str	r3, [r1, #112]	; 0x70
 8009c44:	e004      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	75bb      	strb	r3, [r7, #22]
 8009c4a:	e001      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 8085 	beq.w	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c62:	2b28      	cmp	r3, #40	; 0x28
 8009c64:	d866      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009d49 	.word	0x08009d49
 8009c70:	08009d35 	.word	0x08009d35
 8009c74:	08009d35 	.word	0x08009d35
 8009c78:	08009d35 	.word	0x08009d35
 8009c7c:	08009d35 	.word	0x08009d35
 8009c80:	08009d35 	.word	0x08009d35
 8009c84:	08009d35 	.word	0x08009d35
 8009c88:	08009d35 	.word	0x08009d35
 8009c8c:	08009d11 	.word	0x08009d11
 8009c90:	08009d35 	.word	0x08009d35
 8009c94:	08009d35 	.word	0x08009d35
 8009c98:	08009d35 	.word	0x08009d35
 8009c9c:	08009d35 	.word	0x08009d35
 8009ca0:	08009d35 	.word	0x08009d35
 8009ca4:	08009d35 	.word	0x08009d35
 8009ca8:	08009d35 	.word	0x08009d35
 8009cac:	08009d23 	.word	0x08009d23
 8009cb0:	08009d35 	.word	0x08009d35
 8009cb4:	08009d35 	.word	0x08009d35
 8009cb8:	08009d35 	.word	0x08009d35
 8009cbc:	08009d35 	.word	0x08009d35
 8009cc0:	08009d35 	.word	0x08009d35
 8009cc4:	08009d35 	.word	0x08009d35
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009d49 	.word	0x08009d49
 8009cd0:	08009d35 	.word	0x08009d35
 8009cd4:	08009d35 	.word	0x08009d35
 8009cd8:	08009d35 	.word	0x08009d35
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009d35 	.word	0x08009d35
 8009ce8:	08009d35 	.word	0x08009d35
 8009cec:	08009d49 	.word	0x08009d49
 8009cf0:	08009d35 	.word	0x08009d35
 8009cf4:	08009d35 	.word	0x08009d35
 8009cf8:	08009d35 	.word	0x08009d35
 8009cfc:	08009d35 	.word	0x08009d35
 8009d00:	08009d35 	.word	0x08009d35
 8009d04:	08009d35 	.word	0x08009d35
 8009d08:	08009d35 	.word	0x08009d35
 8009d0c:	08009d49 	.word	0x08009d49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	2101      	movs	r1, #1
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fc1e 	bl	800b558 <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d20:	e013      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	3324      	adds	r3, #36	; 0x24
 8009d26:	2101      	movs	r1, #1
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 fcc7 	bl	800b6bc <RCCEx_PLL3_Config>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d32:	e00a      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	75fb      	strb	r3, [r7, #23]
      break;
 8009d38:	e007      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	58024800 	.word	0x58024800
 8009d44:	00ffffcf 	.word	0x00ffffcf
      break;
 8009d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d50:	4b96      	ldr	r3, [pc, #600]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d5c:	4993      	ldr	r1, [pc, #588]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	654b      	str	r3, [r1, #84]	; 0x54
 8009d62:	e001      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d038      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d78:	2b05      	cmp	r3, #5
 8009d7a:	d821      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009dc7 	.word	0x08009dc7
 8009d88:	08009d9d 	.word	0x08009d9d
 8009d8c:	08009daf 	.word	0x08009daf
 8009d90:	08009dc7 	.word	0x08009dc7
 8009d94:	08009dc7 	.word	0x08009dc7
 8009d98:	08009dc7 	.word	0x08009dc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	2101      	movs	r1, #1
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fbd8 	bl	800b558 <RCCEx_PLL2_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009dac:	e00c      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3324      	adds	r3, #36	; 0x24
 8009db2:	2101      	movs	r1, #1
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 fc81 	bl	800b6bc <RCCEx_PLL3_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009dbe:	e003      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc4:	e000      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d109      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009dce:	4b77      	ldr	r3, [pc, #476]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd2:	f023 0207 	bic.w	r2, r3, #7
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dda:	4974      	ldr	r1, [pc, #464]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	654b      	str	r3, [r1, #84]	; 0x54
 8009de0:	e001      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0304 	and.w	r3, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d03a      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df8:	2b05      	cmp	r3, #5
 8009dfa:	d821      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e47 	.word	0x08009e47
 8009e08:	08009e1d 	.word	0x08009e1d
 8009e0c:	08009e2f 	.word	0x08009e2f
 8009e10:	08009e47 	.word	0x08009e47
 8009e14:	08009e47 	.word	0x08009e47
 8009e18:	08009e47 	.word	0x08009e47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	2101      	movs	r1, #1
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fb98 	bl	800b558 <RCCEx_PLL2_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e2c:	e00c      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3324      	adds	r3, #36	; 0x24
 8009e32:	2101      	movs	r1, #1
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 fc41 	bl	800b6bc <RCCEx_PLL3_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e3e:	e003      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
      break;
 8009e44:	e000      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e4e:	4b57      	ldr	r3, [pc, #348]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e52:	f023 0207 	bic.w	r2, r3, #7
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5c:	4953      	ldr	r1, [pc, #332]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	658b      	str	r3, [r1, #88]	; 0x58
 8009e62:	e001      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d04b      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e7e:	d02e      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e84:	d828      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8a:	d02a      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e90:	d822      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e96:	d026      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e9c:	d81c      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea2:	d010      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea8:	d816      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01d      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eb2:	d111      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fb4c 	bl	800b558 <RCCEx_PLL2_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ec4:	e012      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3324      	adds	r3, #36	; 0x24
 8009eca:	2102      	movs	r1, #2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fbf5 	bl	800b6bc <RCCEx_PLL3_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ed6:	e009      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	e006      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ede:	bf00      	nop
 8009ee0:	e004      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ee2:	bf00      	nop
 8009ee4:	e002      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e000      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ef2:	4b2e      	ldr	r3, [pc, #184]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f00:	492a      	ldr	r1, [pc, #168]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	654b      	str	r3, [r1, #84]	; 0x54
 8009f06:	e001      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d04d      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f22:	d02e      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009f24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f28:	d828      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2e:	d02a      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f34:	d822      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f3a:	d026      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f40:	d81c      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f46:	d010      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4c:	d816      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d01d      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f56:	d111      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 fafa 	bl	800b558 <RCCEx_PLL2_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009f68:	e012      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3324      	adds	r3, #36	; 0x24
 8009f6e:	2102      	movs	r1, #2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fba3 	bl	800b6bc <RCCEx_PLL3_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009f7a:	e009      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f80:	e006      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009f82:	bf00      	nop
 8009f84:	e004      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009f86:	bf00      	nop
 8009f88:	e002      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009f8a:	bf00      	nop
 8009f8c:	e000      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10c      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fa4:	4901      	ldr	r1, [pc, #4]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8009faa:	e003      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d04b      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fca:	d02e      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fd0:	d828      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd6:	d02a      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fdc:	d822      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fe2:	d026      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fe8:	d81c      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fee:	d010      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ff4:	d816      	bhi.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01d      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ffe:	d111      	bne.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f001 faa6 	bl	800b558 <RCCEx_PLL2_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a010:	e012      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3324      	adds	r3, #36	; 0x24
 800a016:	2102      	movs	r1, #2
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 fb4f 	bl	800b6bc <RCCEx_PLL3_Config>
 800a01e:	4603      	mov	r3, r0
 800a020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a022:	e009      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	75fb      	strb	r3, [r7, #23]
      break;
 800a028:	e006      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a02a:	bf00      	nop
 800a02c:	e004      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a02e:	bf00      	nop
 800a030:	e002      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a032:	bf00      	nop
 800a034:	e000      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a036:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a03e:	4b9d      	ldr	r3, [pc, #628]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a04c:	4999      	ldr	r1, [pc, #612]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	658b      	str	r3, [r1, #88]	; 0x58
 800a052:	e001      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01a      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06e:	d10a      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3324      	adds	r3, #36	; 0x24
 800a074:	2102      	movs	r1, #2
 800a076:	4618      	mov	r0, r3
 800a078:	f001 fb20 	bl	800b6bc <RCCEx_PLL3_Config>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a086:	4b8b      	ldr	r3, [pc, #556]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a094:	4987      	ldr	r1, [pc, #540]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a096:	4313      	orrs	r3, r2
 800a098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0310 	and.w	r3, r3, #16
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01a      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b0:	d10a      	bne.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3324      	adds	r3, #36	; 0x24
 800a0b6:	2102      	movs	r1, #2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 faff 	bl	800b6bc <RCCEx_PLL3_Config>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0c8:	4b7a      	ldr	r3, [pc, #488]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d6:	4977      	ldr	r1, [pc, #476]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d034      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f2:	d01d      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a0f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f8:	d817      	bhi.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a102:	d009      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a104:	e011      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fa23 	bl	800b558 <RCCEx_PLL2_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a116:	e00c      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3324      	adds	r3, #36	; 0x24
 800a11c:	2102      	movs	r1, #2
 800a11e:	4618      	mov	r0, r3
 800a120:	f001 facc 	bl	800b6bc <RCCEx_PLL3_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a128:	e003      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	75fb      	strb	r3, [r7, #23]
      break;
 800a12e:	e000      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a130:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a138:	4b5e      	ldr	r3, [pc, #376]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a146:	495b      	ldr	r1, [pc, #364]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	658b      	str	r3, [r1, #88]	; 0x58
 800a14c:	e001      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d033      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a168:	d01c      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a16a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a16e:	d816      	bhi.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a174:	d003      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a17a:	d007      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a17c:	e00f      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a17e:	4b4d      	ldr	r3, [pc, #308]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	4a4c      	ldr	r2, [pc, #304]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a18a:	e00c      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3324      	adds	r3, #36	; 0x24
 800a190:	2101      	movs	r1, #1
 800a192:	4618      	mov	r0, r3
 800a194:	f001 fa92 	bl	800b6bc <RCCEx_PLL3_Config>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a19c:	e003      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a2:	e000      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a1a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1ac:	4b41      	ldr	r3, [pc, #260]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ba:	493e      	ldr	r1, [pc, #248]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	654b      	str	r3, [r1, #84]	; 0x54
 800a1c0:	e001      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d029      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1de:	d007      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a1e0:	e00f      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1e2:	4b34      	ldr	r3, [pc, #208]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	4a33      	ldr	r2, [pc, #204]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a1ee:	e00b      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	2102      	movs	r1, #2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f001 f9ae 	bl	800b558 <RCCEx_PLL2_Config>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a200:	e002      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	75fb      	strb	r3, [r7, #23]
      break;
 800a206:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a20e:	4b29      	ldr	r3, [pc, #164]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21a:	4926      	ldr	r1, [pc, #152]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a220:	e001      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	2102      	movs	r1, #2
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fa3f 	bl	800b6bc <RCCEx_PLL3_Config>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d033      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a25c:	d017      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a25e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a262:	d811      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a268:	d013      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26e:	d80b      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a270:	2b00      	cmp	r3, #0
 800a272:	d010      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a278:	d106      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a27a:	4b0e      	ldr	r3, [pc, #56]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	4a0d      	ldr	r2, [pc, #52]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a286:	e007      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
      break;
 800a28c:	e004      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a28e:	bf00      	nop
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a292:	bf00      	nop
 800a294:	e000      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a296:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10c      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a29e:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2aa:	4902      	ldr	r1, [pc, #8]	; (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a2b0:	e004      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d008      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a2c8:	4b31      	ldr	r3, [pc, #196]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d4:	492e      	ldr	r1, [pc, #184]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d009      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a2e6:	4b2a      	ldr	r3, [pc, #168]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a2f4:	4926      	ldr	r1, [pc, #152]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a306:	4b22      	ldr	r3, [pc, #136]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a312:	491f      	ldr	r1, [pc, #124]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a314:	4313      	orrs	r3, r2
 800a316:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a324:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	4a19      	ldr	r2, [pc, #100]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a32a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a32e:	6113      	str	r3, [r2, #16]
 800a330:	4b17      	ldr	r3, [pc, #92]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a33a:	4915      	ldr	r1, [pc, #84]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	da08      	bge.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a348:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a354:	490e      	ldr	r1, [pc, #56]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a356:	4313      	orrs	r3, r2
 800a358:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a366:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a36a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a374:	4906      	ldr	r1, [pc, #24]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a376:	4313      	orrs	r3, r2
 800a378:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a37a:	7dbb      	ldrb	r3, [r7, #22]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	e000      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400

0800a394 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b090      	sub	sp, #64	; 0x40
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a2:	f040 8095 	bne.w	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a3a6:	4b97      	ldr	r3, [pc, #604]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	f200 8088 	bhi.w	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d5 	.word	0x0800a3d5
 800a3c4:	0800a3fd 	.word	0x0800a3fd
 800a3c8:	0800a425 	.word	0x0800a425
 800a3cc:	0800a4c1 	.word	0x0800a4c1
 800a3d0:	0800a44d 	.word	0x0800a44d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d4:	4b8b      	ldr	r3, [pc, #556]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3e0:	d108      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 ff64 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3f0:	f000 bc94 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3f8:	f000 bc90 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fc:	4b81      	ldr	r3, [pc, #516]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a408:	d108      	bne.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0318 	add.w	r3, r7, #24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fca8 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a418:	f000 bc80 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a420:	f000 bc7c 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a424:	4b77      	ldr	r3, [pc, #476]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a430:	d108      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a432:	f107 030c 	add.w	r3, r7, #12
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fde8 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a440:	f000 bc6c 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a448:	f000 bc68 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a44c:	4b6d      	ldr	r3, [pc, #436]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a454:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a456:	4b6b      	ldr	r3, [pc, #428]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d10c      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a468:	4b66      	ldr	r3, [pc, #408]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	08db      	lsrs	r3, r3, #3
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	4a65      	ldr	r2, [pc, #404]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a474:	fa22 f303 	lsr.w	r3, r2, r3
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a47a:	e01f      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a47c:	4b61      	ldr	r3, [pc, #388]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a488:	d106      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a490:	d102      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a492:	4b5e      	ldr	r3, [pc, #376]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a494:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a496:	e011      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a498:	4b5a      	ldr	r3, [pc, #360]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a4:	d106      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ac:	d102      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4ae:	4b58      	ldr	r3, [pc, #352]	; (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b2:	e003      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4b8:	f000 bc30 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a4bc:	f000 bc2e 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4c0:	4b54      	ldr	r3, [pc, #336]	; (800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4c4:	f000 bc2a 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4cc:	f000 bc26 	b.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d6:	f040 809f 	bne.w	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a4da:	4b4a      	ldr	r3, [pc, #296]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a4e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ea:	d04d      	beq.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f2:	f200 8084 	bhi.w	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	2bc0      	cmp	r3, #192	; 0xc0
 800a4fa:	d07d      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	2bc0      	cmp	r3, #192	; 0xc0
 800a500:	d87d      	bhi.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	2b80      	cmp	r3, #128	; 0x80
 800a506:	d02d      	beq.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	2b80      	cmp	r3, #128	; 0x80
 800a50c:	d877      	bhi.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d012      	beq.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a51a:	e070      	b.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a51c:	4b39      	ldr	r3, [pc, #228]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a528:	d107      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a52a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fec0 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a538:	e3f0      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a53e:	e3ed      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a540:	4b30      	ldr	r3, [pc, #192]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a54c:	d107      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a54e:	f107 0318 	add.w	r3, r7, #24
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fc06 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a55c:	e3de      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a562:	e3db      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a564:	4b27      	ldr	r3, [pc, #156]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a56c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a570:	d107      	bne.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a572:	f107 030c 	add.w	r3, r7, #12
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fd48 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a580:	e3cc      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a586:	e3c9      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a58c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a590:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d10c      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d109      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5a4:	4b17      	ldr	r3, [pc, #92]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	08db      	lsrs	r3, r3, #3
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	4a16      	ldr	r2, [pc, #88]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b6:	e01e      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5b8:	4b12      	ldr	r3, [pc, #72]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c4:	d106      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5cc:	d102      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d2:	e010      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5e0:	d106      	bne.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5e8:	d102      	bne.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ee:	e002      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5f4:	e392      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a5f6:	e391      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5f8:	4b06      	ldr	r3, [pc, #24]	; (800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5fc:	e38e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a602:	e38b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a604:	58024400 	.word	0x58024400
 800a608:	03d09000 	.word	0x03d09000
 800a60c:	003d0900 	.word	0x003d0900
 800a610:	017d7840 	.word	0x017d7840
 800a614:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a61e:	f040 809c 	bne.w	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a622:	4b9d      	ldr	r3, [pc, #628]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a62a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a632:	d054      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a63a:	f200 808b 	bhi.w	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a644:	f000 8083 	beq.w	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a64e:	f200 8081 	bhi.w	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a658:	d02f      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a660:	d878      	bhi.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a66e:	d012      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a670:	e070      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a672:	4b89      	ldr	r3, [pc, #548]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a67a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a67e:	d107      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fe15 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a68e:	e345      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a694:	e342      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a696:	4b80      	ldr	r3, [pc, #512]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a69e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6a2:	d107      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a4:	f107 0318 	add.w	r3, r7, #24
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fb5b 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6b2:	e333      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6b8:	e330      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ba:	4b77      	ldr	r3, [pc, #476]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c6:	d107      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c8:	f107 030c 	add.w	r3, r7, #12
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fc9d 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d6:	e321      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6dc:	e31e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6de:	4b6e      	ldr	r3, [pc, #440]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6e8:	4b6b      	ldr	r3, [pc, #428]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d10c      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d109      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6fa:	4b67      	ldr	r3, [pc, #412]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	08db      	lsrs	r3, r3, #3
 800a700:	f003 0303 	and.w	r3, r3, #3
 800a704:	4a65      	ldr	r2, [pc, #404]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a70c:	e01e      	b.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a70e:	4b62      	ldr	r3, [pc, #392]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a71a:	d106      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a722:	d102      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a724:	4b5e      	ldr	r3, [pc, #376]	; (800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a728:	e010      	b.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a72a:	4b5b      	ldr	r3, [pc, #364]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a736:	d106      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a73e:	d102      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a740:	4b58      	ldr	r3, [pc, #352]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a744:	e002      	b.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a74a:	e2e7      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a74c:	e2e6      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a74e:	4b56      	ldr	r3, [pc, #344]	; (800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a752:	e2e3      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a758:	e2e0      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a760:	f040 80a7 	bne.w	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a764:	4b4c      	ldr	r3, [pc, #304]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a768:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a76c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a774:	d055      	beq.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a77c:	f200 8096 	bhi.w	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a786:	f000 8084 	beq.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a790:	f200 808c 	bhi.w	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a79a:	d030      	beq.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7a2:	f200 8083 	bhi.w	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d004      	beq.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7b2:	d012      	beq.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a7b4:	e07a      	b.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7b6:	4b38      	ldr	r3, [pc, #224]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7c2:	d107      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fd73 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7d2:	e2a3      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d8:	e2a0      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7da:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7e6:	d107      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e8:	f107 0318 	add.w	r3, r7, #24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 fab9 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a7f6:	e291      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fc:	e28e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7fe:	4b26      	ldr	r3, [pc, #152]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80a:	d107      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a80c:	f107 030c 	add.w	r3, r7, #12
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fbfb 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a81a:	e27f      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a820:	e27c      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a822:	4b1d      	ldr	r3, [pc, #116]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a82a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a82c:	4b1a      	ldr	r3, [pc, #104]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b04      	cmp	r3, #4
 800a836:	d10c      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a83e:	4b16      	ldr	r3, [pc, #88]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	08db      	lsrs	r3, r3, #3
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	4a14      	ldr	r2, [pc, #80]	; (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a84a:	fa22 f303 	lsr.w	r3, r2, r3
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a850:	e01e      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a852:	4b11      	ldr	r3, [pc, #68]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a85e:	d106      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a866:	d102      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86c:	e010      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a86e:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a87a:	d106      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a882:	d102      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a88e:	e245      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a890:	e244      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a896:	e241      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a898:	58024400 	.word	0x58024400
 800a89c:	03d09000 	.word	0x03d09000
 800a8a0:	003d0900 	.word	0x003d0900
 800a8a4:	017d7840 	.word	0x017d7840
 800a8a8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e234      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b8:	f040 809c 	bne.w	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a8bc:	4b9b      	ldr	r3, [pc, #620]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a8c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8cc:	d054      	beq.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8d4:	f200 808b 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8de:	f000 8083 	beq.w	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8e8:	f200 8081 	bhi.w	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8f2:	d02f      	beq.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fa:	d878      	bhi.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a908:	d012      	beq.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a90a:	e070      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a90c:	4b87      	ldr	r3, [pc, #540]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a918:	d107      	bne.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a91a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 fcc8 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a928:	e1f8      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a92e:	e1f5      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a930:	4b7e      	ldr	r3, [pc, #504]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a93c:	d107      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a93e:	f107 0318 	add.w	r3, r7, #24
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fa0e 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a94c:	e1e6      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a952:	e1e3      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a954:	4b75      	ldr	r3, [pc, #468]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a960:	d107      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a962:	f107 030c 	add.w	r3, r7, #12
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fb50 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a970:	e1d4      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a976:	e1d1      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a978:	4b6c      	ldr	r3, [pc, #432]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a97a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a980:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a982:	4b6a      	ldr	r3, [pc, #424]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0304 	and.w	r3, r3, #4
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d10c      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	2b00      	cmp	r3, #0
 800a992:	d109      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a994:	4b65      	ldr	r3, [pc, #404]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	08db      	lsrs	r3, r3, #3
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	4a64      	ldr	r2, [pc, #400]	; (800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a6:	e01e      	b.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9a8:	4b60      	ldr	r3, [pc, #384]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b4:	d106      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9bc:	d102      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9be:	4b5d      	ldr	r3, [pc, #372]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c2:	e010      	b.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9c4:	4b59      	ldr	r3, [pc, #356]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9d0:	d106      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d8:	d102      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a9da:	4b57      	ldr	r3, [pc, #348]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9de:	e002      	b.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a9e4:	e19a      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a9e6:	e199      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a9e8:	4b54      	ldr	r3, [pc, #336]	; (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ec:	e196      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9f2:	e193      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a9fa:	d173      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a9fc:	4b4b      	ldr	r3, [pc, #300]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa0c:	d02f      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa14:	d863      	bhi.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa22:	d012      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800aa24:	e05b      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa26:	4b41      	ldr	r3, [pc, #260]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa32:	d107      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa34:	f107 0318 	add.w	r3, r7, #24
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f993 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa42:	e16b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa48:	e168      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa4a:	4b38      	ldr	r3, [pc, #224]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa56:	d107      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa58:	f107 030c 	add.w	r3, r7, #12
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fad5 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa66:	e159      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa6c:	e156      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa6e:	4b2f      	ldr	r3, [pc, #188]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa78:	4b2c      	ldr	r3, [pc, #176]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d10c      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa8a:	4b28      	ldr	r3, [pc, #160]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	4a26      	ldr	r2, [pc, #152]	; (800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aa96:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa9c:	e01e      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa9e:	4b23      	ldr	r3, [pc, #140]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaaa:	d106      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800aaac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab2:	d102      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aab4:	4b1f      	ldr	r3, [pc, #124]	; (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab8:	e010      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaba:	4b1c      	ldr	r3, [pc, #112]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac6:	d106      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800aac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aace:	d102      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aad0:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad4:	e002      	b.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aada:	e11f      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aadc:	e11e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aae2:	e11b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaea:	d13e      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaf4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab02:	d01d      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ab04:	e02e      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab12:	d107      	bne.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 fbcb 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab22:	e0fb      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab28:	e0f8      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab2a:	bf00      	nop
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	03d09000 	.word	0x03d09000
 800ab34:	003d0900 	.word	0x003d0900
 800ab38:	017d7840 	.word	0x017d7840
 800ab3c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab40:	4b79      	ldr	r3, [pc, #484]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab4c:	d107      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4e:	f107 0318 	add.w	r3, r7, #24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f906 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab5c:	e0de      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab62:	e0db      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab68:	e0d8      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab70:	f040 8085 	bne.w	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ab74:	4b6c      	ldr	r3, [pc, #432]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab78:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ab7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab84:	d06b      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab8c:	d874      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab94:	d056      	beq.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9c:	d86c      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aba4:	d03b      	beq.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abac:	d864      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abb4:	d021      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abbc:	d85c      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d004      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abca:	d004      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800abcc:	e054      	b.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800abce:	f000 f8b3 	bl	800ad38 <HAL_RCCEx_GetD3PCLK1Freq>
 800abd2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800abd4:	e0a2      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd6:	4b54      	ldr	r3, [pc, #336]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe4:	f107 0318 	add.w	r3, r7, #24
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 f8bb 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800abf2:	e093      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf8:	e090      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abfa:	4b4b      	ldr	r3, [pc, #300]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac06:	d107      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac08:	f107 030c 	add.w	r3, r7, #12
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f9fd 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac16:	e081      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac1c:	e07e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac1e:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d109      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac2a:	4b3f      	ldr	r3, [pc, #252]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	08db      	lsrs	r3, r3, #3
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	4a3d      	ldr	r2, [pc, #244]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ac36:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac3c:	e06e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac42:	e06b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac44:	4b38      	ldr	r3, [pc, #224]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac50:	d102      	bne.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ac52:	4b37      	ldr	r3, [pc, #220]	; (800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ac54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac56:	e061      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac5c:	e05e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac5e:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6a:	d102      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ac6c:	4b31      	ldr	r3, [pc, #196]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac70:	e054      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac76:	e051      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac7c:	e04e      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac84:	d148      	bne.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ac86:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac96:	d02a      	beq.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac9e:	d838      	bhi.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acac:	d00d      	beq.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800acae:	e030      	b.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acb0:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acbc:	d102      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800acbe:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acc2:	e02b      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acc8:	e028      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acca:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acd6:	d107      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fae9 	bl	800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ace6:	e019      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acec:	e016      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acfa:	d107      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acfc:	f107 0318 	add.w	r3, r7, #24
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 f82f 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad0a:	e007      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad10:	e004      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad16:	e001      	b.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ad1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3740      	adds	r7, #64	; 0x40
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	03d09000 	.word	0x03d09000
 800ad30:	003d0900 	.word	0x003d0900
 800ad34:	017d7840 	.word	0x017d7840

0800ad38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad3c:	f7fe fb88 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 800ad40:	4602      	mov	r2, r0
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	091b      	lsrs	r3, r3, #4
 800ad48:	f003 0307 	and.w	r3, r3, #7
 800ad4c:	4904      	ldr	r1, [pc, #16]	; (800ad60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad4e:	5ccb      	ldrb	r3, [r1, r3]
 800ad50:	f003 031f 	and.w	r3, r3, #31
 800ad54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	08010000 	.word	0x08010000

0800ad64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b089      	sub	sp, #36	; 0x24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad6c:	4ba1      	ldr	r3, [pc, #644]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ad76:	4b9f      	ldr	r3, [pc, #636]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7a:	0b1b      	lsrs	r3, r3, #12
 800ad7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad82:	4b9c      	ldr	r3, [pc, #624]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	091b      	lsrs	r3, r3, #4
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ad8e:	4b99      	ldr	r3, [pc, #612]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	08db      	lsrs	r3, r3, #3
 800ad94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	fb02 f303 	mul.w	r3, r2, r3
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 8111 	beq.w	800afd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	f000 8083 	beq.w	800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	f200 80a1 	bhi.w	800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d056      	beq.n	800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800adce:	e099      	b.n	800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add0:	4b88      	ldr	r3, [pc, #544]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0320 	and.w	r3, r3, #32
 800add8:	2b00      	cmp	r3, #0
 800adda:	d02d      	beq.n	800ae38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800addc:	4b85      	ldr	r3, [pc, #532]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	08db      	lsrs	r3, r3, #3
 800ade2:	f003 0303 	and.w	r3, r3, #3
 800ade6:	4a84      	ldr	r2, [pc, #528]	; (800aff8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ade8:	fa22 f303 	lsr.w	r3, r2, r3
 800adec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae06:	4b7b      	ldr	r3, [pc, #492]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800affc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae36:	e087      	b.n	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4a:	4b6a      	ldr	r3, [pc, #424]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800affc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae7a:	e065      	b.n	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b59      	ldr	r3, [pc, #356]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800affc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aebe:	e043      	b.n	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed2:	4b48      	ldr	r3, [pc, #288]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800affc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af02:	e021      	b.n	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af16:	4b37      	ldr	r3, [pc, #220]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af26:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800affc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800af48:	4b2a      	ldr	r3, [pc, #168]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4c:	0a5b      	lsrs	r3, r3, #9
 800af4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af62:	edd7 6a07 	vldr	s13, [r7, #28]
 800af66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af6e:	ee17 2a90 	vmov	r2, s15
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800af76:	4b1f      	ldr	r3, [pc, #124]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	0c1b      	lsrs	r3, r3, #16
 800af7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af90:	edd7 6a07 	vldr	s13, [r7, #28]
 800af94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af9c:	ee17 2a90 	vmov	r2, s15
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800afa4:	4b13      	ldr	r3, [pc, #76]	; (800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa8:	0e1b      	lsrs	r3, r3, #24
 800afaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afca:	ee17 2a90 	vmov	r2, s15
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800afd2:	e008      	b.n	800afe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	609a      	str	r2, [r3, #8]
}
 800afe6:	bf00      	nop
 800afe8:	3724      	adds	r7, #36	; 0x24
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	58024400 	.word	0x58024400
 800aff8:	03d09000 	.word	0x03d09000
 800affc:	46000000 	.word	0x46000000
 800b000:	4c742400 	.word	0x4c742400
 800b004:	4a742400 	.word	0x4a742400
 800b008:	4bbebc20 	.word	0x4bbebc20

0800b00c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b089      	sub	sp, #36	; 0x24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b014:	4ba1      	ldr	r3, [pc, #644]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b01e:	4b9f      	ldr	r3, [pc, #636]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b022:	0d1b      	lsrs	r3, r3, #20
 800b024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b028:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b02a:	4b9c      	ldr	r3, [pc, #624]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	0a1b      	lsrs	r3, r3, #8
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b036:	4b99      	ldr	r3, [pc, #612]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03a:	08db      	lsrs	r3, r3, #3
 800b03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	fb02 f303 	mul.w	r3, r2, r3
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8111 	beq.w	800b27c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	f000 8083 	beq.w	800b168 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2b02      	cmp	r3, #2
 800b066:	f200 80a1 	bhi.w	800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d056      	beq.n	800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b076:	e099      	b.n	800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b078:	4b88      	ldr	r3, [pc, #544]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b00      	cmp	r3, #0
 800b082:	d02d      	beq.n	800b0e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b084:	4b85      	ldr	r3, [pc, #532]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	08db      	lsrs	r3, r3, #3
 800b08a:	f003 0303 	and.w	r3, r3, #3
 800b08e:	4a84      	ldr	r2, [pc, #528]	; (800b2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b090:	fa22 f303 	lsr.w	r3, r2, r3
 800b094:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ae:	4b7b      	ldr	r3, [pc, #492]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b0de:	e087      	b.n	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f2:	4b6a      	ldr	r3, [pc, #424]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b102:	ed97 6a03 	vldr	s12, [r7, #12]
 800b106:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b122:	e065      	b.n	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b59      	ldr	r3, [pc, #356]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b166:	e043      	b.n	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b48      	ldr	r3, [pc, #288]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1aa:	e021      	b.n	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b37      	ldr	r3, [pc, #220]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b1f0:	4b2a      	ldr	r3, [pc, #168]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	0a5b      	lsrs	r3, r3, #9
 800b1f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b20a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b20e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b216:	ee17 2a90 	vmov	r2, s15
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b21e:	4b1f      	ldr	r3, [pc, #124]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	0c1b      	lsrs	r3, r3, #16
 800b224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b234:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b238:	edd7 6a07 	vldr	s13, [r7, #28]
 800b23c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b244:	ee17 2a90 	vmov	r2, s15
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b24c:	4b13      	ldr	r3, [pc, #76]	; (800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b250:	0e1b      	lsrs	r3, r3, #24
 800b252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b262:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b266:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b272:	ee17 2a90 	vmov	r2, s15
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b27a:	e008      	b.n	800b28e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	609a      	str	r2, [r3, #8]
}
 800b28e:	bf00      	nop
 800b290:	3724      	adds	r7, #36	; 0x24
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	03d09000 	.word	0x03d09000
 800b2a4:	46000000 	.word	0x46000000
 800b2a8:	4c742400 	.word	0x4c742400
 800b2ac:	4a742400 	.word	0x4a742400
 800b2b0:	4bbebc20 	.word	0x4bbebc20

0800b2b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b089      	sub	sp, #36	; 0x24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2bc:	4ba0      	ldr	r3, [pc, #640]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c0:	f003 0303 	and.w	r3, r3, #3
 800b2c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b2c6:	4b9e      	ldr	r3, [pc, #632]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ca:	091b      	lsrs	r3, r3, #4
 800b2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b2d2:	4b9b      	ldr	r3, [pc, #620]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b2dc:	4b98      	ldr	r3, [pc, #608]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e0:	08db      	lsrs	r3, r3, #3
 800b2e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 8111 	beq.w	800b522 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	2b02      	cmp	r3, #2
 800b304:	f000 8083 	beq.w	800b40e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	f200 80a1 	bhi.w	800b452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d056      	beq.n	800b3ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b31c:	e099      	b.n	800b452 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31e:	4b88      	ldr	r3, [pc, #544]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d02d      	beq.n	800b386 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b32a:	4b85      	ldr	r3, [pc, #532]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	4a83      	ldr	r2, [pc, #524]	; (800b544 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b354:	4b7a      	ldr	r3, [pc, #488]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35c:	ee07 3a90 	vmov	s15, r3
 800b360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b364:	ed97 6a03 	vldr	s12, [r7, #12]
 800b368:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b380:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b384:	e087      	b.n	800b496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b390:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b54c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b398:	4b69      	ldr	r3, [pc, #420]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3c8:	e065      	b.n	800b496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3dc:	4b58      	ldr	r3, [pc, #352]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e4:	ee07 3a90 	vmov	s15, r3
 800b3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b408:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b40c:	e043      	b.n	800b496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b418:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b554 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b420:	4b47      	ldr	r3, [pc, #284]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b430:	ed97 6a03 	vldr	s12, [r7, #12]
 800b434:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b450:	e021      	b.n	800b496 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b54c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b464:	4b36      	ldr	r3, [pc, #216]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b474:	ed97 6a03 	vldr	s12, [r7, #12]
 800b478:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b47c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b494:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b496:	4b2a      	ldr	r3, [pc, #168]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	0a5b      	lsrs	r3, r3, #9
 800b49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4bc:	ee17 2a90 	vmov	r2, s15
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b4c4:	4b1e      	ldr	r3, [pc, #120]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c8:	0c1b      	lsrs	r3, r3, #16
 800b4ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ea:	ee17 2a90 	vmov	r2, s15
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b4f2:	4b13      	ldr	r3, [pc, #76]	; (800b540 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	0e1b      	lsrs	r3, r3, #24
 800b4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b50c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b518:	ee17 2a90 	vmov	r2, s15
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b520:	e008      	b.n	800b534 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	609a      	str	r2, [r3, #8]
}
 800b534:	bf00      	nop
 800b536:	3724      	adds	r7, #36	; 0x24
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	58024400 	.word	0x58024400
 800b544:	03d09000 	.word	0x03d09000
 800b548:	46000000 	.word	0x46000000
 800b54c:	4c742400 	.word	0x4c742400
 800b550:	4a742400 	.word	0x4a742400
 800b554:	4bbebc20 	.word	0x4bbebc20

0800b558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b566:	4b53      	ldr	r3, [pc, #332]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56a:	f003 0303 	and.w	r3, r3, #3
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d101      	bne.n	800b576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e099      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b576:	4b4f      	ldr	r3, [pc, #316]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a4e      	ldr	r2, [pc, #312]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b57c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b582:	f7f7 f98b 	bl	800289c <HAL_GetTick>
 800b586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b588:	e008      	b.n	800b59c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b58a:	f7f7 f987 	bl	800289c <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d901      	bls.n	800b59c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e086      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b59c:	4b45      	ldr	r3, [pc, #276]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1f0      	bne.n	800b58a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5a8:	4b42      	ldr	r3, [pc, #264]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	031b      	lsls	r3, r3, #12
 800b5b6:	493f      	ldr	r1, [pc, #252]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	025b      	lsls	r3, r3, #9
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	041b      	lsls	r3, r3, #16
 800b5da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	061b      	lsls	r3, r3, #24
 800b5e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5ec:	4931      	ldr	r1, [pc, #196]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5f2:	4b30      	ldr	r3, [pc, #192]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	492d      	ldr	r1, [pc, #180]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b600:	4313      	orrs	r3, r2
 800b602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b604:	4b2b      	ldr	r3, [pc, #172]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	f023 0220 	bic.w	r2, r3, #32
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	4928      	ldr	r1, [pc, #160]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b612:	4313      	orrs	r3, r2
 800b614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b616:	4b27      	ldr	r3, [pc, #156]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61a:	4a26      	ldr	r2, [pc, #152]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b61c:	f023 0310 	bic.w	r3, r3, #16
 800b620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b622:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b626:	4b24      	ldr	r3, [pc, #144]	; (800b6b8 <RCCEx_PLL2_Config+0x160>)
 800b628:	4013      	ands	r3, r2
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	69d2      	ldr	r2, [r2, #28]
 800b62e:	00d2      	lsls	r2, r2, #3
 800b630:	4920      	ldr	r1, [pc, #128]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b632:	4313      	orrs	r3, r2
 800b634:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b636:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b63c:	f043 0310 	orr.w	r3, r3, #16
 800b640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b648:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	4a19      	ldr	r2, [pc, #100]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b64e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b652:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b654:	e00f      	b.n	800b676 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d106      	bne.n	800b66a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b65c:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	4a14      	ldr	r2, [pc, #80]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b666:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b668:	e005      	b.n	800b676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b66a:	4b12      	ldr	r3, [pc, #72]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66e:	4a11      	ldr	r2, [pc, #68]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b676:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a0e      	ldr	r2, [pc, #56]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b67c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b682:	f7f7 f90b 	bl	800289c <HAL_GetTick>
 800b686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b688:	e008      	b.n	800b69c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b68a:	f7f7 f907 	bl	800289c <HAL_GetTick>
 800b68e:	4602      	mov	r2, r0
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2b02      	cmp	r3, #2
 800b696:	d901      	bls.n	800b69c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b698:	2303      	movs	r3, #3
 800b69a:	e006      	b.n	800b6aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <RCCEx_PLL2_Config+0x15c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0f0      	beq.n	800b68a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	58024400 	.word	0x58024400
 800b6b8:	ffff0007 	.word	0xffff0007

0800b6bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ca:	4b53      	ldr	r3, [pc, #332]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d101      	bne.n	800b6da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e099      	b.n	800b80e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6da:	4b4f      	ldr	r3, [pc, #316]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a4e      	ldr	r2, [pc, #312]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b6e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e6:	f7f7 f8d9 	bl	800289c <HAL_GetTick>
 800b6ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6ec:	e008      	b.n	800b700 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b6ee:	f7f7 f8d5 	bl	800289c <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e086      	b.n	800b80e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b700:	4b45      	ldr	r3, [pc, #276]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b70c:	4b42      	ldr	r3, [pc, #264]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	051b      	lsls	r3, r3, #20
 800b71a:	493f      	ldr	r1, [pc, #252]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	628b      	str	r3, [r1, #40]	; 0x28
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	3b01      	subs	r3, #1
 800b726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	3b01      	subs	r3, #1
 800b730:	025b      	lsls	r3, r3, #9
 800b732:	b29b      	uxth	r3, r3
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	3b01      	subs	r3, #1
 800b74a:	061b      	lsls	r3, r3, #24
 800b74c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b750:	4931      	ldr	r1, [pc, #196]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b752:	4313      	orrs	r3, r2
 800b754:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b756:	4b30      	ldr	r3, [pc, #192]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	492d      	ldr	r1, [pc, #180]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b764:	4313      	orrs	r3, r2
 800b766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b768:	4b2b      	ldr	r3, [pc, #172]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	4928      	ldr	r1, [pc, #160]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b776:	4313      	orrs	r3, r2
 800b778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b77a:	4b27      	ldr	r3, [pc, #156]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	4a26      	ldr	r2, [pc, #152]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b78a:	4b24      	ldr	r3, [pc, #144]	; (800b81c <RCCEx_PLL3_Config+0x160>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	69d2      	ldr	r2, [r2, #28]
 800b792:	00d2      	lsls	r2, r2, #3
 800b794:	4920      	ldr	r1, [pc, #128]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b796:	4313      	orrs	r3, r2
 800b798:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b79a:	4b1f      	ldr	r3, [pc, #124]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	4a1e      	ldr	r2, [pc, #120]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7ac:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7b8:	e00f      	b.n	800b7da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d106      	bne.n	800b7ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7c0:	4b15      	ldr	r3, [pc, #84]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	4a14      	ldr	r2, [pc, #80]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7cc:	e005      	b.n	800b7da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7ce:	4b12      	ldr	r3, [pc, #72]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	4a11      	ldr	r2, [pc, #68]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a0e      	ldr	r2, [pc, #56]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b7e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7e6:	f7f7 f859 	bl	800289c <HAL_GetTick>
 800b7ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7ec:	e008      	b.n	800b800 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7ee:	f7f7 f855 	bl	800289c <HAL_GetTick>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d901      	bls.n	800b800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e006      	b.n	800b80e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b800:	4b05      	ldr	r3, [pc, #20]	; (800b818 <RCCEx_PLL3_Config+0x15c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0f0      	beq.n	800b7ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	58024400 	.word	0x58024400
 800b81c:	ffff0007 	.word	0xffff0007

0800b820 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e0f1      	b.n	800ba16 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a78      	ldr	r2, [pc, #480]	; (800ba20 <HAL_SPI_Init+0x200>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d00f      	beq.n	800b862 <HAL_SPI_Init+0x42>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a77      	ldr	r2, [pc, #476]	; (800ba24 <HAL_SPI_Init+0x204>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00a      	beq.n	800b862 <HAL_SPI_Init+0x42>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a75      	ldr	r2, [pc, #468]	; (800ba28 <HAL_SPI_Init+0x208>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d005      	beq.n	800b862 <HAL_SPI_Init+0x42>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	2b0f      	cmp	r3, #15
 800b85c:	d901      	bls.n	800b862 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e0d9      	b.n	800ba16 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fd74 	bl	800c350 <SPI_GetPacketSize>
 800b868:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a6c      	ldr	r2, [pc, #432]	; (800ba20 <HAL_SPI_Init+0x200>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d00c      	beq.n	800b88e <HAL_SPI_Init+0x6e>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a6a      	ldr	r2, [pc, #424]	; (800ba24 <HAL_SPI_Init+0x204>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d007      	beq.n	800b88e <HAL_SPI_Init+0x6e>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a69      	ldr	r2, [pc, #420]	; (800ba28 <HAL_SPI_Init+0x208>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d002      	beq.n	800b88e <HAL_SPI_Init+0x6e>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b08      	cmp	r3, #8
 800b88c:	d811      	bhi.n	800b8b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b892:	4a63      	ldr	r2, [pc, #396]	; (800ba20 <HAL_SPI_Init+0x200>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d009      	beq.n	800b8ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a61      	ldr	r2, [pc, #388]	; (800ba24 <HAL_SPI_Init+0x204>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d004      	beq.n	800b8ac <HAL_SPI_Init+0x8c>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a60      	ldr	r2, [pc, #384]	; (800ba28 <HAL_SPI_Init+0x208>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d104      	bne.n	800b8b6 <HAL_SPI_Init+0x96>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b10      	cmp	r3, #16
 800b8b0:	d901      	bls.n	800b8b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e0af      	b.n	800ba16 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7f6 fc1e 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f022 0201 	bic.w	r2, r2, #1
 800b8e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b8f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8fc:	d119      	bne.n	800b932 <HAL_SPI_Init+0x112>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b906:	d103      	bne.n	800b910 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d008      	beq.n	800b922 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b91c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b920:	d107      	bne.n	800b932 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69da      	ldr	r2, [r3, #28]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	431a      	orrs	r2, r3
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	431a      	orrs	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b944:	ea42 0103 	orr.w	r1, r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	431a      	orrs	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	431a      	orrs	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	431a      	orrs	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	431a      	orrs	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	431a      	orrs	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	431a      	orrs	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b986:	431a      	orrs	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	431a      	orrs	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b992:	ea42 0103 	orr.w	r1, r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d113      	bne.n	800b9d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0201 	bic.w	r2, r2, #1
 800b9e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	40013000 	.word	0x40013000
 800ba24:	40003800 	.word	0x40003800
 800ba28:	40003c00 	.word	0x40003c00

0800ba2c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08a      	sub	sp, #40	; 0x28
 800ba30:	af02      	add	r7, sp, #8
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	603b      	str	r3, [r7, #0]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3330      	adds	r3, #48	; 0x30
 800ba46:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba50:	d112      	bne.n	800ba78 <HAL_SPI_Receive+0x4c>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10e      	bne.n	800ba78 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2204      	movs	r2, #4
 800ba5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ba62:	88fa      	ldrh	r2, [r7, #6]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 f978 	bl	800bd64 <HAL_SPI_TransmitReceive>
 800ba74:	4603      	mov	r3, r0
 800ba76:	e16f      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d101      	bne.n	800ba86 <HAL_SPI_Receive+0x5a>
 800ba82:	2302      	movs	r3, #2
 800ba84:	e168      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba8e:	f7f6 ff05 	bl	800289c <HAL_GetTick>
 800ba92:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d007      	beq.n	800bab0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800baa0:	2302      	movs	r3, #2
 800baa2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800baac:	7ffb      	ldrb	r3, [r7, #31]
 800baae:	e153      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d002      	beq.n	800babc <HAL_SPI_Receive+0x90>
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d107      	bne.n	800bacc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bac8:	7ffb      	ldrb	r3, [r7, #31]
 800baca:	e145      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2204      	movs	r2, #4
 800bad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	88fa      	ldrh	r2, [r7, #6]
 800bae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	88fa      	ldrh	r2, [r7, #6]
 800baee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb1c:	d107      	bne.n	800bb2e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	4b8a      	ldr	r3, [pc, #552]	; (800bd60 <HAL_SPI_Receive+0x334>)
 800bb36:	4013      	ands	r3, r2
 800bb38:	88f9      	ldrh	r1, [r7, #6]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	6812      	ldr	r2, [r2, #0]
 800bb3e:	430b      	orrs	r3, r1
 800bb40:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f042 0201 	orr.w	r2, r2, #1
 800bb50:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb5a:	d107      	bne.n	800bb6c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b0f      	cmp	r3, #15
 800bb72:	d948      	bls.n	800bc06 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb74:	e040      	b.n	800bbf8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	695a      	ldr	r2, [r3, #20]
 800bb7c:	f248 0308 	movw	r3, #32776	; 0x8008
 800bb80:	4013      	ands	r3, r2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d014      	beq.n	800bbb0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bb90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb96:	1d1a      	adds	r2, r3, #4
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bbae:	e023      	b.n	800bbf8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbb0:	f7f6 fe74 	bl	800289c <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d803      	bhi.n	800bbc8 <HAL_SPI_Receive+0x19c>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbc6:	d102      	bne.n	800bbce <HAL_SPI_Receive+0x1a2>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d114      	bne.n	800bbf8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f000 faf0 	bl	800c1b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e0af      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1b8      	bne.n	800bb76 <HAL_SPI_Receive+0x14a>
 800bc04:	e095      	b.n	800bd32 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	2b07      	cmp	r3, #7
 800bc0c:	f240 808b 	bls.w	800bd26 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc10:	e03f      	b.n	800bc92 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d114      	bne.n	800bc4a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	8812      	ldrh	r2, [r2, #0]
 800bc28:	b292      	uxth	r2, r2
 800bc2a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc30:	1c9a      	adds	r2, r3, #2
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc48:	e023      	b.n	800bc92 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc4a:	f7f6 fe27 	bl	800289c <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d803      	bhi.n	800bc62 <HAL_SPI_Receive+0x236>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc60:	d102      	bne.n	800bc68 <HAL_SPI_Receive+0x23c>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d114      	bne.n	800bc92 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 faa3 	bl	800c1b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e062      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1b9      	bne.n	800bc12 <HAL_SPI_Receive+0x1e6>
 800bc9e:	e048      	b.n	800bd32 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d117      	bne.n	800bcde <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcba:	7812      	ldrb	r2, [r2, #0]
 800bcbc:	b2d2      	uxtb	r2, r2
 800bcbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bcdc:	e023      	b.n	800bd26 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcde:	f7f6 fddd 	bl	800289c <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d803      	bhi.n	800bcf6 <HAL_SPI_Receive+0x2ca>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf4:	d102      	bne.n	800bcfc <HAL_SPI_Receive+0x2d0>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d114      	bne.n	800bd26 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 fa59 	bl	800c1b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e018      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1b6      	bne.n	800bca0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 fa3e 	bl	800c1b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bd56:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	ffff0000 	.word	0xffff0000

0800bd64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08e      	sub	sp, #56	; 0x38
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3320      	adds	r3, #32
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3330      	adds	r3, #48	; 0x30
 800bd86:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d101      	bne.n	800bd96 <HAL_SPI_TransmitReceive+0x32>
 800bd92:	2302      	movs	r3, #2
 800bd94:	e209      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd9e:	f7f6 fd7d 	bl	800289c <HAL_GetTick>
 800bda2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bda4:	887b      	ldrh	r3, [r7, #2]
 800bda6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bda8:	887b      	ldrh	r3, [r7, #2]
 800bdaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdb2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bdba:	7efb      	ldrb	r3, [r7, #27]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d014      	beq.n	800bdea <HAL_SPI_TransmitReceive+0x86>
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdc6:	d106      	bne.n	800bdd6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdd0:	7efb      	ldrb	r3, [r7, #27]
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d009      	beq.n	800bdea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bde4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bde8:	e1df      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d005      	beq.n	800bdfc <HAL_SPI_TransmitReceive+0x98>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <HAL_SPI_TransmitReceive+0x98>
 800bdf6:	887b      	ldrh	r3, [r7, #2]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d109      	bne.n	800be10 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be0e:	e1cc      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b04      	cmp	r3, #4
 800be1a:	d003      	beq.n	800be24 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2205      	movs	r2, #5
 800be20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	887a      	ldrh	r2, [r7, #2]
 800be36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	887a      	ldrh	r2, [r7, #2]
 800be3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	887a      	ldrh	r2, [r7, #2]
 800be4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	887a      	ldrh	r2, [r7, #2]
 800be54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	4b82      	ldr	r3, [pc, #520]	; (800c074 <HAL_SPI_TransmitReceive+0x310>)
 800be6c:	4013      	ands	r3, r2
 800be6e:	8879      	ldrh	r1, [r7, #2]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	430b      	orrs	r3, r1
 800be76:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0201 	orr.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be90:	d107      	bne.n	800bea2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	2b0f      	cmp	r3, #15
 800bea8:	d970      	bls.n	800bf8c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800beaa:	e068      	b.n	800bf7e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d11a      	bne.n	800bef0 <HAL_SPI_TransmitReceive+0x18c>
 800beba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d017      	beq.n	800bef0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed0:	1d1a      	adds	r2, r3, #4
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bedc:	b29b      	uxth	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	695a      	ldr	r2, [r3, #20]
 800bef6:	f248 0308 	movw	r3, #32776	; 0x8008
 800befa:	4013      	ands	r3, r2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01a      	beq.n	800bf36 <HAL_SPI_TransmitReceive+0x1d2>
 800bf00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d017      	beq.n	800bf36 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bf10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf16:	1d1a      	adds	r2, r3, #4
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf34:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf36:	f7f6 fcb1 	bl	800289c <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d803      	bhi.n	800bf4e <HAL_SPI_TransmitReceive+0x1ea>
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf4c:	d102      	bne.n	800bf54 <HAL_SPI_TransmitReceive+0x1f0>
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d114      	bne.n	800bf7e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f92d 	bl	800c1b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e115      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d193      	bne.n	800beac <HAL_SPI_TransmitReceive+0x148>
 800bf84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d190      	bne.n	800beac <HAL_SPI_TransmitReceive+0x148>
 800bf8a:	e0e7      	b.n	800c15c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	2b07      	cmp	r3, #7
 800bf92:	f240 80dd 	bls.w	800c150 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf96:	e066      	b.n	800c066 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	f003 0302 	and.w	r3, r3, #2
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d119      	bne.n	800bfda <HAL_SPI_TransmitReceive+0x276>
 800bfa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d016      	beq.n	800bfda <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfb0:	881a      	ldrh	r2, [r3, #0]
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfba:	1c9a      	adds	r2, r3, #2
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d11a      	bne.n	800c01e <HAL_SPI_TransmitReceive+0x2ba>
 800bfe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d017      	beq.n	800c01e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff2:	6a3a      	ldr	r2, [r7, #32]
 800bff4:	8812      	ldrh	r2, [r2, #0]
 800bff6:	b292      	uxth	r2, r2
 800bff8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c01c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c01e:	f7f6 fc3d 	bl	800289c <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d803      	bhi.n	800c036 <HAL_SPI_TransmitReceive+0x2d2>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c034:	d102      	bne.n	800c03c <HAL_SPI_TransmitReceive+0x2d8>
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d114      	bne.n	800c066 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 f8b9 	bl	800c1b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e0a1      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d195      	bne.n	800bf98 <HAL_SPI_TransmitReceive+0x234>
 800c06c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d192      	bne.n	800bf98 <HAL_SPI_TransmitReceive+0x234>
 800c072:	e073      	b.n	800c15c <HAL_SPI_TransmitReceive+0x3f8>
 800c074:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b02      	cmp	r3, #2
 800c084:	d11b      	bne.n	800c0be <HAL_SPI_TransmitReceive+0x35a>
 800c086:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d018      	beq.n	800c0be <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3320      	adds	r3, #32
 800c096:	7812      	ldrb	r2, [r2, #0]
 800c098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d11d      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x3a4>
 800c0cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d01a      	beq.n	800c108 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	b2d2      	uxtb	r2, r2
 800c0e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c106:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c108:	f7f6 fbc8 	bl	800289c <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c114:	429a      	cmp	r2, r3
 800c116:	d803      	bhi.n	800c120 <HAL_SPI_TransmitReceive+0x3bc>
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c11e:	d102      	bne.n	800c126 <HAL_SPI_TransmitReceive+0x3c2>
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	2b00      	cmp	r3, #0
 800c124:	d114      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 f844 	bl	800c1b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e02c      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c152:	2b00      	cmp	r3, #0
 800c154:	d190      	bne.n	800c078 <HAL_SPI_TransmitReceive+0x314>
 800c156:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d18d      	bne.n	800c078 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2200      	movs	r2, #0
 800c164:	2108      	movs	r1, #8
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f000 f8c4 	bl	800c2f4 <SPI_WaitOnFlagUntilTimeout>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c178:	f043 0220 	orr.w	r2, r3, #32
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f000 f816 	bl	800c1b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e001      	b.n	800c1aa <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c1a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3730      	adds	r7, #48	; 0x30
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop

0800c1b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	699a      	ldr	r2, [r3, #24]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0208 	orr.w	r2, r2, #8
 800c1d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	699a      	ldr	r2, [r3, #24]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f042 0210 	orr.w	r2, r2, #16
 800c1e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 0201 	bic.w	r2, r2, #1
 800c1f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6919      	ldr	r1, [r3, #16]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	4b3c      	ldr	r3, [pc, #240]	; (800c2f0 <SPI_CloseTransfer+0x13c>)
 800c200:	400b      	ands	r3, r1
 800c202:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689a      	ldr	r2, [r3, #8]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c212:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b04      	cmp	r3, #4
 800c21e:	d014      	beq.n	800c24a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00f      	beq.n	800c24a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c230:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	699a      	ldr	r2, [r3, #24]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f042 0220 	orr.w	r2, r2, #32
 800c248:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b03      	cmp	r3, #3
 800c254:	d014      	beq.n	800c280 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00f      	beq.n	800c280 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c266:	f043 0204 	orr.w	r2, r3, #4
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	699a      	ldr	r2, [r3, #24]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c27e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00f      	beq.n	800c2aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c290:	f043 0201 	orr.w	r2, r3, #1
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	699a      	ldr	r2, [r3, #24]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00f      	beq.n	800c2d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ba:	f043 0208 	orr.w	r2, r3, #8
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	699a      	ldr	r2, [r3, #24]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c2e4:	bf00      	nop
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	fffffc90 	.word	0xfffffc90

0800c2f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	603b      	str	r3, [r7, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c304:	e010      	b.n	800c328 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c306:	f7f6 fac9 	bl	800289c <HAL_GetTick>
 800c30a:	4602      	mov	r2, r0
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	69ba      	ldr	r2, [r7, #24]
 800c312:	429a      	cmp	r2, r3
 800c314:	d803      	bhi.n	800c31e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c31c:	d102      	bne.n	800c324 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e00f      	b.n	800c348 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	695a      	ldr	r2, [r3, #20]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	4013      	ands	r3, r2
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	429a      	cmp	r2, r3
 800c336:	bf0c      	ite	eq
 800c338:	2301      	moveq	r3, #1
 800c33a:	2300      	movne	r3, #0
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	429a      	cmp	r2, r3
 800c344:	d0df      	beq.n	800c306 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	3301      	adds	r3, #1
 800c360:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	3301      	adds	r3, #1
 800c368:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	3307      	adds	r3, #7
 800c36e:	08db      	lsrs	r3, r3, #3
 800c370:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	fb02 f303 	mul.w	r3, r2, r3
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d109      	bne.n	800c3b0 <HAL_TIM_OC_Start_IT+0x28>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	bf14      	ite	ne
 800c3a8:	2301      	movne	r3, #1
 800c3aa:	2300      	moveq	r3, #0
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	e03c      	b.n	800c42a <HAL_TIM_OC_Start_IT+0xa2>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d109      	bne.n	800c3ca <HAL_TIM_OC_Start_IT+0x42>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	bf14      	ite	ne
 800c3c2:	2301      	movne	r3, #1
 800c3c4:	2300      	moveq	r3, #0
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	e02f      	b.n	800c42a <HAL_TIM_OC_Start_IT+0xa2>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d109      	bne.n	800c3e4 <HAL_TIM_OC_Start_IT+0x5c>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	e022      	b.n	800c42a <HAL_TIM_OC_Start_IT+0xa2>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b0c      	cmp	r3, #12
 800c3e8:	d109      	bne.n	800c3fe <HAL_TIM_OC_Start_IT+0x76>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	bf14      	ite	ne
 800c3f6:	2301      	movne	r3, #1
 800c3f8:	2300      	moveq	r3, #0
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	e015      	b.n	800c42a <HAL_TIM_OC_Start_IT+0xa2>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b10      	cmp	r3, #16
 800c402:	d109      	bne.n	800c418 <HAL_TIM_OC_Start_IT+0x90>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	bf14      	ite	ne
 800c410:	2301      	movne	r3, #1
 800c412:	2300      	moveq	r3, #0
 800c414:	b2db      	uxtb	r3, r3
 800c416:	e008      	b.n	800c42a <HAL_TIM_OC_Start_IT+0xa2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b01      	cmp	r3, #1
 800c422:	bf14      	ite	ne
 800c424:	2301      	movne	r3, #1
 800c426:	2300      	moveq	r3, #0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e0ec      	b.n	800c60c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d104      	bne.n	800c442 <HAL_TIM_OC_Start_IT+0xba>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c440:	e023      	b.n	800c48a <HAL_TIM_OC_Start_IT+0x102>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b04      	cmp	r3, #4
 800c446:	d104      	bne.n	800c452 <HAL_TIM_OC_Start_IT+0xca>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c450:	e01b      	b.n	800c48a <HAL_TIM_OC_Start_IT+0x102>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b08      	cmp	r3, #8
 800c456:	d104      	bne.n	800c462 <HAL_TIM_OC_Start_IT+0xda>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c460:	e013      	b.n	800c48a <HAL_TIM_OC_Start_IT+0x102>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b0c      	cmp	r3, #12
 800c466:	d104      	bne.n	800c472 <HAL_TIM_OC_Start_IT+0xea>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c470:	e00b      	b.n	800c48a <HAL_TIM_OC_Start_IT+0x102>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b10      	cmp	r3, #16
 800c476:	d104      	bne.n	800c482 <HAL_TIM_OC_Start_IT+0xfa>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2202      	movs	r2, #2
 800c47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c480:	e003      	b.n	800c48a <HAL_TIM_OC_Start_IT+0x102>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2202      	movs	r2, #2
 800c486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b0c      	cmp	r3, #12
 800c48e:	d841      	bhi.n	800c514 <HAL_TIM_OC_Start_IT+0x18c>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <HAL_TIM_OC_Start_IT+0x110>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4cd 	.word	0x0800c4cd
 800c49c:	0800c515 	.word	0x0800c515
 800c4a0:	0800c515 	.word	0x0800c515
 800c4a4:	0800c515 	.word	0x0800c515
 800c4a8:	0800c4df 	.word	0x0800c4df
 800c4ac:	0800c515 	.word	0x0800c515
 800c4b0:	0800c515 	.word	0x0800c515
 800c4b4:	0800c515 	.word	0x0800c515
 800c4b8:	0800c4f1 	.word	0x0800c4f1
 800c4bc:	0800c515 	.word	0x0800c515
 800c4c0:	0800c515 	.word	0x0800c515
 800c4c4:	0800c515 	.word	0x0800c515
 800c4c8:	0800c503 	.word	0x0800c503
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0202 	orr.w	r2, r2, #2
 800c4da:	60da      	str	r2, [r3, #12]
      break;
 800c4dc:	e01d      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68da      	ldr	r2, [r3, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f042 0204 	orr.w	r2, r2, #4
 800c4ec:	60da      	str	r2, [r3, #12]
      break;
 800c4ee:	e014      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0208 	orr.w	r2, r2, #8
 800c4fe:	60da      	str	r2, [r3, #12]
      break;
 800c500:	e00b      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f042 0210 	orr.w	r2, r2, #16
 800c510:	60da      	str	r2, [r3, #12]
      break;
 800c512:	e002      	b.n	800c51a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	73fb      	strb	r3, [r7, #15]
      break;
 800c518:	bf00      	nop
  }

  if (status == HAL_OK)
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d174      	bne.n	800c60a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2201      	movs	r2, #1
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 fea9 	bl	800d280 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a38      	ldr	r2, [pc, #224]	; (800c614 <HAL_TIM_OC_Start_IT+0x28c>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d013      	beq.n	800c560 <HAL_TIM_OC_Start_IT+0x1d8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a36      	ldr	r2, [pc, #216]	; (800c618 <HAL_TIM_OC_Start_IT+0x290>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d00e      	beq.n	800c560 <HAL_TIM_OC_Start_IT+0x1d8>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a35      	ldr	r2, [pc, #212]	; (800c61c <HAL_TIM_OC_Start_IT+0x294>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d009      	beq.n	800c560 <HAL_TIM_OC_Start_IT+0x1d8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a33      	ldr	r2, [pc, #204]	; (800c620 <HAL_TIM_OC_Start_IT+0x298>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d004      	beq.n	800c560 <HAL_TIM_OC_Start_IT+0x1d8>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a32      	ldr	r2, [pc, #200]	; (800c624 <HAL_TIM_OC_Start_IT+0x29c>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d101      	bne.n	800c564 <HAL_TIM_OC_Start_IT+0x1dc>
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <HAL_TIM_OC_Start_IT+0x1de>
 800c564:	2300      	movs	r3, #0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d007      	beq.n	800c57a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a25      	ldr	r2, [pc, #148]	; (800c614 <HAL_TIM_OC_Start_IT+0x28c>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d022      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58c:	d01d      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a25      	ldr	r2, [pc, #148]	; (800c628 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d018      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a23      	ldr	r2, [pc, #140]	; (800c62c <HAL_TIM_OC_Start_IT+0x2a4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d013      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a22      	ldr	r2, [pc, #136]	; (800c630 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d00e      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a19      	ldr	r2, [pc, #100]	; (800c618 <HAL_TIM_OC_Start_IT+0x290>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d009      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a1e      	ldr	r2, [pc, #120]	; (800c634 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d004      	beq.n	800c5ca <HAL_TIM_OC_Start_IT+0x242>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a15      	ldr	r2, [pc, #84]	; (800c61c <HAL_TIM_OC_Start_IT+0x294>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d115      	bne.n	800c5f6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	4b19      	ldr	r3, [pc, #100]	; (800c638 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b06      	cmp	r3, #6
 800c5da:	d015      	beq.n	800c608 <HAL_TIM_OC_Start_IT+0x280>
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e2:	d011      	beq.n	800c608 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0201 	orr.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f4:	e008      	b.n	800c608 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f042 0201 	orr.w	r2, r2, #1
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	e000      	b.n	800c60a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c608:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	40010000 	.word	0x40010000
 800c618:	40010400 	.word	0x40010400
 800c61c:	40014000 	.word	0x40014000
 800c620:	40014400 	.word	0x40014400
 800c624:	40014800 	.word	0x40014800
 800c628:	40000400 	.word	0x40000400
 800c62c:	40000800 	.word	0x40000800
 800c630:	40000c00 	.word	0x40000c00
 800c634:	40001800 	.word	0x40001800
 800c638:	00010007 	.word	0x00010007

0800c63c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e049      	b.n	800c6e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7f5 fe02 	bl	800226c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3304      	adds	r3, #4
 800c678:	4619      	mov	r1, r3
 800c67a:	4610      	mov	r0, r2
 800c67c:	f000 fa90 	bl	800cba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d122      	bne.n	800c746 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d11b      	bne.n	800c746 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f06f 0202 	mvn.w	r2, #2
 800c716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fa19 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c732:	e005      	b.n	800c740 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7f3 ffeb 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa1c 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b04      	cmp	r3, #4
 800c752:	d122      	bne.n	800c79a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d11b      	bne.n	800c79a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f06f 0204 	mvn.w	r2, #4
 800c76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f9ef 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c786:	e005      	b.n	800c794 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7f3 ffc1 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9f2 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b08      	cmp	r3, #8
 800c7a6:	d122      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f003 0308 	and.w	r3, r3, #8
 800c7b2:	2b08      	cmp	r3, #8
 800c7b4:	d11b      	bne.n	800c7ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f06f 0208 	mvn.w	r2, #8
 800c7be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f9c5 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c7da:	e005      	b.n	800c7e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7f3 ff97 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f9c8 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b10      	cmp	r3, #16
 800c7fa:	d122      	bne.n	800c842 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f003 0310 	and.w	r3, r3, #16
 800c806:	2b10      	cmp	r3, #16
 800c808:	d11b      	bne.n	800c842 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0210 	mvn.w	r2, #16
 800c812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2208      	movs	r2, #8
 800c818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f99b 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c82e:	e005      	b.n	800c83c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7f3 ff6d 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f99e 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10e      	bne.n	800c86e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d107      	bne.n	800c86e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f06f 0201 	mvn.w	r2, #1
 800c866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f971 	bl	800cb50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c878:	2b80      	cmp	r3, #128	; 0x80
 800c87a:	d10e      	bne.n	800c89a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c886:	2b80      	cmp	r3, #128	; 0x80
 800c888:	d107      	bne.n	800c89a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fe2f 	bl	800d4f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a8:	d10e      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b4:	2b80      	cmp	r3, #128	; 0x80
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fe22 	bl	800d50c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d2:	2b40      	cmp	r3, #64	; 0x40
 800c8d4:	d10e      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e0:	2b40      	cmp	r3, #64	; 0x40
 800c8e2:	d107      	bne.n	800c8f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f94c 	bl	800cb8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	d10e      	bne.n	800c920 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	f003 0320 	and.w	r3, r3, #32
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	d107      	bne.n	800c920 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f06f 0220 	mvn.w	r2, #32
 800c918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fde2 	bl	800d4e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d101      	bne.n	800c946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c942:	2302      	movs	r3, #2
 800c944:	e0ff      	b.n	800cb46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b14      	cmp	r3, #20
 800c952:	f200 80f0 	bhi.w	800cb36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c9b1 	.word	0x0800c9b1
 800c960:	0800cb37 	.word	0x0800cb37
 800c964:	0800cb37 	.word	0x0800cb37
 800c968:	0800cb37 	.word	0x0800cb37
 800c96c:	0800c9f1 	.word	0x0800c9f1
 800c970:	0800cb37 	.word	0x0800cb37
 800c974:	0800cb37 	.word	0x0800cb37
 800c978:	0800cb37 	.word	0x0800cb37
 800c97c:	0800ca33 	.word	0x0800ca33
 800c980:	0800cb37 	.word	0x0800cb37
 800c984:	0800cb37 	.word	0x0800cb37
 800c988:	0800cb37 	.word	0x0800cb37
 800c98c:	0800ca73 	.word	0x0800ca73
 800c990:	0800cb37 	.word	0x0800cb37
 800c994:	0800cb37 	.word	0x0800cb37
 800c998:	0800cb37 	.word	0x0800cb37
 800c99c:	0800cab5 	.word	0x0800cab5
 800c9a0:	0800cb37 	.word	0x0800cb37
 800c9a4:	0800cb37 	.word	0x0800cb37
 800c9a8:	0800cb37 	.word	0x0800cb37
 800c9ac:	0800caf5 	.word	0x0800caf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68b9      	ldr	r1, [r7, #8]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 f98c 	bl	800ccd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	699a      	ldr	r2, [r3, #24]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f042 0208 	orr.w	r2, r2, #8
 800c9ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	699a      	ldr	r2, [r3, #24]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f022 0204 	bic.w	r2, r2, #4
 800c9da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	6999      	ldr	r1, [r3, #24]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	619a      	str	r2, [r3, #24]
      break;
 800c9ee:	e0a5      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f9fc 	bl	800cdf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	699a      	ldr	r2, [r3, #24]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	699a      	ldr	r2, [r3, #24]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6999      	ldr	r1, [r3, #24]
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	021a      	lsls	r2, r3, #8
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	430a      	orrs	r2, r1
 800ca2e:	619a      	str	r2, [r3, #24]
      break;
 800ca30:	e084      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 fa65 	bl	800cf08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	69da      	ldr	r2, [r3, #28]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f042 0208 	orr.w	r2, r2, #8
 800ca4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	69da      	ldr	r2, [r3, #28]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f022 0204 	bic.w	r2, r2, #4
 800ca5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	69d9      	ldr	r1, [r3, #28]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	430a      	orrs	r2, r1
 800ca6e:	61da      	str	r2, [r3, #28]
      break;
 800ca70:	e064      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 facd 	bl	800d018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	69da      	ldr	r2, [r3, #28]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	69da      	ldr	r2, [r3, #28]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69d9      	ldr	r1, [r3, #28]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	021a      	lsls	r2, r3, #8
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	430a      	orrs	r2, r1
 800cab0:	61da      	str	r2, [r3, #28]
      break;
 800cab2:	e043      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fb16 	bl	800d0ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0208 	orr.w	r2, r2, #8
 800cace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0204 	bic.w	r2, r2, #4
 800cade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	691a      	ldr	r2, [r3, #16]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	430a      	orrs	r2, r1
 800caf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800caf2:	e023      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fb5a 	bl	800d1b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	021a      	lsls	r2, r3, #8
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb34:	e002      	b.n	800cb3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	75fb      	strb	r3, [r7, #23]
      break;
 800cb3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop

0800cb50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a40      	ldr	r2, [pc, #256]	; (800ccb4 <TIM_Base_SetConfig+0x114>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d013      	beq.n	800cbe0 <TIM_Base_SetConfig+0x40>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d00f      	beq.n	800cbe0 <TIM_Base_SetConfig+0x40>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a3d      	ldr	r2, [pc, #244]	; (800ccb8 <TIM_Base_SetConfig+0x118>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d00b      	beq.n	800cbe0 <TIM_Base_SetConfig+0x40>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a3c      	ldr	r2, [pc, #240]	; (800ccbc <TIM_Base_SetConfig+0x11c>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d007      	beq.n	800cbe0 <TIM_Base_SetConfig+0x40>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a3b      	ldr	r2, [pc, #236]	; (800ccc0 <TIM_Base_SetConfig+0x120>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d003      	beq.n	800cbe0 <TIM_Base_SetConfig+0x40>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a3a      	ldr	r2, [pc, #232]	; (800ccc4 <TIM_Base_SetConfig+0x124>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d108      	bne.n	800cbf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a2f      	ldr	r2, [pc, #188]	; (800ccb4 <TIM_Base_SetConfig+0x114>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d01f      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc00:	d01b      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a2c      	ldr	r2, [pc, #176]	; (800ccb8 <TIM_Base_SetConfig+0x118>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d017      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a2b      	ldr	r2, [pc, #172]	; (800ccbc <TIM_Base_SetConfig+0x11c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d013      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a2a      	ldr	r2, [pc, #168]	; (800ccc0 <TIM_Base_SetConfig+0x120>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00f      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a29      	ldr	r2, [pc, #164]	; (800ccc4 <TIM_Base_SetConfig+0x124>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d00b      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a28      	ldr	r2, [pc, #160]	; (800ccc8 <TIM_Base_SetConfig+0x128>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d007      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a27      	ldr	r2, [pc, #156]	; (800cccc <TIM_Base_SetConfig+0x12c>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d003      	beq.n	800cc3a <TIM_Base_SetConfig+0x9a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a26      	ldr	r2, [pc, #152]	; (800ccd0 <TIM_Base_SetConfig+0x130>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d108      	bne.n	800cc4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a10      	ldr	r2, [pc, #64]	; (800ccb4 <TIM_Base_SetConfig+0x114>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d00f      	beq.n	800cc98 <TIM_Base_SetConfig+0xf8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a12      	ldr	r2, [pc, #72]	; (800ccc4 <TIM_Base_SetConfig+0x124>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d00b      	beq.n	800cc98 <TIM_Base_SetConfig+0xf8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a11      	ldr	r2, [pc, #68]	; (800ccc8 <TIM_Base_SetConfig+0x128>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d007      	beq.n	800cc98 <TIM_Base_SetConfig+0xf8>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a10      	ldr	r2, [pc, #64]	; (800cccc <TIM_Base_SetConfig+0x12c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d003      	beq.n	800cc98 <TIM_Base_SetConfig+0xf8>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a0f      	ldr	r2, [pc, #60]	; (800ccd0 <TIM_Base_SetConfig+0x130>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d103      	bne.n	800cca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	691a      	ldr	r2, [r3, #16]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	615a      	str	r2, [r3, #20]
}
 800cca6:	bf00      	nop
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	40010000 	.word	0x40010000
 800ccb8:	40000400 	.word	0x40000400
 800ccbc:	40000800 	.word	0x40000800
 800ccc0:	40000c00 	.word	0x40000c00
 800ccc4:	40010400 	.word	0x40010400
 800ccc8:	40014000 	.word	0x40014000
 800cccc:	40014400 	.word	0x40014400
 800ccd0:	40014800 	.word	0x40014800

0800ccd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	f023 0201 	bic.w	r2, r3, #1
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	4b37      	ldr	r3, [pc, #220]	; (800cddc <TIM_OC1_SetConfig+0x108>)
 800cd00:	4013      	ands	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f023 0302 	bic.w	r3, r3, #2
 800cd1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a2d      	ldr	r2, [pc, #180]	; (800cde0 <TIM_OC1_SetConfig+0x10c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d00f      	beq.n	800cd50 <TIM_OC1_SetConfig+0x7c>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a2c      	ldr	r2, [pc, #176]	; (800cde4 <TIM_OC1_SetConfig+0x110>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d00b      	beq.n	800cd50 <TIM_OC1_SetConfig+0x7c>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a2b      	ldr	r2, [pc, #172]	; (800cde8 <TIM_OC1_SetConfig+0x114>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d007      	beq.n	800cd50 <TIM_OC1_SetConfig+0x7c>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a2a      	ldr	r2, [pc, #168]	; (800cdec <TIM_OC1_SetConfig+0x118>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d003      	beq.n	800cd50 <TIM_OC1_SetConfig+0x7c>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a29      	ldr	r2, [pc, #164]	; (800cdf0 <TIM_OC1_SetConfig+0x11c>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d10c      	bne.n	800cd6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f023 0308 	bic.w	r3, r3, #8
 800cd56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f023 0304 	bic.w	r3, r3, #4
 800cd68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a1c      	ldr	r2, [pc, #112]	; (800cde0 <TIM_OC1_SetConfig+0x10c>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d00f      	beq.n	800cd92 <TIM_OC1_SetConfig+0xbe>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a1b      	ldr	r2, [pc, #108]	; (800cde4 <TIM_OC1_SetConfig+0x110>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d00b      	beq.n	800cd92 <TIM_OC1_SetConfig+0xbe>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a1a      	ldr	r2, [pc, #104]	; (800cde8 <TIM_OC1_SetConfig+0x114>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d007      	beq.n	800cd92 <TIM_OC1_SetConfig+0xbe>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a19      	ldr	r2, [pc, #100]	; (800cdec <TIM_OC1_SetConfig+0x118>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d003      	beq.n	800cd92 <TIM_OC1_SetConfig+0xbe>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a18      	ldr	r2, [pc, #96]	; (800cdf0 <TIM_OC1_SetConfig+0x11c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d111      	bne.n	800cdb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cda0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	621a      	str	r2, [r3, #32]
}
 800cdd0:	bf00      	nop
 800cdd2:	371c      	adds	r7, #28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	fffeff8f 	.word	0xfffeff8f
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40010400 	.word	0x40010400
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	40014800 	.word	0x40014800

0800cdf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a1b      	ldr	r3, [r3, #32]
 800ce02:	f023 0210 	bic.w	r2, r3, #16
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	4b34      	ldr	r3, [pc, #208]	; (800cef0 <TIM_OC2_SetConfig+0xfc>)
 800ce20:	4013      	ands	r3, r2
 800ce22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f023 0320 	bic.w	r3, r3, #32
 800ce3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	011b      	lsls	r3, r3, #4
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a29      	ldr	r2, [pc, #164]	; (800cef4 <TIM_OC2_SetConfig+0x100>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d003      	beq.n	800ce5c <TIM_OC2_SetConfig+0x68>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a28      	ldr	r2, [pc, #160]	; (800cef8 <TIM_OC2_SetConfig+0x104>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d10d      	bne.n	800ce78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <TIM_OC2_SetConfig+0x100>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00f      	beq.n	800cea0 <TIM_OC2_SetConfig+0xac>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a1d      	ldr	r2, [pc, #116]	; (800cef8 <TIM_OC2_SetConfig+0x104>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d00b      	beq.n	800cea0 <TIM_OC2_SetConfig+0xac>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a1c      	ldr	r2, [pc, #112]	; (800cefc <TIM_OC2_SetConfig+0x108>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d007      	beq.n	800cea0 <TIM_OC2_SetConfig+0xac>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a1b      	ldr	r2, [pc, #108]	; (800cf00 <TIM_OC2_SetConfig+0x10c>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d003      	beq.n	800cea0 <TIM_OC2_SetConfig+0xac>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a1a      	ldr	r2, [pc, #104]	; (800cf04 <TIM_OC2_SetConfig+0x110>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d113      	bne.n	800cec8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ceae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	699b      	ldr	r3, [r3, #24]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	621a      	str	r2, [r3, #32]
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	feff8fff 	.word	0xfeff8fff
 800cef4:	40010000 	.word	0x40010000
 800cef8:	40010400 	.word	0x40010400
 800cefc:	40014000 	.word	0x40014000
 800cf00:	40014400 	.word	0x40014400
 800cf04:	40014800 	.word	0x40014800

0800cf08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	4b33      	ldr	r3, [pc, #204]	; (800d000 <TIM_OC3_SetConfig+0xf8>)
 800cf34:	4013      	ands	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0303 	bic.w	r3, r3, #3
 800cf3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	021b      	lsls	r3, r3, #8
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a28      	ldr	r2, [pc, #160]	; (800d004 <TIM_OC3_SetConfig+0xfc>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d003      	beq.n	800cf6e <TIM_OC3_SetConfig+0x66>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a27      	ldr	r2, [pc, #156]	; (800d008 <TIM_OC3_SetConfig+0x100>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d10d      	bne.n	800cf8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	021b      	lsls	r3, r3, #8
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a1d      	ldr	r2, [pc, #116]	; (800d004 <TIM_OC3_SetConfig+0xfc>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d00f      	beq.n	800cfb2 <TIM_OC3_SetConfig+0xaa>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a1c      	ldr	r2, [pc, #112]	; (800d008 <TIM_OC3_SetConfig+0x100>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d00b      	beq.n	800cfb2 <TIM_OC3_SetConfig+0xaa>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a1b      	ldr	r2, [pc, #108]	; (800d00c <TIM_OC3_SetConfig+0x104>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d007      	beq.n	800cfb2 <TIM_OC3_SetConfig+0xaa>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a1a      	ldr	r2, [pc, #104]	; (800d010 <TIM_OC3_SetConfig+0x108>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d003      	beq.n	800cfb2 <TIM_OC3_SetConfig+0xaa>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a19      	ldr	r2, [pc, #100]	; (800d014 <TIM_OC3_SetConfig+0x10c>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d113      	bne.n	800cfda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	011b      	lsls	r3, r3, #4
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	011b      	lsls	r3, r3, #4
 800cfd4:	693a      	ldr	r2, [r7, #16]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	621a      	str	r2, [r3, #32]
}
 800cff4:	bf00      	nop
 800cff6:	371c      	adds	r7, #28
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	fffeff8f 	.word	0xfffeff8f
 800d004:	40010000 	.word	0x40010000
 800d008:	40010400 	.word	0x40010400
 800d00c:	40014000 	.word	0x40014000
 800d010:	40014400 	.word	0x40014400
 800d014:	40014800 	.word	0x40014800

0800d018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	4b24      	ldr	r3, [pc, #144]	; (800d0d4 <TIM_OC4_SetConfig+0xbc>)
 800d044:	4013      	ands	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	021b      	lsls	r3, r3, #8
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	031b      	lsls	r3, r3, #12
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a19      	ldr	r2, [pc, #100]	; (800d0d8 <TIM_OC4_SetConfig+0xc0>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d00f      	beq.n	800d098 <TIM_OC4_SetConfig+0x80>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a18      	ldr	r2, [pc, #96]	; (800d0dc <TIM_OC4_SetConfig+0xc4>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d00b      	beq.n	800d098 <TIM_OC4_SetConfig+0x80>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a17      	ldr	r2, [pc, #92]	; (800d0e0 <TIM_OC4_SetConfig+0xc8>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d007      	beq.n	800d098 <TIM_OC4_SetConfig+0x80>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a16      	ldr	r2, [pc, #88]	; (800d0e4 <TIM_OC4_SetConfig+0xcc>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d003      	beq.n	800d098 <TIM_OC4_SetConfig+0x80>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a15      	ldr	r2, [pc, #84]	; (800d0e8 <TIM_OC4_SetConfig+0xd0>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d109      	bne.n	800d0ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d09e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	019b      	lsls	r3, r3, #6
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	621a      	str	r2, [r3, #32]
}
 800d0c6:	bf00      	nop
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	feff8fff 	.word	0xfeff8fff
 800d0d8:	40010000 	.word	0x40010000
 800d0dc:	40010400 	.word	0x40010400
 800d0e0:	40014000 	.word	0x40014000
 800d0e4:	40014400 	.word	0x40014400
 800d0e8:	40014800 	.word	0x40014800

0800d0ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	4b21      	ldr	r3, [pc, #132]	; (800d19c <TIM_OC5_SetConfig+0xb0>)
 800d118:	4013      	ands	r3, r2
 800d11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d12c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	041b      	lsls	r3, r3, #16
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	4313      	orrs	r3, r2
 800d138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a18      	ldr	r2, [pc, #96]	; (800d1a0 <TIM_OC5_SetConfig+0xb4>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00f      	beq.n	800d162 <TIM_OC5_SetConfig+0x76>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a17      	ldr	r2, [pc, #92]	; (800d1a4 <TIM_OC5_SetConfig+0xb8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d00b      	beq.n	800d162 <TIM_OC5_SetConfig+0x76>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a16      	ldr	r2, [pc, #88]	; (800d1a8 <TIM_OC5_SetConfig+0xbc>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d007      	beq.n	800d162 <TIM_OC5_SetConfig+0x76>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a15      	ldr	r2, [pc, #84]	; (800d1ac <TIM_OC5_SetConfig+0xc0>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d003      	beq.n	800d162 <TIM_OC5_SetConfig+0x76>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a14      	ldr	r2, [pc, #80]	; (800d1b0 <TIM_OC5_SetConfig+0xc4>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d109      	bne.n	800d176 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	697a      	ldr	r2, [r7, #20]
 800d172:	4313      	orrs	r3, r2
 800d174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	621a      	str	r2, [r3, #32]
}
 800d190:	bf00      	nop
 800d192:	371c      	adds	r7, #28
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	fffeff8f 	.word	0xfffeff8f
 800d1a0:	40010000 	.word	0x40010000
 800d1a4:	40010400 	.word	0x40010400
 800d1a8:	40014000 	.word	0x40014000
 800d1ac:	40014400 	.word	0x40014400
 800d1b0:	40014800 	.word	0x40014800

0800d1b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4b22      	ldr	r3, [pc, #136]	; (800d268 <TIM_OC6_SetConfig+0xb4>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	051b      	lsls	r3, r3, #20
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a19      	ldr	r2, [pc, #100]	; (800d26c <TIM_OC6_SetConfig+0xb8>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d00f      	beq.n	800d22c <TIM_OC6_SetConfig+0x78>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a18      	ldr	r2, [pc, #96]	; (800d270 <TIM_OC6_SetConfig+0xbc>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d00b      	beq.n	800d22c <TIM_OC6_SetConfig+0x78>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a17      	ldr	r2, [pc, #92]	; (800d274 <TIM_OC6_SetConfig+0xc0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d007      	beq.n	800d22c <TIM_OC6_SetConfig+0x78>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a16      	ldr	r2, [pc, #88]	; (800d278 <TIM_OC6_SetConfig+0xc4>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d003      	beq.n	800d22c <TIM_OC6_SetConfig+0x78>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a15      	ldr	r2, [pc, #84]	; (800d27c <TIM_OC6_SetConfig+0xc8>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d109      	bne.n	800d240 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d232:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	029b      	lsls	r3, r3, #10
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	621a      	str	r2, [r3, #32]
}
 800d25a:	bf00      	nop
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	feff8fff 	.word	0xfeff8fff
 800d26c:	40010000 	.word	0x40010000
 800d270:	40010400 	.word	0x40010400
 800d274:	40014000 	.word	0x40014000
 800d278:	40014400 	.word	0x40014400
 800d27c:	40014800 	.word	0x40014800

0800d280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d280:	b480      	push	{r7}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f003 031f 	and.w	r3, r3, #31
 800d292:	2201      	movs	r2, #1
 800d294:	fa02 f303 	lsl.w	r3, r2, r3
 800d298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6a1a      	ldr	r2, [r3, #32]
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	43db      	mvns	r3, r3
 800d2a2:	401a      	ands	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a1a      	ldr	r2, [r3, #32]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f003 031f 	and.w	r3, r3, #31
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d2b8:	431a      	orrs	r2, r3
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	621a      	str	r2, [r3, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	371c      	adds	r7, #28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
	...

0800d2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d101      	bne.n	800d2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	e06d      	b.n	800d3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a30      	ldr	r2, [pc, #192]	; (800d3cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d004      	beq.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a2f      	ldr	r2, [pc, #188]	; (800d3d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d108      	bne.n	800d32a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d31e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d330:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	4313      	orrs	r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a20      	ldr	r2, [pc, #128]	; (800d3cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d022      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d356:	d01d      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a1d      	ldr	r2, [pc, #116]	; (800d3d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d018      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a1c      	ldr	r2, [pc, #112]	; (800d3d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d013      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a1a      	ldr	r2, [pc, #104]	; (800d3dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d00e      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a15      	ldr	r2, [pc, #84]	; (800d3d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d009      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a16      	ldr	r2, [pc, #88]	; (800d3e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d004      	beq.n	800d394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a15      	ldr	r2, [pc, #84]	; (800d3e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d10c      	bne.n	800d3ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d39a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3714      	adds	r7, #20
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	40010000 	.word	0x40010000
 800d3d0:	40010400 	.word	0x40010400
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40000800 	.word	0x40000800
 800d3dc:	40000c00 	.word	0x40000c00
 800d3e0:	40001800 	.word	0x40001800
 800d3e4:	40014000 	.word	0x40014000

0800d3e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d400:	2302      	movs	r3, #2
 800d402:	e065      	b.n	800d4d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	4313      	orrs	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	4313      	orrs	r3, r2
 800d434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4313      	orrs	r3, r2
 800d442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46a:	4313      	orrs	r3, r2
 800d46c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	041b      	lsls	r3, r3, #16
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a16      	ldr	r2, [pc, #88]	; (800d4dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d004      	beq.n	800d492 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a14      	ldr	r2, [pc, #80]	; (800d4e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d115      	bne.n	800d4be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	051b      	lsls	r3, r3, #20
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	40010000 	.word	0x40010000
 800d4e0:	40010400 	.word	0x40010400

0800d4e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e042      	b.n	800d5b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7f4 ff53 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2224      	movs	r2, #36	; 0x24
 800d54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f022 0201 	bic.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fcd6 	bl	800df14 <UART_SetConfig>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d101      	bne.n	800d572 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e022      	b.n	800d5b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f001 fa32 	bl	800e9e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d58e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d59e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f042 0201 	orr.w	r2, r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f001 fab9 	bl	800eb28 <UART_CheckIdleState>
 800d5b6:	4603      	mov	r3, r0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	; 0x28
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d6:	2b20      	cmp	r3, #32
 800d5d8:	f040 8083 	bne.w	800d6e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d002      	beq.n	800d5e8 <HAL_UART_Transmit+0x28>
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d101      	bne.n	800d5ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e07b      	b.n	800d6e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <HAL_UART_Transmit+0x3a>
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	e074      	b.n	800d6e4 <HAL_UART_Transmit+0x124>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2221      	movs	r2, #33	; 0x21
 800d60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d612:	f7f5 f943 	bl	800289c <HAL_GetTick>
 800d616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	88fa      	ldrh	r2, [r7, #6]
 800d61c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	88fa      	ldrh	r2, [r7, #6]
 800d624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d630:	d108      	bne.n	800d644 <HAL_UART_Transmit+0x84>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d104      	bne.n	800d644 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	61bb      	str	r3, [r7, #24]
 800d642:	e003      	b.n	800d64c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d648:	2300      	movs	r3, #0
 800d64a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d654:	e02c      	b.n	800d6b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2200      	movs	r2, #0
 800d65e:	2180      	movs	r1, #128	; 0x80
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f001 faac 	bl	800ebbe <UART_WaitOnFlagUntilTimeout>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e039      	b.n	800d6e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	3302      	adds	r3, #2
 800d68a:	61bb      	str	r3, [r7, #24]
 800d68c:	e007      	b.n	800d69e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	781a      	ldrb	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	3301      	adds	r3, #1
 800d69c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1cc      	bne.n	800d656 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2140      	movs	r1, #64	; 0x40
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f001 fa79 	bl	800ebbe <UART_WaitOnFlagUntilTimeout>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	e006      	b.n	800d6e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2220      	movs	r2, #32
 800d6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e000      	b.n	800d6e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d6e2:	2302      	movs	r3, #2
  }
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d700:	2b20      	cmp	r3, #32
 800d702:	d142      	bne.n	800d78a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <HAL_UART_Receive_IT+0x24>
 800d70a:	88fb      	ldrh	r3, [r7, #6]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e03b      	b.n	800d78c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d101      	bne.n	800d722 <HAL_UART_Receive_IT+0x36>
 800d71e:	2302      	movs	r3, #2
 800d720:	e034      	b.n	800d78c <HAL_UART_Receive_IT+0xa0>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a17      	ldr	r2, [pc, #92]	; (800d794 <HAL_UART_Receive_IT+0xa8>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d01f      	beq.n	800d77a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d018      	beq.n	800d77a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	613b      	str	r3, [r7, #16]
   return(result);
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	623b      	str	r3, [r7, #32]
 800d768:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76a:	69f9      	ldr	r1, [r7, #28]
 800d76c:	6a3a      	ldr	r2, [r7, #32]
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	61bb      	str	r3, [r7, #24]
   return(result);
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e6      	bne.n	800d748 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	461a      	mov	r2, r3
 800d77e:	68b9      	ldr	r1, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f001 fae5 	bl	800ed50 <UART_Start_Receive_IT>
 800d786:	4603      	mov	r3, r0
 800d788:	e000      	b.n	800d78c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d78a:	2302      	movs	r3, #2
  }
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3728      	adds	r7, #40	; 0x28
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	58000c00 	.word	0x58000c00

0800d798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b0ba      	sub	sp, #232	; 0xe8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d7be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d7c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d11b      	bne.n	800d80c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d015      	beq.n	800d80c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7e4:	f003 0320 	and.w	r3, r3, #32
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d105      	bne.n	800d7f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d009      	beq.n	800d80c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 835a 	beq.w	800deb6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	4798      	blx	r3
      }
      return;
 800d80a:	e354      	b.n	800deb6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d80c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 811f 	beq.w	800da54 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d816:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d81a:	4b8b      	ldr	r3, [pc, #556]	; (800da48 <HAL_UART_IRQHandler+0x2b0>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d106      	bne.n	800d830 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d826:	4b89      	ldr	r3, [pc, #548]	; (800da4c <HAL_UART_IRQHandler+0x2b4>)
 800d828:	4013      	ands	r3, r2
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 8112 	beq.w	800da54 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d011      	beq.n	800d860 <HAL_UART_IRQHandler+0xc8>
 800d83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00b      	beq.n	800d860 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2201      	movs	r2, #1
 800d84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d856:	f043 0201 	orr.w	r2, r3, #1
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d011      	beq.n	800d890 <HAL_UART_IRQHandler+0xf8>
 800d86c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d870:	f003 0301 	and.w	r3, r3, #1
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2202      	movs	r2, #2
 800d87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d886:	f043 0204 	orr.w	r2, r3, #4
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d011      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x128>
 800d89c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2204      	movs	r2, #4
 800d8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8b6:	f043 0202 	orr.w	r2, r3, #2
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c4:	f003 0308 	and.w	r3, r3, #8
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d017      	beq.n	800d8fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d0:	f003 0320 	and.w	r3, r3, #32
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d105      	bne.n	800d8e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d8d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8dc:	4b5a      	ldr	r3, [pc, #360]	; (800da48 <HAL_UART_IRQHandler+0x2b0>)
 800d8de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00b      	beq.n	800d8fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2208      	movs	r2, #8
 800d8ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8f2:	f043 0208 	orr.w	r2, r3, #8
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d904:	2b00      	cmp	r3, #0
 800d906:	d012      	beq.n	800d92e <HAL_UART_IRQHandler+0x196>
 800d908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d90c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00c      	beq.n	800d92e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d91c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d924:	f043 0220 	orr.w	r2, r3, #32
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 82c0 	beq.w	800deba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d93e:	f003 0320 	and.w	r3, r3, #32
 800d942:	2b00      	cmp	r3, #0
 800d944:	d013      	beq.n	800d96e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d94a:	f003 0320 	and.w	r3, r3, #32
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d982:	2b40      	cmp	r3, #64	; 0x40
 800d984:	d005      	beq.n	800d992 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d98a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d04f      	beq.n	800da32 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f001 fb06 	bl	800efa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a2:	2b40      	cmp	r3, #64	; 0x40
 800d9a4:	d141      	bne.n	800da2a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3308      	adds	r3, #8
 800d9ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9b4:	e853 3f00 	ldrex	r3, [r3]
 800d9b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d9bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d9d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d9d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d9de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9e2:	e841 2300 	strex	r3, r2, [r1]
 800d9e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d9ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1d9      	bne.n	800d9a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d013      	beq.n	800da22 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9fe:	4a14      	ldr	r2, [pc, #80]	; (800da50 <HAL_UART_IRQHandler+0x2b8>)
 800da00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da06:	4618      	mov	r0, r3
 800da08:	f7f8 f88a 	bl	8005b20 <HAL_DMA_Abort_IT>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d017      	beq.n	800da42 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800da1c:	4610      	mov	r0, r2
 800da1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da20:	e00f      	b.n	800da42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fa60 	bl	800dee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da28:	e00b      	b.n	800da42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fa5c 	bl	800dee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da30:	e007      	b.n	800da42 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa58 	bl	800dee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800da40:	e23b      	b.n	800deba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da42:	bf00      	nop
    return;
 800da44:	e239      	b.n	800deba <HAL_UART_IRQHandler+0x722>
 800da46:	bf00      	nop
 800da48:	10000001 	.word	0x10000001
 800da4c:	04000120 	.word	0x04000120
 800da50:	0800f071 	.word	0x0800f071

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da58:	2b01      	cmp	r3, #1
 800da5a:	f040 81ce 	bne.w	800ddfa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da62:	f003 0310 	and.w	r3, r3, #16
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 81c7 	beq.w	800ddfa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da70:	f003 0310 	and.w	r3, r3, #16
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 81c0 	beq.w	800ddfa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2210      	movs	r2, #16
 800da80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da8c:	2b40      	cmp	r3, #64	; 0x40
 800da8e:	f040 813b 	bne.w	800dd08 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a8b      	ldr	r2, [pc, #556]	; (800dcc8 <HAL_UART_IRQHandler+0x530>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d059      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a89      	ldr	r2, [pc, #548]	; (800dccc <HAL_UART_IRQHandler+0x534>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d053      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a87      	ldr	r2, [pc, #540]	; (800dcd0 <HAL_UART_IRQHandler+0x538>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d04d      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a85      	ldr	r2, [pc, #532]	; (800dcd4 <HAL_UART_IRQHandler+0x53c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d047      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a83      	ldr	r2, [pc, #524]	; (800dcd8 <HAL_UART_IRQHandler+0x540>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d041      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a81      	ldr	r2, [pc, #516]	; (800dcdc <HAL_UART_IRQHandler+0x544>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d03b      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a7f      	ldr	r2, [pc, #508]	; (800dce0 <HAL_UART_IRQHandler+0x548>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d035      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a7d      	ldr	r2, [pc, #500]	; (800dce4 <HAL_UART_IRQHandler+0x54c>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d02f      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a7b      	ldr	r2, [pc, #492]	; (800dce8 <HAL_UART_IRQHandler+0x550>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d029      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a79      	ldr	r2, [pc, #484]	; (800dcec <HAL_UART_IRQHandler+0x554>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d023      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a77      	ldr	r2, [pc, #476]	; (800dcf0 <HAL_UART_IRQHandler+0x558>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d01d      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a75      	ldr	r2, [pc, #468]	; (800dcf4 <HAL_UART_IRQHandler+0x55c>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d017      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a73      	ldr	r2, [pc, #460]	; (800dcf8 <HAL_UART_IRQHandler+0x560>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d011      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a71      	ldr	r2, [pc, #452]	; (800dcfc <HAL_UART_IRQHandler+0x564>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d00b      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a6f      	ldr	r2, [pc, #444]	; (800dd00 <HAL_UART_IRQHandler+0x568>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d005      	beq.n	800db52 <HAL_UART_IRQHandler+0x3ba>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a6d      	ldr	r2, [pc, #436]	; (800dd04 <HAL_UART_IRQHandler+0x56c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d105      	bne.n	800db5e <HAL_UART_IRQHandler+0x3c6>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	e004      	b.n	800db68 <HAL_UART_IRQHandler+0x3d0>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	b29b      	uxth	r3, r3
 800db68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 81a4 	beq.w	800debe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db80:	429a      	cmp	r2, r3
 800db82:	f080 819c 	bcs.w	800debe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db9a:	f000 8086 	beq.w	800dcaa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbaa:	e853 3f00 	ldrex	r3, [r3]
 800dbae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dbb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dbc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbcc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dbd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dbd8:	e841 2300 	strex	r3, r2, [r1]
 800dbdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dbe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1da      	bne.n	800db9e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3308      	adds	r3, #8
 800dbee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dbf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbfa:	f023 0301 	bic.w	r3, r3, #1
 800dbfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3308      	adds	r3, #8
 800dc08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dc10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dc1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e1      	bne.n	800dbe8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3308      	adds	r3, #8
 800dc2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc2e:	e853 3f00 	ldrex	r3, [r3]
 800dc32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	3308      	adds	r3, #8
 800dc44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc48:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc50:	e841 2300 	strex	r3, r2, [r1]
 800dc54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1e3      	bne.n	800dc24 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2220      	movs	r2, #32
 800dc60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc72:	e853 3f00 	ldrex	r3, [r3]
 800dc76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc7a:	f023 0310 	bic.w	r3, r3, #16
 800dc7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc94:	e841 2300 	strex	r3, r2, [r1]
 800dc98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e4      	bne.n	800dc6a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f7 fc1d 	bl	80054e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f91c 	bl	800defc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcc4:	e0fb      	b.n	800debe <HAL_UART_IRQHandler+0x726>
 800dcc6:	bf00      	nop
 800dcc8:	40020010 	.word	0x40020010
 800dccc:	40020028 	.word	0x40020028
 800dcd0:	40020040 	.word	0x40020040
 800dcd4:	40020058 	.word	0x40020058
 800dcd8:	40020070 	.word	0x40020070
 800dcdc:	40020088 	.word	0x40020088
 800dce0:	400200a0 	.word	0x400200a0
 800dce4:	400200b8 	.word	0x400200b8
 800dce8:	40020410 	.word	0x40020410
 800dcec:	40020428 	.word	0x40020428
 800dcf0:	40020440 	.word	0x40020440
 800dcf4:	40020458 	.word	0x40020458
 800dcf8:	40020470 	.word	0x40020470
 800dcfc:	40020488 	.word	0x40020488
 800dd00:	400204a0 	.word	0x400204a0
 800dd04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 80cc 	beq.w	800dec2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dd2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 80c7 	beq.w	800dec2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3c:	e853 3f00 	ldrex	r3, [r3]
 800dd40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	461a      	mov	r2, r3
 800dd52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd56:	647b      	str	r3, [r7, #68]	; 0x44
 800dd58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd5e:	e841 2300 	strex	r3, r2, [r1]
 800dd62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1e4      	bne.n	800dd34 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3308      	adds	r3, #8
 800dd70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	e853 3f00 	ldrex	r3, [r3]
 800dd78:	623b      	str	r3, [r7, #32]
   return(result);
 800dd7a:	6a3a      	ldr	r2, [r7, #32]
 800dd7c:	4b54      	ldr	r3, [pc, #336]	; (800ded0 <HAL_UART_IRQHandler+0x738>)
 800dd7e:	4013      	ands	r3, r2
 800dd80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3308      	adds	r3, #8
 800dd8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd8e:	633a      	str	r2, [r7, #48]	; 0x30
 800dd90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e3      	bne.n	800dd6a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2220      	movs	r2, #32
 800dda6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	e853 3f00 	ldrex	r3, [r3]
 800ddc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f023 0310 	bic.w	r3, r3, #16
 800ddca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ddd8:	61fb      	str	r3, [r7, #28]
 800ddda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dddc:	69b9      	ldr	r1, [r7, #24]
 800ddde:	69fa      	ldr	r2, [r7, #28]
 800dde0:	e841 2300 	strex	r3, r2, [r1]
 800dde4:	617b      	str	r3, [r7, #20]
   return(result);
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e4      	bne.n	800ddb6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f882 	bl	800defc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddf8:	e063      	b.n	800dec2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ddfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00e      	beq.n	800de24 <HAL_UART_IRQHandler+0x68c>
 800de06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d008      	beq.n	800de24 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800de1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f001 fdc5 	bl	800f9ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de22:	e051      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800de24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d014      	beq.n	800de5a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d105      	bne.n	800de48 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d008      	beq.n	800de5a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d03a      	beq.n	800dec6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	4798      	blx	r3
    }
    return;
 800de58:	e035      	b.n	800dec6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de62:	2b00      	cmp	r3, #0
 800de64:	d009      	beq.n	800de7a <HAL_UART_IRQHandler+0x6e2>
 800de66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f001 f912 	bl	800f09c <UART_EndTransmit_IT>
    return;
 800de78:	e026      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <HAL_UART_IRQHandler+0x702>
 800de86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d003      	beq.n	800de9a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 fd9e 	bl	800f9d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de98:	e016      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d010      	beq.n	800dec8 <HAL_UART_IRQHandler+0x730>
 800dea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	da0c      	bge.n	800dec8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f001 fd86 	bl	800f9c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800deb4:	e008      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
      return;
 800deb6:	bf00      	nop
 800deb8:	e006      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
    return;
 800deba:	bf00      	nop
 800debc:	e004      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
      return;
 800debe:	bf00      	nop
 800dec0:	e002      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
      return;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <HAL_UART_IRQHandler+0x730>
    return;
 800dec6:	bf00      	nop
  }
}
 800dec8:	37e8      	adds	r7, #232	; 0xe8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	effffffe 	.word	0xeffffffe

0800ded4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	460b      	mov	r3, r1
 800df06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df18:	b092      	sub	sp, #72	; 0x48
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	689a      	ldr	r2, [r3, #8]
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	431a      	orrs	r2, r3
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	431a      	orrs	r2, r3
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	69db      	ldr	r3, [r3, #28]
 800df38:	4313      	orrs	r3, r2
 800df3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	4bbe      	ldr	r3, [pc, #760]	; (800e23c <UART_SetConfig+0x328>)
 800df44:	4013      	ands	r3, r2
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	6812      	ldr	r2, [r2, #0]
 800df4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df4c:	430b      	orrs	r3, r1
 800df4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	430a      	orrs	r2, r1
 800df64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4ab3      	ldr	r2, [pc, #716]	; (800e240 <UART_SetConfig+0x32c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d004      	beq.n	800df80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df7c:	4313      	orrs	r3, r2
 800df7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	689a      	ldr	r2, [r3, #8]
 800df86:	4baf      	ldr	r3, [pc, #700]	; (800e244 <UART_SetConfig+0x330>)
 800df88:	4013      	ands	r3, r2
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	6812      	ldr	r2, [r2, #0]
 800df8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df90:	430b      	orrs	r3, r1
 800df92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9a:	f023 010f 	bic.w	r1, r3, #15
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	430a      	orrs	r2, r1
 800dfa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4aa6      	ldr	r2, [pc, #664]	; (800e248 <UART_SetConfig+0x334>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d177      	bne.n	800e0a4 <UART_SetConfig+0x190>
 800dfb4:	4ba5      	ldr	r3, [pc, #660]	; (800e24c <UART_SetConfig+0x338>)
 800dfb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfbc:	2b28      	cmp	r3, #40	; 0x28
 800dfbe:	d86d      	bhi.n	800e09c <UART_SetConfig+0x188>
 800dfc0:	a201      	add	r2, pc, #4	; (adr r2, 800dfc8 <UART_SetConfig+0xb4>)
 800dfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc6:	bf00      	nop
 800dfc8:	0800e06d 	.word	0x0800e06d
 800dfcc:	0800e09d 	.word	0x0800e09d
 800dfd0:	0800e09d 	.word	0x0800e09d
 800dfd4:	0800e09d 	.word	0x0800e09d
 800dfd8:	0800e09d 	.word	0x0800e09d
 800dfdc:	0800e09d 	.word	0x0800e09d
 800dfe0:	0800e09d 	.word	0x0800e09d
 800dfe4:	0800e09d 	.word	0x0800e09d
 800dfe8:	0800e075 	.word	0x0800e075
 800dfec:	0800e09d 	.word	0x0800e09d
 800dff0:	0800e09d 	.word	0x0800e09d
 800dff4:	0800e09d 	.word	0x0800e09d
 800dff8:	0800e09d 	.word	0x0800e09d
 800dffc:	0800e09d 	.word	0x0800e09d
 800e000:	0800e09d 	.word	0x0800e09d
 800e004:	0800e09d 	.word	0x0800e09d
 800e008:	0800e07d 	.word	0x0800e07d
 800e00c:	0800e09d 	.word	0x0800e09d
 800e010:	0800e09d 	.word	0x0800e09d
 800e014:	0800e09d 	.word	0x0800e09d
 800e018:	0800e09d 	.word	0x0800e09d
 800e01c:	0800e09d 	.word	0x0800e09d
 800e020:	0800e09d 	.word	0x0800e09d
 800e024:	0800e09d 	.word	0x0800e09d
 800e028:	0800e085 	.word	0x0800e085
 800e02c:	0800e09d 	.word	0x0800e09d
 800e030:	0800e09d 	.word	0x0800e09d
 800e034:	0800e09d 	.word	0x0800e09d
 800e038:	0800e09d 	.word	0x0800e09d
 800e03c:	0800e09d 	.word	0x0800e09d
 800e040:	0800e09d 	.word	0x0800e09d
 800e044:	0800e09d 	.word	0x0800e09d
 800e048:	0800e08d 	.word	0x0800e08d
 800e04c:	0800e09d 	.word	0x0800e09d
 800e050:	0800e09d 	.word	0x0800e09d
 800e054:	0800e09d 	.word	0x0800e09d
 800e058:	0800e09d 	.word	0x0800e09d
 800e05c:	0800e09d 	.word	0x0800e09d
 800e060:	0800e09d 	.word	0x0800e09d
 800e064:	0800e09d 	.word	0x0800e09d
 800e068:	0800e095 	.word	0x0800e095
 800e06c:	2301      	movs	r3, #1
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e222      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e074:	2304      	movs	r3, #4
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e21e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e07c:	2308      	movs	r3, #8
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e21a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e084:	2310      	movs	r3, #16
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e216      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e08c:	2320      	movs	r3, #32
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e212      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e094:	2340      	movs	r3, #64	; 0x40
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e20e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e09c:	2380      	movs	r3, #128	; 0x80
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a2:	e20a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a69      	ldr	r2, [pc, #420]	; (800e250 <UART_SetConfig+0x33c>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d130      	bne.n	800e110 <UART_SetConfig+0x1fc>
 800e0ae:	4b67      	ldr	r3, [pc, #412]	; (800e24c <UART_SetConfig+0x338>)
 800e0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b2:	f003 0307 	and.w	r3, r3, #7
 800e0b6:	2b05      	cmp	r3, #5
 800e0b8:	d826      	bhi.n	800e108 <UART_SetConfig+0x1f4>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <UART_SetConfig+0x1ac>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e0d9 	.word	0x0800e0d9
 800e0c4:	0800e0e1 	.word	0x0800e0e1
 800e0c8:	0800e0e9 	.word	0x0800e0e9
 800e0cc:	0800e0f1 	.word	0x0800e0f1
 800e0d0:	0800e0f9 	.word	0x0800e0f9
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	2300      	movs	r3, #0
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e1ec      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e0e0:	2304      	movs	r3, #4
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e1e8      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e0e8:	2308      	movs	r3, #8
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e1e4      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e0f0:	2310      	movs	r3, #16
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e1e0      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e0f8:	2320      	movs	r3, #32
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e1dc      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e100:	2340      	movs	r3, #64	; 0x40
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e1d8      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e108:	2380      	movs	r3, #128	; 0x80
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e1d4      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a4f      	ldr	r2, [pc, #316]	; (800e254 <UART_SetConfig+0x340>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d130      	bne.n	800e17c <UART_SetConfig+0x268>
 800e11a:	4b4c      	ldr	r3, [pc, #304]	; (800e24c <UART_SetConfig+0x338>)
 800e11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11e:	f003 0307 	and.w	r3, r3, #7
 800e122:	2b05      	cmp	r3, #5
 800e124:	d826      	bhi.n	800e174 <UART_SetConfig+0x260>
 800e126:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <UART_SetConfig+0x218>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e145 	.word	0x0800e145
 800e130:	0800e14d 	.word	0x0800e14d
 800e134:	0800e155 	.word	0x0800e155
 800e138:	0800e15d 	.word	0x0800e15d
 800e13c:	0800e165 	.word	0x0800e165
 800e140:	0800e16d 	.word	0x0800e16d
 800e144:	2300      	movs	r3, #0
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e1b6      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e14c:	2304      	movs	r3, #4
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e1b2      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e154:	2308      	movs	r3, #8
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e1ae      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e15c:	2310      	movs	r3, #16
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e1aa      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e164:	2320      	movs	r3, #32
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e1a6      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e16c:	2340      	movs	r3, #64	; 0x40
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e1a2      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e174:	2380      	movs	r3, #128	; 0x80
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e19e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a35      	ldr	r2, [pc, #212]	; (800e258 <UART_SetConfig+0x344>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d130      	bne.n	800e1e8 <UART_SetConfig+0x2d4>
 800e186:	4b31      	ldr	r3, [pc, #196]	; (800e24c <UART_SetConfig+0x338>)
 800e188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	2b05      	cmp	r3, #5
 800e190:	d826      	bhi.n	800e1e0 <UART_SetConfig+0x2cc>
 800e192:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <UART_SetConfig+0x284>)
 800e194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e198:	0800e1b1 	.word	0x0800e1b1
 800e19c:	0800e1b9 	.word	0x0800e1b9
 800e1a0:	0800e1c1 	.word	0x0800e1c1
 800e1a4:	0800e1c9 	.word	0x0800e1c9
 800e1a8:	0800e1d1 	.word	0x0800e1d1
 800e1ac:	0800e1d9 	.word	0x0800e1d9
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b6:	e180      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1b8:	2304      	movs	r3, #4
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e17c      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1c0:	2308      	movs	r3, #8
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e178      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1c8:	2310      	movs	r3, #16
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e174      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1d0:	2320      	movs	r3, #32
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e170      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1d8:	2340      	movs	r3, #64	; 0x40
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e16c      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1e0:	2380      	movs	r3, #128	; 0x80
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e168      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a1b      	ldr	r2, [pc, #108]	; (800e25c <UART_SetConfig+0x348>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d142      	bne.n	800e278 <UART_SetConfig+0x364>
 800e1f2:	4b16      	ldr	r3, [pc, #88]	; (800e24c <UART_SetConfig+0x338>)
 800e1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1f6:	f003 0307 	and.w	r3, r3, #7
 800e1fa:	2b05      	cmp	r3, #5
 800e1fc:	d838      	bhi.n	800e270 <UART_SetConfig+0x35c>
 800e1fe:	a201      	add	r2, pc, #4	; (adr r2, 800e204 <UART_SetConfig+0x2f0>)
 800e200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e204:	0800e21d 	.word	0x0800e21d
 800e208:	0800e225 	.word	0x0800e225
 800e20c:	0800e22d 	.word	0x0800e22d
 800e210:	0800e235 	.word	0x0800e235
 800e214:	0800e261 	.word	0x0800e261
 800e218:	0800e269 	.word	0x0800e269
 800e21c:	2300      	movs	r3, #0
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e14a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e224:	2304      	movs	r3, #4
 800e226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22a:	e146      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e22c:	2308      	movs	r3, #8
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e142      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e234:	2310      	movs	r3, #16
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e13e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e23c:	cfff69f3 	.word	0xcfff69f3
 800e240:	58000c00 	.word	0x58000c00
 800e244:	11fff4ff 	.word	0x11fff4ff
 800e248:	40011000 	.word	0x40011000
 800e24c:	58024400 	.word	0x58024400
 800e250:	40004400 	.word	0x40004400
 800e254:	40004800 	.word	0x40004800
 800e258:	40004c00 	.word	0x40004c00
 800e25c:	40005000 	.word	0x40005000
 800e260:	2320      	movs	r3, #32
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e128      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e268:	2340      	movs	r3, #64	; 0x40
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e124      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e270:	2380      	movs	r3, #128	; 0x80
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e120      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4acb      	ldr	r2, [pc, #812]	; (800e5ac <UART_SetConfig+0x698>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d176      	bne.n	800e370 <UART_SetConfig+0x45c>
 800e282:	4bcb      	ldr	r3, [pc, #812]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e28a:	2b28      	cmp	r3, #40	; 0x28
 800e28c:	d86c      	bhi.n	800e368 <UART_SetConfig+0x454>
 800e28e:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <UART_SetConfig+0x380>)
 800e290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e294:	0800e339 	.word	0x0800e339
 800e298:	0800e369 	.word	0x0800e369
 800e29c:	0800e369 	.word	0x0800e369
 800e2a0:	0800e369 	.word	0x0800e369
 800e2a4:	0800e369 	.word	0x0800e369
 800e2a8:	0800e369 	.word	0x0800e369
 800e2ac:	0800e369 	.word	0x0800e369
 800e2b0:	0800e369 	.word	0x0800e369
 800e2b4:	0800e341 	.word	0x0800e341
 800e2b8:	0800e369 	.word	0x0800e369
 800e2bc:	0800e369 	.word	0x0800e369
 800e2c0:	0800e369 	.word	0x0800e369
 800e2c4:	0800e369 	.word	0x0800e369
 800e2c8:	0800e369 	.word	0x0800e369
 800e2cc:	0800e369 	.word	0x0800e369
 800e2d0:	0800e369 	.word	0x0800e369
 800e2d4:	0800e349 	.word	0x0800e349
 800e2d8:	0800e369 	.word	0x0800e369
 800e2dc:	0800e369 	.word	0x0800e369
 800e2e0:	0800e369 	.word	0x0800e369
 800e2e4:	0800e369 	.word	0x0800e369
 800e2e8:	0800e369 	.word	0x0800e369
 800e2ec:	0800e369 	.word	0x0800e369
 800e2f0:	0800e369 	.word	0x0800e369
 800e2f4:	0800e351 	.word	0x0800e351
 800e2f8:	0800e369 	.word	0x0800e369
 800e2fc:	0800e369 	.word	0x0800e369
 800e300:	0800e369 	.word	0x0800e369
 800e304:	0800e369 	.word	0x0800e369
 800e308:	0800e369 	.word	0x0800e369
 800e30c:	0800e369 	.word	0x0800e369
 800e310:	0800e369 	.word	0x0800e369
 800e314:	0800e359 	.word	0x0800e359
 800e318:	0800e369 	.word	0x0800e369
 800e31c:	0800e369 	.word	0x0800e369
 800e320:	0800e369 	.word	0x0800e369
 800e324:	0800e369 	.word	0x0800e369
 800e328:	0800e369 	.word	0x0800e369
 800e32c:	0800e369 	.word	0x0800e369
 800e330:	0800e369 	.word	0x0800e369
 800e334:	0800e361 	.word	0x0800e361
 800e338:	2301      	movs	r3, #1
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33e:	e0bc      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e340:	2304      	movs	r3, #4
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e0b8      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e348:	2308      	movs	r3, #8
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e0b4      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e350:	2310      	movs	r3, #16
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e0b0      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e358:	2320      	movs	r3, #32
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e0ac      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e360:	2340      	movs	r3, #64	; 0x40
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e0a8      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e368:	2380      	movs	r3, #128	; 0x80
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e0a4      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a8f      	ldr	r2, [pc, #572]	; (800e5b4 <UART_SetConfig+0x6a0>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d130      	bne.n	800e3dc <UART_SetConfig+0x4c8>
 800e37a:	4b8d      	ldr	r3, [pc, #564]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e37e:	f003 0307 	and.w	r3, r3, #7
 800e382:	2b05      	cmp	r3, #5
 800e384:	d826      	bhi.n	800e3d4 <UART_SetConfig+0x4c0>
 800e386:	a201      	add	r2, pc, #4	; (adr r2, 800e38c <UART_SetConfig+0x478>)
 800e388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e38c:	0800e3a5 	.word	0x0800e3a5
 800e390:	0800e3ad 	.word	0x0800e3ad
 800e394:	0800e3b5 	.word	0x0800e3b5
 800e398:	0800e3bd 	.word	0x0800e3bd
 800e39c:	0800e3c5 	.word	0x0800e3c5
 800e3a0:	0800e3cd 	.word	0x0800e3cd
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e086      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3ac:	2304      	movs	r3, #4
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e082      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3b4:	2308      	movs	r3, #8
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e07e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3bc:	2310      	movs	r3, #16
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e07a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3c4:	2320      	movs	r3, #32
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e076      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3cc:	2340      	movs	r3, #64	; 0x40
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e072      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3d4:	2380      	movs	r3, #128	; 0x80
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e06e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a75      	ldr	r2, [pc, #468]	; (800e5b8 <UART_SetConfig+0x6a4>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d130      	bne.n	800e448 <UART_SetConfig+0x534>
 800e3e6:	4b72      	ldr	r3, [pc, #456]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ea:	f003 0307 	and.w	r3, r3, #7
 800e3ee:	2b05      	cmp	r3, #5
 800e3f0:	d826      	bhi.n	800e440 <UART_SetConfig+0x52c>
 800e3f2:	a201      	add	r2, pc, #4	; (adr r2, 800e3f8 <UART_SetConfig+0x4e4>)
 800e3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f8:	0800e411 	.word	0x0800e411
 800e3fc:	0800e419 	.word	0x0800e419
 800e400:	0800e421 	.word	0x0800e421
 800e404:	0800e429 	.word	0x0800e429
 800e408:	0800e431 	.word	0x0800e431
 800e40c:	0800e439 	.word	0x0800e439
 800e410:	2300      	movs	r3, #0
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e050      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e418:	2304      	movs	r3, #4
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e04c      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e420:	2308      	movs	r3, #8
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e048      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e428:	2310      	movs	r3, #16
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e044      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e430:	2320      	movs	r3, #32
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e040      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e438:	2340      	movs	r3, #64	; 0x40
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e03c      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e440:	2380      	movs	r3, #128	; 0x80
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e038      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a5b      	ldr	r2, [pc, #364]	; (800e5bc <UART_SetConfig+0x6a8>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d130      	bne.n	800e4b4 <UART_SetConfig+0x5a0>
 800e452:	4b57      	ldr	r3, [pc, #348]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	2b05      	cmp	r3, #5
 800e45c:	d826      	bhi.n	800e4ac <UART_SetConfig+0x598>
 800e45e:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <UART_SetConfig+0x550>)
 800e460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e464:	0800e47d 	.word	0x0800e47d
 800e468:	0800e485 	.word	0x0800e485
 800e46c:	0800e48d 	.word	0x0800e48d
 800e470:	0800e495 	.word	0x0800e495
 800e474:	0800e49d 	.word	0x0800e49d
 800e478:	0800e4a5 	.word	0x0800e4a5
 800e47c:	2302      	movs	r3, #2
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e01a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e484:	2304      	movs	r3, #4
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e016      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e48c:	2308      	movs	r3, #8
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e012      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e494:	2310      	movs	r3, #16
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e00e      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e49c:	2320      	movs	r3, #32
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e00a      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e4a4:	2340      	movs	r3, #64	; 0x40
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e006      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e4ac:	2380      	movs	r3, #128	; 0x80
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e002      	b.n	800e4ba <UART_SetConfig+0x5a6>
 800e4b4:	2380      	movs	r3, #128	; 0x80
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a3f      	ldr	r2, [pc, #252]	; (800e5bc <UART_SetConfig+0x6a8>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	f040 80f8 	bne.w	800e6b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e4c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4ca:	2b20      	cmp	r3, #32
 800e4cc:	dc46      	bgt.n	800e55c <UART_SetConfig+0x648>
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	f2c0 8082 	blt.w	800e5d8 <UART_SetConfig+0x6c4>
 800e4d4:	3b02      	subs	r3, #2
 800e4d6:	2b1e      	cmp	r3, #30
 800e4d8:	d87e      	bhi.n	800e5d8 <UART_SetConfig+0x6c4>
 800e4da:	a201      	add	r2, pc, #4	; (adr r2, 800e4e0 <UART_SetConfig+0x5cc>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e563 	.word	0x0800e563
 800e4e4:	0800e5d9 	.word	0x0800e5d9
 800e4e8:	0800e56b 	.word	0x0800e56b
 800e4ec:	0800e5d9 	.word	0x0800e5d9
 800e4f0:	0800e5d9 	.word	0x0800e5d9
 800e4f4:	0800e5d9 	.word	0x0800e5d9
 800e4f8:	0800e57b 	.word	0x0800e57b
 800e4fc:	0800e5d9 	.word	0x0800e5d9
 800e500:	0800e5d9 	.word	0x0800e5d9
 800e504:	0800e5d9 	.word	0x0800e5d9
 800e508:	0800e5d9 	.word	0x0800e5d9
 800e50c:	0800e5d9 	.word	0x0800e5d9
 800e510:	0800e5d9 	.word	0x0800e5d9
 800e514:	0800e5d9 	.word	0x0800e5d9
 800e518:	0800e58b 	.word	0x0800e58b
 800e51c:	0800e5d9 	.word	0x0800e5d9
 800e520:	0800e5d9 	.word	0x0800e5d9
 800e524:	0800e5d9 	.word	0x0800e5d9
 800e528:	0800e5d9 	.word	0x0800e5d9
 800e52c:	0800e5d9 	.word	0x0800e5d9
 800e530:	0800e5d9 	.word	0x0800e5d9
 800e534:	0800e5d9 	.word	0x0800e5d9
 800e538:	0800e5d9 	.word	0x0800e5d9
 800e53c:	0800e5d9 	.word	0x0800e5d9
 800e540:	0800e5d9 	.word	0x0800e5d9
 800e544:	0800e5d9 	.word	0x0800e5d9
 800e548:	0800e5d9 	.word	0x0800e5d9
 800e54c:	0800e5d9 	.word	0x0800e5d9
 800e550:	0800e5d9 	.word	0x0800e5d9
 800e554:	0800e5d9 	.word	0x0800e5d9
 800e558:	0800e5cb 	.word	0x0800e5cb
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d037      	beq.n	800e5d0 <UART_SetConfig+0x6bc>
 800e560:	e03a      	b.n	800e5d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e562:	f7fc fbe9 	bl	800ad38 <HAL_RCCEx_GetD3PCLK1Freq>
 800e566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e568:	e03c      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fc fbf8 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e578:	e034      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e57a:	f107 0318 	add.w	r3, r7, #24
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fc fd44 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e588:	e02c      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e58a:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0320 	and.w	r3, r3, #32
 800e592:	2b00      	cmp	r3, #0
 800e594:	d016      	beq.n	800e5c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e596:	4b06      	ldr	r3, [pc, #24]	; (800e5b0 <UART_SetConfig+0x69c>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	08db      	lsrs	r3, r3, #3
 800e59c:	f003 0303 	and.w	r3, r3, #3
 800e5a0:	4a07      	ldr	r2, [pc, #28]	; (800e5c0 <UART_SetConfig+0x6ac>)
 800e5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5a8:	e01c      	b.n	800e5e4 <UART_SetConfig+0x6d0>
 800e5aa:	bf00      	nop
 800e5ac:	40011400 	.word	0x40011400
 800e5b0:	58024400 	.word	0x58024400
 800e5b4:	40007800 	.word	0x40007800
 800e5b8:	40007c00 	.word	0x40007c00
 800e5bc:	58000c00 	.word	0x58000c00
 800e5c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e5c4:	4b9d      	ldr	r3, [pc, #628]	; (800e83c <UART_SetConfig+0x928>)
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c8:	e00c      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5ca:	4b9d      	ldr	r3, [pc, #628]	; (800e840 <UART_SetConfig+0x92c>)
 800e5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ce:	e009      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5d6:	e005      	b.n	800e5e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 81de 	beq.w	800e9a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f0:	4a94      	ldr	r2, [pc, #592]	; (800e844 <UART_SetConfig+0x930>)
 800e5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	4613      	mov	r3, r2
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	4413      	add	r3, r2
 800e60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d305      	bcc.n	800e61c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e618:	429a      	cmp	r2, r3
 800e61a:	d903      	bls.n	800e624 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e622:	e1c1      	b.n	800e9a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e626:	2200      	movs	r2, #0
 800e628:	60bb      	str	r3, [r7, #8]
 800e62a:	60fa      	str	r2, [r7, #12]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e630:	4a84      	ldr	r2, [pc, #528]	; (800e844 <UART_SetConfig+0x930>)
 800e632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e636:	b29b      	uxth	r3, r3
 800e638:	2200      	movs	r2, #0
 800e63a:	603b      	str	r3, [r7, #0]
 800e63c:	607a      	str	r2, [r7, #4]
 800e63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e646:	f7f1 fe47 	bl	80002d8 <__aeabi_uldivmod>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	4610      	mov	r0, r2
 800e650:	4619      	mov	r1, r3
 800e652:	f04f 0200 	mov.w	r2, #0
 800e656:	f04f 0300 	mov.w	r3, #0
 800e65a:	020b      	lsls	r3, r1, #8
 800e65c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e660:	0202      	lsls	r2, r0, #8
 800e662:	6979      	ldr	r1, [r7, #20]
 800e664:	6849      	ldr	r1, [r1, #4]
 800e666:	0849      	lsrs	r1, r1, #1
 800e668:	2000      	movs	r0, #0
 800e66a:	460c      	mov	r4, r1
 800e66c:	4605      	mov	r5, r0
 800e66e:	eb12 0804 	adds.w	r8, r2, r4
 800e672:	eb43 0905 	adc.w	r9, r3, r5
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	469a      	mov	sl, r3
 800e67e:	4693      	mov	fp, r2
 800e680:	4652      	mov	r2, sl
 800e682:	465b      	mov	r3, fp
 800e684:	4640      	mov	r0, r8
 800e686:	4649      	mov	r1, r9
 800e688:	f7f1 fe26 	bl	80002d8 <__aeabi_uldivmod>
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4613      	mov	r3, r2
 800e692:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e69a:	d308      	bcc.n	800e6ae <UART_SetConfig+0x79a>
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6a2:	d204      	bcs.n	800e6ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6aa:	60da      	str	r2, [r3, #12]
 800e6ac:	e17c      	b.n	800e9a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e6b4:	e178      	b.n	800e9a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	69db      	ldr	r3, [r3, #28]
 800e6ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6be:	f040 80c5 	bne.w	800e84c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e6c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6c6:	2b20      	cmp	r3, #32
 800e6c8:	dc48      	bgt.n	800e75c <UART_SetConfig+0x848>
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	db7b      	blt.n	800e7c6 <UART_SetConfig+0x8b2>
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	d879      	bhi.n	800e7c6 <UART_SetConfig+0x8b2>
 800e6d2:	a201      	add	r2, pc, #4	; (adr r2, 800e6d8 <UART_SetConfig+0x7c4>)
 800e6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d8:	0800e763 	.word	0x0800e763
 800e6dc:	0800e76b 	.word	0x0800e76b
 800e6e0:	0800e7c7 	.word	0x0800e7c7
 800e6e4:	0800e7c7 	.word	0x0800e7c7
 800e6e8:	0800e773 	.word	0x0800e773
 800e6ec:	0800e7c7 	.word	0x0800e7c7
 800e6f0:	0800e7c7 	.word	0x0800e7c7
 800e6f4:	0800e7c7 	.word	0x0800e7c7
 800e6f8:	0800e783 	.word	0x0800e783
 800e6fc:	0800e7c7 	.word	0x0800e7c7
 800e700:	0800e7c7 	.word	0x0800e7c7
 800e704:	0800e7c7 	.word	0x0800e7c7
 800e708:	0800e7c7 	.word	0x0800e7c7
 800e70c:	0800e7c7 	.word	0x0800e7c7
 800e710:	0800e7c7 	.word	0x0800e7c7
 800e714:	0800e7c7 	.word	0x0800e7c7
 800e718:	0800e793 	.word	0x0800e793
 800e71c:	0800e7c7 	.word	0x0800e7c7
 800e720:	0800e7c7 	.word	0x0800e7c7
 800e724:	0800e7c7 	.word	0x0800e7c7
 800e728:	0800e7c7 	.word	0x0800e7c7
 800e72c:	0800e7c7 	.word	0x0800e7c7
 800e730:	0800e7c7 	.word	0x0800e7c7
 800e734:	0800e7c7 	.word	0x0800e7c7
 800e738:	0800e7c7 	.word	0x0800e7c7
 800e73c:	0800e7c7 	.word	0x0800e7c7
 800e740:	0800e7c7 	.word	0x0800e7c7
 800e744:	0800e7c7 	.word	0x0800e7c7
 800e748:	0800e7c7 	.word	0x0800e7c7
 800e74c:	0800e7c7 	.word	0x0800e7c7
 800e750:	0800e7c7 	.word	0x0800e7c7
 800e754:	0800e7c7 	.word	0x0800e7c7
 800e758:	0800e7b9 	.word	0x0800e7b9
 800e75c:	2b40      	cmp	r3, #64	; 0x40
 800e75e:	d02e      	beq.n	800e7be <UART_SetConfig+0x8aa>
 800e760:	e031      	b.n	800e7c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e762:	f7fa fea5 	bl	80094b0 <HAL_RCC_GetPCLK1Freq>
 800e766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e768:	e033      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e76a:	f7fa feb7 	bl	80094dc <HAL_RCC_GetPCLK2Freq>
 800e76e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e770:	e02f      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e776:	4618      	mov	r0, r3
 800e778:	f7fc faf4 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e780:	e027      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e782:	f107 0318 	add.w	r3, r7, #24
 800e786:	4618      	mov	r0, r3
 800e788:	f7fc fc40 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e790:	e01f      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e792:	4b2d      	ldr	r3, [pc, #180]	; (800e848 <UART_SetConfig+0x934>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 0320 	and.w	r3, r3, #32
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d009      	beq.n	800e7b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e79e:	4b2a      	ldr	r3, [pc, #168]	; (800e848 <UART_SetConfig+0x934>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	08db      	lsrs	r3, r3, #3
 800e7a4:	f003 0303 	and.w	r3, r3, #3
 800e7a8:	4a24      	ldr	r2, [pc, #144]	; (800e83c <UART_SetConfig+0x928>)
 800e7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e7b0:	e00f      	b.n	800e7d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e7b2:	4b22      	ldr	r3, [pc, #136]	; (800e83c <UART_SetConfig+0x928>)
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b6:	e00c      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e7b8:	4b21      	ldr	r3, [pc, #132]	; (800e840 <UART_SetConfig+0x92c>)
 800e7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7bc:	e009      	b.n	800e7d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7c4:	e005      	b.n	800e7d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f000 80e7 	beq.w	800e9a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7de:	4a19      	ldr	r2, [pc, #100]	; (800e844 <UART_SetConfig+0x930>)
 800e7e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7ec:	005a      	lsls	r2, r3, #1
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	085b      	lsrs	r3, r3, #1
 800e7f4:	441a      	add	r2, r3
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	2b0f      	cmp	r3, #15
 800e804:	d916      	bls.n	800e834 <UART_SetConfig+0x920>
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e80c:	d212      	bcs.n	800e834 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	b29b      	uxth	r3, r3
 800e812:	f023 030f 	bic.w	r3, r3, #15
 800e816:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	085b      	lsrs	r3, r3, #1
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	b29a      	uxth	r2, r3
 800e824:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e826:	4313      	orrs	r3, r2
 800e828:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e830:	60da      	str	r2, [r3, #12]
 800e832:	e0b9      	b.n	800e9a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e83a:	e0b5      	b.n	800e9a8 <UART_SetConfig+0xa94>
 800e83c:	03d09000 	.word	0x03d09000
 800e840:	003d0900 	.word	0x003d0900
 800e844:	08010018 	.word	0x08010018
 800e848:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e84c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e850:	2b20      	cmp	r3, #32
 800e852:	dc49      	bgt.n	800e8e8 <UART_SetConfig+0x9d4>
 800e854:	2b00      	cmp	r3, #0
 800e856:	db7c      	blt.n	800e952 <UART_SetConfig+0xa3e>
 800e858:	2b20      	cmp	r3, #32
 800e85a:	d87a      	bhi.n	800e952 <UART_SetConfig+0xa3e>
 800e85c:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <UART_SetConfig+0x950>)
 800e85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e862:	bf00      	nop
 800e864:	0800e8ef 	.word	0x0800e8ef
 800e868:	0800e8f7 	.word	0x0800e8f7
 800e86c:	0800e953 	.word	0x0800e953
 800e870:	0800e953 	.word	0x0800e953
 800e874:	0800e8ff 	.word	0x0800e8ff
 800e878:	0800e953 	.word	0x0800e953
 800e87c:	0800e953 	.word	0x0800e953
 800e880:	0800e953 	.word	0x0800e953
 800e884:	0800e90f 	.word	0x0800e90f
 800e888:	0800e953 	.word	0x0800e953
 800e88c:	0800e953 	.word	0x0800e953
 800e890:	0800e953 	.word	0x0800e953
 800e894:	0800e953 	.word	0x0800e953
 800e898:	0800e953 	.word	0x0800e953
 800e89c:	0800e953 	.word	0x0800e953
 800e8a0:	0800e953 	.word	0x0800e953
 800e8a4:	0800e91f 	.word	0x0800e91f
 800e8a8:	0800e953 	.word	0x0800e953
 800e8ac:	0800e953 	.word	0x0800e953
 800e8b0:	0800e953 	.word	0x0800e953
 800e8b4:	0800e953 	.word	0x0800e953
 800e8b8:	0800e953 	.word	0x0800e953
 800e8bc:	0800e953 	.word	0x0800e953
 800e8c0:	0800e953 	.word	0x0800e953
 800e8c4:	0800e953 	.word	0x0800e953
 800e8c8:	0800e953 	.word	0x0800e953
 800e8cc:	0800e953 	.word	0x0800e953
 800e8d0:	0800e953 	.word	0x0800e953
 800e8d4:	0800e953 	.word	0x0800e953
 800e8d8:	0800e953 	.word	0x0800e953
 800e8dc:	0800e953 	.word	0x0800e953
 800e8e0:	0800e953 	.word	0x0800e953
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	2b40      	cmp	r3, #64	; 0x40
 800e8ea:	d02e      	beq.n	800e94a <UART_SetConfig+0xa36>
 800e8ec:	e031      	b.n	800e952 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8ee:	f7fa fddf 	bl	80094b0 <HAL_RCC_GetPCLK1Freq>
 800e8f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8f4:	e033      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8f6:	f7fa fdf1 	bl	80094dc <HAL_RCC_GetPCLK2Freq>
 800e8fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8fc:	e02f      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e902:	4618      	mov	r0, r3
 800e904:	f7fc fa2e 	bl	800ad64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e90c:	e027      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e90e:	f107 0318 	add.w	r3, r7, #24
 800e912:	4618      	mov	r0, r3
 800e914:	f7fc fb7a 	bl	800b00c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e91c:	e01f      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e91e:	4b2d      	ldr	r3, [pc, #180]	; (800e9d4 <UART_SetConfig+0xac0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 0320 	and.w	r3, r3, #32
 800e926:	2b00      	cmp	r3, #0
 800e928:	d009      	beq.n	800e93e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e92a:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <UART_SetConfig+0xac0>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	08db      	lsrs	r3, r3, #3
 800e930:	f003 0303 	and.w	r3, r3, #3
 800e934:	4a28      	ldr	r2, [pc, #160]	; (800e9d8 <UART_SetConfig+0xac4>)
 800e936:	fa22 f303 	lsr.w	r3, r2, r3
 800e93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e93c:	e00f      	b.n	800e95e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e93e:	4b26      	ldr	r3, [pc, #152]	; (800e9d8 <UART_SetConfig+0xac4>)
 800e940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e942:	e00c      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e944:	4b25      	ldr	r3, [pc, #148]	; (800e9dc <UART_SetConfig+0xac8>)
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e948:	e009      	b.n	800e95e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e950:	e005      	b.n	800e95e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e952:	2300      	movs	r3, #0
 800e954:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e95c:	bf00      	nop
    }

    if (pclk != 0U)
 800e95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d021      	beq.n	800e9a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e968:	4a1d      	ldr	r2, [pc, #116]	; (800e9e0 <UART_SetConfig+0xacc>)
 800e96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e96e:	461a      	mov	r2, r3
 800e970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e972:	fbb3 f2f2 	udiv	r2, r3, r2
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	085b      	lsrs	r3, r3, #1
 800e97c:	441a      	add	r2, r3
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	fbb2 f3f3 	udiv	r3, r2, r3
 800e986:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	2b0f      	cmp	r3, #15
 800e98c:	d909      	bls.n	800e9a2 <UART_SetConfig+0xa8e>
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e994:	d205      	bcs.n	800e9a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	b29a      	uxth	r2, r3
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	60da      	str	r2, [r3, #12]
 800e9a0:	e002      	b.n	800e9a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e9c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3748      	adds	r7, #72	; 0x48
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9d2:	bf00      	nop
 800e9d4:	58024400 	.word	0x58024400
 800e9d8:	03d09000 	.word	0x03d09000
 800e9dc:	003d0900 	.word	0x003d0900
 800e9e0:	08010018 	.word	0x08010018

0800e9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00a      	beq.n	800ea0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	430a      	orrs	r2, r1
 800ea2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea34:	f003 0304 	and.w	r3, r3, #4
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00a      	beq.n	800ea52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	430a      	orrs	r2, r1
 800ea50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea56:	f003 0308 	and.w	r3, r3, #8
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00a      	beq.n	800ea74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	430a      	orrs	r2, r1
 800ea72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea78:	f003 0310 	and.w	r3, r3, #16
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00a      	beq.n	800ea96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea9a:	f003 0320 	and.w	r3, r3, #32
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00a      	beq.n	800eab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	430a      	orrs	r2, r1
 800eab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d01a      	beq.n	800eafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	430a      	orrs	r2, r1
 800ead8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eae2:	d10a      	bne.n	800eafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00a      	beq.n	800eb1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	430a      	orrs	r2, r1
 800eb1a:	605a      	str	r2, [r3, #4]
  }
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb38:	f7f3 feb0 	bl	800289c <HAL_GetTick>
 800eb3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0308 	and.w	r3, r3, #8
 800eb48:	2b08      	cmp	r3, #8
 800eb4a:	d10e      	bne.n	800eb6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f82f 	bl	800ebbe <UART_WaitOnFlagUntilTimeout>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e025      	b.n	800ebb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f003 0304 	and.w	r3, r3, #4
 800eb74:	2b04      	cmp	r3, #4
 800eb76:	d10e      	bne.n	800eb96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f819 	bl	800ebbe <UART_WaitOnFlagUntilTimeout>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e00f      	b.n	800ebb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2220      	movs	r2, #32
 800eb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2220      	movs	r2, #32
 800eba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3710      	adds	r7, #16
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b09c      	sub	sp, #112	; 0x70
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	60b9      	str	r1, [r7, #8]
 800ebc8:	603b      	str	r3, [r7, #0]
 800ebca:	4613      	mov	r3, r2
 800ebcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebce:	e0a9      	b.n	800ed24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebd6:	f000 80a5 	beq.w	800ed24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebda:	f7f3 fe5f 	bl	800289c <HAL_GetTick>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d302      	bcc.n	800ebf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ebea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d140      	bne.n	800ec72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ebfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec04:	667b      	str	r3, [r7, #100]	; 0x64
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ec1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e6      	bne.n	800ebf0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	f023 0301 	bic.w	r3, r3, #1
 800ec38:	663b      	str	r3, [r7, #96]	; 0x60
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec42:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec4a:	e841 2300 	strex	r3, r2, [r1]
 800ec4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1e5      	bne.n	800ec22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2220      	movs	r2, #32
 800ec62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e069      	b.n	800ed46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f003 0304 	and.w	r3, r3, #4
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d051      	beq.n	800ed24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	69db      	ldr	r3, [r3, #28]
 800ec86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec8e:	d149      	bne.n	800ed24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	e853 3f00 	ldrex	r3, [r3]
 800eca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ecae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ecba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ecbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecc0:	e841 2300 	strex	r3, r2, [r1]
 800ecc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1e6      	bne.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	3308      	adds	r3, #8
 800ecd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	e853 3f00 	ldrex	r3, [r3]
 800ecda:	613b      	str	r3, [r7, #16]
   return(result);
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	f023 0301 	bic.w	r3, r3, #1
 800ece2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	3308      	adds	r3, #8
 800ecea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ecec:	623a      	str	r2, [r7, #32]
 800ecee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf0:	69f9      	ldr	r1, [r7, #28]
 800ecf2:	6a3a      	ldr	r2, [r7, #32]
 800ecf4:	e841 2300 	strex	r3, r2, [r1]
 800ecf8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1e5      	bne.n	800eccc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2220      	movs	r2, #32
 800ed04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2220      	movs	r2, #32
 800ed0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2220      	movs	r2, #32
 800ed14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ed20:	2303      	movs	r3, #3
 800ed22:	e010      	b.n	800ed46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	69da      	ldr	r2, [r3, #28]
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	bf0c      	ite	eq
 800ed34:	2301      	moveq	r3, #1
 800ed36:	2300      	movne	r3, #0
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	f43f af46 	beq.w	800ebd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3770      	adds	r7, #112	; 0x70
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b0a3      	sub	sp, #140	; 0x8c
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	88fa      	ldrh	r2, [r7, #6]
 800ed68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	88fa      	ldrh	r2, [r7, #6]
 800ed70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed82:	d10e      	bne.n	800eda2 <UART_Start_Receive_IT+0x52>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d105      	bne.n	800ed98 <UART_Start_Receive_IT+0x48>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed96:	e02d      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	22ff      	movs	r2, #255	; 0xff
 800ed9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eda0:	e028      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10d      	bne.n	800edc6 <UART_Start_Receive_IT+0x76>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d104      	bne.n	800edbc <UART_Start_Receive_IT+0x6c>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	22ff      	movs	r2, #255	; 0xff
 800edb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edba:	e01b      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	227f      	movs	r2, #127	; 0x7f
 800edc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edc4:	e016      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edce:	d10d      	bne.n	800edec <UART_Start_Receive_IT+0x9c>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d104      	bne.n	800ede2 <UART_Start_Receive_IT+0x92>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	227f      	movs	r2, #127	; 0x7f
 800eddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ede0:	e008      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	223f      	movs	r2, #63	; 0x3f
 800ede6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edea:	e003      	b.n	800edf4 <UART_Start_Receive_IT+0xa4>
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2222      	movs	r2, #34	; 0x22
 800ee00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3308      	adds	r3, #8
 800ee0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee0e:	e853 3f00 	ldrex	r3, [r3]
 800ee12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ee14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3308      	adds	r3, #8
 800ee24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ee28:	673a      	str	r2, [r7, #112]	; 0x70
 800ee2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ee2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee30:	e841 2300 	strex	r3, r2, [r1]
 800ee34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ee36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1e3      	bne.n	800ee04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee44:	d153      	bne.n	800eeee <UART_Start_Receive_IT+0x19e>
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee4c:	88fa      	ldrh	r2, [r7, #6]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d34d      	bcc.n	800eeee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee5a:	d107      	bne.n	800ee6c <UART_Start_Receive_IT+0x11c>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d103      	bne.n	800ee6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	4a4b      	ldr	r2, [pc, #300]	; (800ef94 <UART_Start_Receive_IT+0x244>)
 800ee68:	671a      	str	r2, [r3, #112]	; 0x70
 800ee6a:	e002      	b.n	800ee72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4a4a      	ldr	r2, [pc, #296]	; (800ef98 <UART_Start_Receive_IT+0x248>)
 800ee70:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d01a      	beq.n	800eeb8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eea6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eeaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eeac:	e841 2300 	strex	r3, r2, [r1]
 800eeb0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eeb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e4      	bne.n	800ee82 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	3308      	adds	r3, #8
 800eebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eec2:	e853 3f00 	ldrex	r3, [r3]
 800eec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eece:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3308      	adds	r3, #8
 800eed6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eed8:	64ba      	str	r2, [r7, #72]	; 0x48
 800eeda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eedc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eee0:	e841 2300 	strex	r3, r2, [r1]
 800eee4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1e5      	bne.n	800eeb8 <UART_Start_Receive_IT+0x168>
 800eeec:	e04a      	b.n	800ef84 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eef6:	d107      	bne.n	800ef08 <UART_Start_Receive_IT+0x1b8>
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	691b      	ldr	r3, [r3, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d103      	bne.n	800ef08 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4a26      	ldr	r2, [pc, #152]	; (800ef9c <UART_Start_Receive_IT+0x24c>)
 800ef04:	671a      	str	r2, [r3, #112]	; 0x70
 800ef06:	e002      	b.n	800ef0e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4a25      	ldr	r2, [pc, #148]	; (800efa0 <UART_Start_Receive_IT+0x250>)
 800ef0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d019      	beq.n	800ef52 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	e853 3f00 	ldrex	r3, [r3]
 800ef2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ef32:	677b      	str	r3, [r7, #116]	; 0x74
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef44:	e841 2300 	strex	r3, r2, [r1]
 800ef48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1e6      	bne.n	800ef1e <UART_Start_Receive_IT+0x1ce>
 800ef50:	e018      	b.n	800ef84 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	e853 3f00 	ldrex	r3, [r3]
 800ef5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	f043 0320 	orr.w	r3, r3, #32
 800ef66:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef70:	623b      	str	r3, [r7, #32]
 800ef72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef74:	69f9      	ldr	r1, [r7, #28]
 800ef76:	6a3a      	ldr	r2, [r7, #32]
 800ef78:	e841 2300 	strex	r3, r2, [r1]
 800ef7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e6      	bne.n	800ef52 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	378c      	adds	r7, #140	; 0x8c
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	0800f6ad 	.word	0x0800f6ad
 800ef98:	0800f3b5 	.word	0x0800f3b5
 800ef9c:	0800f253 	.word	0x0800f253
 800efa0:	0800f0f3 	.word	0x0800f0f3

0800efa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b095      	sub	sp, #84	; 0x54
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb4:	e853 3f00 	ldrex	r3, [r3]
 800efb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	461a      	mov	r2, r3
 800efc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efca:	643b      	str	r3, [r7, #64]	; 0x40
 800efcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efd2:	e841 2300 	strex	r3, r2, [r1]
 800efd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1e6      	bne.n	800efac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3308      	adds	r3, #8
 800efe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	61fb      	str	r3, [r7, #28]
   return(result);
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	4b1e      	ldr	r3, [pc, #120]	; (800f06c <UART_EndRxTransfer+0xc8>)
 800eff2:	4013      	ands	r3, r2
 800eff4:	64bb      	str	r3, [r7, #72]	; 0x48
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	3308      	adds	r3, #8
 800effc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800effe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e5      	bne.n	800efde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f016:	2b01      	cmp	r3, #1
 800f018:	d118      	bne.n	800f04c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	60bb      	str	r3, [r7, #8]
   return(result);
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f023 0310 	bic.w	r3, r3, #16
 800f02e:	647b      	str	r3, [r7, #68]	; 0x44
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	461a      	mov	r2, r3
 800f036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f038:	61bb      	str	r3, [r7, #24]
 800f03a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03c:	6979      	ldr	r1, [r7, #20]
 800f03e:	69ba      	ldr	r2, [r7, #24]
 800f040:	e841 2300 	strex	r3, r2, [r1]
 800f044:	613b      	str	r3, [r7, #16]
   return(result);
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e6      	bne.n	800f01a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2220      	movs	r2, #32
 800f050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f060:	bf00      	nop
 800f062:	3754      	adds	r7, #84	; 0x54
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr
 800f06c:	effffffe 	.word	0xeffffffe

0800f070 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7fe ff2a 	bl	800dee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f094:	bf00      	nop
 800f096:	3710      	adds	r7, #16
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	e853 3f00 	ldrex	r3, [r3]
 800f0b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0b8:	61fb      	str	r3, [r7, #28]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	61bb      	str	r3, [r7, #24]
 800f0c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6979      	ldr	r1, [r7, #20]
 800f0c8:	69ba      	ldr	r2, [r7, #24]
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e6      	bne.n	800f0a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7fe fef5 	bl	800ded4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0ea:	bf00      	nop
 800f0ec:	3720      	adds	r7, #32
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b096      	sub	sp, #88	; 0x58
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f100:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f10a:	2b22      	cmp	r3, #34	; 0x22
 800f10c:	f040 8095 	bne.w	800f23a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f116:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f11a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f11e:	b2d9      	uxtb	r1, r3
 800f120:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f124:	b2da      	uxtb	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f12a:	400a      	ands	r2, r1
 800f12c:	b2d2      	uxtb	r2, r2
 800f12e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f140:	b29b      	uxth	r3, r3
 800f142:	3b01      	subs	r3, #1
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f152:	b29b      	uxth	r3, r3
 800f154:	2b00      	cmp	r3, #0
 800f156:	d178      	bne.n	800f24a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	e853 3f00 	ldrex	r3, [r3]
 800f164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f16c:	653b      	str	r3, [r7, #80]	; 0x50
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f176:	647b      	str	r3, [r7, #68]	; 0x44
 800f178:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f17c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f17e:	e841 2300 	strex	r3, r2, [r1]
 800f182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1e6      	bne.n	800f158 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3308      	adds	r3, #8
 800f190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	e853 3f00 	ldrex	r3, [r3]
 800f198:	623b      	str	r3, [r7, #32]
   return(result);
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	f023 0301 	bic.w	r3, r3, #1
 800f1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	3308      	adds	r3, #8
 800f1a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1aa:	633a      	str	r2, [r7, #48]	; 0x30
 800f1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1b2:	e841 2300 	strex	r3, r2, [r1]
 800f1b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1e5      	bne.n	800f18a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2220      	movs	r2, #32
 800f1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d12e      	bne.n	800f232 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0310 	bic.w	r3, r3, #16
 800f1ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1f8:	61fb      	str	r3, [r7, #28]
 800f1fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fc:	69b9      	ldr	r1, [r7, #24]
 800f1fe:	69fa      	ldr	r2, [r7, #28]
 800f200:	e841 2300 	strex	r3, r2, [r1]
 800f204:	617b      	str	r3, [r7, #20]
   return(result);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e6      	bne.n	800f1da <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	f003 0310 	and.w	r3, r3, #16
 800f216:	2b10      	cmp	r3, #16
 800f218:	d103      	bne.n	800f222 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2210      	movs	r2, #16
 800f220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7fe fe66 	bl	800defc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f230:	e00b      	b.n	800f24a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7f1 fce8 	bl	8000c08 <HAL_UART_RxCpltCallback>
}
 800f238:	e007      	b.n	800f24a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	699a      	ldr	r2, [r3, #24]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f042 0208 	orr.w	r2, r2, #8
 800f248:	619a      	str	r2, [r3, #24]
}
 800f24a:	bf00      	nop
 800f24c:	3758      	adds	r7, #88	; 0x58
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b096      	sub	sp, #88	; 0x58
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f260:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f26a:	2b22      	cmp	r3, #34	; 0x22
 800f26c:	f040 8095 	bne.w	800f39a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f276:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f27e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f280:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f284:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f288:	4013      	ands	r3, r2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f28e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f294:	1c9a      	adds	r2, r3, #2
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d178      	bne.n	800f3aa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c0:	e853 3f00 	ldrex	r3, [r3]
 800f2c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2d6:	643b      	str	r3, [r7, #64]	; 0x40
 800f2d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2de:	e841 2300 	strex	r3, r2, [r1]
 800f2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1e6      	bne.n	800f2b8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3308      	adds	r3, #8
 800f2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f2:	6a3b      	ldr	r3, [r7, #32]
 800f2f4:	e853 3f00 	ldrex	r3, [r3]
 800f2f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	f023 0301 	bic.w	r3, r3, #1
 800f300:	64bb      	str	r3, [r7, #72]	; 0x48
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f30a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f30c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e5      	bne.n	800f2ea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2220      	movs	r2, #32
 800f322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f330:	2b01      	cmp	r3, #1
 800f332:	d12e      	bne.n	800f392 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	60bb      	str	r3, [r7, #8]
   return(result);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f023 0310 	bic.w	r3, r3, #16
 800f34e:	647b      	str	r3, [r7, #68]	; 0x44
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f358:	61bb      	str	r3, [r7, #24]
 800f35a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35c:	6979      	ldr	r1, [r7, #20]
 800f35e:	69ba      	ldr	r2, [r7, #24]
 800f360:	e841 2300 	strex	r3, r2, [r1]
 800f364:	613b      	str	r3, [r7, #16]
   return(result);
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e6      	bne.n	800f33a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	69db      	ldr	r3, [r3, #28]
 800f372:	f003 0310 	and.w	r3, r3, #16
 800f376:	2b10      	cmp	r3, #16
 800f378:	d103      	bne.n	800f382 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2210      	movs	r2, #16
 800f380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7fe fdb6 	bl	800defc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f390:	e00b      	b.n	800f3aa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7f1 fc38 	bl	8000c08 <HAL_UART_RxCpltCallback>
}
 800f398:	e007      	b.n	800f3aa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	699a      	ldr	r2, [r3, #24]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f042 0208 	orr.w	r2, r2, #8
 800f3a8:	619a      	str	r2, [r3, #24]
}
 800f3aa:	bf00      	nop
 800f3ac:	3758      	adds	r7, #88	; 0x58
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
	...

0800f3b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b0a6      	sub	sp, #152	; 0x98
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3c2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ea:	2b22      	cmp	r3, #34	; 0x22
 800f3ec:	f040 814d 	bne.w	800f68a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3fa:	e0f4      	b.n	800f5e6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f402:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f406:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f40a:	b2d9      	uxtb	r1, r3
 800f40c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f410:	b2da      	uxtb	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f416:	400a      	ands	r2, r1
 800f418:	b2d2      	uxtb	r2, r2
 800f41a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	3b01      	subs	r3, #1
 800f430:	b29a      	uxth	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f446:	f003 0307 	and.w	r3, r3, #7
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d053      	beq.n	800f4f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f44e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d011      	beq.n	800f47e <UART_RxISR_8BIT_FIFOEN+0xca>
 800f45a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00b      	beq.n	800f47e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2201      	movs	r2, #1
 800f46c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f474:	f043 0201 	orr.w	r2, r3, #1
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f47e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f482:	f003 0302 	and.w	r3, r3, #2
 800f486:	2b00      	cmp	r3, #0
 800f488:	d011      	beq.n	800f4ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f48a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00b      	beq.n	800f4ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2202      	movs	r2, #2
 800f49c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a4:	f043 0204 	orr.w	r2, r3, #4
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4b2:	f003 0304 	and.w	r3, r3, #4
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d011      	beq.n	800f4de <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f4ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00b      	beq.n	800f4de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2204      	movs	r2, #4
 800f4cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4d4:	f043 0202 	orr.w	r2, r3, #2
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d006      	beq.n	800f4f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7fe fcfd 	bl	800dee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d171      	bne.n	800f5e6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f50a:	e853 3f00 	ldrex	r3, [r3]
 800f50e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f524:	66bb      	str	r3, [r7, #104]	; 0x68
 800f526:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f528:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f52a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f52c:	e841 2300 	strex	r3, r2, [r1]
 800f530:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1e4      	bne.n	800f502 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3308      	adds	r3, #8
 800f53e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f542:	e853 3f00 	ldrex	r3, [r3]
 800f546:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54a:	4b56      	ldr	r3, [pc, #344]	; (800f6a4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f54c:	4013      	ands	r3, r2
 800f54e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	3308      	adds	r3, #8
 800f556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f558:	657a      	str	r2, [r7, #84]	; 0x54
 800f55a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f55e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f560:	e841 2300 	strex	r3, r2, [r1]
 800f564:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1e5      	bne.n	800f538 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2220      	movs	r2, #32
 800f570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d12e      	bne.n	800f5e0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f590:	e853 3f00 	ldrex	r3, [r3]
 800f594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	f023 0310 	bic.w	r3, r3, #16
 800f59c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5a6:	643b      	str	r3, [r7, #64]	; 0x40
 800f5a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5ae:	e841 2300 	strex	r3, r2, [r1]
 800f5b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1e6      	bne.n	800f588 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	2b10      	cmp	r3, #16
 800f5c6:	d103      	bne.n	800f5d0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2210      	movs	r2, #16
 800f5ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe fc8f 	bl	800defc <HAL_UARTEx_RxEventCallback>
 800f5de:	e002      	b.n	800f5e6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7f1 fb11 	bl	8000c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d006      	beq.n	800f5fc <UART_RxISR_8BIT_FIFOEN+0x248>
 800f5ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5f2:	f003 0320 	and.w	r3, r3, #32
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f47f af00 	bne.w	800f3fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f606:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d045      	beq.n	800f69a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f618:	429a      	cmp	r2, r3
 800f61a:	d23e      	bcs.n	800f69a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3308      	adds	r3, #8
 800f622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f632:	673b      	str	r3, [r7, #112]	; 0x70
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3308      	adds	r3, #8
 800f63a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f63c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f63e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e5      	bne.n	800f61c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a15      	ldr	r2, [pc, #84]	; (800f6a8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f654:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	e853 3f00 	ldrex	r3, [r3]
 800f662:	60bb      	str	r3, [r7, #8]
   return(result);
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	f043 0320 	orr.w	r3, r3, #32
 800f66a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	461a      	mov	r2, r3
 800f672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f674:	61bb      	str	r3, [r7, #24]
 800f676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f678:	6979      	ldr	r1, [r7, #20]
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	e841 2300 	strex	r3, r2, [r1]
 800f680:	613b      	str	r3, [r7, #16]
   return(result);
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1e6      	bne.n	800f656 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f688:	e007      	b.n	800f69a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	699a      	ldr	r2, [r3, #24]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f042 0208 	orr.w	r2, r2, #8
 800f698:	619a      	str	r2, [r3, #24]
}
 800f69a:	bf00      	nop
 800f69c:	3798      	adds	r7, #152	; 0x98
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	effffffe 	.word	0xeffffffe
 800f6a8:	0800f0f3 	.word	0x0800f0f3

0800f6ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b0a8      	sub	sp, #160	; 0xa0
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6ba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	69db      	ldr	r3, [r3, #28]
 800f6c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6e2:	2b22      	cmp	r3, #34	; 0x22
 800f6e4:	f040 8151 	bne.w	800f98a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6f2:	e0f8      	b.n	800f8e6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f706:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f70a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f70e:	4013      	ands	r3, r2
 800f710:	b29a      	uxth	r2, r3
 800f712:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f716:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f71c:	1c9a      	adds	r2, r3, #2
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f728:	b29b      	uxth	r3, r3
 800f72a:	3b01      	subs	r3, #1
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	69db      	ldr	r3, [r3, #28]
 800f73a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f73e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f742:	f003 0307 	and.w	r3, r3, #7
 800f746:	2b00      	cmp	r3, #0
 800f748:	d053      	beq.n	800f7f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f74a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f74e:	f003 0301 	and.w	r3, r3, #1
 800f752:	2b00      	cmp	r3, #0
 800f754:	d011      	beq.n	800f77a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00b      	beq.n	800f77a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2201      	movs	r2, #1
 800f768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f770:	f043 0201 	orr.w	r2, r3, #1
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f77a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f77e:	f003 0302 	and.w	r3, r3, #2
 800f782:	2b00      	cmp	r3, #0
 800f784:	d011      	beq.n	800f7aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f78a:	f003 0301 	and.w	r3, r3, #1
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00b      	beq.n	800f7aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2202      	movs	r2, #2
 800f798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7a0:	f043 0204 	orr.w	r2, r3, #4
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7ae:	f003 0304 	and.w	r3, r3, #4
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d011      	beq.n	800f7da <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f7b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00b      	beq.n	800f7da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2204      	movs	r2, #4
 800f7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d0:	f043 0202 	orr.w	r2, r3, #2
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7fe fb7f 	bl	800dee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d173      	bne.n	800f8e6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f806:	e853 3f00 	ldrex	r3, [r3]
 800f80a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f80e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f820:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f822:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f828:	e841 2300 	strex	r3, r2, [r1]
 800f82c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f82e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1e4      	bne.n	800f7fe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	3308      	adds	r3, #8
 800f83a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f83e:	e853 3f00 	ldrex	r3, [r3]
 800f842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f846:	4b57      	ldr	r3, [pc, #348]	; (800f9a4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f848:	4013      	ands	r3, r2
 800f84a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3308      	adds	r3, #8
 800f854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f858:	65ba      	str	r2, [r7, #88]	; 0x58
 800f85a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f85e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f860:	e841 2300 	strex	r3, r2, [r1]
 800f864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e3      	bne.n	800f834 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2220      	movs	r2, #32
 800f870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d12e      	bne.n	800f8e0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2200      	movs	r2, #0
 800f886:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f890:	e853 3f00 	ldrex	r3, [r3]
 800f894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f898:	f023 0310 	bic.w	r3, r3, #16
 800f89c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8a6:	647b      	str	r3, [r7, #68]	; 0x44
 800f8a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ae:	e841 2300 	strex	r3, r2, [r1]
 800f8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1e6      	bne.n	800f888 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	f003 0310 	and.w	r3, r3, #16
 800f8c4:	2b10      	cmp	r3, #16
 800f8c6:	d103      	bne.n	800f8d0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2210      	movs	r2, #16
 800f8ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fe fb0f 	bl	800defc <HAL_UARTEx_RxEventCallback>
 800f8de:	e002      	b.n	800f8e6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7f1 f991 	bl	8000c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d006      	beq.n	800f8fc <UART_RxISR_16BIT_FIFOEN+0x250>
 800f8ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f8f2:	f003 0320 	and.w	r3, r3, #32
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f47f aefc 	bne.w	800f6f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f902:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f906:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d045      	beq.n	800f99a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f914:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f918:	429a      	cmp	r2, r3
 800f91a:	d23e      	bcs.n	800f99a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3308      	adds	r3, #8
 800f922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	623b      	str	r3, [r7, #32]
   return(result);
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f932:	677b      	str	r3, [r7, #116]	; 0x74
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3308      	adds	r3, #8
 800f93a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f93c:	633a      	str	r2, [r7, #48]	; 0x30
 800f93e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e5      	bne.n	800f91c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a15      	ldr	r2, [pc, #84]	; (800f9a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f954:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	60fb      	str	r3, [r7, #12]
   return(result);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f043 0320 	orr.w	r3, r3, #32
 800f96a:	673b      	str	r3, [r7, #112]	; 0x70
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f974:	61fb      	str	r3, [r7, #28]
 800f976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f978:	69b9      	ldr	r1, [r7, #24]
 800f97a:	69fa      	ldr	r2, [r7, #28]
 800f97c:	e841 2300 	strex	r3, r2, [r1]
 800f980:	617b      	str	r3, [r7, #20]
   return(result);
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1e6      	bne.n	800f956 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f988:	e007      	b.n	800f99a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	699a      	ldr	r2, [r3, #24]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f042 0208 	orr.w	r2, r2, #8
 800f998:	619a      	str	r2, [r3, #24]
}
 800f99a:	bf00      	nop
 800f99c:	37a0      	adds	r7, #160	; 0xa0
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	effffffe 	.word	0xeffffffe
 800f9a8:	0800f253 	.word	0x0800f253

0800f9ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9b4:	bf00      	nop
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b088      	sub	sp, #32
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	1d3b      	adds	r3, r7, #4
 800f9f2:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d101      	bne.n	800fa08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fa04:	2302      	movs	r3, #2
 800fa06:	e046      	b.n	800fa96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2224      	movs	r2, #36	; 0x24
 800fa14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f022 0201 	bic.w	r2, r2, #1
 800fa26:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	430a      	orrs	r2, r1
 800fa3a:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d105      	bne.n	800fa4e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fa42:	1d3b      	adds	r3, r7, #4
 800fa44:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 f910 	bl	800fc6e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f042 0201 	orr.w	r2, r2, #1
 800fa5c:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa5e:	f7f2 ff1d 	bl	800289c <HAL_GetTick>
 800fa62:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f7ff f8a3 	bl	800ebbe <UART_WaitOnFlagUntilTimeout>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800fa7e:	2303      	movs	r3, #3
 800fa80:	75fb      	strb	r3, [r7, #23]
 800fa82:	e003      	b.n	800fa8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2220      	movs	r2, #32
 800fa88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fa94:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3718      	adds	r7, #24
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b089      	sub	sp, #36	; 0x24
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faac:	2b01      	cmp	r3, #1
 800faae:	d101      	bne.n	800fab4 <HAL_UARTEx_EnableStopMode+0x16>
 800fab0:	2302      	movs	r3, #2
 800fab2:	e021      	b.n	800faf8 <HAL_UARTEx_EnableStopMode+0x5a>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	e853 3f00 	ldrex	r3, [r3]
 800fac8:	60bb      	str	r3, [r7, #8]
   return(result);
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	f043 0302 	orr.w	r3, r3, #2
 800fad0:	61fb      	str	r3, [r7, #28]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	61bb      	str	r3, [r7, #24]
 800fadc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fade:	6979      	ldr	r1, [r7, #20]
 800fae0:	69ba      	ldr	r2, [r7, #24]
 800fae2:	e841 2300 	strex	r3, r2, [r1]
 800fae6:	613b      	str	r3, [r7, #16]
   return(result);
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1e6      	bne.n	800fabc <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3724      	adds	r7, #36	; 0x24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d101      	bne.n	800fb1a <HAL_UARTEx_DisableFifoMode+0x16>
 800fb16:	2302      	movs	r3, #2
 800fb18:	e027      	b.n	800fb6a <HAL_UARTEx_DisableFifoMode+0x66>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2224      	movs	r2, #36	; 0x24
 800fb26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f022 0201 	bic.w	r2, r2, #1
 800fb40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2220      	movs	r2, #32
 800fb5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3714      	adds	r7, #20
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d101      	bne.n	800fb8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	e02d      	b.n	800fbea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2224      	movs	r2, #36	; 0x24
 800fb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f022 0201 	bic.w	r2, r2, #1
 800fbb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	430a      	orrs	r2, r1
 800fbc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f872 	bl	800fcb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2220      	movs	r2, #32
 800fbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d101      	bne.n	800fc0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc06:	2302      	movs	r3, #2
 800fc08:	e02d      	b.n	800fc66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2224      	movs	r2, #36	; 0x24
 800fc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f022 0201 	bic.w	r2, r2, #1
 800fc30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	430a      	orrs	r2, r1
 800fc44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f834 	bl	800fcb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2220      	movs	r2, #32
 800fc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fc6e:	b480      	push	{r7}
 800fc70:	b085      	sub	sp, #20
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	60f8      	str	r0, [r7, #12]
 800fc76:	1d3b      	adds	r3, r7, #4
 800fc78:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f023 0210 	bic.w	r2, r3, #16
 800fc86:	893b      	ldrh	r3, [r7, #8]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fc9c:	7abb      	ldrb	r3, [r7, #10]
 800fc9e:	061a      	lsls	r2, r3, #24
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	430a      	orrs	r2, r1
 800fca6:	605a      	str	r2, [r3, #4]
}
 800fca8:	bf00      	nop
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d108      	bne.n	800fcd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcd4:	e031      	b.n	800fd3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcd6:	2310      	movs	r3, #16
 800fcd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcda:	2310      	movs	r3, #16
 800fcdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	0e5b      	lsrs	r3, r3, #25
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	f003 0307 	and.w	r3, r3, #7
 800fcec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	0f5b      	lsrs	r3, r3, #29
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	f003 0307 	and.w	r3, r3, #7
 800fcfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcfe:	7bbb      	ldrb	r3, [r7, #14]
 800fd00:	7b3a      	ldrb	r2, [r7, #12]
 800fd02:	4911      	ldr	r1, [pc, #68]	; (800fd48 <UARTEx_SetNbDataToProcess+0x94>)
 800fd04:	5c8a      	ldrb	r2, [r1, r2]
 800fd06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd0a:	7b3a      	ldrb	r2, [r7, #12]
 800fd0c:	490f      	ldr	r1, [pc, #60]	; (800fd4c <UARTEx_SetNbDataToProcess+0x98>)
 800fd0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd10:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
 800fd1e:	7b7a      	ldrb	r2, [r7, #13]
 800fd20:	4909      	ldr	r1, [pc, #36]	; (800fd48 <UARTEx_SetNbDataToProcess+0x94>)
 800fd22:	5c8a      	ldrb	r2, [r1, r2]
 800fd24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd28:	7b7a      	ldrb	r2, [r7, #13]
 800fd2a:	4908      	ldr	r1, [pc, #32]	; (800fd4c <UARTEx_SetNbDataToProcess+0x98>)
 800fd2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd3a:	bf00      	nop
 800fd3c:	3714      	adds	r7, #20
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	08010030 	.word	0x08010030
 800fd4c:	08010038 	.word	0x08010038

0800fd50 <__errno>:
 800fd50:	4b01      	ldr	r3, [pc, #4]	; (800fd58 <__errno+0x8>)
 800fd52:	6818      	ldr	r0, [r3, #0]
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	24000030 	.word	0x24000030

0800fd5c <__libc_init_array>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	4d0d      	ldr	r5, [pc, #52]	; (800fd94 <__libc_init_array+0x38>)
 800fd60:	4c0d      	ldr	r4, [pc, #52]	; (800fd98 <__libc_init_array+0x3c>)
 800fd62:	1b64      	subs	r4, r4, r5
 800fd64:	10a4      	asrs	r4, r4, #2
 800fd66:	2600      	movs	r6, #0
 800fd68:	42a6      	cmp	r6, r4
 800fd6a:	d109      	bne.n	800fd80 <__libc_init_array+0x24>
 800fd6c:	4d0b      	ldr	r5, [pc, #44]	; (800fd9c <__libc_init_array+0x40>)
 800fd6e:	4c0c      	ldr	r4, [pc, #48]	; (800fda0 <__libc_init_array+0x44>)
 800fd70:	f000 f92e 	bl	800ffd0 <_init>
 800fd74:	1b64      	subs	r4, r4, r5
 800fd76:	10a4      	asrs	r4, r4, #2
 800fd78:	2600      	movs	r6, #0
 800fd7a:	42a6      	cmp	r6, r4
 800fd7c:	d105      	bne.n	800fd8a <__libc_init_array+0x2e>
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd84:	4798      	blx	r3
 800fd86:	3601      	adds	r6, #1
 800fd88:	e7ee      	b.n	800fd68 <__libc_init_array+0xc>
 800fd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd8e:	4798      	blx	r3
 800fd90:	3601      	adds	r6, #1
 800fd92:	e7f2      	b.n	800fd7a <__libc_init_array+0x1e>
 800fd94:	08010048 	.word	0x08010048
 800fd98:	08010048 	.word	0x08010048
 800fd9c:	08010048 	.word	0x08010048
 800fda0:	0801004c 	.word	0x0801004c

0800fda4 <malloc>:
 800fda4:	4b02      	ldr	r3, [pc, #8]	; (800fdb0 <malloc+0xc>)
 800fda6:	4601      	mov	r1, r0
 800fda8:	6818      	ldr	r0, [r3, #0]
 800fdaa:	f000 b87f 	b.w	800feac <_malloc_r>
 800fdae:	bf00      	nop
 800fdb0:	24000030 	.word	0x24000030

0800fdb4 <free>:
 800fdb4:	4b02      	ldr	r3, [pc, #8]	; (800fdc0 <free+0xc>)
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	6818      	ldr	r0, [r3, #0]
 800fdba:	f000 b80b 	b.w	800fdd4 <_free_r>
 800fdbe:	bf00      	nop
 800fdc0:	24000030 	.word	0x24000030

0800fdc4 <memset>:
 800fdc4:	4402      	add	r2, r0
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d100      	bne.n	800fdce <memset+0xa>
 800fdcc:	4770      	bx	lr
 800fdce:	f803 1b01 	strb.w	r1, [r3], #1
 800fdd2:	e7f9      	b.n	800fdc8 <memset+0x4>

0800fdd4 <_free_r>:
 800fdd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdd6:	2900      	cmp	r1, #0
 800fdd8:	d044      	beq.n	800fe64 <_free_r+0x90>
 800fdda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdde:	9001      	str	r0, [sp, #4]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f1a1 0404 	sub.w	r4, r1, #4
 800fde6:	bfb8      	it	lt
 800fde8:	18e4      	addlt	r4, r4, r3
 800fdea:	f000 f8e3 	bl	800ffb4 <__malloc_lock>
 800fdee:	4a1e      	ldr	r2, [pc, #120]	; (800fe68 <_free_r+0x94>)
 800fdf0:	9801      	ldr	r0, [sp, #4]
 800fdf2:	6813      	ldr	r3, [r2, #0]
 800fdf4:	b933      	cbnz	r3, 800fe04 <_free_r+0x30>
 800fdf6:	6063      	str	r3, [r4, #4]
 800fdf8:	6014      	str	r4, [r2, #0]
 800fdfa:	b003      	add	sp, #12
 800fdfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe00:	f000 b8de 	b.w	800ffc0 <__malloc_unlock>
 800fe04:	42a3      	cmp	r3, r4
 800fe06:	d908      	bls.n	800fe1a <_free_r+0x46>
 800fe08:	6825      	ldr	r5, [r4, #0]
 800fe0a:	1961      	adds	r1, r4, r5
 800fe0c:	428b      	cmp	r3, r1
 800fe0e:	bf01      	itttt	eq
 800fe10:	6819      	ldreq	r1, [r3, #0]
 800fe12:	685b      	ldreq	r3, [r3, #4]
 800fe14:	1949      	addeq	r1, r1, r5
 800fe16:	6021      	streq	r1, [r4, #0]
 800fe18:	e7ed      	b.n	800fdf6 <_free_r+0x22>
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	b10b      	cbz	r3, 800fe24 <_free_r+0x50>
 800fe20:	42a3      	cmp	r3, r4
 800fe22:	d9fa      	bls.n	800fe1a <_free_r+0x46>
 800fe24:	6811      	ldr	r1, [r2, #0]
 800fe26:	1855      	adds	r5, r2, r1
 800fe28:	42a5      	cmp	r5, r4
 800fe2a:	d10b      	bne.n	800fe44 <_free_r+0x70>
 800fe2c:	6824      	ldr	r4, [r4, #0]
 800fe2e:	4421      	add	r1, r4
 800fe30:	1854      	adds	r4, r2, r1
 800fe32:	42a3      	cmp	r3, r4
 800fe34:	6011      	str	r1, [r2, #0]
 800fe36:	d1e0      	bne.n	800fdfa <_free_r+0x26>
 800fe38:	681c      	ldr	r4, [r3, #0]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	6053      	str	r3, [r2, #4]
 800fe3e:	4421      	add	r1, r4
 800fe40:	6011      	str	r1, [r2, #0]
 800fe42:	e7da      	b.n	800fdfa <_free_r+0x26>
 800fe44:	d902      	bls.n	800fe4c <_free_r+0x78>
 800fe46:	230c      	movs	r3, #12
 800fe48:	6003      	str	r3, [r0, #0]
 800fe4a:	e7d6      	b.n	800fdfa <_free_r+0x26>
 800fe4c:	6825      	ldr	r5, [r4, #0]
 800fe4e:	1961      	adds	r1, r4, r5
 800fe50:	428b      	cmp	r3, r1
 800fe52:	bf04      	itt	eq
 800fe54:	6819      	ldreq	r1, [r3, #0]
 800fe56:	685b      	ldreq	r3, [r3, #4]
 800fe58:	6063      	str	r3, [r4, #4]
 800fe5a:	bf04      	itt	eq
 800fe5c:	1949      	addeq	r1, r1, r5
 800fe5e:	6021      	streq	r1, [r4, #0]
 800fe60:	6054      	str	r4, [r2, #4]
 800fe62:	e7ca      	b.n	800fdfa <_free_r+0x26>
 800fe64:	b003      	add	sp, #12
 800fe66:	bd30      	pop	{r4, r5, pc}
 800fe68:	24000660 	.word	0x24000660

0800fe6c <sbrk_aligned>:
 800fe6c:	b570      	push	{r4, r5, r6, lr}
 800fe6e:	4e0e      	ldr	r6, [pc, #56]	; (800fea8 <sbrk_aligned+0x3c>)
 800fe70:	460c      	mov	r4, r1
 800fe72:	6831      	ldr	r1, [r6, #0]
 800fe74:	4605      	mov	r5, r0
 800fe76:	b911      	cbnz	r1, 800fe7e <sbrk_aligned+0x12>
 800fe78:	f000 f88c 	bl	800ff94 <_sbrk_r>
 800fe7c:	6030      	str	r0, [r6, #0]
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4628      	mov	r0, r5
 800fe82:	f000 f887 	bl	800ff94 <_sbrk_r>
 800fe86:	1c43      	adds	r3, r0, #1
 800fe88:	d00a      	beq.n	800fea0 <sbrk_aligned+0x34>
 800fe8a:	1cc4      	adds	r4, r0, #3
 800fe8c:	f024 0403 	bic.w	r4, r4, #3
 800fe90:	42a0      	cmp	r0, r4
 800fe92:	d007      	beq.n	800fea4 <sbrk_aligned+0x38>
 800fe94:	1a21      	subs	r1, r4, r0
 800fe96:	4628      	mov	r0, r5
 800fe98:	f000 f87c 	bl	800ff94 <_sbrk_r>
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	d101      	bne.n	800fea4 <sbrk_aligned+0x38>
 800fea0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fea4:	4620      	mov	r0, r4
 800fea6:	bd70      	pop	{r4, r5, r6, pc}
 800fea8:	24000664 	.word	0x24000664

0800feac <_malloc_r>:
 800feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb0:	1ccd      	adds	r5, r1, #3
 800feb2:	f025 0503 	bic.w	r5, r5, #3
 800feb6:	3508      	adds	r5, #8
 800feb8:	2d0c      	cmp	r5, #12
 800feba:	bf38      	it	cc
 800febc:	250c      	movcc	r5, #12
 800febe:	2d00      	cmp	r5, #0
 800fec0:	4607      	mov	r7, r0
 800fec2:	db01      	blt.n	800fec8 <_malloc_r+0x1c>
 800fec4:	42a9      	cmp	r1, r5
 800fec6:	d905      	bls.n	800fed4 <_malloc_r+0x28>
 800fec8:	230c      	movs	r3, #12
 800feca:	603b      	str	r3, [r7, #0]
 800fecc:	2600      	movs	r6, #0
 800fece:	4630      	mov	r0, r6
 800fed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed4:	4e2e      	ldr	r6, [pc, #184]	; (800ff90 <_malloc_r+0xe4>)
 800fed6:	f000 f86d 	bl	800ffb4 <__malloc_lock>
 800feda:	6833      	ldr	r3, [r6, #0]
 800fedc:	461c      	mov	r4, r3
 800fede:	bb34      	cbnz	r4, 800ff2e <_malloc_r+0x82>
 800fee0:	4629      	mov	r1, r5
 800fee2:	4638      	mov	r0, r7
 800fee4:	f7ff ffc2 	bl	800fe6c <sbrk_aligned>
 800fee8:	1c43      	adds	r3, r0, #1
 800feea:	4604      	mov	r4, r0
 800feec:	d14d      	bne.n	800ff8a <_malloc_r+0xde>
 800feee:	6834      	ldr	r4, [r6, #0]
 800fef0:	4626      	mov	r6, r4
 800fef2:	2e00      	cmp	r6, #0
 800fef4:	d140      	bne.n	800ff78 <_malloc_r+0xcc>
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	4631      	mov	r1, r6
 800fefa:	4638      	mov	r0, r7
 800fefc:	eb04 0803 	add.w	r8, r4, r3
 800ff00:	f000 f848 	bl	800ff94 <_sbrk_r>
 800ff04:	4580      	cmp	r8, r0
 800ff06:	d13a      	bne.n	800ff7e <_malloc_r+0xd2>
 800ff08:	6821      	ldr	r1, [r4, #0]
 800ff0a:	3503      	adds	r5, #3
 800ff0c:	1a6d      	subs	r5, r5, r1
 800ff0e:	f025 0503 	bic.w	r5, r5, #3
 800ff12:	3508      	adds	r5, #8
 800ff14:	2d0c      	cmp	r5, #12
 800ff16:	bf38      	it	cc
 800ff18:	250c      	movcc	r5, #12
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	4638      	mov	r0, r7
 800ff1e:	f7ff ffa5 	bl	800fe6c <sbrk_aligned>
 800ff22:	3001      	adds	r0, #1
 800ff24:	d02b      	beq.n	800ff7e <_malloc_r+0xd2>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	442b      	add	r3, r5
 800ff2a:	6023      	str	r3, [r4, #0]
 800ff2c:	e00e      	b.n	800ff4c <_malloc_r+0xa0>
 800ff2e:	6822      	ldr	r2, [r4, #0]
 800ff30:	1b52      	subs	r2, r2, r5
 800ff32:	d41e      	bmi.n	800ff72 <_malloc_r+0xc6>
 800ff34:	2a0b      	cmp	r2, #11
 800ff36:	d916      	bls.n	800ff66 <_malloc_r+0xba>
 800ff38:	1961      	adds	r1, r4, r5
 800ff3a:	42a3      	cmp	r3, r4
 800ff3c:	6025      	str	r5, [r4, #0]
 800ff3e:	bf18      	it	ne
 800ff40:	6059      	strne	r1, [r3, #4]
 800ff42:	6863      	ldr	r3, [r4, #4]
 800ff44:	bf08      	it	eq
 800ff46:	6031      	streq	r1, [r6, #0]
 800ff48:	5162      	str	r2, [r4, r5]
 800ff4a:	604b      	str	r3, [r1, #4]
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	f104 060b 	add.w	r6, r4, #11
 800ff52:	f000 f835 	bl	800ffc0 <__malloc_unlock>
 800ff56:	f026 0607 	bic.w	r6, r6, #7
 800ff5a:	1d23      	adds	r3, r4, #4
 800ff5c:	1af2      	subs	r2, r6, r3
 800ff5e:	d0b6      	beq.n	800fece <_malloc_r+0x22>
 800ff60:	1b9b      	subs	r3, r3, r6
 800ff62:	50a3      	str	r3, [r4, r2]
 800ff64:	e7b3      	b.n	800fece <_malloc_r+0x22>
 800ff66:	6862      	ldr	r2, [r4, #4]
 800ff68:	42a3      	cmp	r3, r4
 800ff6a:	bf0c      	ite	eq
 800ff6c:	6032      	streq	r2, [r6, #0]
 800ff6e:	605a      	strne	r2, [r3, #4]
 800ff70:	e7ec      	b.n	800ff4c <_malloc_r+0xa0>
 800ff72:	4623      	mov	r3, r4
 800ff74:	6864      	ldr	r4, [r4, #4]
 800ff76:	e7b2      	b.n	800fede <_malloc_r+0x32>
 800ff78:	4634      	mov	r4, r6
 800ff7a:	6876      	ldr	r6, [r6, #4]
 800ff7c:	e7b9      	b.n	800fef2 <_malloc_r+0x46>
 800ff7e:	230c      	movs	r3, #12
 800ff80:	603b      	str	r3, [r7, #0]
 800ff82:	4638      	mov	r0, r7
 800ff84:	f000 f81c 	bl	800ffc0 <__malloc_unlock>
 800ff88:	e7a1      	b.n	800fece <_malloc_r+0x22>
 800ff8a:	6025      	str	r5, [r4, #0]
 800ff8c:	e7de      	b.n	800ff4c <_malloc_r+0xa0>
 800ff8e:	bf00      	nop
 800ff90:	24000660 	.word	0x24000660

0800ff94 <_sbrk_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4d06      	ldr	r5, [pc, #24]	; (800ffb0 <_sbrk_r+0x1c>)
 800ff98:	2300      	movs	r3, #0
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	602b      	str	r3, [r5, #0]
 800ffa0:	f7f2 fb0e 	bl	80025c0 <_sbrk>
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	d102      	bne.n	800ffae <_sbrk_r+0x1a>
 800ffa8:	682b      	ldr	r3, [r5, #0]
 800ffaa:	b103      	cbz	r3, 800ffae <_sbrk_r+0x1a>
 800ffac:	6023      	str	r3, [r4, #0]
 800ffae:	bd38      	pop	{r3, r4, r5, pc}
 800ffb0:	24000668 	.word	0x24000668

0800ffb4 <__malloc_lock>:
 800ffb4:	4801      	ldr	r0, [pc, #4]	; (800ffbc <__malloc_lock+0x8>)
 800ffb6:	f000 b809 	b.w	800ffcc <__retarget_lock_acquire_recursive>
 800ffba:	bf00      	nop
 800ffbc:	2400066c 	.word	0x2400066c

0800ffc0 <__malloc_unlock>:
 800ffc0:	4801      	ldr	r0, [pc, #4]	; (800ffc8 <__malloc_unlock+0x8>)
 800ffc2:	f000 b804 	b.w	800ffce <__retarget_lock_release_recursive>
 800ffc6:	bf00      	nop
 800ffc8:	2400066c 	.word	0x2400066c

0800ffcc <__retarget_lock_acquire_recursive>:
 800ffcc:	4770      	bx	lr

0800ffce <__retarget_lock_release_recursive>:
 800ffce:	4770      	bx	lr

0800ffd0 <_init>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	bf00      	nop
 800ffd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd6:	bc08      	pop	{r3}
 800ffd8:	469e      	mov	lr, r3
 800ffda:	4770      	bx	lr

0800ffdc <_fini>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr
