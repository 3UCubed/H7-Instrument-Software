
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800eff8  0800eff8  0001eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f050  0800f050  0001f050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f058  0800f058  0001f058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f05c  0800f05c  0001f05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800f060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b4  24000040  0800f094  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005f4  0800f094  000205f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023532  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035de  00000000  00000000  00043594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  00046b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a0  00000000  00000000  00048650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  00049ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023983  00000000  00000000  00084d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ff24  00000000  00000000  000a8714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228638  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007514  00000000  00000000  00228688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800efe0 	.word	0x0800efe0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800efe0 	.word	0x0800efe0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aa4      	ldr	r2, [pc, #656]	; (80008a4 <HAL_TIM_OC_DelayElapsedCallback+0x29c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 8307 	bne.w	8000c28 <HAL_TIM_OC_DelayElapsedCallback+0x620>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4ba3      	ldr	r3, [pc, #652]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8091 	beq.w	8000746 <HAL_TIM_OC_DelayElapsedCallback+0x13e>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a0      	ldr	r0, [pc, #640]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4>)
 800062c:	f006 ff0a 	bl	8007444 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	499d      	ldr	r1, [pc, #628]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 800063c:	489d      	ldr	r0, [pc, #628]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 800063e:	f00a ff7f 	bl	800b540 <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4b99      	ldr	r3, [pc, #612]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x2a8>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4b98      	ldr	r3, [pc, #608]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b97      	ldr	r3, [pc, #604]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x2ac>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		DAC1->DHR12R1 = DAC_OUT[step];
 8000660:	4b95      	ldr	r3, [pc, #596]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4a95      	ldr	r2, [pc, #596]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x2b4>)
 8000668:	4b95      	ldr	r3, [pc, #596]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 800066a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800066e:	6093      	str	r3, [r2, #8]

        HAL_ADC_Stop_DMA(&hadc1);
 8000670:	4894      	ldr	r0, [pc, #592]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000672:	f002 fdf1 	bl	8003258 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 8000676:	2220      	movs	r2, #32
 8000678:	4993      	ldr	r1, [pc, #588]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800067a:	4892      	ldr	r0, [pc, #584]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800067c:	f002 fd28 	bl	80030d0 <HAL_ADC_Start_DMA>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_TIM_OC_DelayElapsedCallback+0x82>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 8000686:	f001 fb93 	bl	8001db0 <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 800068a:	4b8f      	ldr	r3, [pc, #572]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800068c:	8b5b      	ldrh	r3, [r3, #26]
 800068e:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 8000690:	4b8d      	ldr	r3, [pc, #564]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 8000692:	8b9b      	ldrh	r3, [r3, #28]
 8000694:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 8000696:	4b8c      	ldr	r3, [pc, #560]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 8000698:	8bdb      	ldrh	r3, [r3, #30]
 800069a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 800069c:	4b8a      	ldr	r3, [pc, #552]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80006a2:	22aa      	movs	r2, #170	; 0xaa
 80006a4:	4b89      	ldr	r3, [pc, #548]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006a6:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80006a8:	22aa      	movs	r2, #170	; 0xaa
 80006aa:	4b88      	ldr	r3, [pc, #544]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006ac:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80006ae:	4b88      	ldr	r3, [pc, #544]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b84      	ldr	r3, [pc, #528]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006ba:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80006bc:	4b84      	ldr	r3, [pc, #528]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b82      	ldr	r3, [pc, #520]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006c4:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b7f      	ldr	r3, [pc, #508]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006d0:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 80006d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b7d      	ldr	r3, [pc, #500]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006d8:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b7a      	ldr	r3, [pc, #488]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006e4:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 80006e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b78      	ldr	r3, [pc, #480]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006ec:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 80006ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 80006f8:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 80006fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b73      	ldr	r3, [pc, #460]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000700:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b70      	ldr	r3, [pc, #448]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800070c:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800070e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b6e      	ldr	r3, [pc, #440]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000714:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 8000716:	4a6d      	ldr	r2, [pc, #436]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000718:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800071c:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 800071e:	4a6b      	ldr	r2, [pc, #428]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000720:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000724:	7353      	strb	r3, [r2, #13]

		erpa_seq++;
 8000726:	4b6a      	ldr	r3, [pc, #424]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000730:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000732:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x2a0>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d005      	beq.n	8000746 <HAL_TIM_OC_DelayElapsedCallback+0x13e>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	220e      	movs	r2, #14
 800073e:	4963      	ldr	r1, [pc, #396]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 8000740:	4864      	ldr	r0, [pc, #400]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000742:	f00c fcc7 	bl	800d0d4 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 8000746:	4b64      	ldr	r3, [pc, #400]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f000 82b8 	beq.w	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>
      {
        if (hk_counter == HK_CADENCE)
 8000750:	4b62      	ldr	r3, [pc, #392]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2201      	movs	r2, #1
 8000756:	4293      	cmp	r3, r2
 8000758:	f040 824e 	bne.w	8000bf8 <HAL_TIM_OC_DelayElapsedCallback+0x5f0>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 800075c:	2300      	movs	r3, #0
 800075e:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	b299      	uxth	r1, r3
 8000764:	f107 020c 	add.w	r2, r7, #12
 8000768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2301      	movs	r3, #1
 8000770:	485b      	ldr	r0, [pc, #364]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000772:	f006 ff29 	bl	80075c8 <HAL_I2C_Master_Transmit>
 8000776:	4603      	mov	r3, r0
 8000778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          if (ret != HAL_OK)
 800077c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000780:	2b00      	cmp	r3, #0
 8000782:	d009      	beq.n	8000798 <HAL_TIM_OC_DelayElapsedCallback+0x190>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4a56      	ldr	r2, [pc, #344]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 800078a:	ca07      	ldmia	r2, {r0, r1, r2}
 800078c:	c303      	stmia	r3!, {r0, r1}
 800078e:	801a      	strh	r2, [r3, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	0c12      	lsrs	r2, r2, #16
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e024      	b.n	80007e2 <HAL_TIM_OC_DelayElapsedCallback+0x1da>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000798:	2390      	movs	r3, #144	; 0x90
 800079a:	b299      	uxth	r1, r3
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2302      	movs	r3, #2
 80007a8:	484d      	ldr	r0, [pc, #308]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 80007aa:	f007 f801 	bl	80077b0 <HAL_I2C_Master_Receive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 80007b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d009      	beq.n	80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4a49      	ldr	r2, [pc, #292]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80007c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c4:	c303      	stmia	r3!, {r0, r1}
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	3302      	adds	r3, #2
 80007ca:	0c12      	lsrs	r2, r2, #16
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e008      	b.n	80007e2 <HAL_TIM_OC_DelayElapsedCallback+0x1da>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007d0:	7b3b      	ldrb	r3, [r7, #12]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80007d6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80007da:	7b7a      	ldrb	r2, [r7, #13]
 80007dc:	4313      	orrs	r3, r2
 80007de:	10db      	asrs	r3, r3, #3
 80007e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007e2:	2300      	movs	r3, #0
 80007e4:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80007e6:	2394      	movs	r3, #148	; 0x94
 80007e8:	b299      	uxth	r1, r3
 80007ea:	f107 020c 	add.w	r2, r7, #12
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	483a      	ldr	r0, [pc, #232]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 80007f8:	f006 fee6 	bl	80075c8 <HAL_I2C_Master_Transmit>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000806:	2b00      	cmp	r3, #0
 8000808:	d009      	beq.n	800081e <HAL_TIM_OC_DelayElapsedCallback+0x216>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4a35      	ldr	r2, [pc, #212]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000810:	ca07      	ldmia	r2, {r0, r1, r2}
 8000812:	c303      	stmia	r3!, {r0, r1}
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	3302      	adds	r3, #2
 8000818:	0c12      	lsrs	r2, r2, #16
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e024      	b.n	8000868 <HAL_TIM_OC_DelayElapsedCallback+0x260>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800081e:	2394      	movs	r3, #148	; 0x94
 8000820:	b299      	uxth	r1, r3
 8000822:	f107 020c 	add.w	r2, r7, #12
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	482c      	ldr	r0, [pc, #176]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000830:	f006 ffbe 	bl	80077b0 <HAL_I2C_Master_Receive>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800083a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083e:	2b00      	cmp	r3, #0
 8000840:	d009      	beq.n	8000856 <HAL_TIM_OC_DelayElapsedCallback+0x24e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000848:	ca07      	ldmia	r2, {r0, r1, r2}
 800084a:	c303      	stmia	r3!, {r0, r1}
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	3302      	adds	r3, #2
 8000850:	0c12      	lsrs	r2, r2, #16
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e008      	b.n	8000868 <HAL_TIM_OC_DelayElapsedCallback+0x260>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000856:	7b3b      	ldrb	r3, [r7, #12]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 800085c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000860:	7b7a      	ldrb	r2, [r7, #13]
 8000862:	4313      	orrs	r3, r2
 8000864:	10db      	asrs	r3, r3, #3
 8000866:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000868:	2300      	movs	r3, #0
 800086a:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 800086c:	2392      	movs	r3, #146	; 0x92
 800086e:	b299      	uxth	r1, r3
 8000870:	f107 020c 	add.w	r2, r7, #12
 8000874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 800087e:	f006 fea3 	bl	80075c8 <HAL_I2C_Master_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02d      	beq.n	80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000896:	ca07      	ldmia	r2, {r0, r1, r2}
 8000898:	c303      	stmia	r3!, {r0, r1}
 800089a:	801a      	strh	r2, [r3, #0]
 800089c:	3302      	adds	r3, #2
 800089e:	0c12      	lsrs	r2, r2, #16
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e048      	b.n	8000936 <HAL_TIM_OC_DelayElapsedCallback+0x32e>
 80008a4:	240003d0 	.word	0x240003d0
 80008a8:	24000021 	.word	0x24000021
 80008ac:	58020400 	.word	0x58020400
 80008b0:	240005a8 	.word	0x240005a8
 80008b4:	240002fc 	.word	0x240002fc
 80008b8:	240005a0 	.word	0x240005a0
 80008bc:	40007400 	.word	0x40007400
 80008c0:	24000000 	.word	0x24000000
 80008c4:	2400005c 	.word	0x2400005c
 80008c8:	24000520 	.word	0x24000520
 80008cc:	240005ac 	.word	0x240005ac
 80008d0:	240005ba 	.word	0x240005ba
 80008d4:	2400041c 	.word	0x2400041c
 80008d8:	24000022 	.word	0x24000022
 80008dc:	240005ec 	.word	0x240005ec
 80008e0:	24000228 	.word	0x24000228
 80008e4:	0800eff8 	.word	0x0800eff8
 80008e8:	0800f004 	.word	0x0800f004
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80008ec:	2392      	movs	r3, #146	; 0x92
 80008ee:	b299      	uxth	r1, r3
 80008f0:	f107 020c 	add.w	r2, r7, #12
 80008f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	482b      	ldr	r0, [pc, #172]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80008fe:	f006 ff57 	bl	80077b0 <HAL_I2C_Master_Receive>
 8000902:	4603      	mov	r3, r0
 8000904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 8000908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800090c:	2b00      	cmp	r3, #0
 800090e:	d009      	beq.n	8000924 <HAL_TIM_OC_DelayElapsedCallback+0x31c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000916:	ca07      	ldmia	r2, {r0, r1, r2}
 8000918:	c303      	stmia	r3!, {r0, r1}
 800091a:	801a      	strh	r2, [r3, #0]
 800091c:	3302      	adds	r3, #2
 800091e:	0c12      	lsrs	r2, r2, #16
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e008      	b.n	8000936 <HAL_TIM_OC_DelayElapsedCallback+0x32e>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000924:	7b3b      	ldrb	r3, [r7, #12]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 800092a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800092e:	7b7a      	ldrb	r2, [r7, #13]
 8000930:	4313      	orrs	r3, r2
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000936:	2300      	movs	r3, #0
 8000938:	733b      	strb	r3, [r7, #12]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800093a:	2396      	movs	r3, #150	; 0x96
 800093c:	b299      	uxth	r1, r3
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800094c:	f006 fe3c 	bl	80075c8 <HAL_I2C_Master_Transmit>
 8000950:	4603      	mov	r3, r0
 8000952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000956:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800095a:	2b00      	cmp	r3, #0
 800095c:	d009      	beq.n	8000972 <HAL_TIM_OC_DelayElapsedCallback+0x36a>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000964:	ca07      	ldmia	r2, {r0, r1, r2}
 8000966:	c303      	stmia	r3!, {r0, r1}
 8000968:	801a      	strh	r2, [r3, #0]
 800096a:	3302      	adds	r3, #2
 800096c:	0c12      	lsrs	r2, r2, #16
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	e02b      	b.n	80009ca <HAL_TIM_OC_DelayElapsedCallback+0x3c2>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000972:	2396      	movs	r3, #150	; 0x96
 8000974:	b299      	uxth	r1, r3
 8000976:	f107 020c 	add.w	r2, r7, #12
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000984:	f006 ff14 	bl	80077b0 <HAL_I2C_Master_Receive>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                         1000);
            if (ret != HAL_OK)
 800098e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000992:	2b00      	cmp	r3, #0
 8000994:	d010      	beq.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800099c:	ca07      	ldmia	r2, {r0, r1, r2}
 800099e:	c303      	stmia	r3!, {r0, r1}
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	3302      	adds	r3, #2
 80009a4:	0c12      	lsrs	r2, r2, #16
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e00f      	b.n	80009ca <HAL_TIM_OC_DelayElapsedCallback+0x3c2>
 80009aa:	bf00      	nop
 80009ac:	24000228 	.word	0x24000228
 80009b0:	0800f004 	.word	0x0800f004
 80009b4:	0800eff8 	.word	0x0800eff8
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 80009be:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80009c2:	7b7a      	ldrb	r2, [r7, #13]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	10db      	asrs	r3, r3, #3
 80009c8:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Stop_DMA(&hadc3);
 80009ca:	488e      	ldr	r0, [pc, #568]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x5fc>)
 80009cc:	f002 fc44 	bl	8003258 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc3,
 80009d0:	2220      	movs	r2, #32
 80009d2:	498d      	ldr	r1, [pc, #564]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x600>)
 80009d4:	488b      	ldr	r0, [pc, #556]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x5fc>)
 80009d6:	f002 fb7b 	bl	80030d0 <HAL_ADC_Start_DMA>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>
          (uint32_t *)aADC3ConvertedData,
          ADC_CONVERTED_DATA_BUFFER_SIZE)
          != HAL_OK) {
             Error_Handler();
 80009e0:	f001 f9e6 	bl	8001db0 <Error_Handler>
          }

          uint16_t vrefint = aADC3ConvertedData[0];
 80009e4:	4b88      	ldr	r3, [pc, #544]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x600>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	853b      	strh	r3, [r7, #40]	; 0x28
          uint16_t vsense = aADC3ConvertedData[1];
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x600>)
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	84fb      	strh	r3, [r7, #38]	; 0x26


          HAL_ADC_Stop_DMA(&hadc1);
 80009f0:	4886      	ldr	r0, [pc, #536]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x604>)
 80009f2:	f002 fc31 	bl	8003258 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 80009f6:	2220      	movs	r2, #32
 80009f8:	4985      	ldr	r1, [pc, #532]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 80009fa:	4884      	ldr	r0, [pc, #528]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x604>)
 80009fc:	f002 fb68 	bl	80030d0 <HAL_ADC_Start_DMA>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_TIM_OC_DelayElapsedCallback+0x402>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 8000a06:	f001 f9d3 	bl	8001db0 <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 8000a0a:	4b81      	ldr	r3, [pc, #516]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000a10:	4b7f      	ldr	r3, [pc, #508]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a12:	885b      	ldrh	r3, [r3, #2]
 8000a14:	847b      	strh	r3, [r7, #34]	; 0x22
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000a16:	4b7e      	ldr	r3, [pc, #504]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a18:	891b      	ldrh	r3, [r3, #8]
 8000a1a:	843b      	strh	r3, [r7, #32]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 8000a1c:	4b7c      	ldr	r3, [pc, #496]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a1e:	895b      	ldrh	r3, [r3, #10]
 8000a20:	83fb      	strh	r3, [r7, #30]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 8000a22:	4b7b      	ldr	r3, [pc, #492]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	83bb      	strh	r3, [r7, #28]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 8000a28:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a2a:	89db      	ldrh	r3, [r3, #14]
 8000a2c:	837b      	strh	r3, [r7, #26]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 8000a2e:	4b78      	ldr	r3, [pc, #480]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a30:	8a1b      	ldrh	r3, [r3, #16]
 8000a32:	833b      	strh	r3, [r7, #24]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 8000a34:	4b76      	ldr	r3, [pc, #472]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a36:	8a5b      	ldrh	r3, [r3, #18]
 8000a38:	82fb      	strh	r3, [r7, #22]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 8000a3a:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a3c:	8a9b      	ldrh	r3, [r3, #20]
 8000a3e:	82bb      	strh	r3, [r7, #20]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000a40:	4b73      	ldr	r3, [pc, #460]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a42:	8adb      	ldrh	r3, [r3, #22]
 8000a44:	827b      	strh	r3, [r7, #18]
          uint16_t PA5 = aADCxConvertedData[12];		// n800vmon -- verified
 8000a46:	4b72      	ldr	r3, [pc, #456]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x608>)
 8000a48:	8b1b      	ldrh	r3, [r3, #24]
 8000a4a:	823b      	strh	r3, [r7, #16]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a4c:	22cc      	movs	r2, #204	; 0xcc
 8000a4e:	4b71      	ldr	r3, [pc, #452]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a50:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a52:	22cc      	movs	r2, #204	; 0xcc
 8000a54:	4b6f      	ldr	r3, [pc, #444]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a56:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a58:	4b6f      	ldr	r3, [pc, #444]	; (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x610>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b6c      	ldr	r3, [pc, #432]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a64:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a66:	4b6c      	ldr	r3, [pc, #432]	; (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x610>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a6e:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 8000a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a7a:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a82:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a8e:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 8000a90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000a96:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000a98:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000a9c:	121b      	asrs	r3, r3, #8
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000aa2:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000aa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000aaa:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000aac:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000ab0:	121b      	asrs	r3, r3, #8
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000ab6:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000ab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000abe:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000ac0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000ac4:	121b      	asrs	r3, r3, #8
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000aca:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000ad2:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000ad4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000ad8:	121b      	asrs	r3, r3, #8
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000ade:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000ae6:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000af2:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000afa:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b06:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b0e:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000b10:	8c3b      	ldrh	r3, [r7, #32]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b1a:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000b1c:	8c3b      	ldrh	r3, [r7, #32]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b22:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000b24:	8bfb      	ldrh	r3, [r7, #30]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b2e:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000b30:	8bfb      	ldrh	r3, [r7, #30]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b36:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000b38:	8bbb      	ldrh	r3, [r7, #28]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b42:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000b44:	8bbb      	ldrh	r3, [r7, #28]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b4a:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000b4c:	8b7b      	ldrh	r3, [r7, #26]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b56:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000b58:	8b7b      	ldrh	r3, [r7, #26]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b5e:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000b60:	8b3b      	ldrh	r3, [r7, #24]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b6a:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000b6c:	8b3b      	ldrh	r3, [r7, #24]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b72:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000b74:	8afb      	ldrh	r3, [r7, #22]
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b7e:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000b80:	8afb      	ldrh	r3, [r7, #22]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b86:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000b88:	8abb      	ldrh	r3, [r7, #20]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000b96:	8abb      	ldrh	r3, [r7, #20]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000ba0:	8a7b      	ldrh	r3, [r7, #18]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000baa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000bae:	8a7b      	ldrh	r3, [r7, #18]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000bb4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PA5 & 0xFF00) >> 8);
 8000bb8:	8a3b      	ldrh	r3, [r7, #16]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PA5 & 0xFF);
 8000bc6:	8a3b      	ldrh	r3, [r7, #16]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_TIM_OC_DelayElapsedCallback+0x614>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x5dc>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2226      	movs	r2, #38	; 0x26
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>)
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <HAL_TIM_OC_DelayElapsedCallback+0x618>)
 8000be0:	f00c fa78 	bl	800d0d4 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x610>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x610>)
 8000bf4:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000bf6:	e063      	b.n	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>
          hk_counter++;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	e05d      	b.n	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>
 8000c04:	240000c0 	.word	0x240000c0
 8000c08:	24000560 	.word	0x24000560
 8000c0c:	2400005c 	.word	0x2400005c
 8000c10:	24000520 	.word	0x24000520
 8000c14:	240005c4 	.word	0x240005c4
 8000c18:	240005ea 	.word	0x240005ea
 8000c1c:	24000022 	.word	0x24000022
 8000c20:	2400041c 	.word	0x2400041c
 8000c24:	240005ec 	.word	0x240005ec
  else if (htim == &htim1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d147      	bne.n	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>
      if (PMT_ON)
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d043      	beq.n	8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x6b8>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c38:	bf00      	nop
 8000c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3e:	4824      	ldr	r0, [pc, #144]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000c40:	f006 fc00 	bl	8007444 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f7      	bne.n	8000c3a <HAL_TIM_OC_DelayElapsedCallback+0x632>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4921      	ldr	r1, [pc, #132]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000c50:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 8000c52:	f00a fc75 	bl	800b540 <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c72:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000c74:	22bb      	movs	r2, #187	; 0xbb
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c78:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000c7a:	22bb      	movs	r2, #187	; 0xbb
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c7e:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c8c:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c96:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000c9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c9e:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000cb2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	4908      	ldr	r1, [pc, #32]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000cbc:	f00c fa0a 	bl	800d0d4 <HAL_UART_Transmit>
}
 8000cc0:	bf00      	nop
 8000cc2:	3740      	adds	r7, #64	; 0x40
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24000384 	.word	0x24000384
 8000ccc:	24000020 	.word	0x24000020
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	240005a4 	.word	0x240005a4
 8000cd8:	24000274 	.word	0x24000274
 8000cdc:	240005bc 	.word	0x240005bc
 8000ce0:	240005c2 	.word	0x240005c2
 8000ce4:	2400041c 	.word	0x2400041c

08000ce8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	498e      	ldr	r1, [pc, #568]	; (8000f2c <HAL_UART_RxCpltCallback+0x244>)
 8000cf4:	488e      	ldr	r0, [pc, #568]	; (8000f30 <HAL_UART_RxCpltCallback+0x248>)
 8000cf6:	f00c fa83 	bl	800d200 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000cfa:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_UART_RxCpltCallback+0x244>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b1c      	cmp	r3, #28
 8000d04:	f200 810d 	bhi.w	8000f22 <HAL_UART_RxCpltCallback+0x23a>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <HAL_UART_RxCpltCallback+0x28>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000ded 	.word	0x08000ded
 8000d14:	08000e09 	.word	0x08000e09
 8000d18:	08000e25 	.word	0x08000e25
 8000d1c:	08000e45 	.word	0x08000e45
 8000d20:	08000e65 	.word	0x08000e65
 8000d24:	08000e81 	.word	0x08000e81
 8000d28:	08000ea1 	.word	0x08000ea1
 8000d2c:	08000ec1 	.word	0x08000ec1
 8000d30:	08000da1 	.word	0x08000da1
 8000d34:	08000daf 	.word	0x08000daf
 8000d38:	08000d93 	.word	0x08000d93
 8000d3c:	08000d85 	.word	0x08000d85
 8000d40:	08000edd 	.word	0x08000edd
 8000d44:	08000eed 	.word	0x08000eed
 8000d48:	08000efd 	.word	0x08000efd
 8000d4c:	08000f0d 	.word	0x08000f0d
 8000d50:	08000ef5 	.word	0x08000ef5
 8000d54:	08000f05 	.word	0x08000f05
 8000d58:	08000f15 	.word	0x08000f15
 8000d5c:	08000dfb 	.word	0x08000dfb
 8000d60:	08000e17 	.word	0x08000e17
 8000d64:	08000e35 	.word	0x08000e35
 8000d68:	08000e55 	.word	0x08000e55
 8000d6c:	08000e73 	.word	0x08000e73
 8000d70:	08000e91 	.word	0x08000e91
 8000d74:	08000eb1 	.word	0x08000eb1
 8000d78:	08000ecf 	.word	0x08000ecf
 8000d7c:	08000dbd 	.word	0x08000dbd
 8000d80:	08000dd5 	.word	0x08000dd5
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d84:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <HAL_UART_RxCpltCallback+0x24c>)
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f006 fb72 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000d90:	e0c7      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d92:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <HAL_UART_RxCpltCallback+0x24c>)
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	2200      	movs	r2, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fb6b 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000d9e:	e0c0      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000da0:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <HAL_UART_RxCpltCallback+0x24c>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	2201      	movs	r2, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f006 fb64 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000dac:	e0b9      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000dae:	4b61      	ldr	r3, [pc, #388]	; (8000f34 <HAL_UART_RxCpltCallback+0x24c>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	2200      	movs	r2, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fb5d 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000dba:	e0b2      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000dbc:	4b5e      	ldr	r3, [pc, #376]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	f200 80ab 	bhi.w	8000f1c <HAL_UART_RxCpltCallback+0x234>
    {
      step++;
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000dd0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000dd2:	e0a3      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x1C:
  {
    if (step > 0)
 8000dd4:	4b58      	ldr	r3, [pc, #352]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a1 	beq.w	8000f20 <HAL_UART_RxCpltCallback+0x238>
    {
      step--;
 8000dde:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <HAL_UART_RxCpltCallback+0x250>)
 8000de8:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000dea:	e099      	b.n	8000f20 <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000dec:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <HAL_UART_RxCpltCallback+0x254>)
 8000dee:	2120      	movs	r1, #32
 8000df0:	2201      	movs	r2, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 fb3e 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000df8:	e093      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <HAL_UART_RxCpltCallback+0x254>)
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fb37 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e06:	e08c      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e08:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_UART_RxCpltCallback+0x254>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fb30 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e14:	e085      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_UART_RxCpltCallback+0x254>)
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f006 fb29 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e22:	e07e      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 fb21 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e32:	e076      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fb19 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e42:	e06e      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 fb11 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e52:	e066      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fb09 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e62:	e05e      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fb02 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e70:	e057      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	2200      	movs	r2, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fafb 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e7e:	e050      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e80:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e86:	2201      	movs	r2, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 faf3 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e8e:	e048      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e90:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	2200      	movs	r2, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 faeb 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000e9e:	e040      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fae3 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000eae:	e038      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 fadb 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000ebe:	e030      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 fad4 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000ecc:	e029      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_UART_RxCpltCallback+0x258>)
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 facd 	bl	8007474 <HAL_GPIO_WritePin>
    break;
 8000eda:	e022      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000edc:	f001 fd02 	bl	80028e4 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f007 f86a 	bl	8007fbc <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000ee8:	f7ff fb78 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_RxCpltCallback+0x25c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
    break;
 8000ef2:	e016      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_UART_RxCpltCallback+0x25c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    break;
 8000efa:	e012      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_UART_RxCpltCallback+0x260>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
    break;
 8000f02:	e00e      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_UART_RxCpltCallback+0x260>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    break;
 8000f0a:	e00a      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_UART_RxCpltCallback+0x264>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
    break;
 8000f12:	e006      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_UART_RxCpltCallback+0x264>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    break;
 8000f1a:	e002      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000f1c:	bf00      	nop
 8000f1e:	e000      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000f20:	bf00      	nop
  }
  }
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240004ac 	.word	0x240004ac
 8000f30:	2400041c 	.word	0x2400041c
 8000f34:	58021400 	.word	0x58021400
 8000f38:	240005a0 	.word	0x240005a0
 8000f3c:	58020400 	.word	0x58020400
 8000f40:	58020800 	.word	0x58020800
 8000f44:	24000020 	.word	0x24000020
 8000f48:	24000021 	.word	0x24000021
 8000f4c:	24000022 	.word	0x24000022

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f001 fc10 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f884 	bl	8001064 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f5c:	f000 f908 	bl	8001170 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 fd8e 	bl	8001a80 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f64:	f000 fb0c 	bl	8001580 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f68:	f000 fc2c 	bl	80017c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f6c:	f000 fcba 	bl	80018e4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f70:	f000 fb38 	bl	80015e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f74:	f000 fb76 	bl	8001664 <MX_SPI1_Init>
  MX_DMA_Init();
 8000f78:	f000 fd5a 	bl	8001a30 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f7c:	f000 f926 	bl	80011cc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f80:	f000 fd0a 	bl	8001998 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000f84:	f000 fa88 	bl	8001498 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000f88:	f000 fbc4 	bl	8001714 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	482d      	ldr	r0, [pc, #180]	; (8001044 <main+0xf4>)
 8000f90:	f003 fb2f 	bl	80045f2 <HAL_DAC_Start>

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000f94:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f9c:	482a      	ldr	r0, [pc, #168]	; (8001048 <main+0xf8>)
 8000f9e:	f003 f8b5 	bl	800410c <HAL_ADCEx_Calibration_Start>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <main+0x5c>
  {
    /* Calibration Error */
    Error_Handler();
 8000fa8:	f000 ff02 	bl	8001db0 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000fac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fb4:	4825      	ldr	r0, [pc, #148]	; (800104c <main+0xfc>)
 8000fb6:	f003 f8a9 	bl	800410c <HAL_ADCEx_Calibration_Start>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <main+0x74>
  {
	/* Calibration Error */
	Error_Handler();
 8000fc0:	f000 fef6 	bl	8001db0 <Error_Handler>
  }

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <main+0x100>)
 8000fc8:	f00a ff68 	bl	800be9c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fcc:	210c      	movs	r1, #12
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <main+0x104>)
 8000fd0:	f00a ff64 	bl	800be9c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000fd4:	bf00      	nop
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <main+0x108>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d0f7      	beq.n	8000fd6 <main+0x86>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000fe6:	bf00      	nop
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <main+0x108>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ff6:	d1f7      	bne.n	8000fe8 <main+0x98>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <main+0x10c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <main+0x10c>)
 8001000:	2210      	movs	r2, #16
 8001002:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <main+0x10c>)
 8001006:	225b      	movs	r2, #91	; 0x5b
 8001008:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <main+0x10c>)
 800100c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <main+0x108>)
 8001012:	f00d fe05 	bl	800ec20 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <main+0xd0>
      Error_Handler();
 800101c:	f000 fec8 	bl	8001db0 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <main+0x108>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <main+0x108>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800102e:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <main+0x108>)
 8001032:	f00d fe50 	bl	800ecd6 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	4909      	ldr	r1, [pc, #36]	; (8001060 <main+0x110>)
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <main+0x108>)
 800103c:	f00c f8e0 	bl	800d200 <HAL_UART_Receive_IT>
 8001040:	e7f9      	b.n	8001036 <main+0xe6>
 8001042:	bf00      	nop
 8001044:	24000214 	.word	0x24000214
 8001048:	2400005c 	.word	0x2400005c
 800104c:	240000c0 	.word	0x240000c0
 8001050:	24000384 	.word	0x24000384
 8001054:	240003d0 	.word	0x240003d0
 8001058:	2400041c 	.word	0x2400041c
 800105c:	24000510 	.word	0x24000510
 8001060:	240004ac 	.word	0x240004ac

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09c      	sub	sp, #112	; 0x70
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	224c      	movs	r2, #76	; 0x4c
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00d ffac 	bl	800efd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2220      	movs	r2, #32
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00d ffa6 	bl	800efd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001084:	2002      	movs	r0, #2
 8001086:	f006 ffd5 	bl	8008034 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <SystemClock_Config+0x100>)
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <SystemClock_Config+0x100>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	62d3      	str	r3, [r2, #44]	; 0x2c
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemClock_Config+0x100>)
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <SystemClock_Config+0x104>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <SystemClock_Config+0x104>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <SystemClock_Config+0x104>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010c0:	bf00      	nop
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <SystemClock_Config+0x104>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ce:	d1f8      	bne.n	80010c2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemClock_Config+0x108>)
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	4a25      	ldr	r2, [pc, #148]	; (800116c <SystemClock_Config+0x108>)
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010f4:	230c      	movs	r3, #12
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001104:	230c      	movs	r3, #12
 8001106:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001108:	2300      	movs	r3, #0
 800110a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4618      	mov	r0, r3
 8001116:	f006 ffc7 	bl	80080a8 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001120:	f000 fe46 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	233f      	movs	r3, #63	; 0x3f
 8001126:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800112c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f007 fbda 	bl	8008904 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001156:	f000 fe2b 	bl	8001db0 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3770      	adds	r7, #112	; 0x70
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58000400 	.word	0x58000400
 8001168:	58024800 	.word	0x58024800
 800116c:	58024400 	.word	0x58024400

08001170 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0b0      	sub	sp, #192	; 0xc0
 8001174:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	22bc      	movs	r2, #188	; 0xbc
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00d ff27 	bl	800efd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001182:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001186:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800118c:	2309      	movs	r3, #9
 800118e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011a0:	2320      	movs	r3, #32
 80011a2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 ff32 	bl	800901c <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80011be:	f000 fdf7 	bl	8001db0 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	37c0      	adds	r7, #192	; 0xc0
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f0:	4b98      	ldr	r3, [pc, #608]	; (8001454 <MX_ADC1_Init+0x288>)
 80011f2:	4a99      	ldr	r2, [pc, #612]	; (8001458 <MX_ADC1_Init+0x28c>)
 80011f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011f6:	4b97      	ldr	r3, [pc, #604]	; (8001454 <MX_ADC1_Init+0x288>)
 80011f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fe:	4b95      	ldr	r3, [pc, #596]	; (8001454 <MX_ADC1_Init+0x288>)
 8001200:	2208      	movs	r2, #8
 8001202:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001204:	4b93      	ldr	r3, [pc, #588]	; (8001454 <MX_ADC1_Init+0x288>)
 8001206:	2201      	movs	r2, #1
 8001208:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120a:	4b92      	ldr	r3, [pc, #584]	; (8001454 <MX_ADC1_Init+0x288>)
 800120c:	2204      	movs	r2, #4
 800120e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001210:	4b90      	ldr	r3, [pc, #576]	; (8001454 <MX_ADC1_Init+0x288>)
 8001212:	2200      	movs	r2, #0
 8001214:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <MX_ADC1_Init+0x288>)
 8001218:	2201      	movs	r2, #1
 800121a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 15;
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <MX_ADC1_Init+0x288>)
 800121e:	220f      	movs	r2, #15
 8001220:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <MX_ADC1_Init+0x288>)
 8001224:	2200      	movs	r2, #0
 8001226:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b8a      	ldr	r3, [pc, #552]	; (8001454 <MX_ADC1_Init+0x288>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <MX_ADC1_Init+0x288>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001234:	4b87      	ldr	r3, [pc, #540]	; (8001454 <MX_ADC1_Init+0x288>)
 8001236:	2203      	movs	r2, #3
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <MX_ADC1_Init+0x288>)
 800123c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001242:	4b84      	ldr	r3, [pc, #528]	; (8001454 <MX_ADC1_Init+0x288>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001248:	4b82      	ldr	r3, [pc, #520]	; (8001454 <MX_ADC1_Init+0x288>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001250:	4880      	ldr	r0, [pc, #512]	; (8001454 <MX_ADC1_Init+0x288>)
 8001252:	f001 fd9b 	bl	8002d8c <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800125c:	f000 fda8 	bl	8001db0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	487a      	ldr	r0, [pc, #488]	; (8001454 <MX_ADC1_Init+0x288>)
 800126c:	f002 ffb2 	bl	80041d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001276:	f000 fd9b 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <MX_ADC1_Init+0x290>)
 800127c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127e:	2306      	movs	r3, #6
 8001280:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001282:	2307      	movs	r3, #7
 8001284:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001286:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800128a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800128c:	2304      	movs	r3, #4
 800128e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	486d      	ldr	r0, [pc, #436]	; (8001454 <MX_ADC1_Init+0x288>)
 800129e:	f002 f847 	bl	8003330 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012a8:	f000 fd82 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ac:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <MX_ADC1_Init+0x294>)
 80012ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b0:	230c      	movs	r3, #12
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4866      	ldr	r0, [pc, #408]	; (8001454 <MX_ADC1_Init+0x288>)
 80012ba:	f002 f839 	bl	8003330 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80012c4:	f000 fd74 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <MX_ADC1_Init+0x298>)
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012cc:	2312      	movs	r3, #18
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	485f      	ldr	r0, [pc, #380]	; (8001454 <MX_ADC1_Init+0x288>)
 80012d6:	f002 f82b 	bl	8003330 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012e0:	f000 fd66 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <MX_ADC1_Init+0x29c>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012e8:	2318      	movs	r3, #24
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4858      	ldr	r0, [pc, #352]	; (8001454 <MX_ADC1_Init+0x288>)
 80012f2:	f002 f81d 	bl	8003330 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012fc:	f000 fd58 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001300:	4b5a      	ldr	r3, [pc, #360]	; (800146c <MX_ADC1_Init+0x2a0>)
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4851      	ldr	r0, [pc, #324]	; (8001454 <MX_ADC1_Init+0x288>)
 8001310:	f002 f80e 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800131a:	f000 fd49 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <MX_ADC1_Init+0x2a4>)
 8001320:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001322:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4849      	ldr	r0, [pc, #292]	; (8001454 <MX_ADC1_Init+0x288>)
 800132e:	f001 ffff 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001338:	f000 fd3a 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800133c:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <MX_ADC1_Init+0x2a8>)
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001340:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	4842      	ldr	r0, [pc, #264]	; (8001454 <MX_ADC1_Init+0x288>)
 800134c:	f001 fff0 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001356:	f000 fd2b 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <MX_ADC1_Init+0x2ac>)
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800135e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <MX_ADC1_Init+0x288>)
 800136a:	f001 ffe1 	bl	8003330 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001374:	f000 fd1c 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <MX_ADC1_Init+0x2b0>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800137c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4833      	ldr	r0, [pc, #204]	; (8001454 <MX_ADC1_Init+0x288>)
 8001388:	f001 ffd2 	bl	8003330 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001392:	f000 fd0d 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <MX_ADC1_Init+0x2b4>)
 8001398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <MX_ADC1_Init+0x288>)
 80013a6:	f001 ffc3 	bl	8003330 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80013b0:	f000 fcfe 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_ADC1_Init+0x2b8>)
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013b8:	f240 2306 	movw	r3, #518	; 0x206
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <MX_ADC1_Init+0x288>)
 80013c4:	f001 ffb4 	bl	8003330 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013ce:	f000 fcef 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_ADC1_Init+0x2bc>)
 80013d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80013d6:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_ADC1_Init+0x288>)
 80013e2:	f001 ffa5 	bl	8003330 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 80013ec:	f000 fce0 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <MX_ADC1_Init+0x2c0>)
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80013f4:	f240 2312 	movw	r3, #530	; 0x212
 80013f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_ADC1_Init+0x288>)
 8001400:	f001 ff96 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 800140a:	f000 fcd1 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_ADC1_Init+0x2c4>)
 8001410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001412:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC1_Init+0x288>)
 800141e:	f001 ff87 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8001428:	f000 fcc2 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC1_Init+0x2c8>)
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001430:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001434:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0x288>)
 800143c:	f001 ff78 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x27e>
  {
    Error_Handler();
 8001446:	f000 fcb3 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2400005c 	.word	0x2400005c
 8001458:	40022000 	.word	0x40022000
 800145c:	08600004 	.word	0x08600004
 8001460:	0c900008 	.word	0x0c900008
 8001464:	10c00010 	.word	0x10c00010
 8001468:	14f00020 	.word	0x14f00020
 800146c:	19200040 	.word	0x19200040
 8001470:	1d500080 	.word	0x1d500080
 8001474:	21800100 	.word	0x21800100
 8001478:	25b00200 	.word	0x25b00200
 800147c:	2a000400 	.word	0x2a000400
 8001480:	2e300800 	.word	0x2e300800
 8001484:	3ac04000 	.word	0x3ac04000
 8001488:	3ef08000 	.word	0x3ef08000
 800148c:	43210000 	.word	0x43210000
 8001490:	47520000 	.word	0x47520000
 8001494:	4fb80000 	.word	0x4fb80000

08001498 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014b2:	4a30      	ldr	r2, [pc, #192]	; (8001574 <MX_ADC3_Init+0xdc>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014b8:	2208      	movs	r2, #8
 80014ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014be:	2201      	movs	r2, #1
 80014c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014d6:	2202      	movs	r2, #2
 80014d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC3_Init+0xd8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_ADC3_Init+0xd8>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001508:	4819      	ldr	r0, [pc, #100]	; (8001570 <MX_ADC3_Init+0xd8>)
 800150a:	f001 fc3f 	bl	8002d8c <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001514:	f000 fc4c 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_ADC3_Init+0xe0>)
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151c:	2306      	movs	r3, #6
 800151e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001520:	2307      	movs	r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001524:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001528:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_ADC3_Init+0xd8>)
 800153c:	f001 fef8 	bl	8003330 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001546:	f000 fc33 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_ADC3_Init+0xe4>)
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800154e:	230c      	movs	r3, #12
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_ADC3_Init+0xd8>)
 8001558:	f001 feea 	bl	8003330 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001562:	f000 fc25 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240000c0 	.word	0x240000c0
 8001574:	58026000 	.word	0x58026000
 8001578:	cfb80000 	.word	0xcfb80000
 800157c:	cb840000 	.word	0xcb840000

08001580 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2224      	movs	r2, #36	; 0x24
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00d fd1f 	bl	800efd0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_DAC1_Init+0x5c>)
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_DAC1_Init+0x60>)
 8001596:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <MX_DAC1_Init+0x5c>)
 800159a:	f003 f808 	bl	80045ae <HAL_DAC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015a4:	f000 fc04 	bl	8001db0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_DAC1_Init+0x5c>)
 80015c4:	f003 f868 	bl	8004698 <HAL_DAC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 fbef 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000214 	.word	0x24000214
 80015e0:	40007400 	.word	0x40007400

080015e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_I2C1_Init+0x74>)
 8001620:	f005 ff42 	bl	80074a8 <HAL_I2C_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800162a:	f000 fbc1 	bl	8001db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <MX_I2C1_Init+0x74>)
 8001632:	f006 fc2b 	bl	8007e8c <HAL_I2CEx_ConfigAnalogFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800163c:	f000 fbb8 	bl	8001db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_I2C1_Init+0x74>)
 8001644:	f006 fc6d 	bl	8007f22 <HAL_I2CEx_ConfigDigitalFilter>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 fbaf 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24000228 	.word	0x24000228
 800165c:	40005400 	.word	0x40005400
 8001660:	20303e5d 	.word	0x20303e5d

08001664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_SPI1_Init+0xa8>)
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <MX_SPI1_Init+0xac>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <MX_SPI1_Init+0xa8>)
 8001670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_SPI1_Init+0xa8>)
 8001678:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800167c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_SPI1_Init+0xa8>)
 8001680:	220f      	movs	r2, #15
 8001682:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_SPI1_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_SPI1_Init+0xa8>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_SPI1_Init+0xa8>)
 8001692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001696:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_SPI1_Init+0xa8>)
 800169a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800169e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_SPI1_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_SPI1_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_SPI1_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_SPI1_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI1_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_SPI1_Init+0xa8>)
 80016f8:	f009 fe1c 	bl	800b334 <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001702:	f000 fb55 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	24000274 	.word	0x24000274
 8001710:	40013000 	.word	0x40013000

08001714 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <MX_SPI2_Init+0xa8>)
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <MX_SPI2_Init+0xac>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001720:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001724:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800172c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001730:	220f      	movs	r2, #15
 8001732:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_SPI2_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001742:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001746:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_SPI2_Init+0xa8>)
 800174a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800174e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI2_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI2_Init+0xa8>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_SPI2_Init+0xa8>)
 80017a8:	f009 fdc4 	bl	800b334 <HAL_SPI_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017b2:	f000 fafd 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	240002fc 	.word	0x240002fc
 80017c0:	40003800 	.word	0x40003800

080017c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b096      	sub	sp, #88	; 0x58
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	222c      	movs	r2, #44	; 0x2c
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fbed 	bl	800efd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <MX_TIM1_Init+0x118>)
 80017f8:	4a39      	ldr	r2, [pc, #228]	; (80018e0 <MX_TIM1_Init+0x11c>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <MX_TIM1_Init+0x118>)
 80017fe:	2263      	movs	r2, #99	; 0x63
 8001800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <MX_TIM1_Init+0x118>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <MX_TIM1_Init+0x118>)
 800180a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800180e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <MX_TIM1_Init+0x118>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <MX_TIM1_Init+0x118>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <MX_TIM1_Init+0x118>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <MX_TIM1_Init+0x118>)
 8001824:	f00a fc94 	bl	800c150 <HAL_TIM_PWM_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800182e:	f000 fabf 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001842:	4619      	mov	r1, r3
 8001844:	4825      	ldr	r0, [pc, #148]	; (80018dc <MX_TIM1_Init+0x118>)
 8001846:	f00b facb 	bl	800cde0 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001850:	f000 faae 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001854:	2360      	movs	r3, #96	; 0x60
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001858:	f240 13df 	movw	r3, #479	; 0x1df
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	4818      	ldr	r0, [pc, #96]	; (80018dc <MX_TIM1_Init+0x118>)
 800187c:	f00a fdde 	bl	800c43c <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001886:	f000 fa93 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM1_Init+0x118>)
 80018c0:	f00b fb1c 	bl	800cefc <HAL_TIMEx_ConfigBreakDeadTime>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80018ca:	f000 fa71 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM1_Init+0x118>)
 80018d0:	f000 fd66 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80018d4:	bf00      	nop
 80018d6:	3758      	adds	r7, #88	; 0x58
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	24000384 	.word	0x24000384
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_TIM2_Init+0xb0>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001912:	2263      	movs	r2, #99	; 0x63
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM2_Init+0xb0>)
 800191e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM2_Init+0xb0>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001932:	f00a fc0d 	bl	800c150 <HAL_TIM_PWM_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800193c:	f000 fa38 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001950:	f00b fa46 	bl	800cde0 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800195a:	f000 fa29 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	2360      	movs	r3, #96	; 0x60
 8001960:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 8001962:	f240 13df 	movw	r3, #479	; 0x1df
 8001966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	220c      	movs	r2, #12
 8001974:	4619      	mov	r1, r3
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001978:	f00a fd60 	bl	800c43c <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001982:	f000 fa15 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001986:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_TIM2_Init+0xb0>)
 8001988:	f000 fd0a 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	240003d0 	.word	0x240003d0

08001998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 800199e:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <MX_USART1_UART_Init+0x94>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019a4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019e2:	f00b fb27 	bl	800d034 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019ec:	f000 f9e0 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019f4:	f00d f9db 	bl	800edae <HAL_UARTEx_SetTxFifoThreshold>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019fe:	f000 f9d7 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 8001a06:	f00d fa10 	bl	800ee2a <HAL_UARTEx_SetRxFifoThreshold>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a10:	f000 f9ce 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 8001a16:	f00d f991 	bl	800ed3c <HAL_UARTEx_DisableFifoMode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f9c6 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2400041c 	.word	0x2400041c
 8001a2c:	40011000 	.word	0x40011000

08001a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_DMA_Init+0x4c>)
 8001a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <MX_DMA_Init+0x4c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <MX_DMA_Init+0x4c>)
 8001a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	200b      	movs	r0, #11
 8001a5a:	f002 fd74 	bl	8004546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a5e:	200b      	movs	r0, #11
 8001a60:	f002 fd8b 	bl	800457a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	200c      	movs	r0, #12
 8001a6a:	f002 fd6c 	bl	8004546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a6e:	200c      	movs	r0, #12
 8001a70:	f002 fd83 	bl	800457a <HAL_NVIC_EnableIRQ>

}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_GPIO_Init+0x168>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	21c0      	movs	r1, #192	; 0xc0
 8001b4e:	4827      	ldr	r0, [pc, #156]	; (8001bec <MX_GPIO_Init+0x16c>)
 8001b50:	f005 fc90 	bl	8007474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <MX_GPIO_Init+0x170>)
 8001b5c:	f005 fc8a 	bl	8007474 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2160      	movs	r1, #96	; 0x60
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0x174>)
 8001b66:	f005 fc85 	bl	8007474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481a      	ldr	r0, [pc, #104]	; (8001bec <MX_GPIO_Init+0x16c>)
 8001b82:	f005 faaf 	bl	80070e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001b86:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <MX_GPIO_Init+0x170>)
 8001ba0:	f005 faa0 	bl	80070e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ba4:	2360      	movs	r3, #96	; 0x60
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <MX_GPIO_Init+0x178>)
 8001bc0:	f005 fa90 	bl	80070e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x174>)
 8001bdc:	f005 fa82 	bl	80070e4 <HAL_GPIO_Init>

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58021400 	.word	0x58021400
 8001bf0:	58020800 	.word	0x58020800
 8001bf4:	58020400 	.word	0x58020400
 8001bf8:	58020c00 	.word	0x58020c00

08001bfc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d129      	bne.n	8001c60 <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	2320      	movs	r3, #32
 8001c12:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dd1d      	ble.n	8001c56 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	4413      	add	r3, r2
 8001c24:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c2a:	f3bf 8f4f 	dsb	sy
}
 8001c2e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	3320      	adds	r3, #32
 8001c3c:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b20      	subs	r3, #32
 8001c42:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	dcf2      	bgt.n	8001c30 <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4a:	f3bf 8f4f 	dsb	sy
}
 8001c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c50:	f3bf 8f6f 	isb	sy
}
 8001c54:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001c56:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001c58:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001c5a:	f001 fafd 	bl	8003258 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001c5e:	e02c      	b.n	8001cba <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d128      	bne.n	8001cba <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	dd1d      	ble.n	8001cb2 <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c86:	f3bf 8f4f 	dsb	sy
}
 8001c8a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3320      	adds	r3, #32
 8001c98:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b20      	subs	r3, #32
 8001c9e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dcf2      	bgt.n	8001c8c <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ca6:	f3bf 8f4f 	dsb	sy
}
 8001caa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cac:	f3bf 8f6f 	isb	sy
}
 8001cb0:	bf00      	nop
}
 8001cb2:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001cb6:	f001 facf 	bl	8003258 <HAL_ADC_Stop_DMA>
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2400005c 	.word	0x2400005c
 8001cc8:	24000520 	.word	0x24000520
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	240000c0 	.word	0x240000c0

08001cd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d129      	bne.n	8001d38 <HAL_ADC_ConvCpltCallback+0x64>
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	2320      	movs	r3, #32
 8001cea:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dd1d      	ble.n	8001d2e <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d02:	f3bf 8f4f 	dsb	sy
}
 8001d06:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d08:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3320      	adds	r3, #32
 8001d14:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b20      	subs	r3, #32
 8001d1a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dcf2      	bgt.n	8001d08 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d22:	f3bf 8f4f 	dsb	sy
}
 8001d26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d28:	f3bf 8f6f 	isb	sy
}
 8001d2c:	bf00      	nop
}
 8001d2e:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d30:	481a      	ldr	r0, [pc, #104]	; (8001d9c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d32:	f001 fa91 	bl	8003258 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001d36:	e02c      	b.n	8001d92 <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d128      	bne.n	8001d92 <HAL_ADC_ConvCpltCallback+0xbe>
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_ADC_ConvCpltCallback+0xd8>)
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	2320      	movs	r3, #32
 8001d46:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dd1d      	ble.n	8001d8a <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5e:	f3bf 8f4f 	dsb	sy
}
 8001d62:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3320      	adds	r3, #32
 8001d70:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3b20      	subs	r3, #32
 8001d76:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dcf2      	bgt.n	8001d64 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7e:	f3bf 8f4f 	dsb	sy
}
 8001d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d84:	f3bf 8f6f 	isb	sy
}
 8001d88:	bf00      	nop
}
 8001d8a:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d8e:	f001 fa63 	bl	8003258 <HAL_ADC_Stop_DMA>
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2400005c 	.word	0x2400005c
 8001da0:	24000540 	.word	0x24000540
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	240000c0 	.word	0x240000c0
 8001dac:	24000580 	.word	0x24000580

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_MspInit+0x30>)
 8001dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc8:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_MspInit+0x30>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_MspInit+0x30>)
 8001dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	58024400 	.word	0x58024400

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_ADC_MspInit+0x210>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	f040 80ad 	bne.w	8001f6e <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e14:	4b7b      	ldr	r3, [pc, #492]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e24:	4b77      	ldr	r3, [pc, #476]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b74      	ldr	r3, [pc, #464]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	4a72      	ldr	r2, [pc, #456]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	4a6b      	ldr	r2, [pc, #428]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	4a63      	ldr	r2, [pc, #396]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7e:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a5c      	ldr	r2, [pc, #368]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001eaa:	2333      	movs	r3, #51	; 0x33
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4852      	ldr	r0, [pc, #328]	; (8002008 <HAL_ADC_MspInit+0x218>)
 8001ebe:	f005 f911 	bl	80070e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ec2:	23ef      	movs	r3, #239	; 0xef
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	484d      	ldr	r0, [pc, #308]	; (800200c <HAL_ADC_MspInit+0x21c>)
 8001ed6:	f005 f905 	bl	80070e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eda:	2303      	movs	r3, #3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4848      	ldr	r0, [pc, #288]	; (8002010 <HAL_ADC_MspInit+0x220>)
 8001eee:	f005 f8f9 	bl	80070e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4843      	ldr	r0, [pc, #268]	; (8002014 <HAL_ADC_MspInit+0x224>)
 8001f08:	f005 f8ec 	bl	80070e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f0e:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_ADC_MspInit+0x22c>)
 8001f10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f14:	2209      	movs	r2, #9
 8001f16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f24:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f34:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f50:	4831      	ldr	r0, [pc, #196]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f52:	f002 fcd1 	bl	80048f8 <HAL_DMA_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001f5c:	f7ff ff28 	bl	8001db0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f64:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <HAL_ADC_MspInit+0x228>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f6c:	e043      	b.n	8001ff6 <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC3)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <HAL_ADC_MspInit+0x230>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d13e      	bne.n	8001ff6 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_ADC_MspInit+0x214>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    hdma_adc3.Instance = DMA1_Stream1;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_ADC_MspInit+0x238>)
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001f9e:	2273      	movs	r2, #115	; 0x73
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fbc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fda:	4812      	ldr	r0, [pc, #72]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fdc:	f002 fc8c 	bl	80048f8 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8001fe6:	f7ff fee3 	bl	8001db0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001fee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <HAL_ADC_MspInit+0x234>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ff6:	bf00      	nop
 8001ff8:	3738      	adds	r7, #56	; 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000
 8002004:	58024400 	.word	0x58024400
 8002008:	58020800 	.word	0x58020800
 800200c:	58020000 	.word	0x58020000
 8002010:	58020400 	.word	0x58020400
 8002014:	58021400 	.word	0x58021400
 8002018:	24000124 	.word	0x24000124
 800201c:	40020010 	.word	0x40020010
 8002020:	58026000 	.word	0x58026000
 8002024:	2400019c 	.word	0x2400019c
 8002028:	40020028 	.word	0x40020028

0800202c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <HAL_DAC_MspInit+0x80>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d129      	bne.n	80020a2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 8002050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 8002056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800205a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 8002060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_DAC_MspInit+0x84>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800208a:	2310      	movs	r3, #16
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_DAC_MspInit+0x88>)
 800209e:	f005 f821 	bl	80070e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40007400 	.word	0x40007400
 80020b0:	58024400 	.word	0x58024400
 80020b4:	58020000 	.word	0x58020000

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0b8      	sub	sp, #224	; 0xe0
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	22bc      	movs	r2, #188	; 0xbc
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f00c ff79 	bl	800efd0 <memset>
  if(hi2c->Instance==I2C1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <HAL_I2C_MspInit+0xc0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d142      	bne.n	800216e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020e8:	2308      	movs	r3, #8
 80020ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f006 ff90 	bl	800901c <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002102:	f7ff fe55 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_I2C_MspInit+0xc4>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_I2C_MspInit+0xc4>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_I2C_MspInit+0xc4>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002124:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213e:	2304      	movs	r3, #4
 8002140:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002148:	4619      	mov	r1, r3
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <HAL_I2C_MspInit+0xc8>)
 800214c:	f004 ffca 	bl	80070e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_I2C_MspInit+0xc4>)
 8002152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_I2C_MspInit+0xc4>)
 8002158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800215c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_I2C_MspInit+0xc4>)
 8002162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	37e0      	adds	r7, #224	; 0xe0
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40005400 	.word	0x40005400
 800217c:	58024400 	.word	0x58024400
 8002180:	58020400 	.word	0x58020400

08002184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0ba      	sub	sp, #232	; 0xe8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	22bc      	movs	r2, #188	; 0xbc
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00c ff13 	bl	800efd0 <memset>
  if(hspi->Instance==SPI1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_SPI_MspInit+0x150>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d142      	bne.n	800223a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f006 ff2a 	bl	800901c <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021ce:	f7ff fdef 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 80021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d8:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 80021da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 80021e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f6:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800220e:	2318      	movs	r3, #24
 8002210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002226:	2305      	movs	r3, #5
 8002228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002230:	4619      	mov	r1, r3
 8002232:	482a      	ldr	r0, [pc, #168]	; (80022dc <HAL_SPI_MspInit+0x158>)
 8002234:	f004 ff56 	bl	80070e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002238:	e047      	b.n	80022ca <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_SPI_MspInit+0x15c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d142      	bne.n	80022ca <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002248:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800224a:	2300      	movs	r3, #0
 800224c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fee2 	bl	800901c <HAL_RCCEx_PeriphCLKConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800225e:	f7ff fda7 	bl	8001db0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_SPI_MspInit+0x154>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800229e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022b8:	2305      	movs	r3, #5
 80022ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_SPI_MspInit+0x158>)
 80022c6:	f004 ff0d 	bl	80070e4 <HAL_GPIO_Init>
}
 80022ca:	bf00      	nop
 80022cc:	37e8      	adds	r7, #232	; 0xe8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40013000 	.word	0x40013000
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58020400 	.word	0x58020400
 80022e0:	40003800 	.word	0x40003800

080022e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_TIM_PWM_MspInit+0xb4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d12f      	bne.n	8002356 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 80022f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fc:	4a27      	ldr	r2, [pc, #156]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 8002308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2018      	movs	r0, #24
 800231a:	f002 f914 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800231e:	2018      	movs	r0, #24
 8002320:	f002 f92b 	bl	800457a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2019      	movs	r0, #25
 800232a:	f002 f90c 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800232e:	2019      	movs	r0, #25
 8002330:	f002 f923 	bl	800457a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	201a      	movs	r0, #26
 800233a:	f002 f904 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800233e:	201a      	movs	r0, #26
 8002340:	f002 f91b 	bl	800457a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	201b      	movs	r0, #27
 800234a:	f002 f8fc 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800234e:	201b      	movs	r0, #27
 8002350:	f002 f913 	bl	800457a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002354:	e01b      	b.n	800238e <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d116      	bne.n	800238e <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 8002362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_TIM_PWM_MspInit+0xb8>)
 8002372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	201c      	movs	r0, #28
 8002384:	f002 f8df 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002388:	201c      	movs	r0, #28
 800238a:	f002 f8f6 	bl	800457a <HAL_NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	58024400 	.word	0x58024400

080023a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_TIM_MspPostInit+0xb8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d120      	bne.n	8002404 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 80023c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4818      	ldr	r0, [pc, #96]	; (8002460 <HAL_TIM_MspPostInit+0xc0>)
 80023fe:	f004 fe71 	bl	80070e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002402:	e024      	b.n	800244e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d11f      	bne.n	800244e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 8002410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_TIM_MspPostInit+0xbc>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800242c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800243e:	2301      	movs	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4806      	ldr	r0, [pc, #24]	; (8002464 <HAL_TIM_MspPostInit+0xc4>)
 800244a:	f004 fe4b 	bl	80070e4 <HAL_GPIO_Init>
}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000
 800245c:	58024400 	.word	0x58024400
 8002460:	58020000 	.word	0x58020000
 8002464:	58020400 	.word	0x58020400

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0b8      	sub	sp, #224	; 0xe0
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	22bc      	movs	r2, #188	; 0xbc
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00c fda1 	bl	800efd0 <memset>
  if(huart->Instance==USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <HAL_UART_MspInit+0xc0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d142      	bne.n	800251e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002498:	2301      	movs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fdb8 	bl	800901c <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024b2:	f7ff fc7d 	bl	8001db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_UART_MspInit+0xc4>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250c:	2307      	movs	r3, #7
 800250e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <HAL_UART_MspInit+0xc8>)
 800251a:	f004 fde3 	bl	80070e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800251e:	bf00      	nop
 8002520:	37e0      	adds	r7, #224	; 0xe0
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40011000 	.word	0x40011000
 800252c:	58024400 	.word	0x58024400
 8002530:	58020000 	.word	0x58020000

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 f96c 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <DMA1_Stream0_IRQHandler+0x10>)
 800258e:	f003 fa97 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	24000124 	.word	0x24000124

0800259c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Stream1_IRQHandler+0x10>)
 80025a2:	f003 fa8d 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2400019c 	.word	0x2400019c

080025b0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM1_BRK_IRQHandler+0x10>)
 80025b6:	f009 fe22 	bl	800c1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000384 	.word	0x24000384

080025c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM1_UP_IRQHandler+0x10>)
 80025ca:	f009 fe18 	bl	800c1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	24000384 	.word	0x24000384

080025d8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80025de:	f009 fe0e 	bl	800c1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	24000384 	.word	0x24000384

080025ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM1_CC_IRQHandler+0x10>)
 80025f2:	f009 fe04 	bl	800c1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	24000384 	.word	0x24000384

08002600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM2_IRQHandler+0x10>)
 8002606:	f009 fdfa 	bl	800c1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	240003d0 	.word	0x240003d0

08002614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002618:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <SystemInit+0xe4>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a36      	ldr	r2, [pc, #216]	; (80026f8 <SystemInit+0xe4>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <SystemInit+0xe8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	2b06      	cmp	r3, #6
 8002632:	d807      	bhi.n	8002644 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <SystemInit+0xe8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 030f 	bic.w	r3, r3, #15
 800263c:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <SystemInit+0xe8>)
 800263e:	f043 0307 	orr.w	r3, r3, #7
 8002642:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <SystemInit+0xec>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <SystemInit+0xec>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <SystemInit+0xec>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <SystemInit+0xec>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4929      	ldr	r1, [pc, #164]	; (8002700 <SystemInit+0xec>)
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <SystemInit+0xf0>)
 800265e:	4013      	ands	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <SystemInit+0xe8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <SystemInit+0xe8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 030f 	bic.w	r3, r3, #15
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <SystemInit+0xe8>)
 8002678:	f043 0307 	orr.w	r3, r3, #7
 800267c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <SystemInit+0xec>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <SystemInit+0xec>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <SystemInit+0xec>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <SystemInit+0xec>)
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <SystemInit+0xf4>)
 8002694:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <SystemInit+0xec>)
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <SystemInit+0xf8>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <SystemInit+0xec>)
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <SystemInit+0xfc>)
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <SystemInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <SystemInit+0xec>)
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <SystemInit+0xfc>)
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <SystemInit+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <SystemInit+0xec>)
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <SystemInit+0xfc>)
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <SystemInit+0xec>)
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <SystemInit+0xec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <SystemInit+0xec>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <SystemInit+0xec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <SystemInit+0x100>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SystemInit+0x104>)
 80026d8:	4013      	ands	r3, r2
 80026da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026de:	d202      	bcs.n	80026e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <SystemInit+0x108>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <SystemInit+0x10c>)
 80026e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80026ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	52002000 	.word	0x52002000
 8002700:	58024400 	.word	0x58024400
 8002704:	eaf6ed7f 	.word	0xeaf6ed7f
 8002708:	02020200 	.word	0x02020200
 800270c:	01ff0000 	.word	0x01ff0000
 8002710:	01010280 	.word	0x01010280
 8002714:	5c001000 	.word	0x5c001000
 8002718:	ffff0000 	.word	0xffff0000
 800271c:	51008108 	.word	0x51008108
 8002720:	52004000 	.word	0x52004000

08002724 <Reset_Handler>:
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0xe>
 8002728:	f7ff ff74 	bl	8002614 <SystemInit>
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <LoopFillZerobss+0x12>)
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <LoopFillZerobss+0x1a>)
 8002732:	2300      	movs	r3, #0
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:
 8002736:	58d4      	ldr	r4, [r2, r3]
 8002738:	50c4      	str	r4, [r0, r3]
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:
 800273c:	18c4      	adds	r4, r0, r3
 800273e:	428c      	cmp	r4, r1
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <LoopFillZerobss+0x1e>)
 8002744:	4c0a      	ldr	r4, [pc, #40]	; (8002770 <LoopFillZerobss+0x22>)
 8002746:	2300      	movs	r3, #0
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:
 800274e:	42a2      	cmp	r2, r4
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>
 8002752:	f00c fc19 	bl	800ef88 <__libc_init_array>
 8002756:	f7fe fbfb 	bl	8000f50 <main>
 800275a:	4770      	bx	lr
 800275c:	24080000 	.word	0x24080000
 8002760:	24000000 	.word	0x24000000
 8002764:	24000034 	.word	0x24000034
 8002768:	0800f060 	.word	0x0800f060
 800276c:	24000040 	.word	0x24000040
 8002770:	240005f4 	.word	0x240005f4

08002774 <ADC3_IRQHandler>:
 8002774:	e7fe      	b.n	8002774 <ADC3_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277e:	2003      	movs	r0, #3
 8002780:	f001 fed6 	bl	8004530 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002784:	f006 fa74 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_Init+0x68>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	4913      	ldr	r1, [pc, #76]	; (80027e4 <HAL_Init+0x6c>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_Init+0x6c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_Init+0x70>)
 80027ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_Init+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	200f      	movs	r0, #15
 80027c4:	f000 f814 	bl	80027f0 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e002      	b.n	80027d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027d2:	f7ff faf3 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400
 80027e4:	0800f010 	.word	0x0800f010
 80027e8:	24000028 	.word	0x24000028
 80027ec:	24000024 	.word	0x24000024

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_InitTick+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e021      	b.n	8002848 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_InitTick+0x64>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_InitTick+0x60>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f001 febb 	bl	8004596 <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002838:	f001 fe85 	bl	8004546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_InitTick+0x68>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	24000030 	.word	0x24000030
 8002854:	24000024 	.word	0x24000024
 8002858:	2400002c 	.word	0x2400002c

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	24000030 	.word	0x24000030
 8002880:	240005f0 	.word	0x240005f0

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	240005f0 	.word	0x240005f0

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000030 	.word	0x24000030

080028e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_SuspendTick+0x1c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_SuspendTick+0x1c>)
 80028ee:	f023 0302 	bic.w	r3, r3, #2
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetREVID+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0c1b      	lsrs	r3, r3, #16
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	5c001000 	.word	0x5c001000

0800291c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b087      	sub	sp, #28
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]
  }
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3330      	adds	r3, #48	; 0x30
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	211f      	movs	r1, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 011f 	and.w	r1, r3, #31
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f023 0203 	bic.w	r2, r3, #3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0d1b      	lsrs	r3, r3, #20
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2107      	movs	r1, #7
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b40:	43db      	mvns	r3, r3
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0318 	and.w	r3, r3, #24
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b4c:	40d9      	lsrs	r1, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	400b      	ands	r3, r1
 8002b52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	000fffff 	.word	0x000fffff

08002b70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6093      	str	r3, [r2, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	5fffffc0 	.word	0x5fffffc0

08002bb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_ADC_EnableInternalRegulator+0x24>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	6fffffc0 	.word	0x6fffffc0

08002c00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <LL_ADC_Enable+0x24>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	7fffffc0 	.word	0x7fffffc0

08002c50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <LL_ADC_Disable+0x24>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	7fffffc0 	.word	0x7fffffc0

08002c78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <LL_ADC_IsEnabled+0x18>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_ADC_IsEnabled+0x1a>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d101      	bne.n	8002cb6 <LL_ADC_IsDisableOngoing+0x18>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_ADC_IsDisableOngoing+0x1a>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <LL_ADC_REG_StartConversion+0x24>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	7fffffc0 	.word	0x7fffffc0

08002cec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <LL_ADC_REG_StopConversion+0x24>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	7fffffc0 	.word	0x7fffffc0

08002d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <LL_ADC_INJ_StopConversion+0x24>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	7fffffc0 	.word	0x7fffffc0

08002d64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d101      	bne.n	8002d7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e18f      	b.n	80030c6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff f81b 	bl	8001df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff feef 	bl	8002bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fed5 	bl	8002b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff0a 	bl	8002c00 <LL_ADC_IsInternalRegulatorEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d114      	bne.n	8002e1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff feee 	bl	8002bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfc:	4b87      	ldr	r3, [pc, #540]	; (800301c <HAL_ADC_Init+0x290>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	4a87      	ldr	r2, [pc, #540]	; (8003020 <HAL_ADC_Init+0x294>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff feed 	bl	8002c00 <LL_ADC_IsInternalRegulatorEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff61 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002e52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8129 	bne.w	80030b4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8125 	bne.w	80030b4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fefa 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d136      	bne.n	8002ef8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_ADC_Init+0x298>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x112>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a63      	ldr	r2, [pc, #396]	; (8003028 <HAL_ADC_Init+0x29c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10e      	bne.n	8002ebc <HAL_ADC_Init+0x130>
 8002e9e:	4861      	ldr	r0, [pc, #388]	; (8003024 <HAL_ADC_Init+0x298>)
 8002ea0:	f7ff feea 	bl	8002c78 <LL_ADC_IsEnabled>
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	4860      	ldr	r0, [pc, #384]	; (8003028 <HAL_ADC_Init+0x29c>)
 8002ea8:	f7ff fee6 	bl	8002c78 <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4323      	orrs	r3, r4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e008      	b.n	8002ece <HAL_ADC_Init+0x142>
 8002ebc:	485b      	ldr	r0, [pc, #364]	; (800302c <HAL_ADC_Init+0x2a0>)
 8002ebe:	f7ff fedb 	bl	8002c78 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a53      	ldr	r2, [pc, #332]	; (8003024 <HAL_ADC_Init+0x298>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_ADC_Init+0x15a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a51      	ldr	r2, [pc, #324]	; (8003028 <HAL_ADC_Init+0x29c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_Init+0x15e>
 8002ee6:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_ADC_Init+0x2a4>)
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_Init+0x160>
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_ADC_Init+0x2a8>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7ff fd12 	bl	800291c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ef8:	f7ff fd04 	bl	8002904 <HAL_GetREVID>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d914      	bls.n	8002f30 <HAL_ADC_Init+0x1a4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d110      	bne.n	8002f30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7d5b      	ldrb	r3, [r3, #21]
 8002f12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
 8002f24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f28:	f043 030c 	orr.w	r3, r3, #12
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e00d      	b.n	8002f4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7d5b      	ldrb	r3, [r3, #21]
 8002f34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
 8002f46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	045b      	lsls	r3, r3, #17
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_ADC_Init+0x2ac>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff febc 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002f9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fede 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8002fa8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d15f      	bne.n	8003070 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d15c      	bne.n	8003070 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7d1b      	ldrb	r3, [r3, #20]
 8002fba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_ADC_Init+0x2b0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	69b9      	ldr	r1, [r7, #24]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d130      	bne.n	8003044 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_ADC_Init+0x2b4>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0411      	lsls	r1, r2, #16
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800300a:	430a      	orrs	r2, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	e01c      	b.n	8003054 <HAL_ADC_Init+0x2c8>
 800301a:	bf00      	nop
 800301c:	24000024 	.word	0x24000024
 8003020:	053e2d63 	.word	0x053e2d63
 8003024:	40022000 	.word	0x40022000
 8003028:	40022100 	.word	0x40022100
 800302c:	58026000 	.word	0x58026000
 8003030:	40022300 	.word	0x40022300
 8003034:	58026300 	.word	0x58026300
 8003038:	fff0c003 	.word	0xfff0c003
 800303c:	ffffbffc 	.word	0xffffbffc
 8003040:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 feea 	bl	8003e44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10c      	bne.n	8003092 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f023 010f 	bic.w	r1, r3, #15
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	1e5a      	subs	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
 8003090:	e007      	b.n	80030a2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 020f 	bic.w	r2, r2, #15
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop

080030d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a55      	ldr	r2, [pc, #340]	; (8003238 <HAL_ADC_Start_DMA+0x168>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_Start_DMA+0x20>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a54      	ldr	r2, [pc, #336]	; (800323c <HAL_ADC_Start_DMA+0x16c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x24>
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_ADC_Start_DMA+0x170>)
 80030f2:	e000      	b.n	80030f6 <HAL_ADC_Start_DMA+0x26>
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_ADC_Start_DMA+0x174>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fd3a 	bl	8002b70 <LL_ADC_GetMultimode>
 80030fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fe06 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 808c 	bne.w	8003228 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADC_Start_DMA+0x4e>
 800311a:	2302      	movs	r3, #2
 800311c:	e087      	b.n	800322e <HAL_ADC_Start_DMA+0x15e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d002      	beq.n	8003138 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d170      	bne.n	800321a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fd05 	bl	8003b48 <ADC_Enable>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d163      	bne.n	8003210 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_ADC_Start_DMA+0x178>)
 800314e:	4013      	ands	r3, r2
 8003150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a37      	ldr	r2, [pc, #220]	; (800323c <HAL_ADC_Start_DMA+0x16c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d002      	beq.n	8003168 <HAL_ADC_Start_DMA+0x98>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e000      	b.n	800316a <HAL_ADC_Start_DMA+0x9a>
 8003168:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_ADC_Start_DMA+0x168>)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	4293      	cmp	r3, r2
 8003170:	d002      	beq.n	8003178 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f023 0206 	bic.w	r2, r3, #6
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	659a      	str	r2, [r3, #88]	; 0x58
 800319c:	e002      	b.n	80031a4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_ADC_Start_DMA+0x17c>)
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <HAL_ADC_Start_DMA+0x180>)
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <HAL_ADC_Start_DMA+0x184>)
 80031ba:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	221c      	movs	r2, #28
 80031c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0210 	orr.w	r2, r2, #16
 80031da:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7ff fc5f 	bl	8002aaa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3340      	adds	r3, #64	; 0x40
 80031f6:	4619      	mov	r1, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f001 fed8 	bl	8004fb0 <HAL_DMA_Start_IT>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fd5b 	bl	8002cc4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800320e:	e00d      	b.n	800322c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003218:	e008      	b.n	800322c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003226:	e001      	b.n	800322c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003228:	2302      	movs	r3, #2
 800322a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	40022100 	.word	0x40022100
 8003240:	40022300 	.word	0x40022300
 8003244:	58026300 	.word	0x58026300
 8003248:	fffff0fe 	.word	0xfffff0fe
 800324c:	08003d1b 	.word	0x08003d1b
 8003250:	08003df3 	.word	0x08003df3
 8003254:	08003e0f 	.word	0x08003e0f

08003258 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADC_Stop_DMA+0x16>
 800326a:	2302      	movs	r3, #2
 800326c:	e04f      	b.n	800330e <HAL_ADC_Stop_DMA+0xb6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003276:	2103      	movs	r1, #3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fba9 	bl	80039d0 <ADC_ConversionStop>
 800327e:	4603      	mov	r3, r0
 8003280:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d13d      	bne.n	8003304 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0203 	bic.w	r2, r2, #3
 8003296:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d10f      	bne.n	80032c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 f8ea 	bl	8005484 <HAL_DMA_Abort>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0210 	bic.w	r2, r2, #16
 80032d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fcbd 	bl	8003c5c <ADC_Disable>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
 80032e6:	e002      	b.n	80032ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fcb7 	bl	8003c5c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_ADC_Stop_DMA+0xc0>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	ffffeefe 	.word	0xffffeefe

0800331c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b0a1      	sub	sp, #132	; 0x84
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a9d      	ldr	r2, [pc, #628]	; (80035c0 <HAL_ADC_ConfigChannel+0x290>)
 800334a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x2a>
 8003356:	2302      	movs	r3, #2
 8003358:	e321      	b.n	800399e <HAL_ADC_ConfigChannel+0x66e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fcd4 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 8306 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x62>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	e016      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x90>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80033ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	69d1      	ldr	r1, [r2, #28]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7ff fb39 	bl	8002a52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fc95 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 80033ea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fcb7 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 80033f6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80b3 	bne.w	8003566 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 80af 	bne.w	8003566 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	461a      	mov	r2, r3
 8003416:	f7ff fb5b 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_ADC_ConfigChannel+0x294>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003426:	d10b      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x110>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	e01d      	b.n	800347c <HAL_ADC_ConfigChannel+0x14c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x136>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	e00a      	b.n	800347c <HAL_ADC_ConfigChannel+0x14c>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d027      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6919      	ldr	r1, [r3, #16]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	f7ff fa76 	bl	8002984 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	7e5b      	ldrb	r3, [r3, #25]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x17e>
 80034a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x180>
 80034ae:	2300      	movs	r3, #0
 80034b0:	461a      	mov	r2, r3
 80034b2:	f7ff faa0 	bl	80029f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6919      	ldr	r1, [r3, #16]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x19c>
 80034c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ca:	e000      	b.n	80034ce <HAL_ADC_ConfigChannel+0x19e>
 80034cc:	2300      	movs	r3, #0
 80034ce:	461a      	mov	r2, r3
 80034d0:	f7ff fa78 	bl	80029c4 <LL_ADC_SetDataRightShift>
 80034d4:	e047      	b.n	8003566 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	069b      	lsls	r3, r3, #26
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d107      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003500:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	069b      	lsls	r3, r3, #26
 800350a:	429a      	cmp	r2, r3
 800350c:	d107      	bne.n	800351e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800351c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	069b      	lsls	r3, r3, #26
 800352e:	429a      	cmp	r2, r3
 8003530:	d107      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003540:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	069b      	lsls	r3, r3, #26
 8003552:	429a      	cmp	r2, r3
 8003554:	d107      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003564:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fb84 	bl	8002c78 <LL_ADC_IsEnabled>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 820d 	bne.w	8003992 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	461a      	mov	r2, r3
 8003586:	f7ff facf 	bl	8002b28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <HAL_ADC_ConfigChannel+0x290>)
 8003590:	4293      	cmp	r3, r2
 8003592:	f040 8133 	bne.w	80037fc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d110      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x298>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	3301      	adds	r3, #1
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	bf94      	ite	ls
 80035b6:	2301      	movls	r3, #1
 80035b8:	2300      	movhi	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e01e      	b.n	80035fc <HAL_ADC_ConfigChannel+0x2cc>
 80035be:	bf00      	nop
 80035c0:	47ff0000 	.word	0x47ff0000
 80035c4:	5c001000 	.word	0x5c001000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e003      	b.n	80035ec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2b09      	cmp	r3, #9
 80035f4:	bf94      	ite	ls
 80035f6:	2301      	movls	r3, #1
 80035f8:	2300      	movhi	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d079      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_ADC_ConfigChannel+0x2ec>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	069b      	lsls	r3, r3, #26
 8003616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361a:	e015      	b.n	8003648 <HAL_ADC_ConfigChannel+0x318>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x338>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	e017      	b.n	8003698 <HAL_ADC_ConfigChannel+0x368>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800367a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e003      	b.n	800368c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	ea42 0103 	orr.w	r1, r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x38e>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	3301      	adds	r3, #1
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	051b      	lsls	r3, r3, #20
 80036bc:	e018      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x3c0>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f0:	430b      	orrs	r3, r1
 80036f2:	e07e      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x3e0>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800370e:	e015      	b.n	800373c <HAL_ADC_ConfigChannel+0x40c>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	069b      	lsls	r3, r3, #26
 8003738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_ADC_ConfigChannel+0x42c>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	e017      	b.n	800378c <HAL_ADC_ConfigChannel+0x45c>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	61bb      	str	r3, [r7, #24]
  return result;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e003      	b.n	8003780 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x488>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	3b1e      	subs	r3, #30
 80037b0:	051b      	lsls	r3, r3, #20
 80037b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b6:	e01b      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x4c0>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
  return result;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80037d0:	2320      	movs	r3, #32
 80037d2:	e003      	b.n	80037dc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f003 021f 	and.w	r2, r3, #31
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	051b      	lsls	r3, r3, #20
 80037ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f0:	430b      	orrs	r3, r1
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7ff f96a 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f280 80c6 	bge.w	8003992 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_ADC_ConfigChannel+0x4ea>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x4ee>
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_ADC_ConfigChannel+0x680>)
 800381c:	e000      	b.n	8003820 <HAL_ADC_ConfigChannel+0x4f0>
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_ADC_ConfigChannel+0x684>)
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f8a1 	bl	8002968 <LL_ADC_GetCommonPathInternalCh>
 8003826:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_ADC_ConfigChannel+0x50c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a5d      	ldr	r2, [pc, #372]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d10e      	bne.n	800385a <HAL_ADC_ConfigChannel+0x52a>
 800383c:	485a      	ldr	r0, [pc, #360]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 800383e:	f7ff fa1b 	bl	8002c78 <LL_ADC_IsEnabled>
 8003842:	4604      	mov	r4, r0
 8003844:	4859      	ldr	r0, [pc, #356]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 8003846:	f7ff fa17 	bl	8002c78 <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	4323      	orrs	r3, r4
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	e008      	b.n	800386c <HAL_ADC_ConfigChannel+0x53c>
 800385a:	4857      	ldr	r0, [pc, #348]	; (80039b8 <HAL_ADC_ConfigChannel+0x688>)
 800385c:	f7ff fa0c 	bl	8002c78 <LL_ADC_IsEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d07d      	beq.n	800396c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_ADC_ConfigChannel+0x68c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d130      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x5ac>
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d12b      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_ADC_ConfigChannel+0x688>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f040 8081 	bne.w	8003992 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0x574>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x578>
 80038a4:	4a42      	ldr	r2, [pc, #264]	; (80039b0 <HAL_ADC_ConfigChannel+0x680>)
 80038a6:	e000      	b.n	80038aa <HAL_ADC_ConfigChannel+0x57a>
 80038a8:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_ADC_ConfigChannel+0x684>)
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7ff f845 	bl	8002942 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b8:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_ADC_ConfigChannel+0x690>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <HAL_ADC_ConfigChannel+0x694>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038cc:	e002      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f9      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038da:	e05a      	b.n	8003992 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <HAL_ADC_ConfigChannel+0x698>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d11e      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x5f4>
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d119      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a30      	ldr	r2, [pc, #192]	; (80039b8 <HAL_ADC_ConfigChannel+0x688>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d14b      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_ADC_ConfigChannel+0x5de>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a28      	ldr	r2, [pc, #160]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x5e2>
 800390e:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <HAL_ADC_ConfigChannel+0x680>)
 8003910:	e000      	b.n	8003914 <HAL_ADC_ConfigChannel+0x5e4>
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_ADC_ConfigChannel+0x684>)
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7ff f810 	bl	8002942 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003922:	e036      	b.n	8003992 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <HAL_ADC_ConfigChannel+0x69c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d131      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x662>
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12c      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <HAL_ADC_ConfigChannel+0x688>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d127      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_ADC_ConfigChannel+0x678>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x626>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_ADC_ConfigChannel+0x67c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_ADC_ConfigChannel+0x62a>
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_ADC_ConfigChannel+0x680>)
 8003958:	e000      	b.n	800395c <HAL_ADC_ConfigChannel+0x62c>
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_ADC_ConfigChannel+0x684>)
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe ffec 	bl	8002942 <LL_ADC_SetCommonPathInternalCh>
 800396a:	e012      	b.n	8003992 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800397e:	e008      	b.n	8003992 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800399a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3784      	adds	r7, #132	; 0x84
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40022100 	.word	0x40022100
 80039b0:	40022300 	.word	0x40022300
 80039b4:	58026300 	.word	0x58026300
 80039b8:	58026000 	.word	0x58026000
 80039bc:	cb840000 	.word	0xcb840000
 80039c0:	24000024 	.word	0x24000024
 80039c4:	053e2d63 	.word	0x053e2d63
 80039c8:	c7520000 	.word	0xc7520000
 80039cc:	cfb80000 	.word	0xcfb80000

080039d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f994 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 80039ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff f9b6 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 80039f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8098 	beq.w	8003b38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02a      	beq.n	8003a6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7d5b      	ldrb	r3, [r3, #21]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d126      	bne.n	8003a6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7d1b      	ldrb	r3, [r3, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d122      	bne.n	8003a6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a2a:	e014      	b.n	8003a56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4a45      	ldr	r2, [pc, #276]	; (8003b44 <ADC_ConversionStop+0x174>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d90d      	bls.n	8003a50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e074      	b.n	8003b3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3301      	adds	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d1e3      	bne.n	8003a2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2240      	movs	r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d014      	beq.n	8003a9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f94c 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f909 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f928 	bl	8002cec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d014      	beq.n	8003acc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff f95c 	bl	8002d64 <LL_ADC_INJ_IsConversionOngoing>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f8f1 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f938 	bl	8002d3c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d005      	beq.n	8003ade <ADC_ConversionStop+0x10e>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d105      	bne.n	8003ae4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ad8:	230c      	movs	r3, #12
 8003ada:	617b      	str	r3, [r7, #20]
        break;
 8003adc:	e005      	b.n	8003aea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	617b      	str	r3, [r7, #20]
        break;
 8003ae2:	e002      	b.n	8003aea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]
        break;
 8003ae8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003aea:	f7fe fecb 	bl	8002884 <HAL_GetTick>
 8003aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003af0:	e01b      	b.n	8003b2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003af2:	f7fe fec7 	bl	8002884 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d914      	bls.n	8003b2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1dc      	bne.n	8003af2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	000cdbff 	.word	0x000cdbff

08003b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff f88f 	bl	8002c78 <LL_ADC_IsEnabled>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d16e      	bne.n	8003c3e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <ADC_Enable+0x100>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f043 0210 	orr.w	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e05a      	b.n	8003c40 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f84a 	bl	8002c28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b94:	f7fe fe76 	bl	8002884 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <ADC_Enable+0x104>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <ADC_Enable+0x66>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <ADC_Enable+0x108>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <ADC_Enable+0x6a>
 8003bae:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <ADC_Enable+0x10c>)
 8003bb0:	e000      	b.n	8003bb4 <ADC_Enable+0x6c>
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <ADC_Enable+0x110>)
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe ffdb 	bl	8002b70 <LL_ADC_GetMultimode>
 8003bba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <ADC_Enable+0x108>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d002      	beq.n	8003bcc <ADC_Enable+0x84>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e000      	b.n	8003bce <ADC_Enable+0x86>
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <ADC_Enable+0x104>)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02c      	beq.n	8003c30 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d130      	bne.n	8003c3e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bdc:	e028      	b.n	8003c30 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff f848 	bl	8002c78 <LL_ADC_IsEnabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f818 	bl	8002c28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bf8:	f7fe fe44 	bl	8002884 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d914      	bls.n	8003c30 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d00d      	beq.n	8003c30 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0210 	orr.w	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e007      	b.n	8003c40 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d1cf      	bne.n	8003bde <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	8000003f 	.word	0x8000003f
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022100 	.word	0x40022100
 8003c54:	40022300 	.word	0x40022300
 8003c58:	58026300 	.word	0x58026300

08003c5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff f818 	bl	8002c9e <LL_ADC_IsDisableOngoing>
 8003c6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe ffff 	bl	8002c78 <LL_ADC_IsEnabled>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d047      	beq.n	8003d10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d144      	bne.n	8003d10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030d 	and.w	r3, r3, #13
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d10c      	bne.n	8003cae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe ffd9 	bl	8002c50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ca6:	f7fe fded 	bl	8002884 <HAL_GetTick>
 8003caa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cac:	e029      	b.n	8003d02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e023      	b.n	8003d12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cca:	f7fe fddb 	bl	8002884 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d914      	bls.n	8003d02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e007      	b.n	8003d12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1dc      	bne.n	8003cca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d14b      	bne.n	8003dcc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d021      	beq.n	8003d92 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fe6a 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d032      	beq.n	8003dc4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d12b      	bne.n	8003dc4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11f      	bne.n	8003dc4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
 8003d90:	e018      	b.n	8003dc4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d111      	bne.n	8003dc4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7fd ff85 	bl	8001cd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dca:	e00e      	b.n	8003dea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fa9f 	bl	800331c <HAL_ADC_ErrorCallback>
}
 8003dde:	e004      	b.n	8003dea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7fd fefb 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f043 0204 	orr.w	r2, r3, #4
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fa71 	bl	800331c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a79      	ldr	r2, [pc, #484]	; (8004038 <ADC_ConfigureBoostMode+0x1f4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <ADC_ConfigureBoostMode+0x1c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <ADC_ConfigureBoostMode+0x1f8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <ADC_ConfigureBoostMode+0x30>
 8003e60:	4b77      	ldr	r3, [pc, #476]	; (8004040 <ADC_ConfigureBoostMode+0x1fc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <ADC_ConfigureBoostMode+0x42>
 8003e74:	4b73      	ldr	r3, [pc, #460]	; (8004044 <ADC_ConfigureBoostMode+0x200>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01c      	beq.n	8003ec4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e8a:	f005 f86b 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8003e8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e98:	d010      	beq.n	8003ebc <ADC_ConfigureBoostMode+0x78>
 8003e9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e9e:	d871      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x140>
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d002      	beq.n	8003eac <ADC_ConfigureBoostMode+0x68>
 8003ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eaa:	d16b      	bne.n	8003f84 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
        break;
 8003eba:	e066      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	60fb      	str	r3, [r7, #12]
        break;
 8003ec2:	e062      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ec4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ec8:	f005 ffee 	bl	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ecc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ed6:	d051      	beq.n	8003f7c <ADC_ConfigureBoostMode+0x138>
 8003ed8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003edc:	d854      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003ede:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ee2:	d047      	beq.n	8003f74 <ADC_ConfigureBoostMode+0x130>
 8003ee4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ee8:	d84e      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003eea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003eee:	d03d      	beq.n	8003f6c <ADC_ConfigureBoostMode+0x128>
 8003ef0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ef4:	d848      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efa:	d033      	beq.n	8003f64 <ADC_ConfigureBoostMode+0x120>
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f00:	d842      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f06:	d029      	beq.n	8003f5c <ADC_ConfigureBoostMode+0x118>
 8003f08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f0c:	d83c      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f12:	d01a      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x106>
 8003f14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f18:	d836      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f1e:	d014      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x106>
 8003f20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f24:	d830      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2a:	d00e      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x106>
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d82a      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f36:	d008      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x106>
 8003f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f3c:	d824      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x144>
 8003f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f42:	d002      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x106>
 8003f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f48:	d11e      	bne.n	8003f88 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	0c9b      	lsrs	r3, r3, #18
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
        break;
 8003f5a:	e016      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
        break;
 8003f62:	e012      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	60fb      	str	r3, [r7, #12]
        break;
 8003f6a:	e00e      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	60fb      	str	r3, [r7, #12]
        break;
 8003f72:	e00a      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	09db      	lsrs	r3, r3, #7
 8003f78:	60fb      	str	r3, [r7, #12]
        break;
 8003f7a:	e006      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	60fb      	str	r3, [r7, #12]
        break;
 8003f82:	e002      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
        break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003f88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f8a:	f7fe fcbb 	bl	8002904 <HAL_GetREVID>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d815      	bhi.n	8003fc4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a2b      	ldr	r2, [pc, #172]	; (8004048 <ADC_ConfigureBoostMode+0x204>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d908      	bls.n	8003fb2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fb0:	e03e      	b.n	8004030 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc0:	609a      	str	r2, [r3, #8]
}
 8003fc2:	e035      	b.n	8004030 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <ADC_ConfigureBoostMode+0x208>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d808      	bhi.n	8003fe4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fe0:	609a      	str	r2, [r3, #8]
}
 8003fe2:	e025      	b.n	8004030 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <ADC_ConfigureBoostMode+0x20c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d80a      	bhi.n	8004002 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	e016      	b.n	8004030 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <ADC_ConfigureBoostMode+0x210>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d80a      	bhi.n	8004020 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	609a      	str	r2, [r3, #8]
}
 800401e:	e007      	b.n	8004030 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40022000 	.word	0x40022000
 800403c:	40022100 	.word	0x40022100
 8004040:	40022300 	.word	0x40022300
 8004044:	58026300 	.word	0x58026300
 8004048:	01312d00 	.word	0x01312d00
 800404c:	005f5e10 	.word	0x005f5e10
 8004050:	00bebc20 	.word	0x00bebc20
 8004054:	017d7840 	.word	0x017d7840

08004058 <LL_ADC_IsEnabled>:
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <LL_ADC_IsEnabled+0x18>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <LL_ADC_IsEnabled+0x1a>
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <LL_ADC_StartCalibration>:
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <LL_ADC_StartCalibration+0x38>)
 8004092:	4013      	ands	r3, r2
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040a0:	430a      	orrs	r2, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	3ffeffc0 	.word	0x3ffeffc0

080040bc <LL_ADC_IsCalibrationOnGoing>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d0:	d101      	bne.n	80040d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d101      	bne.n	80040fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_ADCEx_Calibration_Start+0x1e>
 8004126:	2302      	movs	r3, #2
 8004128:	e04c      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0xb8>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fd92 	bl	8003c5c <ADC_Disable>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d135      	bne.n	80041ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004148:	4013      	ands	r3, r2
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff90 	bl	8004080 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004160:	e014      	b.n	800418c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3301      	adds	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d30d      	bcc.n	800418c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f023 0312 	bic.w	r3, r3, #18
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e01b      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff93 	bl	80040bc <LL_ADC_IsCalibrationOnGoing>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e2      	bne.n	8004162 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f023 0303 	bic.w	r3, r3, #3
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
 80041ac:	e005      	b.n	80041ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f043 0210 	orr.w	r2, r3, #16
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	ffffeefd 	.word	0xffffeefd
 80041d0:	25c3f800 	.word	0x25c3f800

080041d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b09f      	sub	sp, #124	; 0x7c
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0be      	b.n	8004370 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80041fe:	2300      	movs	r3, #0
 8004200:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a5c      	ldr	r2, [pc, #368]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d102      	bne.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e001      	b.n	8004216 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e09d      	b.n	8004370 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff54 	bl	80040e4 <LL_ADC_REG_IsConversionOngoing>
 800423c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff4e 	bl	80040e4 <LL_ADC_REG_IsConversionOngoing>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d17f      	bne.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800424e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004250:	2b00      	cmp	r3, #0
 8004252:	d17c      	bne.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a47      	ldr	r2, [pc, #284]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a46      	ldr	r2, [pc, #280]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004268:	4b45      	ldr	r3, [pc, #276]	; (8004380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800426a:	e000      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800426c:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800426e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d039      	beq.n	80042ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	431a      	orrs	r2, r3
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3a      	ldr	r2, [pc, #232]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10e      	bne.n	80042bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800429e:	4836      	ldr	r0, [pc, #216]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042a0:	f7ff feda 	bl	8004058 <LL_ADC_IsEnabled>
 80042a4:	4604      	mov	r4, r0
 80042a6:	4835      	ldr	r0, [pc, #212]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042a8:	f7ff fed6 	bl	8004058 <LL_ADC_IsEnabled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4323      	orrs	r3, r4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e008      	b.n	80042ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042bc:	4832      	ldr	r0, [pc, #200]	; (8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042be:	f7ff fecb 	bl	8004058 <LL_ADC_IsEnabled>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d047      	beq.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042d8:	4013      	ands	r3, r2
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	6811      	ldr	r1, [r2, #0]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	6892      	ldr	r2, [r2, #8]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ea:	e03a      	b.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10e      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800430c:	481a      	ldr	r0, [pc, #104]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800430e:	f7ff fea3 	bl	8004058 <LL_ADC_IsEnabled>
 8004312:	4604      	mov	r4, r0
 8004314:	4819      	ldr	r0, [pc, #100]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004316:	f7ff fe9f 	bl	8004058 <LL_ADC_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	4323      	orrs	r3, r4
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e008      	b.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800432a:	4817      	ldr	r0, [pc, #92]	; (8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800432c:	f7ff fe94 	bl	8004058 <LL_ADC_IsEnabled>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004346:	4013      	ands	r3, r2
 8004348:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800434a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800434c:	e009      	b.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004360:	e000      	b.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004362:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800436c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004370:	4618      	mov	r0, r3
 8004372:	377c      	adds	r7, #124	; 0x7c
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	40022000 	.word	0x40022000
 800437c:	40022100 	.word	0x40022100
 8004380:	40022300 	.word	0x40022300
 8004384:	58026300 	.word	0x58026300
 8004388:	58026000 	.word	0x58026000
 800438c:	fffff0e0 	.word	0xfffff0e0

08004390 <__NVIC_SetPriorityGrouping>:
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <__NVIC_SetPriorityGrouping+0x40>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ac:	4013      	ands	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <__NVIC_SetPriorityGrouping+0x40>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	60d3      	str	r3, [r2, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	05fa0000 	.word	0x05fa0000

080043d8 <__NVIC_GetPriorityGrouping>:
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <__NVIC_GetPriorityGrouping+0x18>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 0307 	and.w	r3, r3, #7
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_EnableIRQ>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	db0b      	blt.n	800441e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	4907      	ldr	r1, [pc, #28]	; (800442c <__NVIC_EnableIRQ+0x38>)
 800440e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2001      	movs	r0, #1
 8004416:	fa00 f202 	lsl.w	r2, r0, r2
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800443c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db0a      	blt.n	800445a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	490c      	ldr	r1, [pc, #48]	; (800447c <__NVIC_SetPriority+0x4c>)
 800444a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	440b      	add	r3, r1
 8004454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004458:	e00a      	b.n	8004470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4908      	ldr	r1, [pc, #32]	; (8004480 <__NVIC_SetPriority+0x50>)
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3b04      	subs	r3, #4
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	440b      	add	r3, r1
 800446e:	761a      	strb	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <NVIC_EncodePriority>:
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f1c3 0307 	rsb	r3, r3, #7
 800449e:	2b04      	cmp	r3, #4
 80044a0:	bf28      	it	cs
 80044a2:	2304      	movcs	r3, #4
 80044a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d902      	bls.n	80044b4 <NVIC_EncodePriority+0x30>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3b03      	subs	r3, #3
 80044b2:	e000      	b.n	80044b6 <NVIC_EncodePriority+0x32>
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	401a      	ands	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	43d9      	mvns	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	4313      	orrs	r3, r2
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044fc:	d301      	bcc.n	8004502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044fe:	2301      	movs	r3, #1
 8004500:	e00f      	b.n	8004522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <SysTick_Config+0x40>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3b01      	subs	r3, #1
 8004508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450a:	210f      	movs	r1, #15
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004510:	f7ff ff8e 	bl	8004430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <SysTick_Config+0x40>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <SysTick_Config+0x40>)
 800451c:	2207      	movs	r2, #7
 800451e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	e000e010 	.word	0xe000e010

08004530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff29 	bl	8004390 <__NVIC_SetPriorityGrouping>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004554:	f7ff ff40 	bl	80043d8 <__NVIC_GetPriorityGrouping>
 8004558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff90 	bl	8004484 <NVIC_EncodePriority>
 8004564:	4602      	mov	r2, r0
 8004566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff5f 	bl	8004430 <__NVIC_SetPriority>
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff33 	bl	80043f4 <__NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ffa4 	bl	80044ec <SysTick_Config>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e014      	b.n	80045ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	791b      	ldrb	r3, [r3, #4]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fd fd2b 	bl	800202c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	795b      	ldrb	r3, [r3, #5]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_DAC_Start+0x16>
 8004604:	2302      	movs	r3, #2
 8004606:	e040      	b.n	800468a <HAL_DAC_Start+0x98>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2201      	movs	r2, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800463c:	2b02      	cmp	r3, #2
 800463e:	d11d      	bne.n	800467c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e014      	b.n	800467c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2102      	movs	r1, #2
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	429a      	cmp	r2, r3
 800466a:	d107      	bne.n	800467c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0202 	orr.w	r2, r2, #2
 800467a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	795b      	ldrb	r3, [r3, #5]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_DAC_ConfigChannel+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e11d      	b.n	80048ec <HAL_DAC_ConfigChannel+0x254>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2202      	movs	r2, #2
 80046ba:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d174      	bne.n	80047ae <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80046c4:	f7fe f8de 	bl	8002884 <HAL_GetTick>
 80046c8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d134      	bne.n	800473a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046d0:	e011      	b.n	80046f6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046d2:	f7fe f8d7 	bl	8002884 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d90a      	bls.n	80046f6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f043 0208 	orr.w	r2, r3, #8
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2203      	movs	r2, #3
 80046f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0fa      	b.n	80048ec <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <HAL_DAC_ConfigChannel+0x25c>)
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e6      	bne.n	80046d2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fe f8c9 	bl	800289c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	6992      	ldr	r2, [r2, #24]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
 8004714:	e01e      	b.n	8004754 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004716:	f7fe f8b5 	bl	8002884 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d90a      	bls.n	800473a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f043 0208 	orr.w	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2203      	movs	r2, #3
 8004734:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0d8      	b.n	80048ec <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	dbe8      	blt.n	8004716 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004744:	2001      	movs	r0, #1
 8004746:	f7fe f8a9 	bl	800289c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	6992      	ldr	r2, [r2, #24]
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	ea02 0103 	and.w	r1, r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	409a      	lsls	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	21ff      	movs	r1, #255	; 0xff
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	ea02 0103 	and.w	r1, r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11d      	bne.n	80047f2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	221f      	movs	r2, #31
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4013      	ands	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2207      	movs	r2, #7
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e00f      	b.n	800483c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d102      	bne.n	800482a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004824:	2301      	movs	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e008      	b.n	800483c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e001      	b.n	800483c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4313      	orrs	r3, r2
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43da      	mvns	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4013      	ands	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	22c0      	movs	r2, #192	; 0xc0
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43da      	mvns	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20008000 	.word	0x20008000

080048f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004900:	f7fd ffc0 	bl	8002884 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e316      	b.n	8004f3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a66      	ldr	r2, [pc, #408]	; (8004ab0 <HAL_DMA_Init+0x1b8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d04a      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a65      	ldr	r2, [pc, #404]	; (8004ab4 <HAL_DMA_Init+0x1bc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d045      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a63      	ldr	r2, [pc, #396]	; (8004ab8 <HAL_DMA_Init+0x1c0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d040      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a62      	ldr	r2, [pc, #392]	; (8004abc <HAL_DMA_Init+0x1c4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d03b      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a60      	ldr	r2, [pc, #384]	; (8004ac0 <HAL_DMA_Init+0x1c8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d036      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5f      	ldr	r2, [pc, #380]	; (8004ac4 <HAL_DMA_Init+0x1cc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d031      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a5d      	ldr	r2, [pc, #372]	; (8004ac8 <HAL_DMA_Init+0x1d0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02c      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a5c      	ldr	r2, [pc, #368]	; (8004acc <HAL_DMA_Init+0x1d4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d027      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5a      	ldr	r2, [pc, #360]	; (8004ad0 <HAL_DMA_Init+0x1d8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d022      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a59      	ldr	r2, [pc, #356]	; (8004ad4 <HAL_DMA_Init+0x1dc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d01d      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a57      	ldr	r2, [pc, #348]	; (8004ad8 <HAL_DMA_Init+0x1e0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a56      	ldr	r2, [pc, #344]	; (8004adc <HAL_DMA_Init+0x1e4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <HAL_DMA_Init+0x1e8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a53      	ldr	r2, [pc, #332]	; (8004ae4 <HAL_DMA_Init+0x1ec>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a51      	ldr	r2, [pc, #324]	; (8004ae8 <HAL_DMA_Init+0x1f0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_DMA_Init+0xb8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a50      	ldr	r2, [pc, #320]	; (8004aec <HAL_DMA_Init+0x1f4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_DMA_Init+0xbc>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_DMA_Init+0xbe>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 813b 	beq.w	8004c32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a37      	ldr	r2, [pc, #220]	; (8004ab0 <HAL_DMA_Init+0x1b8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a36      	ldr	r2, [pc, #216]	; (8004ab4 <HAL_DMA_Init+0x1bc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <HAL_DMA_Init+0x1c0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a33      	ldr	r2, [pc, #204]	; (8004abc <HAL_DMA_Init+0x1c4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a31      	ldr	r2, [pc, #196]	; (8004ac0 <HAL_DMA_Init+0x1c8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a30      	ldr	r2, [pc, #192]	; (8004ac4 <HAL_DMA_Init+0x1cc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <HAL_DMA_Init+0x1d0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2d      	ldr	r2, [pc, #180]	; (8004acc <HAL_DMA_Init+0x1d4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <HAL_DMA_Init+0x1d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <HAL_DMA_Init+0x1dc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <HAL_DMA_Init+0x1e0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a27      	ldr	r2, [pc, #156]	; (8004adc <HAL_DMA_Init+0x1e4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_DMA_Init+0x1e8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <HAL_DMA_Init+0x1ec>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <HAL_DMA_Init+0x1f0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_DMA_Init+0x174>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	; (8004aec <HAL_DMA_Init+0x1f4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <HAL_DMA_Init+0x186>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e007      	b.n	8004a8e <HAL_DMA_Init+0x196>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a8e:	e02f      	b.n	8004af0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a90:	f7fd fef8 	bl	8002884 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	d928      	bls.n	8004af0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e246      	b.n	8004f3e <HAL_DMA_Init+0x646>
 8004ab0:	40020010 	.word	0x40020010
 8004ab4:	40020028 	.word	0x40020028
 8004ab8:	40020040 	.word	0x40020040
 8004abc:	40020058 	.word	0x40020058
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	40020088 	.word	0x40020088
 8004ac8:	400200a0 	.word	0x400200a0
 8004acc:	400200b8 	.word	0x400200b8
 8004ad0:	40020410 	.word	0x40020410
 8004ad4:	40020428 	.word	0x40020428
 8004ad8:	40020440 	.word	0x40020440
 8004adc:	40020458 	.word	0x40020458
 8004ae0:	40020470 	.word	0x40020470
 8004ae4:	40020488 	.word	0x40020488
 8004ae8:	400204a0 	.word	0x400204a0
 8004aec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1c8      	bne.n	8004a90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4b83      	ldr	r3, [pc, #524]	; (8004d18 <HAL_DMA_Init+0x420>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d107      	bne.n	8004b54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b54:	4b71      	ldr	r3, [pc, #452]	; (8004d1c <HAL_DMA_Init+0x424>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b71      	ldr	r3, [pc, #452]	; (8004d20 <HAL_DMA_Init+0x428>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d328      	bcc.n	8004bb4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b28      	cmp	r3, #40	; 0x28
 8004b68:	d903      	bls.n	8004b72 <HAL_DMA_Init+0x27a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b70:	d917      	bls.n	8004ba2 <HAL_DMA_Init+0x2aa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d903      	bls.n	8004b82 <HAL_DMA_Init+0x28a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b42      	cmp	r3, #66	; 0x42
 8004b80:	d90f      	bls.n	8004ba2 <HAL_DMA_Init+0x2aa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b46      	cmp	r3, #70	; 0x46
 8004b88:	d903      	bls.n	8004b92 <HAL_DMA_Init+0x29a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b48      	cmp	r3, #72	; 0x48
 8004b90:	d907      	bls.n	8004ba2 <HAL_DMA_Init+0x2aa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b4e      	cmp	r3, #78	; 0x4e
 8004b98:	d905      	bls.n	8004ba6 <HAL_DMA_Init+0x2ae>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b52      	cmp	r3, #82	; 0x52
 8004ba0:	d801      	bhi.n	8004ba6 <HAL_DMA_Init+0x2ae>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_DMA_Init+0x2b0>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d117      	bne.n	8004c0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f002 f8ed 	bl	8006dd0 <DMA_CheckFifoParam>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e197      	b.n	8004f3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f002 f828 	bl	8006c6c <DMA_CalcBaseAndBitshift>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	223f      	movs	r2, #63	; 0x3f
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	e0cd      	b.n	8004dce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <HAL_DMA_Init+0x42c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a39      	ldr	r2, [pc, #228]	; (8004d28 <HAL_DMA_Init+0x430>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a38      	ldr	r2, [pc, #224]	; (8004d2c <HAL_DMA_Init+0x434>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a36      	ldr	r2, [pc, #216]	; (8004d30 <HAL_DMA_Init+0x438>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a35      	ldr	r2, [pc, #212]	; (8004d34 <HAL_DMA_Init+0x43c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <HAL_DMA_Init+0x440>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a32      	ldr	r2, [pc, #200]	; (8004d3c <HAL_DMA_Init+0x444>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_DMA_Init+0x38a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a30      	ldr	r2, [pc, #192]	; (8004d40 <HAL_DMA_Init+0x448>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <HAL_DMA_Init+0x38e>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_DMA_Init+0x390>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8097 	beq.w	8004dbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <HAL_DMA_Init+0x42c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d021      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Init+0x430>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01c      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_DMA_Init+0x434>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d017      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_DMA_Init+0x438>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d012      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_DMA_Init+0x43c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00d      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_DMA_Init+0x440>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d008      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_DMA_Init+0x444>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <HAL_DMA_Init+0x3e4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_DMA_Init+0x448>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_DMA_Init+0x44c>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d020      	beq.n	8004d48 <HAL_DMA_Init+0x450>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d102      	bne.n	8004d14 <HAL_DMA_Init+0x41c>
 8004d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d12:	e01a      	b.n	8004d4a <HAL_DMA_Init+0x452>
 8004d14:	2300      	movs	r3, #0
 8004d16:	e018      	b.n	8004d4a <HAL_DMA_Init+0x452>
 8004d18:	fe10803f 	.word	0xfe10803f
 8004d1c:	5c001000 	.word	0x5c001000
 8004d20:	ffff0000 	.word	0xffff0000
 8004d24:	58025408 	.word	0x58025408
 8004d28:	5802541c 	.word	0x5802541c
 8004d2c:	58025430 	.word	0x58025430
 8004d30:	58025444 	.word	0x58025444
 8004d34:	58025458 	.word	0x58025458
 8004d38:	5802546c 	.word	0x5802546c
 8004d3c:	58025480 	.word	0x58025480
 8004d40:	58025494 	.word	0x58025494
 8004d44:	fffe000f 	.word	0xfffe000f
 8004d48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68d2      	ldr	r2, [r2, #12]
 8004d4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b6e      	ldr	r3, [pc, #440]	; (8004f48 <HAL_DMA_Init+0x650>)
 8004d90:	4413      	add	r3, r2
 8004d92:	4a6e      	ldr	r2, [pc, #440]	; (8004f4c <HAL_DMA_Init+0x654>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	009a      	lsls	r2, r3, #2
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 ff63 	bl	8006c6c <DMA_CalcBaseAndBitshift>
 8004da6:	4603      	mov	r3, r0
 8004da8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2201      	movs	r2, #1
 8004db4:	409a      	lsls	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	e008      	b.n	8004dce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0b7      	b.n	8004f3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5f      	ldr	r2, [pc, #380]	; (8004f50 <HAL_DMA_Init+0x658>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d072      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a5d      	ldr	r2, [pc, #372]	; (8004f54 <HAL_DMA_Init+0x65c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d06d      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a5c      	ldr	r2, [pc, #368]	; (8004f58 <HAL_DMA_Init+0x660>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d068      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a5a      	ldr	r2, [pc, #360]	; (8004f5c <HAL_DMA_Init+0x664>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d063      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a59      	ldr	r2, [pc, #356]	; (8004f60 <HAL_DMA_Init+0x668>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d05e      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a57      	ldr	r2, [pc, #348]	; (8004f64 <HAL_DMA_Init+0x66c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d059      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a56      	ldr	r2, [pc, #344]	; (8004f68 <HAL_DMA_Init+0x670>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d054      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a54      	ldr	r2, [pc, #336]	; (8004f6c <HAL_DMA_Init+0x674>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04f      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a53      	ldr	r2, [pc, #332]	; (8004f70 <HAL_DMA_Init+0x678>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04a      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a51      	ldr	r2, [pc, #324]	; (8004f74 <HAL_DMA_Init+0x67c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d045      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a50      	ldr	r2, [pc, #320]	; (8004f78 <HAL_DMA_Init+0x680>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d040      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <HAL_DMA_Init+0x684>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d03b      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4d      	ldr	r2, [pc, #308]	; (8004f80 <HAL_DMA_Init+0x688>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d036      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a4b      	ldr	r2, [pc, #300]	; (8004f84 <HAL_DMA_Init+0x68c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d031      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4a      	ldr	r2, [pc, #296]	; (8004f88 <HAL_DMA_Init+0x690>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d02c      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a48      	ldr	r2, [pc, #288]	; (8004f8c <HAL_DMA_Init+0x694>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d027      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a47      	ldr	r2, [pc, #284]	; (8004f90 <HAL_DMA_Init+0x698>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a45      	ldr	r2, [pc, #276]	; (8004f94 <HAL_DMA_Init+0x69c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01d      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a44      	ldr	r2, [pc, #272]	; (8004f98 <HAL_DMA_Init+0x6a0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <HAL_DMA_Init+0x6a4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <HAL_DMA_Init+0x6a8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00e      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <HAL_DMA_Init+0x6ac>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3e      	ldr	r2, [pc, #248]	; (8004fa8 <HAL_DMA_Init+0x6b0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_DMA_Init+0x5c6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	; (8004fac <HAL_DMA_Init+0x6b4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_Init+0x5ca>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_DMA_Init+0x5cc>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d032      	beq.n	8004f2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 fffd 	bl	8006ec8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d102      	bne.n	8004edc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ef0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d010      	beq.n	8004f1c <HAL_DMA_Init+0x624>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d80c      	bhi.n	8004f1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f002 f87a 	bl	8006ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e008      	b.n	8004f2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	a7fdabf8 	.word	0xa7fdabf8
 8004f4c:	cccccccd 	.word	0xcccccccd
 8004f50:	40020010 	.word	0x40020010
 8004f54:	40020028 	.word	0x40020028
 8004f58:	40020040 	.word	0x40020040
 8004f5c:	40020058 	.word	0x40020058
 8004f60:	40020070 	.word	0x40020070
 8004f64:	40020088 	.word	0x40020088
 8004f68:	400200a0 	.word	0x400200a0
 8004f6c:	400200b8 	.word	0x400200b8
 8004f70:	40020410 	.word	0x40020410
 8004f74:	40020428 	.word	0x40020428
 8004f78:	40020440 	.word	0x40020440
 8004f7c:	40020458 	.word	0x40020458
 8004f80:	40020470 	.word	0x40020470
 8004f84:	40020488 	.word	0x40020488
 8004f88:	400204a0 	.word	0x400204a0
 8004f8c:	400204b8 	.word	0x400204b8
 8004f90:	58025408 	.word	0x58025408
 8004f94:	5802541c 	.word	0x5802541c
 8004f98:	58025430 	.word	0x58025430
 8004f9c:	58025444 	.word	0x58025444
 8004fa0:	58025458 	.word	0x58025458
 8004fa4:	5802546c 	.word	0x5802546c
 8004fa8:	58025480 	.word	0x58025480
 8004fac:	58025494 	.word	0x58025494

08004fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e226      	b.n	800541a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Start_IT+0x2a>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e21f      	b.n	800541a <HAL_DMA_Start_IT+0x46a>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	f040 820a 	bne.w	8005404 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a68      	ldr	r2, [pc, #416]	; (80051a4 <HAL_DMA_Start_IT+0x1f4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d04a      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a66      	ldr	r2, [pc, #408]	; (80051a8 <HAL_DMA_Start_IT+0x1f8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d045      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a65      	ldr	r2, [pc, #404]	; (80051ac <HAL_DMA_Start_IT+0x1fc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d040      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_DMA_Start_IT+0x200>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d03b      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a62      	ldr	r2, [pc, #392]	; (80051b4 <HAL_DMA_Start_IT+0x204>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d036      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a60      	ldr	r2, [pc, #384]	; (80051b8 <HAL_DMA_Start_IT+0x208>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a5f      	ldr	r2, [pc, #380]	; (80051bc <HAL_DMA_Start_IT+0x20c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d02c      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a5d      	ldr	r2, [pc, #372]	; (80051c0 <HAL_DMA_Start_IT+0x210>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d027      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a5c      	ldr	r2, [pc, #368]	; (80051c4 <HAL_DMA_Start_IT+0x214>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a5a      	ldr	r2, [pc, #360]	; (80051c8 <HAL_DMA_Start_IT+0x218>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a59      	ldr	r2, [pc, #356]	; (80051cc <HAL_DMA_Start_IT+0x21c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a57      	ldr	r2, [pc, #348]	; (80051d0 <HAL_DMA_Start_IT+0x220>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a56      	ldr	r2, [pc, #344]	; (80051d4 <HAL_DMA_Start_IT+0x224>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a54      	ldr	r2, [pc, #336]	; (80051d8 <HAL_DMA_Start_IT+0x228>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a53      	ldr	r2, [pc, #332]	; (80051dc <HAL_DMA_Start_IT+0x22c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_DMA_Start_IT+0xee>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a51      	ldr	r2, [pc, #324]	; (80051e0 <HAL_DMA_Start_IT+0x230>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <HAL_DMA_Start_IT+0x100>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e007      	b.n	80050c0 <HAL_DMA_Start_IT+0x110>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f001 fc24 	bl	8006914 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	; (80051a4 <HAL_DMA_Start_IT+0x1f4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d04a      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a33      	ldr	r2, [pc, #204]	; (80051a8 <HAL_DMA_Start_IT+0x1f8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d045      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a31      	ldr	r2, [pc, #196]	; (80051ac <HAL_DMA_Start_IT+0x1fc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d040      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <HAL_DMA_Start_IT+0x200>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d03b      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <HAL_DMA_Start_IT+0x204>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d036      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <HAL_DMA_Start_IT+0x208>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d031      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_DMA_Start_IT+0x20c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02c      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <HAL_DMA_Start_IT+0x210>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d027      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <HAL_DMA_Start_IT+0x214>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <HAL_DMA_Start_IT+0x218>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HAL_DMA_Start_IT+0x21c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <HAL_DMA_Start_IT+0x220>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_DMA_Start_IT+0x224>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <HAL_DMA_Start_IT+0x228>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_DMA_Start_IT+0x22c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_DMA_Start_IT+0x1bc>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_DMA_Start_IT+0x230>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Start_IT+0x1c0>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_DMA_Start_IT+0x1c2>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d036      	beq.n	80051e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f023 021e 	bic.w	r2, r3, #30
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0216 	orr.w	r2, r2, #22
 8005188:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d03e      	beq.n	8005210 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0208 	orr.w	r2, r2, #8
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e035      	b.n	8005210 <HAL_DMA_Start_IT+0x260>
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 020e 	bic.w	r2, r3, #14
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 020a 	orr.w	r2, r2, #10
 80051f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0204 	orr.w	r2, r2, #4
 800520e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a83      	ldr	r2, [pc, #524]	; (8005424 <HAL_DMA_Start_IT+0x474>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d072      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a82      	ldr	r2, [pc, #520]	; (8005428 <HAL_DMA_Start_IT+0x478>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d06d      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a80      	ldr	r2, [pc, #512]	; (800542c <HAL_DMA_Start_IT+0x47c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d068      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7f      	ldr	r2, [pc, #508]	; (8005430 <HAL_DMA_Start_IT+0x480>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d063      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a7d      	ldr	r2, [pc, #500]	; (8005434 <HAL_DMA_Start_IT+0x484>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d05e      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7c      	ldr	r2, [pc, #496]	; (8005438 <HAL_DMA_Start_IT+0x488>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d059      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7a      	ldr	r2, [pc, #488]	; (800543c <HAL_DMA_Start_IT+0x48c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d054      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a79      	ldr	r2, [pc, #484]	; (8005440 <HAL_DMA_Start_IT+0x490>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d04f      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a77      	ldr	r2, [pc, #476]	; (8005444 <HAL_DMA_Start_IT+0x494>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04a      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a76      	ldr	r2, [pc, #472]	; (8005448 <HAL_DMA_Start_IT+0x498>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d045      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a74      	ldr	r2, [pc, #464]	; (800544c <HAL_DMA_Start_IT+0x49c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d040      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a73      	ldr	r2, [pc, #460]	; (8005450 <HAL_DMA_Start_IT+0x4a0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d03b      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a71      	ldr	r2, [pc, #452]	; (8005454 <HAL_DMA_Start_IT+0x4a4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d036      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a70      	ldr	r2, [pc, #448]	; (8005458 <HAL_DMA_Start_IT+0x4a8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d031      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6e      	ldr	r2, [pc, #440]	; (800545c <HAL_DMA_Start_IT+0x4ac>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02c      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a6d      	ldr	r2, [pc, #436]	; (8005460 <HAL_DMA_Start_IT+0x4b0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6b      	ldr	r2, [pc, #428]	; (8005464 <HAL_DMA_Start_IT+0x4b4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6a      	ldr	r2, [pc, #424]	; (8005468 <HAL_DMA_Start_IT+0x4b8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a68      	ldr	r2, [pc, #416]	; (800546c <HAL_DMA_Start_IT+0x4bc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a67      	ldr	r2, [pc, #412]	; (8005470 <HAL_DMA_Start_IT+0x4c0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_DMA_Start_IT+0x4c4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a64      	ldr	r2, [pc, #400]	; (8005478 <HAL_DMA_Start_IT+0x4c8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a62      	ldr	r2, [pc, #392]	; (800547c <HAL_DMA_Start_IT+0x4cc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_DMA_Start_IT+0x350>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a61      	ldr	r2, [pc, #388]	; (8005480 <HAL_DMA_Start_IT+0x4d0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <HAL_DMA_Start_IT+0x354>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_DMA_Start_IT+0x356>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01a      	beq.n	8005340 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a37      	ldr	r2, [pc, #220]	; (8005424 <HAL_DMA_Start_IT+0x474>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d04a      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a36      	ldr	r2, [pc, #216]	; (8005428 <HAL_DMA_Start_IT+0x478>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d045      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a34      	ldr	r2, [pc, #208]	; (800542c <HAL_DMA_Start_IT+0x47c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a33      	ldr	r2, [pc, #204]	; (8005430 <HAL_DMA_Start_IT+0x480>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d03b      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a31      	ldr	r2, [pc, #196]	; (8005434 <HAL_DMA_Start_IT+0x484>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d036      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a30      	ldr	r2, [pc, #192]	; (8005438 <HAL_DMA_Start_IT+0x488>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d031      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2e      	ldr	r2, [pc, #184]	; (800543c <HAL_DMA_Start_IT+0x48c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02c      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2d      	ldr	r2, [pc, #180]	; (8005440 <HAL_DMA_Start_IT+0x490>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2b      	ldr	r2, [pc, #172]	; (8005444 <HAL_DMA_Start_IT+0x494>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <HAL_DMA_Start_IT+0x498>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01d      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a28      	ldr	r2, [pc, #160]	; (800544c <HAL_DMA_Start_IT+0x49c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_DMA_Start_IT+0x4a0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <HAL_DMA_Start_IT+0x4a4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a24      	ldr	r2, [pc, #144]	; (8005458 <HAL_DMA_Start_IT+0x4a8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <HAL_DMA_Start_IT+0x4ac>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_DMA_Start_IT+0x430>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a21      	ldr	r2, [pc, #132]	; (8005460 <HAL_DMA_Start_IT+0x4b0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <HAL_DMA_Start_IT+0x442>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e012      	b.n	8005418 <HAL_DMA_Start_IT+0x468>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e009      	b.n	8005418 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800540a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40020010 	.word	0x40020010
 8005428:	40020028 	.word	0x40020028
 800542c:	40020040 	.word	0x40020040
 8005430:	40020058 	.word	0x40020058
 8005434:	40020070 	.word	0x40020070
 8005438:	40020088 	.word	0x40020088
 800543c:	400200a0 	.word	0x400200a0
 8005440:	400200b8 	.word	0x400200b8
 8005444:	40020410 	.word	0x40020410
 8005448:	40020428 	.word	0x40020428
 800544c:	40020440 	.word	0x40020440
 8005450:	40020458 	.word	0x40020458
 8005454:	40020470 	.word	0x40020470
 8005458:	40020488 	.word	0x40020488
 800545c:	400204a0 	.word	0x400204a0
 8005460:	400204b8 	.word	0x400204b8
 8005464:	58025408 	.word	0x58025408
 8005468:	5802541c 	.word	0x5802541c
 800546c:	58025430 	.word	0x58025430
 8005470:	58025444 	.word	0x58025444
 8005474:	58025458 	.word	0x58025458
 8005478:	5802546c 	.word	0x5802546c
 800547c:	58025480 	.word	0x58025480
 8005480:	58025494 	.word	0x58025494

08005484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800548c:	f7fd f9fa 	bl	8002884 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e2dc      	b.n	8005a56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d008      	beq.n	80054ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e2cd      	b.n	8005a56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a76      	ldr	r2, [pc, #472]	; (8005698 <HAL_DMA_Abort+0x214>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d04a      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a74      	ldr	r2, [pc, #464]	; (800569c <HAL_DMA_Abort+0x218>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d045      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a73      	ldr	r2, [pc, #460]	; (80056a0 <HAL_DMA_Abort+0x21c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d040      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a71      	ldr	r2, [pc, #452]	; (80056a4 <HAL_DMA_Abort+0x220>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d03b      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a70      	ldr	r2, [pc, #448]	; (80056a8 <HAL_DMA_Abort+0x224>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d036      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a6e      	ldr	r2, [pc, #440]	; (80056ac <HAL_DMA_Abort+0x228>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d031      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6d      	ldr	r2, [pc, #436]	; (80056b0 <HAL_DMA_Abort+0x22c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d02c      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <HAL_DMA_Abort+0x230>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d027      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6a      	ldr	r2, [pc, #424]	; (80056b8 <HAL_DMA_Abort+0x234>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	; (80056bc <HAL_DMA_Abort+0x238>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01d      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a67      	ldr	r2, [pc, #412]	; (80056c0 <HAL_DMA_Abort+0x23c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a65      	ldr	r2, [pc, #404]	; (80056c4 <HAL_DMA_Abort+0x240>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a64      	ldr	r2, [pc, #400]	; (80056c8 <HAL_DMA_Abort+0x244>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a62      	ldr	r2, [pc, #392]	; (80056cc <HAL_DMA_Abort+0x248>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a61      	ldr	r2, [pc, #388]	; (80056d0 <HAL_DMA_Abort+0x24c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_DMA_Abort+0xd6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5f      	ldr	r2, [pc, #380]	; (80056d4 <HAL_DMA_Abort+0x250>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_DMA_Abort+0xda>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <HAL_DMA_Abort+0xdc>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 021e 	bic.w	r2, r2, #30
 8005572:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005582:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e00a      	b.n	80055a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 020e 	bic.w	r2, r2, #14
 800559a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <HAL_DMA_Abort+0x214>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d072      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3a      	ldr	r2, [pc, #232]	; (800569c <HAL_DMA_Abort+0x218>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d06d      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <HAL_DMA_Abort+0x21c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d068      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <HAL_DMA_Abort+0x220>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d063      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a36      	ldr	r2, [pc, #216]	; (80056a8 <HAL_DMA_Abort+0x224>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d05e      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a34      	ldr	r2, [pc, #208]	; (80056ac <HAL_DMA_Abort+0x228>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d059      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a33      	ldr	r2, [pc, #204]	; (80056b0 <HAL_DMA_Abort+0x22c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d054      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a31      	ldr	r2, [pc, #196]	; (80056b4 <HAL_DMA_Abort+0x230>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d04f      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a30      	ldr	r2, [pc, #192]	; (80056b8 <HAL_DMA_Abort+0x234>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d04a      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <HAL_DMA_Abort+0x238>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d045      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2d      	ldr	r2, [pc, #180]	; (80056c0 <HAL_DMA_Abort+0x23c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d040      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2b      	ldr	r2, [pc, #172]	; (80056c4 <HAL_DMA_Abort+0x240>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d03b      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2a      	ldr	r2, [pc, #168]	; (80056c8 <HAL_DMA_Abort+0x244>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d036      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a28      	ldr	r2, [pc, #160]	; (80056cc <HAL_DMA_Abort+0x248>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d031      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a27      	ldr	r2, [pc, #156]	; (80056d0 <HAL_DMA_Abort+0x24c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d02c      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a25      	ldr	r2, [pc, #148]	; (80056d4 <HAL_DMA_Abort+0x250>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d027      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <HAL_DMA_Abort+0x254>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a22      	ldr	r2, [pc, #136]	; (80056dc <HAL_DMA_Abort+0x258>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01d      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <HAL_DMA_Abort+0x25c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1f      	ldr	r2, [pc, #124]	; (80056e4 <HAL_DMA_Abort+0x260>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <HAL_DMA_Abort+0x264>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <HAL_DMA_Abort+0x268>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_DMA_Abort+0x26c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_Abort+0x20e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_DMA_Abort+0x270>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d132      	bne.n	80056f8 <HAL_DMA_Abort+0x274>
 8005692:	2301      	movs	r3, #1
 8005694:	e031      	b.n	80056fa <HAL_DMA_Abort+0x276>
 8005696:	bf00      	nop
 8005698:	40020010 	.word	0x40020010
 800569c:	40020028 	.word	0x40020028
 80056a0:	40020040 	.word	0x40020040
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40020070 	.word	0x40020070
 80056ac:	40020088 	.word	0x40020088
 80056b0:	400200a0 	.word	0x400200a0
 80056b4:	400200b8 	.word	0x400200b8
 80056b8:	40020410 	.word	0x40020410
 80056bc:	40020428 	.word	0x40020428
 80056c0:	40020440 	.word	0x40020440
 80056c4:	40020458 	.word	0x40020458
 80056c8:	40020470 	.word	0x40020470
 80056cc:	40020488 	.word	0x40020488
 80056d0:	400204a0 	.word	0x400204a0
 80056d4:	400204b8 	.word	0x400204b8
 80056d8:	58025408 	.word	0x58025408
 80056dc:	5802541c 	.word	0x5802541c
 80056e0:	58025430 	.word	0x58025430
 80056e4:	58025444 	.word	0x58025444
 80056e8:	58025458 	.word	0x58025458
 80056ec:	5802546c 	.word	0x5802546c
 80056f0:	58025480 	.word	0x58025480
 80056f4:	58025494 	.word	0x58025494
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800570c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6d      	ldr	r2, [pc, #436]	; (80058c8 <HAL_DMA_Abort+0x444>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d04a      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6b      	ldr	r2, [pc, #428]	; (80058cc <HAL_DMA_Abort+0x448>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d045      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6a      	ldr	r2, [pc, #424]	; (80058d0 <HAL_DMA_Abort+0x44c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d040      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a68      	ldr	r2, [pc, #416]	; (80058d4 <HAL_DMA_Abort+0x450>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d03b      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a67      	ldr	r2, [pc, #412]	; (80058d8 <HAL_DMA_Abort+0x454>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d036      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_DMA_Abort+0x458>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d031      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <HAL_DMA_Abort+0x45c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d02c      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a62      	ldr	r2, [pc, #392]	; (80058e4 <HAL_DMA_Abort+0x460>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d027      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a61      	ldr	r2, [pc, #388]	; (80058e8 <HAL_DMA_Abort+0x464>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a5f      	ldr	r2, [pc, #380]	; (80058ec <HAL_DMA_Abort+0x468>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01d      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a5e      	ldr	r2, [pc, #376]	; (80058f0 <HAL_DMA_Abort+0x46c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d018      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a5c      	ldr	r2, [pc, #368]	; (80058f4 <HAL_DMA_Abort+0x470>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5b      	ldr	r2, [pc, #364]	; (80058f8 <HAL_DMA_Abort+0x474>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a59      	ldr	r2, [pc, #356]	; (80058fc <HAL_DMA_Abort+0x478>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_DMA_Abort+0x47c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_DMA_Abort+0x32a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a56      	ldr	r2, [pc, #344]	; (8005904 <HAL_DMA_Abort+0x480>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <HAL_DMA_Abort+0x33c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e007      	b.n	80057d0 <HAL_DMA_Abort+0x34c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057d0:	e013      	b.n	80057fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057d2:	f7fd f857 	bl	8002884 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b05      	cmp	r3, #5
 80057de:	d90c      	bls.n	80057fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e12d      	b.n	8005a56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <HAL_DMA_Abort+0x444>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d04a      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_DMA_Abort+0x448>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d045      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <HAL_DMA_Abort+0x44c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d040      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <HAL_DMA_Abort+0x450>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d03b      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <HAL_DMA_Abort+0x454>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d036      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_DMA_Abort+0x458>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d031      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <HAL_DMA_Abort+0x45c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d02c      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_DMA_Abort+0x460>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d027      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a23      	ldr	r2, [pc, #140]	; (80058e8 <HAL_DMA_Abort+0x464>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d022      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <HAL_DMA_Abort+0x468>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01d      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <HAL_DMA_Abort+0x46c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <HAL_DMA_Abort+0x470>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <HAL_DMA_Abort+0x474>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <HAL_DMA_Abort+0x478>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1a      	ldr	r2, [pc, #104]	; (8005900 <HAL_DMA_Abort+0x47c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_DMA_Abort+0x422>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a18      	ldr	r2, [pc, #96]	; (8005904 <HAL_DMA_Abort+0x480>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <HAL_DMA_Abort+0x426>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <HAL_DMA_Abort+0x428>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02b      	beq.n	8005908 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	223f      	movs	r2, #63	; 0x3f
 80058c0:	409a      	lsls	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	e02a      	b.n	800591e <HAL_DMA_Abort+0x49a>
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a4f      	ldr	r2, [pc, #316]	; (8005a60 <HAL_DMA_Abort+0x5dc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d072      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a4d      	ldr	r2, [pc, #308]	; (8005a64 <HAL_DMA_Abort+0x5e0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d06d      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a4c      	ldr	r2, [pc, #304]	; (8005a68 <HAL_DMA_Abort+0x5e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d068      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <HAL_DMA_Abort+0x5e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d063      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a49      	ldr	r2, [pc, #292]	; (8005a70 <HAL_DMA_Abort+0x5ec>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d05e      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a47      	ldr	r2, [pc, #284]	; (8005a74 <HAL_DMA_Abort+0x5f0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d059      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a46      	ldr	r2, [pc, #280]	; (8005a78 <HAL_DMA_Abort+0x5f4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d054      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a44      	ldr	r2, [pc, #272]	; (8005a7c <HAL_DMA_Abort+0x5f8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d04f      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a43      	ldr	r2, [pc, #268]	; (8005a80 <HAL_DMA_Abort+0x5fc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a41      	ldr	r2, [pc, #260]	; (8005a84 <HAL_DMA_Abort+0x600>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a40      	ldr	r2, [pc, #256]	; (8005a88 <HAL_DMA_Abort+0x604>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a3e      	ldr	r2, [pc, #248]	; (8005a8c <HAL_DMA_Abort+0x608>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <HAL_DMA_Abort+0x60c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3b      	ldr	r2, [pc, #236]	; (8005a94 <HAL_DMA_Abort+0x610>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a3a      	ldr	r2, [pc, #232]	; (8005a98 <HAL_DMA_Abort+0x614>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <HAL_DMA_Abort+0x618>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a37      	ldr	r2, [pc, #220]	; (8005aa0 <HAL_DMA_Abort+0x61c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a35      	ldr	r2, [pc, #212]	; (8005aa4 <HAL_DMA_Abort+0x620>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <HAL_DMA_Abort+0x624>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a32      	ldr	r2, [pc, #200]	; (8005aac <HAL_DMA_Abort+0x628>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <HAL_DMA_Abort+0x62c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <HAL_DMA_Abort+0x630>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2e      	ldr	r2, [pc, #184]	; (8005ab8 <HAL_DMA_Abort+0x634>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMA_Abort+0x58a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <HAL_DMA_Abort+0x638>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Abort+0x58e>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <HAL_DMA_Abort+0x590>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d015      	beq.n	8005a44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40020010 	.word	0x40020010
 8005a64:	40020028 	.word	0x40020028
 8005a68:	40020040 	.word	0x40020040
 8005a6c:	40020058 	.word	0x40020058
 8005a70:	40020070 	.word	0x40020070
 8005a74:	40020088 	.word	0x40020088
 8005a78:	400200a0 	.word	0x400200a0
 8005a7c:	400200b8 	.word	0x400200b8
 8005a80:	40020410 	.word	0x40020410
 8005a84:	40020428 	.word	0x40020428
 8005a88:	40020440 	.word	0x40020440
 8005a8c:	40020458 	.word	0x40020458
 8005a90:	40020470 	.word	0x40020470
 8005a94:	40020488 	.word	0x40020488
 8005a98:	400204a0 	.word	0x400204a0
 8005a9c:	400204b8 	.word	0x400204b8
 8005aa0:	58025408 	.word	0x58025408
 8005aa4:	5802541c 	.word	0x5802541c
 8005aa8:	58025430 	.word	0x58025430
 8005aac:	58025444 	.word	0x58025444
 8005ab0:	58025458 	.word	0x58025458
 8005ab4:	5802546c 	.word	0x5802546c
 8005ab8:	58025480 	.word	0x58025480
 8005abc:	58025494 	.word	0x58025494

08005ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	; 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005acc:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <HAL_DMA_IRQHandler+0x1ac>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <HAL_DMA_IRQHandler+0x1b0>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	0a9b      	lsrs	r3, r3, #10
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5f      	ldr	r2, [pc, #380]	; (8005c74 <HAL_DMA_IRQHandler+0x1b4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d04a      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5d      	ldr	r2, [pc, #372]	; (8005c78 <HAL_DMA_IRQHandler+0x1b8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d045      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5c      	ldr	r2, [pc, #368]	; (8005c7c <HAL_DMA_IRQHandler+0x1bc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d040      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a5a      	ldr	r2, [pc, #360]	; (8005c80 <HAL_DMA_IRQHandler+0x1c0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d03b      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a59      	ldr	r2, [pc, #356]	; (8005c84 <HAL_DMA_IRQHandler+0x1c4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d036      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a57      	ldr	r2, [pc, #348]	; (8005c88 <HAL_DMA_IRQHandler+0x1c8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d031      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a56      	ldr	r2, [pc, #344]	; (8005c8c <HAL_DMA_IRQHandler+0x1cc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d02c      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a54      	ldr	r2, [pc, #336]	; (8005c90 <HAL_DMA_IRQHandler+0x1d0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d027      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a53      	ldr	r2, [pc, #332]	; (8005c94 <HAL_DMA_IRQHandler+0x1d4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a51      	ldr	r2, [pc, #324]	; (8005c98 <HAL_DMA_IRQHandler+0x1d8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01d      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a50      	ldr	r2, [pc, #320]	; (8005c9c <HAL_DMA_IRQHandler+0x1dc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a4e      	ldr	r2, [pc, #312]	; (8005ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a4d      	ldr	r2, [pc, #308]	; (8005ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a4b      	ldr	r2, [pc, #300]	; (8005ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a4a      	ldr	r2, [pc, #296]	; (8005cac <HAL_DMA_IRQHandler+0x1ec>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xd2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a48      	ldr	r2, [pc, #288]	; (8005cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_IRQHandler+0xd6>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <HAL_DMA_IRQHandler+0xd8>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 842b 	beq.w	80063f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80a2 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2e      	ldr	r2, [pc, #184]	; (8005c74 <HAL_DMA_IRQHandler+0x1b4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d04a      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	; (8005c78 <HAL_DMA_IRQHandler+0x1b8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d045      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2b      	ldr	r2, [pc, #172]	; (8005c7c <HAL_DMA_IRQHandler+0x1bc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d040      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <HAL_DMA_IRQHandler+0x1c0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d03b      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <HAL_DMA_IRQHandler+0x1c4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d036      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <HAL_DMA_IRQHandler+0x1c8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d031      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a25      	ldr	r2, [pc, #148]	; (8005c8c <HAL_DMA_IRQHandler+0x1cc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d02c      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <HAL_DMA_IRQHandler+0x1d0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d027      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <HAL_DMA_IRQHandler+0x1d4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a21      	ldr	r2, [pc, #132]	; (8005c98 <HAL_DMA_IRQHandler+0x1d8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d01d      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <HAL_DMA_IRQHandler+0x1dc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_DMA_IRQHandler+0x1ec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x194>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d12f      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x1f4>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e02e      	b.n	8005cc8 <HAL_DMA_IRQHandler+0x208>
 8005c6a:	bf00      	nop
 8005c6c:	24000024 	.word	0x24000024
 8005c70:	1b4e81b5 	.word	0x1b4e81b5
 8005c74:	40020010 	.word	0x40020010
 8005c78:	40020028 	.word	0x40020028
 8005c7c:	40020040 	.word	0x40020040
 8005c80:	40020058 	.word	0x40020058
 8005c84:	40020070 	.word	0x40020070
 8005c88:	40020088 	.word	0x40020088
 8005c8c:	400200a0 	.word	0x400200a0
 8005c90:	400200b8 	.word	0x400200b8
 8005c94:	40020410 	.word	0x40020410
 8005c98:	40020428 	.word	0x40020428
 8005c9c:	40020440 	.word	0x40020440
 8005ca0:	40020458 	.word	0x40020458
 8005ca4:	40020470 	.word	0x40020470
 8005ca8:	40020488 	.word	0x40020488
 8005cac:	400204a0 	.word	0x400204a0
 8005cb0:	400204b8 	.word	0x400204b8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bf14      	ite	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	2300      	moveq	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d06e      	beq.n	8005dec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a69      	ldr	r2, [pc, #420]	; (8005eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d04a      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <HAL_DMA_IRQHandler+0x3fc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d045      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a66      	ldr	r2, [pc, #408]	; (8005ec0 <HAL_DMA_IRQHandler+0x400>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d040      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a64      	ldr	r2, [pc, #400]	; (8005ec4 <HAL_DMA_IRQHandler+0x404>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d03b      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a63      	ldr	r2, [pc, #396]	; (8005ec8 <HAL_DMA_IRQHandler+0x408>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d036      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a61      	ldr	r2, [pc, #388]	; (8005ecc <HAL_DMA_IRQHandler+0x40c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d031      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a60      	ldr	r2, [pc, #384]	; (8005ed0 <HAL_DMA_IRQHandler+0x410>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d02c      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5e      	ldr	r2, [pc, #376]	; (8005ed4 <HAL_DMA_IRQHandler+0x414>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d027      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5d      	ldr	r2, [pc, #372]	; (8005ed8 <HAL_DMA_IRQHandler+0x418>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d022      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5b      	ldr	r2, [pc, #364]	; (8005edc <HAL_DMA_IRQHandler+0x41c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01d      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5a      	ldr	r2, [pc, #360]	; (8005ee0 <HAL_DMA_IRQHandler+0x420>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a58      	ldr	r2, [pc, #352]	; (8005ee4 <HAL_DMA_IRQHandler+0x424>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a57      	ldr	r2, [pc, #348]	; (8005ee8 <HAL_DMA_IRQHandler+0x428>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a55      	ldr	r2, [pc, #340]	; (8005eec <HAL_DMA_IRQHandler+0x42c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a54      	ldr	r2, [pc, #336]	; (8005ef0 <HAL_DMA_IRQHandler+0x430>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_DMA_IRQHandler+0x2ee>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a52      	ldr	r2, [pc, #328]	; (8005ef4 <HAL_DMA_IRQHandler+0x434>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10a      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x304>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e003      	b.n	8005dcc <HAL_DMA_IRQHandler+0x30c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2201      	movs	r2, #1
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0202 	orr.w	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	2204      	movs	r2, #4
 8005df6:	409a      	lsls	r2, r3
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 808f 	beq.w	8005f20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2c      	ldr	r2, [pc, #176]	; (8005eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d04a      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <HAL_DMA_IRQHandler+0x3fc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d045      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a29      	ldr	r2, [pc, #164]	; (8005ec0 <HAL_DMA_IRQHandler+0x400>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d040      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <HAL_DMA_IRQHandler+0x404>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d03b      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <HAL_DMA_IRQHandler+0x408>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d036      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_DMA_IRQHandler+0x40c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d031      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <HAL_DMA_IRQHandler+0x410>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d02c      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <HAL_DMA_IRQHandler+0x414>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d027      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <HAL_DMA_IRQHandler+0x418>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <HAL_DMA_IRQHandler+0x41c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01d      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_DMA_IRQHandler+0x420>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_DMA_IRQHandler+0x424>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_DMA_IRQHandler+0x428>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_DMA_IRQHandler+0x42c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_DMA_IRQHandler+0x430>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x3e2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_DMA_IRQHandler+0x434>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d12a      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x438>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e023      	b.n	8005f00 <HAL_DMA_IRQHandler+0x440>
 8005eb8:	40020010 	.word	0x40020010
 8005ebc:	40020028 	.word	0x40020028
 8005ec0:	40020040 	.word	0x40020040
 8005ec4:	40020058 	.word	0x40020058
 8005ec8:	40020070 	.word	0x40020070
 8005ecc:	40020088 	.word	0x40020088
 8005ed0:	400200a0 	.word	0x400200a0
 8005ed4:	400200b8 	.word	0x400200b8
 8005ed8:	40020410 	.word	0x40020410
 8005edc:	40020428 	.word	0x40020428
 8005ee0:	40020440 	.word	0x40020440
 8005ee4:	40020458 	.word	0x40020458
 8005ee8:	40020470 	.word	0x40020470
 8005eec:	40020488 	.word	0x40020488
 8005ef0:	400204a0 	.word	0x400204a0
 8005ef4:	400204b8 	.word	0x400204b8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00d      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2210      	movs	r2, #16
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80a6 	beq.w	8006082 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a85      	ldr	r2, [pc, #532]	; (8006150 <HAL_DMA_IRQHandler+0x690>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a83      	ldr	r2, [pc, #524]	; (8006154 <HAL_DMA_IRQHandler+0x694>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a82      	ldr	r2, [pc, #520]	; (8006158 <HAL_DMA_IRQHandler+0x698>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a80      	ldr	r2, [pc, #512]	; (800615c <HAL_DMA_IRQHandler+0x69c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7f      	ldr	r2, [pc, #508]	; (8006160 <HAL_DMA_IRQHandler+0x6a0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a7d      	ldr	r2, [pc, #500]	; (8006164 <HAL_DMA_IRQHandler+0x6a4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a7c      	ldr	r2, [pc, #496]	; (8006168 <HAL_DMA_IRQHandler+0x6a8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a7a      	ldr	r2, [pc, #488]	; (800616c <HAL_DMA_IRQHandler+0x6ac>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a79      	ldr	r2, [pc, #484]	; (8006170 <HAL_DMA_IRQHandler+0x6b0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a77      	ldr	r2, [pc, #476]	; (8006174 <HAL_DMA_IRQHandler+0x6b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a76      	ldr	r2, [pc, #472]	; (8006178 <HAL_DMA_IRQHandler+0x6b8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a74      	ldr	r2, [pc, #464]	; (800617c <HAL_DMA_IRQHandler+0x6bc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a73      	ldr	r2, [pc, #460]	; (8006180 <HAL_DMA_IRQHandler+0x6c0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a71      	ldr	r2, [pc, #452]	; (8006184 <HAL_DMA_IRQHandler+0x6c4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a70      	ldr	r2, [pc, #448]	; (8006188 <HAL_DMA_IRQHandler+0x6c8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x516>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a6e      	ldr	r2, [pc, #440]	; (800618c <HAL_DMA_IRQHandler+0x6cc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d10a      	bne.n	8005fec <HAL_DMA_IRQHandler+0x52c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e009      	b.n	8006000 <HAL_DMA_IRQHandler+0x540>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d03e      	beq.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2210      	movs	r2, #16
 800600e:	409a      	lsls	r2, r3
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d024      	beq.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
 8006040:	e01f      	b.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01b      	beq.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
 8006052:	e016      	b.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d107      	bne.n	8006072 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0208 	bic.w	r2, r2, #8
 8006070:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2220      	movs	r2, #32
 800608c:	409a      	lsls	r2, r3
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8110 	beq.w	80062b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2c      	ldr	r2, [pc, #176]	; (8006150 <HAL_DMA_IRQHandler+0x690>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d04a      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <HAL_DMA_IRQHandler+0x694>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d045      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a29      	ldr	r2, [pc, #164]	; (8006158 <HAL_DMA_IRQHandler+0x698>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d040      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a28      	ldr	r2, [pc, #160]	; (800615c <HAL_DMA_IRQHandler+0x69c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d03b      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a26      	ldr	r2, [pc, #152]	; (8006160 <HAL_DMA_IRQHandler+0x6a0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d036      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a25      	ldr	r2, [pc, #148]	; (8006164 <HAL_DMA_IRQHandler+0x6a4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d031      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a23      	ldr	r2, [pc, #140]	; (8006168 <HAL_DMA_IRQHandler+0x6a8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d02c      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_DMA_IRQHandler+0x6ac>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d027      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <HAL_DMA_IRQHandler+0x6b0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d022      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_DMA_IRQHandler+0x6b4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d01d      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <HAL_DMA_IRQHandler+0x6b8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_DMA_IRQHandler+0x6bc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_DMA_IRQHandler+0x6c0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_DMA_IRQHandler+0x6c4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_DMA_IRQHandler+0x6c8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_DMA_IRQHandler+0x678>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_DMA_IRQHandler+0x6cc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d12b      	bne.n	8006190 <HAL_DMA_IRQHandler+0x6d0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b00      	cmp	r3, #0
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	e02a      	b.n	80061a4 <HAL_DMA_IRQHandler+0x6e4>
 800614e:	bf00      	nop
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	40020040 	.word	0x40020040
 800615c:	40020058 	.word	0x40020058
 8006160:	40020070 	.word	0x40020070
 8006164:	40020088 	.word	0x40020088
 8006168:	400200a0 	.word	0x400200a0
 800616c:	400200b8 	.word	0x400200b8
 8006170:	40020410 	.word	0x40020410
 8006174:	40020428 	.word	0x40020428
 8006178:	40020440 	.word	0x40020440
 800617c:	40020458 	.word	0x40020458
 8006180:	40020470 	.word	0x40020470
 8006184:	40020488 	.word	0x40020488
 8006188:	400204a0 	.word	0x400204a0
 800618c:	400204b8 	.word	0x400204b8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8087 	beq.w	80062b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2220      	movs	r2, #32
 80061b4:	409a      	lsls	r2, r3
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d139      	bne.n	800623a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0216 	bic.w	r2, r2, #22
 80061d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <HAL_DMA_IRQHandler+0x736>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0208 	bic.w	r2, r2, #8
 8006204:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	223f      	movs	r2, #63	; 0x3f
 8006210:	409a      	lsls	r2, r3
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 834a 	beq.w	80068c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
          }
          return;
 8006238:	e344      	b.n	80068c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d018      	beq.n	800627a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d108      	bne.n	8006268 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b00      	cmp	r3, #0
 800625c:	d02c      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
 8006266:	e027      	b.n	80062b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d023      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	4798      	blx	r3
 8006278:	e01e      	b.n	80062b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10f      	bne.n	80062a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0210 	bic.w	r2, r2, #16
 8006296:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8306 	beq.w	80068ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8088 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a7a      	ldr	r2, [pc, #488]	; (80064c8 <HAL_DMA_IRQHandler+0xa08>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04a      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a79      	ldr	r2, [pc, #484]	; (80064cc <HAL_DMA_IRQHandler+0xa0c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d045      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a77      	ldr	r2, [pc, #476]	; (80064d0 <HAL_DMA_IRQHandler+0xa10>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d040      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a76      	ldr	r2, [pc, #472]	; (80064d4 <HAL_DMA_IRQHandler+0xa14>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d03b      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a74      	ldr	r2, [pc, #464]	; (80064d8 <HAL_DMA_IRQHandler+0xa18>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d036      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a73      	ldr	r2, [pc, #460]	; (80064dc <HAL_DMA_IRQHandler+0xa1c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d031      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a71      	ldr	r2, [pc, #452]	; (80064e0 <HAL_DMA_IRQHandler+0xa20>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02c      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a70      	ldr	r2, [pc, #448]	; (80064e4 <HAL_DMA_IRQHandler+0xa24>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d027      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a6e      	ldr	r2, [pc, #440]	; (80064e8 <HAL_DMA_IRQHandler+0xa28>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d022      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6d      	ldr	r2, [pc, #436]	; (80064ec <HAL_DMA_IRQHandler+0xa2c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d01d      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6b      	ldr	r2, [pc, #428]	; (80064f0 <HAL_DMA_IRQHandler+0xa30>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a6a      	ldr	r2, [pc, #424]	; (80064f4 <HAL_DMA_IRQHandler+0xa34>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a68      	ldr	r2, [pc, #416]	; (80064f8 <HAL_DMA_IRQHandler+0xa38>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a67      	ldr	r2, [pc, #412]	; (80064fc <HAL_DMA_IRQHandler+0xa3c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a65      	ldr	r2, [pc, #404]	; (8006500 <HAL_DMA_IRQHandler+0xa40>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_DMA_IRQHandler+0x8b8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a64      	ldr	r2, [pc, #400]	; (8006504 <HAL_DMA_IRQHandler+0xa44>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d108      	bne.n	800638a <HAL_DMA_IRQHandler+0x8ca>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e007      	b.n	800639a <HAL_DMA_IRQHandler+0x8da>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d307      	bcc.n	80063b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f2      	bne.n	800639a <HAL_DMA_IRQHandler+0x8da>
 80063b4:	e000      	b.n	80063b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80063b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80063ce:	e003      	b.n	80063d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8272 	beq.w	80068ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	e26c      	b.n	80068ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a43      	ldr	r2, [pc, #268]	; (8006508 <HAL_DMA_IRQHandler+0xa48>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d022      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a42      	ldr	r2, [pc, #264]	; (800650c <HAL_DMA_IRQHandler+0xa4c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d01d      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a40      	ldr	r2, [pc, #256]	; (8006510 <HAL_DMA_IRQHandler+0xa50>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d018      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a3f      	ldr	r2, [pc, #252]	; (8006514 <HAL_DMA_IRQHandler+0xa54>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d013      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a3d      	ldr	r2, [pc, #244]	; (8006518 <HAL_DMA_IRQHandler+0xa58>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00e      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a3c      	ldr	r2, [pc, #240]	; (800651c <HAL_DMA_IRQHandler+0xa5c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d009      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a3a      	ldr	r2, [pc, #232]	; (8006520 <HAL_DMA_IRQHandler+0xa60>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_DMA_IRQHandler+0x984>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a39      	ldr	r2, [pc, #228]	; (8006524 <HAL_DMA_IRQHandler+0xa64>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d101      	bne.n	8006448 <HAL_DMA_IRQHandler+0x988>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <HAL_DMA_IRQHandler+0x98a>
 8006448:	2300      	movs	r3, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 823f 	beq.w	80068ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2204      	movs	r2, #4
 8006462:	409a      	lsls	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4013      	ands	r3, r2
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80cd 	beq.w	8006608 <HAL_DMA_IRQHandler+0xb48>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80c7 	beq.w	8006608 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2204      	movs	r2, #4
 8006484:	409a      	lsls	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d049      	beq.n	8006528 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8210 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b0:	e20a      	b.n	80068c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8206 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064c4:	e200      	b.n	80068c8 <HAL_DMA_IRQHandler+0xe08>
 80064c6:	bf00      	nop
 80064c8:	40020010 	.word	0x40020010
 80064cc:	40020028 	.word	0x40020028
 80064d0:	40020040 	.word	0x40020040
 80064d4:	40020058 	.word	0x40020058
 80064d8:	40020070 	.word	0x40020070
 80064dc:	40020088 	.word	0x40020088
 80064e0:	400200a0 	.word	0x400200a0
 80064e4:	400200b8 	.word	0x400200b8
 80064e8:	40020410 	.word	0x40020410
 80064ec:	40020428 	.word	0x40020428
 80064f0:	40020440 	.word	0x40020440
 80064f4:	40020458 	.word	0x40020458
 80064f8:	40020470 	.word	0x40020470
 80064fc:	40020488 	.word	0x40020488
 8006500:	400204a0 	.word	0x400204a0
 8006504:	400204b8 	.word	0x400204b8
 8006508:	58025408 	.word	0x58025408
 800650c:	5802541c 	.word	0x5802541c
 8006510:	58025430 	.word	0x58025430
 8006514:	58025444 	.word	0x58025444
 8006518:	58025458 	.word	0x58025458
 800651c:	5802546c 	.word	0x5802546c
 8006520:	58025480 	.word	0x58025480
 8006524:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d160      	bne.n	80065f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7f      	ldr	r2, [pc, #508]	; (8006734 <HAL_DMA_IRQHandler+0xc74>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d04a      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7d      	ldr	r2, [pc, #500]	; (8006738 <HAL_DMA_IRQHandler+0xc78>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d045      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7c      	ldr	r2, [pc, #496]	; (800673c <HAL_DMA_IRQHandler+0xc7c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d040      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7a      	ldr	r2, [pc, #488]	; (8006740 <HAL_DMA_IRQHandler+0xc80>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d03b      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a79      	ldr	r2, [pc, #484]	; (8006744 <HAL_DMA_IRQHandler+0xc84>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d036      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a77      	ldr	r2, [pc, #476]	; (8006748 <HAL_DMA_IRQHandler+0xc88>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d031      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a76      	ldr	r2, [pc, #472]	; (800674c <HAL_DMA_IRQHandler+0xc8c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d02c      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a74      	ldr	r2, [pc, #464]	; (8006750 <HAL_DMA_IRQHandler+0xc90>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d027      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a73      	ldr	r2, [pc, #460]	; (8006754 <HAL_DMA_IRQHandler+0xc94>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d022      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a71      	ldr	r2, [pc, #452]	; (8006758 <HAL_DMA_IRQHandler+0xc98>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a70      	ldr	r2, [pc, #448]	; (800675c <HAL_DMA_IRQHandler+0xc9c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a6e      	ldr	r2, [pc, #440]	; (8006760 <HAL_DMA_IRQHandler+0xca0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6d      	ldr	r2, [pc, #436]	; (8006764 <HAL_DMA_IRQHandler+0xca4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a6b      	ldr	r2, [pc, #428]	; (8006768 <HAL_DMA_IRQHandler+0xca8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a6a      	ldr	r2, [pc, #424]	; (800676c <HAL_DMA_IRQHandler+0xcac>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_DMA_IRQHandler+0xb12>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a68      	ldr	r2, [pc, #416]	; (8006770 <HAL_DMA_IRQHandler+0xcb0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <HAL_DMA_IRQHandler+0xb24>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0208 	bic.w	r2, r2, #8
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e007      	b.n	80065f4 <HAL_DMA_IRQHandler+0xb34>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0204 	bic.w	r2, r2, #4
 80065f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8165 	beq.w	80068c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006606:	e15f      	b.n	80068c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2202      	movs	r2, #2
 8006612:	409a      	lsls	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80c5 	beq.w	80067a8 <HAL_DMA_IRQHandler+0xce8>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80bf 	beq.w	80067a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2202      	movs	r2, #2
 8006634:	409a      	lsls	r2, r3
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d018      	beq.n	8006676 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 813a 	beq.w	80068cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006660:	e134      	b.n	80068cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8130 	beq.w	80068cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006674:	e12a      	b.n	80068cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 8089 	bne.w	8006794 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2b      	ldr	r2, [pc, #172]	; (8006734 <HAL_DMA_IRQHandler+0xc74>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d04a      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a29      	ldr	r2, [pc, #164]	; (8006738 <HAL_DMA_IRQHandler+0xc78>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d045      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a28      	ldr	r2, [pc, #160]	; (800673c <HAL_DMA_IRQHandler+0xc7c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d040      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a26      	ldr	r2, [pc, #152]	; (8006740 <HAL_DMA_IRQHandler+0xc80>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <HAL_DMA_IRQHandler+0xc84>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d036      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a23      	ldr	r2, [pc, #140]	; (8006748 <HAL_DMA_IRQHandler+0xc88>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d031      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <HAL_DMA_IRQHandler+0xc8c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d02c      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a20      	ldr	r2, [pc, #128]	; (8006750 <HAL_DMA_IRQHandler+0xc90>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <HAL_DMA_IRQHandler+0xc94>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <HAL_DMA_IRQHandler+0xc98>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1c      	ldr	r2, [pc, #112]	; (800675c <HAL_DMA_IRQHandler+0xc9c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <HAL_DMA_IRQHandler+0xca0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a19      	ldr	r2, [pc, #100]	; (8006764 <HAL_DMA_IRQHandler+0xca4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_DMA_IRQHandler+0xca8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a16      	ldr	r2, [pc, #88]	; (800676c <HAL_DMA_IRQHandler+0xcac>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_DMA_IRQHandler+0xc62>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <HAL_DMA_IRQHandler+0xcb0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d128      	bne.n	8006774 <HAL_DMA_IRQHandler+0xcb4>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0214 	bic.w	r2, r2, #20
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e027      	b.n	8006784 <HAL_DMA_IRQHandler+0xcc4>
 8006734:	40020010 	.word	0x40020010
 8006738:	40020028 	.word	0x40020028
 800673c:	40020040 	.word	0x40020040
 8006740:	40020058 	.word	0x40020058
 8006744:	40020070 	.word	0x40020070
 8006748:	40020088 	.word	0x40020088
 800674c:	400200a0 	.word	0x400200a0
 8006750:	400200b8 	.word	0x400200b8
 8006754:	40020410 	.word	0x40020410
 8006758:	40020428 	.word	0x40020428
 800675c:	40020440 	.word	0x40020440
 8006760:	40020458 	.word	0x40020458
 8006764:	40020470 	.word	0x40020470
 8006768:	40020488 	.word	0x40020488
 800676c:	400204a0 	.word	0x400204a0
 8006770:	400204b8 	.word	0x400204b8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 020a 	bic.w	r2, r2, #10
 8006782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8097 	beq.w	80068cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067a6:	e091      	b.n	80068cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2208      	movs	r2, #8
 80067b2:	409a      	lsls	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8088 	beq.w	80068ce <HAL_DMA_IRQHandler+0xe0e>
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8082 	beq.w	80068ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a41      	ldr	r2, [pc, #260]	; (80068d4 <HAL_DMA_IRQHandler+0xe14>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04a      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <HAL_DMA_IRQHandler+0xe18>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d045      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a3e      	ldr	r2, [pc, #248]	; (80068dc <HAL_DMA_IRQHandler+0xe1c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a3c      	ldr	r2, [pc, #240]	; (80068e0 <HAL_DMA_IRQHandler+0xe20>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a3b      	ldr	r2, [pc, #236]	; (80068e4 <HAL_DMA_IRQHandler+0xe24>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d036      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <HAL_DMA_IRQHandler+0xe28>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d031      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a38      	ldr	r2, [pc, #224]	; (80068ec <HAL_DMA_IRQHandler+0xe2c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d02c      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <HAL_DMA_IRQHandler+0xe30>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d027      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a35      	ldr	r2, [pc, #212]	; (80068f4 <HAL_DMA_IRQHandler+0xe34>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a33      	ldr	r2, [pc, #204]	; (80068f8 <HAL_DMA_IRQHandler+0xe38>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a32      	ldr	r2, [pc, #200]	; (80068fc <HAL_DMA_IRQHandler+0xe3c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a30      	ldr	r2, [pc, #192]	; (8006900 <HAL_DMA_IRQHandler+0xe40>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2f      	ldr	r2, [pc, #188]	; (8006904 <HAL_DMA_IRQHandler+0xe44>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <HAL_DMA_IRQHandler+0xe48>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2c      	ldr	r2, [pc, #176]	; (800690c <HAL_DMA_IRQHandler+0xe4c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_DMA_IRQHandler+0xdaa>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_DMA_IRQHandler+0xe50>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d108      	bne.n	800687c <HAL_DMA_IRQHandler+0xdbc>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 021c 	bic.w	r2, r2, #28
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e007      	b.n	800688c <HAL_DMA_IRQHandler+0xdcc>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020e 	bic.w	r2, r2, #14
 800688a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2201      	movs	r2, #1
 8006896:	409a      	lsls	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	e004      	b.n	80068ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068c4:	bf00      	nop
 80068c6:	e002      	b.n	80068ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c8:	bf00      	nop
 80068ca:	e000      	b.n	80068ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068ce:	3728      	adds	r7, #40	; 0x28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40020010 	.word	0x40020010
 80068d8:	40020028 	.word	0x40020028
 80068dc:	40020040 	.word	0x40020040
 80068e0:	40020058 	.word	0x40020058
 80068e4:	40020070 	.word	0x40020070
 80068e8:	40020088 	.word	0x40020088
 80068ec:	400200a0 	.word	0x400200a0
 80068f0:	400200b8 	.word	0x400200b8
 80068f4:	40020410 	.word	0x40020410
 80068f8:	40020428 	.word	0x40020428
 80068fc:	40020440 	.word	0x40020440
 8006900:	40020458 	.word	0x40020458
 8006904:	40020470 	.word	0x40020470
 8006908:	40020488 	.word	0x40020488
 800690c:	400204a0 	.word	0x400204a0
 8006910:	400204b8 	.word	0x400204b8

08006914 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7f      	ldr	r2, [pc, #508]	; (8006b30 <DMA_SetConfig+0x21c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d072      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7d      	ldr	r2, [pc, #500]	; (8006b34 <DMA_SetConfig+0x220>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d06d      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7c      	ldr	r2, [pc, #496]	; (8006b38 <DMA_SetConfig+0x224>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d068      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7a      	ldr	r2, [pc, #488]	; (8006b3c <DMA_SetConfig+0x228>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d063      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a79      	ldr	r2, [pc, #484]	; (8006b40 <DMA_SetConfig+0x22c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d05e      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a77      	ldr	r2, [pc, #476]	; (8006b44 <DMA_SetConfig+0x230>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d059      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a76      	ldr	r2, [pc, #472]	; (8006b48 <DMA_SetConfig+0x234>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d054      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a74      	ldr	r2, [pc, #464]	; (8006b4c <DMA_SetConfig+0x238>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d04f      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a73      	ldr	r2, [pc, #460]	; (8006b50 <DMA_SetConfig+0x23c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04a      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <DMA_SetConfig+0x240>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d045      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a70      	ldr	r2, [pc, #448]	; (8006b58 <DMA_SetConfig+0x244>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a6e      	ldr	r2, [pc, #440]	; (8006b5c <DMA_SetConfig+0x248>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d03b      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6d      	ldr	r2, [pc, #436]	; (8006b60 <DMA_SetConfig+0x24c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d036      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a6b      	ldr	r2, [pc, #428]	; (8006b64 <DMA_SetConfig+0x250>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d031      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a6a      	ldr	r2, [pc, #424]	; (8006b68 <DMA_SetConfig+0x254>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d02c      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a68      	ldr	r2, [pc, #416]	; (8006b6c <DMA_SetConfig+0x258>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d027      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a67      	ldr	r2, [pc, #412]	; (8006b70 <DMA_SetConfig+0x25c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a65      	ldr	r2, [pc, #404]	; (8006b74 <DMA_SetConfig+0x260>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a64      	ldr	r2, [pc, #400]	; (8006b78 <DMA_SetConfig+0x264>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a62      	ldr	r2, [pc, #392]	; (8006b7c <DMA_SetConfig+0x268>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a61      	ldr	r2, [pc, #388]	; (8006b80 <DMA_SetConfig+0x26c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5f      	ldr	r2, [pc, #380]	; (8006b84 <DMA_SetConfig+0x270>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5e      	ldr	r2, [pc, #376]	; (8006b88 <DMA_SetConfig+0x274>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <DMA_SetConfig+0x10a>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5c      	ldr	r2, [pc, #368]	; (8006b8c <DMA_SetConfig+0x278>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d101      	bne.n	8006a22 <DMA_SetConfig+0x10e>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <DMA_SetConfig+0x110>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00d      	beq.n	8006a44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <DMA_SetConfig+0x21c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d04a      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a38      	ldr	r2, [pc, #224]	; (8006b34 <DMA_SetConfig+0x220>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d045      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a36      	ldr	r2, [pc, #216]	; (8006b38 <DMA_SetConfig+0x224>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d040      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a35      	ldr	r2, [pc, #212]	; (8006b3c <DMA_SetConfig+0x228>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d03b      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a33      	ldr	r2, [pc, #204]	; (8006b40 <DMA_SetConfig+0x22c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d036      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a32      	ldr	r2, [pc, #200]	; (8006b44 <DMA_SetConfig+0x230>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d031      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a30      	ldr	r2, [pc, #192]	; (8006b48 <DMA_SetConfig+0x234>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d02c      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2f      	ldr	r2, [pc, #188]	; (8006b4c <DMA_SetConfig+0x238>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d027      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2d      	ldr	r2, [pc, #180]	; (8006b50 <DMA_SetConfig+0x23c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d022      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2c      	ldr	r2, [pc, #176]	; (8006b54 <DMA_SetConfig+0x240>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01d      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <DMA_SetConfig+0x244>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <DMA_SetConfig+0x248>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <DMA_SetConfig+0x24c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <DMA_SetConfig+0x250>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <DMA_SetConfig+0x254>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <DMA_SetConfig+0x1d0>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <DMA_SetConfig+0x258>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d101      	bne.n	8006ae8 <DMA_SetConfig+0x1d4>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <DMA_SetConfig+0x1d6>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d059      	beq.n	8006ba2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	223f      	movs	r2, #63	; 0x3f
 8006af8:	409a      	lsls	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d138      	bne.n	8006b90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b2e:	e086      	b.n	8006c3e <DMA_SetConfig+0x32a>
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
 8006b70:	58025408 	.word	0x58025408
 8006b74:	5802541c 	.word	0x5802541c
 8006b78:	58025430 	.word	0x58025430
 8006b7c:	58025444 	.word	0x58025444
 8006b80:	58025458 	.word	0x58025458
 8006b84:	5802546c 	.word	0x5802546c
 8006b88:	58025480 	.word	0x58025480
 8006b8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]
}
 8006ba0:	e04d      	b.n	8006c3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <DMA_SetConfig+0x338>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a27      	ldr	r2, [pc, #156]	; (8006c50 <DMA_SetConfig+0x33c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a26      	ldr	r2, [pc, #152]	; (8006c54 <DMA_SetConfig+0x340>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a24      	ldr	r2, [pc, #144]	; (8006c58 <DMA_SetConfig+0x344>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a23      	ldr	r2, [pc, #140]	; (8006c5c <DMA_SetConfig+0x348>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a21      	ldr	r2, [pc, #132]	; (8006c60 <DMA_SetConfig+0x34c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a20      	ldr	r2, [pc, #128]	; (8006c64 <DMA_SetConfig+0x350>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <DMA_SetConfig+0x2de>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <DMA_SetConfig+0x354>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <DMA_SetConfig+0x2e2>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <DMA_SetConfig+0x2e4>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d020      	beq.n	8006c3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2201      	movs	r2, #1
 8006c06:	409a      	lsls	r2, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	d108      	bne.n	8006c2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	60da      	str	r2, [r3, #12]
}
 8006c2c:	e007      	b.n	8006c3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	58025408 	.word	0x58025408
 8006c50:	5802541c 	.word	0x5802541c
 8006c54:	58025430 	.word	0x58025430
 8006c58:	58025444 	.word	0x58025444
 8006c5c:	58025458 	.word	0x58025458
 8006c60:	5802546c 	.word	0x5802546c
 8006c64:	58025480 	.word	0x58025480
 8006c68:	58025494 	.word	0x58025494

08006c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a42      	ldr	r2, [pc, #264]	; (8006d84 <DMA_CalcBaseAndBitshift+0x118>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d04a      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a41      	ldr	r2, [pc, #260]	; (8006d88 <DMA_CalcBaseAndBitshift+0x11c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d045      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <DMA_CalcBaseAndBitshift+0x120>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d040      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3e      	ldr	r2, [pc, #248]	; (8006d90 <DMA_CalcBaseAndBitshift+0x124>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d03b      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <DMA_CalcBaseAndBitshift+0x128>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d036      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3b      	ldr	r2, [pc, #236]	; (8006d98 <DMA_CalcBaseAndBitshift+0x12c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d031      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a39      	ldr	r2, [pc, #228]	; (8006d9c <DMA_CalcBaseAndBitshift+0x130>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d02c      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a38      	ldr	r2, [pc, #224]	; (8006da0 <DMA_CalcBaseAndBitshift+0x134>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d027      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a36      	ldr	r2, [pc, #216]	; (8006da4 <DMA_CalcBaseAndBitshift+0x138>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d022      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a35      	ldr	r2, [pc, #212]	; (8006da8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d01d      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <DMA_CalcBaseAndBitshift+0x140>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a32      	ldr	r2, [pc, #200]	; (8006db0 <DMA_CalcBaseAndBitshift+0x144>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <DMA_CalcBaseAndBitshift+0x148>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2f      	ldr	r2, [pc, #188]	; (8006db8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <DMA_CalcBaseAndBitshift+0x150>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <DMA_CalcBaseAndBitshift+0xa8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x154>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <DMA_CalcBaseAndBitshift+0xac>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <DMA_CalcBaseAndBitshift+0xae>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d024      	beq.n	8006d68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	3b10      	subs	r3, #16
 8006d26:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <DMA_CalcBaseAndBitshift+0x158>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	4a24      	ldr	r2, [pc, #144]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d38:	5cd3      	ldrb	r3, [r2, r3]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d908      	bls.n	8006d58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <DMA_CalcBaseAndBitshift+0x160>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	1d1a      	adds	r2, r3, #4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	659a      	str	r2, [r3, #88]	; 0x58
 8006d56:	e00d      	b.n	8006d74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <DMA_CalcBaseAndBitshift+0x160>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6593      	str	r3, [r2, #88]	; 0x58
 8006d66:	e005      	b.n	8006d74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40020010 	.word	0x40020010
 8006d88:	40020028 	.word	0x40020028
 8006d8c:	40020040 	.word	0x40020040
 8006d90:	40020058 	.word	0x40020058
 8006d94:	40020070 	.word	0x40020070
 8006d98:	40020088 	.word	0x40020088
 8006d9c:	400200a0 	.word	0x400200a0
 8006da0:	400200b8 	.word	0x400200b8
 8006da4:	40020410 	.word	0x40020410
 8006da8:	40020428 	.word	0x40020428
 8006dac:	40020440 	.word	0x40020440
 8006db0:	40020458 	.word	0x40020458
 8006db4:	40020470 	.word	0x40020470
 8006db8:	40020488 	.word	0x40020488
 8006dbc:	400204a0 	.word	0x400204a0
 8006dc0:	400204b8 	.word	0x400204b8
 8006dc4:	aaaaaaab 	.word	0xaaaaaaab
 8006dc8:	0800f020 	.word	0x0800f020
 8006dcc:	fffffc00 	.word	0xfffffc00

08006dd0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d120      	bne.n	8006e26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d858      	bhi.n	8006e9e <DMA_CheckFifoParam+0xce>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <DMA_CheckFifoParam+0x24>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e17 	.word	0x08006e17
 8006dfc:	08006e05 	.word	0x08006e05
 8006e00:	08006e9f 	.word	0x08006e9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d048      	beq.n	8006ea2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e14:	e045      	b.n	8006ea2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e1e:	d142      	bne.n	8006ea6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e24:	e03f      	b.n	8006ea6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2e:	d123      	bne.n	8006e78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d838      	bhi.n	8006eaa <DMA_CheckFifoParam+0xda>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <DMA_CheckFifoParam+0x70>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e57 	.word	0x08006e57
 8006e48:	08006e51 	.word	0x08006e51
 8006e4c:	08006e69 	.word	0x08006e69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
        break;
 8006e54:	e030      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d025      	beq.n	8006eae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e66:	e022      	b.n	8006eae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e70:	d11f      	bne.n	8006eb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e76:	e01c      	b.n	8006eb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d902      	bls.n	8006e86 <DMA_CheckFifoParam+0xb6>
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d003      	beq.n	8006e8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e84:	e018      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]
        break;
 8006e8a:	e015      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00e      	beq.n	8006eb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e00b      	b.n	8006eb6 <DMA_CheckFifoParam+0xe6>
        break;
 8006e9e:	bf00      	nop
 8006ea0:	e00a      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ea2:	bf00      	nop
 8006ea4:	e008      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e006      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e004      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
        break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <DMA_CheckFifoParam+0xe8>
    break;
 8006eb6:	bf00      	nop
    }
  }

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop

08006ec8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d022      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a36      	ldr	r2, [pc, #216]	; (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01d      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a35      	ldr	r2, [pc, #212]	; (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a33      	ldr	r2, [pc, #204]	; (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a32      	ldr	r2, [pc, #200]	; (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2d      	ldr	r2, [pc, #180]	; (8006fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d101      	bne.n	8006f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01a      	beq.n	8006f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	3b08      	subs	r3, #8
 8006f38:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4b26      	ldr	r3, [pc, #152]	; (8006fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f64:	e024      	b.n	8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	3b10      	subs	r3, #16
 8006f6e:	4a1e      	ldr	r2, [pc, #120]	; (8006fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f70:	fba2 2303 	umull	r2, r3, r2, r3
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d806      	bhi.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d902      	bls.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006fa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2201      	movs	r2, #1
 8006faa:	409a      	lsls	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fb0:	bf00      	nop
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	58025408 	.word	0x58025408
 8006fc0:	5802541c 	.word	0x5802541c
 8006fc4:	58025430 	.word	0x58025430
 8006fc8:	58025444 	.word	0x58025444
 8006fcc:	58025458 	.word	0x58025458
 8006fd0:	5802546c 	.word	0x5802546c
 8006fd4:	58025480 	.word	0x58025480
 8006fd8:	58025494 	.word	0x58025494
 8006fdc:	cccccccd 	.word	0xcccccccd
 8006fe0:	16009600 	.word	0x16009600
 8006fe4:	58025880 	.word	0x58025880
 8006fe8:	aaaaaaab 	.word	0xaaaaaaab
 8006fec:	400204b8 	.word	0x400204b8
 8006ff0:	4002040f 	.word	0x4002040f
 8006ff4:	10008200 	.word	0x10008200
 8006ff8:	40020880 	.word	0x40020880

08006ffc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04a      	beq.n	80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d847      	bhi.n	80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a25      	ldr	r2, [pc, #148]	; (80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d022      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d01d      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a22      	ldr	r2, [pc, #136]	; (80070bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d018      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a21      	ldr	r2, [pc, #132]	; (80070c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d013      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1f      	ldr	r2, [pc, #124]	; (80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00e      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1b      	ldr	r2, [pc, #108]	; (80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d101      	bne.n	800706c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800706c:	2300      	movs	r3, #0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007084:	671a      	str	r2, [r3, #112]	; 0x70
 8007086:	e009      	b.n	800709c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	461a      	mov	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800709a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3b01      	subs	r3, #1
 80070a0:	2201      	movs	r2, #1
 80070a2:	409a      	lsls	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	58025408 	.word	0x58025408
 80070b8:	5802541c 	.word	0x5802541c
 80070bc:	58025430 	.word	0x58025430
 80070c0:	58025444 	.word	0x58025444
 80070c4:	58025458 	.word	0x58025458
 80070c8:	5802546c 	.word	0x5802546c
 80070cc:	58025480 	.word	0x58025480
 80070d0:	58025494 	.word	0x58025494
 80070d4:	1600963f 	.word	0x1600963f
 80070d8:	58025940 	.word	0x58025940
 80070dc:	1000823f 	.word	0x1000823f
 80070e0:	40020940 	.word	0x40020940

080070e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b089      	sub	sp, #36	; 0x24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070f2:	4b89      	ldr	r3, [pc, #548]	; (8007318 <HAL_GPIO_Init+0x234>)
 80070f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070f6:	e194      	b.n	8007422 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	2101      	movs	r1, #1
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa01 f303 	lsl.w	r3, r1, r3
 8007104:	4013      	ands	r3, r2
 8007106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8186 	beq.w	800741c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	2b01      	cmp	r3, #1
 800711a:	d005      	beq.n	8007128 <HAL_GPIO_Init+0x44>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d130      	bne.n	800718a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	2203      	movs	r2, #3
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4313      	orrs	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800715e:	2201      	movs	r2, #1
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43db      	mvns	r3, r3
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	4013      	ands	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0201 	and.w	r2, r3, #1
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	fa02 f303 	lsl.w	r3, r2, r3
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4313      	orrs	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	2b03      	cmp	r3, #3
 8007194:	d017      	beq.n	80071c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	2203      	movs	r2, #3
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	43db      	mvns	r3, r3
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	4013      	ands	r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d123      	bne.n	800721a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	08da      	lsrs	r2, r3, #3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3208      	adds	r2, #8
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	220f      	movs	r2, #15
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	4313      	orrs	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	08da      	lsrs	r2, r3, #3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3208      	adds	r2, #8
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	2203      	movs	r2, #3
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f003 0203 	and.w	r2, r3, #3
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	4313      	orrs	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80e0 	beq.w	800741c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800725c:	4b2f      	ldr	r3, [pc, #188]	; (800731c <HAL_GPIO_Init+0x238>)
 800725e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007262:	4a2e      	ldr	r2, [pc, #184]	; (800731c <HAL_GPIO_Init+0x238>)
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800726c:	4b2b      	ldr	r3, [pc, #172]	; (800731c <HAL_GPIO_Init+0x238>)
 800726e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800727a:	4a29      	ldr	r2, [pc, #164]	; (8007320 <HAL_GPIO_Init+0x23c>)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	3302      	adds	r3, #2
 8007282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	220f      	movs	r2, #15
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a20      	ldr	r2, [pc, #128]	; (8007324 <HAL_GPIO_Init+0x240>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d052      	beq.n	800734c <HAL_GPIO_Init+0x268>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <HAL_GPIO_Init+0x244>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d031      	beq.n	8007312 <HAL_GPIO_Init+0x22e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <HAL_GPIO_Init+0x248>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d02b      	beq.n	800730e <HAL_GPIO_Init+0x22a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_GPIO_Init+0x24c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d025      	beq.n	800730a <HAL_GPIO_Init+0x226>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_GPIO_Init+0x250>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01f      	beq.n	8007306 <HAL_GPIO_Init+0x222>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <HAL_GPIO_Init+0x254>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d019      	beq.n	8007302 <HAL_GPIO_Init+0x21e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1a      	ldr	r2, [pc, #104]	; (800733c <HAL_GPIO_Init+0x258>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <HAL_GPIO_Init+0x21a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a19      	ldr	r2, [pc, #100]	; (8007340 <HAL_GPIO_Init+0x25c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00d      	beq.n	80072fa <HAL_GPIO_Init+0x216>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a18      	ldr	r2, [pc, #96]	; (8007344 <HAL_GPIO_Init+0x260>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <HAL_GPIO_Init+0x212>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a17      	ldr	r2, [pc, #92]	; (8007348 <HAL_GPIO_Init+0x264>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d101      	bne.n	80072f2 <HAL_GPIO_Init+0x20e>
 80072ee:	2309      	movs	r3, #9
 80072f0:	e02d      	b.n	800734e <HAL_GPIO_Init+0x26a>
 80072f2:	230a      	movs	r3, #10
 80072f4:	e02b      	b.n	800734e <HAL_GPIO_Init+0x26a>
 80072f6:	2308      	movs	r3, #8
 80072f8:	e029      	b.n	800734e <HAL_GPIO_Init+0x26a>
 80072fa:	2307      	movs	r3, #7
 80072fc:	e027      	b.n	800734e <HAL_GPIO_Init+0x26a>
 80072fe:	2306      	movs	r3, #6
 8007300:	e025      	b.n	800734e <HAL_GPIO_Init+0x26a>
 8007302:	2305      	movs	r3, #5
 8007304:	e023      	b.n	800734e <HAL_GPIO_Init+0x26a>
 8007306:	2304      	movs	r3, #4
 8007308:	e021      	b.n	800734e <HAL_GPIO_Init+0x26a>
 800730a:	2303      	movs	r3, #3
 800730c:	e01f      	b.n	800734e <HAL_GPIO_Init+0x26a>
 800730e:	2302      	movs	r3, #2
 8007310:	e01d      	b.n	800734e <HAL_GPIO_Init+0x26a>
 8007312:	2301      	movs	r3, #1
 8007314:	e01b      	b.n	800734e <HAL_GPIO_Init+0x26a>
 8007316:	bf00      	nop
 8007318:	58000080 	.word	0x58000080
 800731c:	58024400 	.word	0x58024400
 8007320:	58000400 	.word	0x58000400
 8007324:	58020000 	.word	0x58020000
 8007328:	58020400 	.word	0x58020400
 800732c:	58020800 	.word	0x58020800
 8007330:	58020c00 	.word	0x58020c00
 8007334:	58021000 	.word	0x58021000
 8007338:	58021400 	.word	0x58021400
 800733c:	58021800 	.word	0x58021800
 8007340:	58021c00 	.word	0x58021c00
 8007344:	58022000 	.word	0x58022000
 8007348:	58022400 	.word	0x58022400
 800734c:	2300      	movs	r3, #0
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	f002 0203 	and.w	r2, r2, #3
 8007354:	0092      	lsls	r2, r2, #2
 8007356:	4093      	lsls	r3, r2
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800735e:	4938      	ldr	r1, [pc, #224]	; (8007440 <HAL_GPIO_Init+0x35c>)
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	089b      	lsrs	r3, r3, #2
 8007364:	3302      	adds	r3, #2
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800736c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	43db      	mvns	r3, r3
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4013      	ands	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80073c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	3301      	adds	r3, #1
 8007420:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f ae63 	bne.w	80070f8 <HAL_GPIO_Init+0x14>
  }
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	3724      	adds	r7, #36	; 0x24
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	58000400 	.word	0x58000400

08007444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	e001      	b.n	8007466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	807b      	strh	r3, [r7, #2]
 8007480:	4613      	mov	r3, r2
 8007482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007484:	787b      	ldrb	r3, [r7, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800748a:	887a      	ldrh	r2, [r7, #2]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007490:	e003      	b.n	800749a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007492:	887b      	ldrh	r3, [r7, #2]
 8007494:	041a      	lsls	r2, r3, #16
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	619a      	str	r2, [r3, #24]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e07f      	b.n	80075ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fa fdf2 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2224      	movs	r2, #36	; 0x24
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	e006      	b.n	8007530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800752e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d104      	bne.n	8007542 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6859      	ldr	r1, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_I2C_Init+0x11c>)
 800754e:	430b      	orrs	r3, r1
 8007550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691a      	ldr	r2, [r3, #16]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	69d9      	ldr	r1, [r3, #28]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	02008000 	.word	0x02008000

080075c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	461a      	mov	r2, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	817b      	strh	r3, [r7, #10]
 80075d8:	4613      	mov	r3, r2
 80075da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	f040 80da 	bne.w	800779e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_I2C_Master_Transmit+0x30>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e0d3      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007600:	f7fb f940 	bl	8002884 <HAL_GetTick>
 8007604:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2319      	movs	r3, #25
 800760c:	2201      	movs	r2, #1
 800760e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f9e6 	bl	80079e4 <I2C_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0be      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2221      	movs	r2, #33	; 0x21
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2210      	movs	r2, #16
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	893a      	ldrh	r2, [r7, #8]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	2bff      	cmp	r3, #255	; 0xff
 8007652:	d90e      	bls.n	8007672 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765e:	b2da      	uxtb	r2, r3
 8007660:	8979      	ldrh	r1, [r7, #10]
 8007662:	4b51      	ldr	r3, [pc, #324]	; (80077a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fbdc 	bl	8007e28 <I2C_TransferConfig>
 8007670:	e06c      	b.n	800774c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007680:	b2da      	uxtb	r2, r3
 8007682:	8979      	ldrh	r1, [r7, #10]
 8007684:	4b48      	ldr	r3, [pc, #288]	; (80077a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fbcb 	bl	8007e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007692:	e05b      	b.n	800774c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	6a39      	ldr	r1, [r7, #32]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f9e3 	bl	8007a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e07b      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d034      	beq.n	800774c <HAL_I2C_Master_Transmit+0x184>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d130      	bne.n	800774c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	2200      	movs	r2, #0
 80076f2:	2180      	movs	r1, #128	; 0x80
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f975 	bl	80079e4 <I2C_WaitOnFlagUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e04d      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	2bff      	cmp	r3, #255	; 0xff
 800770c:	d90e      	bls.n	800772c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	22ff      	movs	r2, #255	; 0xff
 8007712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	8979      	ldrh	r1, [r7, #10]
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 fb7f 	bl	8007e28 <I2C_TransferConfig>
 800772a:	e00f      	b.n	800774c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773a:	b2da      	uxtb	r2, r3
 800773c:	8979      	ldrh	r1, [r7, #10]
 800773e:	2300      	movs	r3, #0
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fb6e 	bl	8007e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d19e      	bne.n	8007694 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6a39      	ldr	r1, [r7, #32]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f9c2 	bl	8007ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e01a      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2220      	movs	r2, #32
 8007770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6859      	ldr	r1, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_I2C_Master_Transmit+0x1e4>)
 800777e:	400b      	ands	r3, r1
 8007780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e000      	b.n	80077a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800779e:	2302      	movs	r3, #2
  }
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	80002000 	.word	0x80002000
 80077ac:	fe00e800 	.word	0xfe00e800

080077b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	461a      	mov	r2, r3
 80077bc:	460b      	mov	r3, r1
 80077be:	817b      	strh	r3, [r7, #10]
 80077c0:	4613      	mov	r3, r2
 80077c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	f040 80db 	bne.w	8007988 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_I2C_Master_Receive+0x30>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0d4      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077e8:	f7fb f84c 	bl	8002884 <HAL_GetTick>
 80077ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2319      	movs	r3, #25
 80077f4:	2201      	movs	r2, #1
 80077f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f8f2 	bl	80079e4 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e0bf      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2222      	movs	r2, #34	; 0x22
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2210      	movs	r2, #16
 8007816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	893a      	ldrh	r2, [r7, #8]
 800782a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	2bff      	cmp	r3, #255	; 0xff
 800783a:	d90e      	bls.n	800785a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007846:	b2da      	uxtb	r2, r3
 8007848:	8979      	ldrh	r1, [r7, #10]
 800784a:	4b52      	ldr	r3, [pc, #328]	; (8007994 <HAL_I2C_Master_Receive+0x1e4>)
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fae8 	bl	8007e28 <I2C_TransferConfig>
 8007858:	e06d      	b.n	8007936 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007868:	b2da      	uxtb	r2, r3
 800786a:	8979      	ldrh	r1, [r7, #10]
 800786c:	4b49      	ldr	r3, [pc, #292]	; (8007994 <HAL_I2C_Master_Receive+0x1e4>)
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fad7 	bl	8007e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800787a:	e05c      	b.n	8007936 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	6a39      	ldr	r1, [r7, #32]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f96b 	bl	8007b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e07c      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d034      	beq.n	8007936 <HAL_I2C_Master_Receive+0x186>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d130      	bne.n	8007936 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2200      	movs	r2, #0
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f880 	bl	80079e4 <I2C_WaitOnFlagUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e04d      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2bff      	cmp	r3, #255	; 0xff
 80078f6:	d90e      	bls.n	8007916 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	22ff      	movs	r2, #255	; 0xff
 80078fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007902:	b2da      	uxtb	r2, r3
 8007904:	8979      	ldrh	r1, [r7, #10]
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fa8a 	bl	8007e28 <I2C_TransferConfig>
 8007914:	e00f      	b.n	8007936 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007924:	b2da      	uxtb	r2, r3
 8007926:	8979      	ldrh	r1, [r7, #10]
 8007928:	2300      	movs	r3, #0
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fa79 	bl	8007e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d19d      	bne.n	800787c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	6a39      	ldr	r1, [r7, #32]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f8cd 	bl	8007ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e01a      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2220      	movs	r2, #32
 800795a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <HAL_I2C_Master_Receive+0x1e8>)
 8007968:	400b      	ands	r3, r1
 800796a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	80002400 	.word	0x80002400
 8007998:	fe00e800 	.word	0xfe00e800

0800799c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d103      	bne.n	80079ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d007      	beq.n	80079d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	619a      	str	r2, [r3, #24]
  }
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	4613      	mov	r3, r2
 80079f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079f4:	e022      	b.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fc:	d01e      	beq.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fe:	f7fa ff41 	bl	8002884 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d302      	bcc.n	8007a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d113      	bne.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e00f      	b.n	8007a5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4013      	ands	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	bf0c      	ite	eq
 8007a4c:	2301      	moveq	r3, #1
 8007a4e:	2300      	movne	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d0cd      	beq.n	80079f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a70:	e02c      	b.n	8007acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 f8ea 	bl	8007c50 <I2C_IsErrorOccurred>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e02a      	b.n	8007adc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a8c:	d01e      	beq.n	8007acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8e:	f7fa fef9 	bl	8002884 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d302      	bcc.n	8007aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d113      	bne.n	8007acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa8:	f043 0220 	orr.w	r2, r3, #32
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e007      	b.n	8007adc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d1cb      	bne.n	8007a72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007af0:	e028      	b.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f8aa 	bl	8007c50 <I2C_IsErrorOccurred>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e026      	b.n	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b06:	f7fa febd 	bl	8002884 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d302      	bcc.n	8007b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e007      	b.n	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d1cf      	bne.n	8007af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b68:	e064      	b.n	8007c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f86e 	bl	8007c50 <I2C_IsErrorOccurred>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e062      	b.n	8007c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d138      	bne.n	8007bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d105      	bne.n	8007ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e04e      	b.n	8007c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d107      	bne.n	8007bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2210      	movs	r2, #16
 8007bba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8007bc2:	e002      	b.n	8007bca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007bde:	400b      	ands	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e022      	b.n	8007c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bfe:	f7fa fe41 	bl	8002884 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d302      	bcc.n	8007c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10f      	bne.n	8007c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e007      	b.n	8007c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d193      	bne.n	8007b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	fe00e800 	.word	0xfe00e800

08007c50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08a      	sub	sp, #40	; 0x28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d075      	beq.n	8007d68 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2210      	movs	r2, #16
 8007c82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c84:	e056      	b.n	8007d34 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8c:	d052      	beq.n	8007d34 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fa fdf9 	bl	8002884 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <I2C_IsErrorOccurred+0x54>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d147      	bne.n	8007d34 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc6:	d12e      	bne.n	8007d26 <I2C_IsErrorOccurred+0xd6>
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cce:	d02a      	beq.n	8007d26 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007cd0:	7cfb      	ldrb	r3, [r7, #19]
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d027      	beq.n	8007d26 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ce4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ce6:	f7fa fdcd 	bl	8002884 <HAL_GetTick>
 8007cea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cec:	e01b      	b.n	8007d26 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cee:	f7fa fdc9 	bl	8002884 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b19      	cmp	r3, #25
 8007cfa:	d914      	bls.n	8007d26 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d1dc      	bne.n	8007cee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d003      	beq.n	8007d4a <I2C_IsErrorOccurred+0xfa>
 8007d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d09d      	beq.n	8007c86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2220      	movs	r2, #32
 8007d58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	f043 0304 	orr.w	r3, r3, #4
 8007d60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	f043 0308 	orr.w	r3, r3, #8
 8007da2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01c      	beq.n	8007e18 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fddc 	bl	800799c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6859      	ldr	r1, [r3, #4]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <I2C_IsErrorOccurred+0x1d4>)
 8007df0:	400b      	ands	r3, r1
 8007df2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3728      	adds	r7, #40	; 0x28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	fe00e800 	.word	0xfe00e800

08007e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	817b      	strh	r3, [r7, #10]
 8007e36:	4613      	mov	r3, r2
 8007e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e3a:	897b      	ldrh	r3, [r7, #10]
 8007e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e40:	7a7b      	ldrb	r3, [r7, #9]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e48:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e56:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	0d5b      	lsrs	r3, r3, #21
 8007e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <I2C_TransferConfig+0x60>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	ea02 0103 	and.w	r1, r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	03ff63ff 	.word	0x03ff63ff

08007e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d138      	bne.n	8007f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d101      	bne.n	8007eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e032      	b.n	8007f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2224      	movs	r2, #36	; 0x24
 8007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e000      	b.n	8007f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f14:	2302      	movs	r3, #2
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d139      	bne.n	8007fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e033      	b.n	8007fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2224      	movs	r2, #36	; 0x24
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007fc8:	4b18      	ldr	r3, [pc, #96]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f023 0201 	bic.w	r2, r3, #1
 8007fd0:	4916      	ldr	r1, [pc, #88]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007fd8:	4b14      	ldr	r3, [pc, #80]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	4a13      	ldr	r2, [pc, #76]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fde:	f023 0305 	bic.w	r3, r3, #5
 8007fe2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8007fe4:	4b11      	ldr	r3, [pc, #68]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	4a10      	ldr	r2, [pc, #64]	; (800802c <HAL_PWR_EnterSTOPMode+0x70>)
 8007fea:	f023 0302 	bic.w	r3, r3, #2
 8007fee:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <HAL_PWR_EnterSTOPMode+0x74>)
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	4a0e      	ldr	r2, [pc, #56]	; (8008030 <HAL_PWR_EnterSTOPMode+0x74>)
 8007ff6:	f043 0304 	orr.w	r3, r3, #4
 8007ffa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ffc:	f3bf 8f4f 	dsb	sy
}
 8008000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008002:	f3bf 8f6f 	isb	sy
}
 8008006:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800800e:	bf30      	wfi
 8008010:	e000      	b.n	8008014 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008012:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <HAL_PWR_EnterSTOPMode+0x74>)
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	4a05      	ldr	r2, [pc, #20]	; (8008030 <HAL_PWR_EnterSTOPMode+0x74>)
 800801a:	f023 0304 	bic.w	r3, r3, #4
 800801e:	6113      	str	r3, [r2, #16]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	58024800 	.word	0x58024800
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800803c:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <HAL_PWREx_ConfigSupply+0x70>)
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b04      	cmp	r3, #4
 8008046:	d00a      	beq.n	800805e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008048:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <HAL_PWREx_ConfigSupply+0x70>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d001      	beq.n	800805a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e01f      	b.n	800809a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e01d      	b.n	800809a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800805e:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <HAL_PWREx_ConfigSupply+0x70>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f023 0207 	bic.w	r2, r3, #7
 8008066:	490f      	ldr	r1, [pc, #60]	; (80080a4 <HAL_PWREx_ConfigSupply+0x70>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4313      	orrs	r3, r2
 800806c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800806e:	f7fa fc09 	bl	8002884 <HAL_GetTick>
 8008072:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008074:	e009      	b.n	800808a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008076:	f7fa fc05 	bl	8002884 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008084:	d901      	bls.n	800808a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e007      	b.n	800809a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800808a:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <HAL_PWREx_ConfigSupply+0x70>)
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008096:	d1ee      	bne.n	8008076 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	58024800 	.word	0x58024800

080080a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	f000 bc1d 	b.w	80088f6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8087 	beq.w	80081d8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ca:	4b99      	ldr	r3, [pc, #612]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080d4:	4b96      	ldr	r3, [pc, #600]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d007      	beq.n	80080f0 <HAL_RCC_OscConfig+0x48>
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	2b18      	cmp	r3, #24
 80080e4:	d110      	bne.n	8008108 <HAL_RCC_OscConfig+0x60>
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d10b      	bne.n	8008108 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f0:	4b8f      	ldr	r3, [pc, #572]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d06c      	beq.n	80081d6 <HAL_RCC_OscConfig+0x12e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d168      	bne.n	80081d6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e3f6      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008110:	d106      	bne.n	8008120 <HAL_RCC_OscConfig+0x78>
 8008112:	4b87      	ldr	r3, [pc, #540]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a86      	ldr	r2, [pc, #536]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e02e      	b.n	800817e <HAL_RCC_OscConfig+0xd6>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <HAL_RCC_OscConfig+0x9a>
 8008128:	4b81      	ldr	r3, [pc, #516]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a80      	ldr	r2, [pc, #512]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800812e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	4b7e      	ldr	r3, [pc, #504]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a7d      	ldr	r2, [pc, #500]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800813a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	e01d      	b.n	800817e <HAL_RCC_OscConfig+0xd6>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800814a:	d10c      	bne.n	8008166 <HAL_RCC_OscConfig+0xbe>
 800814c:	4b78      	ldr	r3, [pc, #480]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a77      	ldr	r2, [pc, #476]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	4b75      	ldr	r3, [pc, #468]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a74      	ldr	r2, [pc, #464]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800815e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	e00b      	b.n	800817e <HAL_RCC_OscConfig+0xd6>
 8008166:	4b72      	ldr	r3, [pc, #456]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a71      	ldr	r2, [pc, #452]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800816c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	4b6f      	ldr	r3, [pc, #444]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a6e      	ldr	r2, [pc, #440]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800817c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d013      	beq.n	80081ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fa fb7d 	bl	8002884 <HAL_GetTick>
 800818a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800818e:	f7fa fb79 	bl	8002884 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b64      	cmp	r3, #100	; 0x64
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e3aa      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a0:	4b63      	ldr	r3, [pc, #396]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0f0      	beq.n	800818e <HAL_RCC_OscConfig+0xe6>
 80081ac:	e014      	b.n	80081d8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ae:	f7fa fb69 	bl	8002884 <HAL_GetTick>
 80081b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081b6:	f7fa fb65 	bl	8002884 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b64      	cmp	r3, #100	; 0x64
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e396      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081c8:	4b59      	ldr	r3, [pc, #356]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f0      	bne.n	80081b6 <HAL_RCC_OscConfig+0x10e>
 80081d4:	e000      	b.n	80081d8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80cb 	beq.w	800837c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e6:	4b52      	ldr	r3, [pc, #328]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081f0:	4b4f      	ldr	r3, [pc, #316]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <HAL_RCC_OscConfig+0x164>
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	2b18      	cmp	r3, #24
 8008200:	d156      	bne.n	80082b0 <HAL_RCC_OscConfig+0x208>
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f003 0303 	and.w	r3, r3, #3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d151      	bne.n	80082b0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800820c:	4b48      	ldr	r3, [pc, #288]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCC_OscConfig+0x17c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e368      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 0219 	bic.w	r2, r3, #25
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	493f      	ldr	r1, [pc, #252]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008232:	4313      	orrs	r3, r2
 8008234:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008236:	f7fa fb25 	bl	8002884 <HAL_GetTick>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800823e:	f7fa fb21 	bl	8002884 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e352      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008250:	4b37      	ldr	r3, [pc, #220]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825c:	f7fa fb52 	bl	8002904 <HAL_GetREVID>
 8008260:	4603      	mov	r3, r0
 8008262:	f241 0203 	movw	r2, #4099	; 0x1003
 8008266:	4293      	cmp	r3, r2
 8008268:	d817      	bhi.n	800829a <HAL_RCC_OscConfig+0x1f2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b40      	cmp	r3, #64	; 0x40
 8008270:	d108      	bne.n	8008284 <HAL_RCC_OscConfig+0x1dc>
 8008272:	4b2f      	ldr	r3, [pc, #188]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800827a:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800827c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008280:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008282:	e07b      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008284:	4b2a      	ldr	r3, [pc, #168]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	031b      	lsls	r3, r3, #12
 8008292:	4927      	ldr	r1, [pc, #156]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008298:	e070      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829a:	4b25      	ldr	r3, [pc, #148]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	061b      	lsls	r3, r3, #24
 80082a8:	4921      	ldr	r1, [pc, #132]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082ae:	e065      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d048      	beq.n	800834a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082b8:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f023 0219 	bic.w	r2, r3, #25
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	491a      	ldr	r1, [pc, #104]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fa fadb 	bl	8002884 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082d2:	f7fa fad7 	bl	8002884 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e308      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f0:	f7fa fb08 	bl	8002904 <HAL_GetREVID>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d81a      	bhi.n	8008334 <HAL_RCC_OscConfig+0x28c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d108      	bne.n	8008318 <HAL_RCC_OscConfig+0x270>
 8008306:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800830e:	4a08      	ldr	r2, [pc, #32]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	e031      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	031b      	lsls	r3, r3, #12
 8008326:	4902      	ldr	r1, [pc, #8]	; (8008330 <HAL_RCC_OscConfig+0x288>)
 8008328:	4313      	orrs	r3, r2
 800832a:	604b      	str	r3, [r1, #4]
 800832c:	e026      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
 8008334:	4b9a      	ldr	r3, [pc, #616]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	4997      	ldr	r1, [pc, #604]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008344:	4313      	orrs	r3, r2
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	e018      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800834a:	4b95      	ldr	r3, [pc, #596]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a94      	ldr	r2, [pc, #592]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008356:	f7fa fa95 	bl	8002884 <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800835e:	f7fa fa91 	bl	8002884 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e2c2      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008370:	4b8b      	ldr	r3, [pc, #556]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a9 	beq.w	80084dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838a:	4b85      	ldr	r3, [pc, #532]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008392:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008394:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d007      	beq.n	80083b0 <HAL_RCC_OscConfig+0x308>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b18      	cmp	r3, #24
 80083a4:	d13a      	bne.n	800841c <HAL_RCC_OscConfig+0x374>
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d135      	bne.n	800841c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b0:	4b7b      	ldr	r3, [pc, #492]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <HAL_RCC_OscConfig+0x320>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d001      	beq.n	80083c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e296      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c8:	f7fa fa9c 	bl	8002904 <HAL_GetREVID>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d817      	bhi.n	8008406 <HAL_RCC_OscConfig+0x35e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d108      	bne.n	80083f0 <HAL_RCC_OscConfig+0x348>
 80083de:	4b70      	ldr	r3, [pc, #448]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083e6:	4a6e      	ldr	r2, [pc, #440]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ee:	e075      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083f0:	4b6b      	ldr	r3, [pc, #428]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	069b      	lsls	r3, r3, #26
 80083fe:	4968      	ldr	r1, [pc, #416]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008400:	4313      	orrs	r3, r2
 8008402:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008404:	e06a      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008406:	4b66      	ldr	r3, [pc, #408]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	061b      	lsls	r3, r3, #24
 8008414:	4962      	ldr	r1, [pc, #392]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008416:	4313      	orrs	r3, r2
 8008418:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800841a:	e05f      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d042      	beq.n	80084aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008424:	4b5e      	ldr	r3, [pc, #376]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a5d      	ldr	r2, [pc, #372]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800842a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fa fa28 	bl	8002884 <HAL_GetTick>
 8008434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008438:	f7fa fa24 	bl	8002884 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e255      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800844a:	4b55      	ldr	r3, [pc, #340]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f0      	beq.n	8008438 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008456:	f7fa fa55 	bl	8002904 <HAL_GetREVID>
 800845a:	4603      	mov	r3, r0
 800845c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008460:	4293      	cmp	r3, r2
 8008462:	d817      	bhi.n	8008494 <HAL_RCC_OscConfig+0x3ec>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	2b20      	cmp	r3, #32
 800846a:	d108      	bne.n	800847e <HAL_RCC_OscConfig+0x3d6>
 800846c:	4b4c      	ldr	r3, [pc, #304]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008474:	4a4a      	ldr	r2, [pc, #296]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800847a:	6053      	str	r3, [r2, #4]
 800847c:	e02e      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
 800847e:	4b48      	ldr	r3, [pc, #288]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	069b      	lsls	r3, r3, #26
 800848c:	4944      	ldr	r1, [pc, #272]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
 8008492:	e023      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
 8008494:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	493f      	ldr	r1, [pc, #252]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60cb      	str	r3, [r1, #12]
 80084a8:	e018      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084aa:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a3c      	ldr	r2, [pc, #240]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b6:	f7fa f9e5 	bl	8002884 <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084be:	f7fa f9e1 	bl	8002884 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e212      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084d0:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f0      	bne.n	80084be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d036      	beq.n	8008556 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d019      	beq.n	8008524 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084f0:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f4:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fc:	f7fa f9c2 	bl	8002884 <HAL_GetTick>
 8008500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008504:	f7fa f9be 	bl	8002884 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e1ef      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x45c>
 8008522:	e018      	b.n	8008556 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008524:	4b1e      	ldr	r3, [pc, #120]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008528:	4a1d      	ldr	r2, [pc, #116]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fa f9a8 	bl	8002884 <HAL_GetTick>
 8008534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008538:	f7fa f9a4 	bl	8002884 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e1d5      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800854c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d039      	beq.n	80085d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01c      	beq.n	80085a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800856a:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008574:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008576:	f7fa f985 	bl	8002884 <HAL_GetTick>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800857e:	f7fa f981 	bl	8002884 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e1b2      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008590:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <HAL_RCC_OscConfig+0x4d6>
 800859c:	e01b      	b.n	80085d6 <HAL_RCC_OscConfig+0x52e>
 800859e:	bf00      	nop
 80085a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085a4:	4b9b      	ldr	r3, [pc, #620]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a9a      	ldr	r2, [pc, #616]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085b0:	f7fa f968 	bl	8002884 <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085b8:	f7fa f964 	bl	8002884 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e195      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085ca:	4b92      	ldr	r3, [pc, #584]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f0      	bne.n	80085b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8081 	beq.w	80086e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085e4:	4b8c      	ldr	r3, [pc, #560]	; (8008818 <HAL_RCC_OscConfig+0x770>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a8b      	ldr	r2, [pc, #556]	; (8008818 <HAL_RCC_OscConfig+0x770>)
 80085ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085f0:	f7fa f948 	bl	8002884 <HAL_GetTick>
 80085f4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085f8:	f7fa f944 	bl	8002884 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b64      	cmp	r3, #100	; 0x64
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e175      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800860a:	4b83      	ldr	r3, [pc, #524]	; (8008818 <HAL_RCC_OscConfig+0x770>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d106      	bne.n	800862c <HAL_RCC_OscConfig+0x584>
 800861e:	4b7d      	ldr	r3, [pc, #500]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	4a7c      	ldr	r2, [pc, #496]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	; 0x70
 800862a:	e02d      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10c      	bne.n	800864e <HAL_RCC_OscConfig+0x5a6>
 8008634:	4b77      	ldr	r3, [pc, #476]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	4a76      	ldr	r2, [pc, #472]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	6713      	str	r3, [r2, #112]	; 0x70
 8008640:	4b74      	ldr	r3, [pc, #464]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	4a73      	ldr	r2, [pc, #460]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008646:	f023 0304 	bic.w	r3, r3, #4
 800864a:	6713      	str	r3, [r2, #112]	; 0x70
 800864c:	e01c      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b05      	cmp	r3, #5
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x5c8>
 8008656:	4b6f      	ldr	r3, [pc, #444]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865a:	4a6e      	ldr	r2, [pc, #440]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800865c:	f043 0304 	orr.w	r3, r3, #4
 8008660:	6713      	str	r3, [r2, #112]	; 0x70
 8008662:	4b6c      	ldr	r3, [pc, #432]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008666:	4a6b      	ldr	r2, [pc, #428]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008668:	f043 0301 	orr.w	r3, r3, #1
 800866c:	6713      	str	r3, [r2, #112]	; 0x70
 800866e:	e00b      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 8008670:	4b68      	ldr	r3, [pc, #416]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008674:	4a67      	ldr	r2, [pc, #412]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	6713      	str	r3, [r2, #112]	; 0x70
 800867c:	4b65      	ldr	r3, [pc, #404]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800867e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008680:	4a64      	ldr	r2, [pc, #400]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008682:	f023 0304 	bic.w	r3, r3, #4
 8008686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d015      	beq.n	80086bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008690:	f7fa f8f8 	bl	8002884 <HAL_GetTick>
 8008694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008696:	e00a      	b.n	80086ae <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008698:	f7fa f8f4 	bl	8002884 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e123      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086ae:	4b59      	ldr	r3, [pc, #356]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0ee      	beq.n	8008698 <HAL_RCC_OscConfig+0x5f0>
 80086ba:	e014      	b.n	80086e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086bc:	f7fa f8e2 	bl	8002884 <HAL_GetTick>
 80086c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086c2:	e00a      	b.n	80086da <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c4:	f7fa f8de 	bl	8002884 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e10d      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086da:	4b4e      	ldr	r3, [pc, #312]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ee      	bne.n	80086c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8102 	beq.w	80088f4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086f0:	4b48      	ldr	r3, [pc, #288]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f8:	2b18      	cmp	r3, #24
 80086fa:	f000 80bd 	beq.w	8008878 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	2b02      	cmp	r3, #2
 8008704:	f040 809e 	bne.w	8008844 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008708:	4b42      	ldr	r3, [pc, #264]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a41      	ldr	r2, [pc, #260]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800870e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fa f8b6 	bl	8002884 <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871c:	f7fa f8b2 	bl	8002884 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e0e3      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800872e:	4b39      	ldr	r3, [pc, #228]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f0      	bne.n	800871c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800873c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <HAL_RCC_OscConfig+0x774>)
 8008740:	4013      	ands	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800874a:	0112      	lsls	r2, r2, #4
 800874c:	430a      	orrs	r2, r1
 800874e:	4931      	ldr	r1, [pc, #196]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008750:	4313      	orrs	r3, r2
 8008752:	628b      	str	r3, [r1, #40]	; 0x28
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	3b01      	subs	r3, #1
 800875a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	3b01      	subs	r3, #1
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	b29b      	uxth	r3, r3
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	3b01      	subs	r3, #1
 8008770:	041b      	lsls	r3, r3, #16
 8008772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877c:	3b01      	subs	r3, #1
 800877e:	061b      	lsls	r3, r3, #24
 8008780:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008784:	4923      	ldr	r1, [pc, #140]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008786:	4313      	orrs	r3, r2
 8008788:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800878a:	4b22      	ldr	r3, [pc, #136]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4a21      	ldr	r2, [pc, #132]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008796:	4b1f      	ldr	r3, [pc, #124]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800879a:	4b21      	ldr	r3, [pc, #132]	; (8008820 <HAL_RCC_OscConfig+0x778>)
 800879c:	4013      	ands	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087a2:	00d2      	lsls	r2, r2, #3
 80087a4:	491b      	ldr	r1, [pc, #108]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80087aa:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	f023 020c 	bic.w	r2, r3, #12
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	4917      	ldr	r1, [pc, #92]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80087bc:	4b15      	ldr	r3, [pc, #84]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	f023 0202 	bic.w	r2, r3, #2
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c8:	4912      	ldr	r1, [pc, #72]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	4a0d      	ldr	r2, [pc, #52]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	4a07      	ldr	r2, [pc, #28]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a04      	ldr	r2, [pc, #16]	; (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880a:	f7fa f83b 	bl	8002884 <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008810:	e011      	b.n	8008836 <HAL_RCC_OscConfig+0x78e>
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	58024800 	.word	0x58024800
 800881c:	fffffc0c 	.word	0xfffffc0c
 8008820:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008824:	f7fa f82e 	bl	8002884 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e05f      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008836:	4b32      	ldr	r3, [pc, #200]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x77c>
 8008842:	e057      	b.n	80088f4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008844:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a2d      	ldr	r2, [pc, #180]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 800884a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800884e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fa f818 	bl	8002884 <HAL_GetTick>
 8008854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008858:	f7fa f814 	bl	8002884 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e045      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x7b0>
 8008876:	e03d      	b.n	80088f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008878:	4b21      	ldr	r3, [pc, #132]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800887e:	4b20      	ldr	r3, [pc, #128]	; (8008900 <HAL_RCC_OscConfig+0x858>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b01      	cmp	r3, #1
 800888a:	d031      	beq.n	80088f0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f003 0203 	and.w	r2, r3, #3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d12a      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d122      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d11a      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	0a5b      	lsrs	r3, r3, #9
 80088be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d111      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0c1b      	lsrs	r3, r3, #16
 80088d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088da:	429a      	cmp	r2, r3
 80088dc:	d108      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	0e1b      	lsrs	r3, r3, #24
 80088e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3730      	adds	r7, #48	; 0x30
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400

08008904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e19c      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008918:	4b8a      	ldr	r3, [pc, #552]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d910      	bls.n	8008948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008926:	4b87      	ldr	r3, [pc, #540]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f023 020f 	bic.w	r2, r3, #15
 800892e:	4985      	ldr	r1, [pc, #532]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	4313      	orrs	r3, r2
 8008934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008936:	4b83      	ldr	r3, [pc, #524]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d001      	beq.n	8008948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e184      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d010      	beq.n	8008976 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	4b7b      	ldr	r3, [pc, #492]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008960:	429a      	cmp	r2, r3
 8008962:	d908      	bls.n	8008976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008964:	4b78      	ldr	r3, [pc, #480]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	4975      	ldr	r1, [pc, #468]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008972:	4313      	orrs	r3, r2
 8008974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d010      	beq.n	80089a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	4b70      	ldr	r3, [pc, #448]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800898e:	429a      	cmp	r2, r3
 8008990:	d908      	bls.n	80089a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008992:	4b6d      	ldr	r3, [pc, #436]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	496a      	ldr	r1, [pc, #424]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d010      	beq.n	80089d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699a      	ldr	r2, [r3, #24]
 80089b4:	4b64      	ldr	r3, [pc, #400]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089bc:	429a      	cmp	r2, r3
 80089be:	d908      	bls.n	80089d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089c0:	4b61      	ldr	r3, [pc, #388]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	495e      	ldr	r1, [pc, #376]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d010      	beq.n	8008a00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69da      	ldr	r2, [r3, #28]
 80089e2:	4b59      	ldr	r3, [pc, #356]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d908      	bls.n	8008a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80089ee:	4b56      	ldr	r3, [pc, #344]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4953      	ldr	r1, [pc, #332]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d010      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	4b4d      	ldr	r3, [pc, #308]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d908      	bls.n	8008a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a1c:	4b4a      	ldr	r3, [pc, #296]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	f023 020f 	bic.w	r2, r3, #15
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4947      	ldr	r1, [pc, #284]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d055      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a3a:	4b43      	ldr	r3, [pc, #268]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	4940      	ldr	r1, [pc, #256]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d107      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a54:	4b3c      	ldr	r3, [pc, #240]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d121      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0f6      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a6c:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d115      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e0ea      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d107      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a84:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d109      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0de      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a94:	4b2c      	ldr	r3, [pc, #176]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e0d6      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aa4:	4b28      	ldr	r3, [pc, #160]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	f023 0207 	bic.w	r2, r3, #7
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4925      	ldr	r1, [pc, #148]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab6:	f7f9 fee5 	bl	8002884 <HAL_GetTick>
 8008aba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008abc:	e00a      	b.n	8008ad4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abe:	f7f9 fee1 	bl	8002884 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e0be      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d1eb      	bne.n	8008abe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d010      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d208      	bcs.n	8008b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b02:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f023 020f 	bic.w	r2, r3, #15
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	490e      	ldr	r1, [pc, #56]	; (8008b48 <HAL_RCC_ClockConfig+0x244>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d214      	bcs.n	8008b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f023 020f 	bic.w	r2, r3, #15
 8008b2a:	4906      	ldr	r1, [pc, #24]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b32:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <HAL_RCC_ClockConfig+0x240>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d005      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e086      	b.n	8008c52 <HAL_RCC_ClockConfig+0x34e>
 8008b44:	52002000 	.word	0x52002000
 8008b48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d010      	beq.n	8008b7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	4b3f      	ldr	r3, [pc, #252]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d208      	bcs.n	8008b7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b68:	4b3c      	ldr	r3, [pc, #240]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	4939      	ldr	r1, [pc, #228]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d010      	beq.n	8008ba8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	695a      	ldr	r2, [r3, #20]
 8008b8a:	4b34      	ldr	r3, [pc, #208]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d208      	bcs.n	8008ba8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b96:	4b31      	ldr	r3, [pc, #196]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	492e      	ldr	r1, [pc, #184]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d010      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	4b28      	ldr	r3, [pc, #160]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d208      	bcs.n	8008bd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	4922      	ldr	r1, [pc, #136]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d010      	beq.n	8008c04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69da      	ldr	r2, [r3, #28]
 8008be6:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d208      	bcs.n	8008c04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008bf2:	4b1a      	ldr	r3, [pc, #104]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	4917      	ldr	r1, [pc, #92]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c04:	f000 f834 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	4b14      	ldr	r3, [pc, #80]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	4912      	ldr	r1, [pc, #72]	; (8008c60 <HAL_RCC_ClockConfig+0x35c>)
 8008c16:	5ccb      	ldrb	r3, [r1, r3]
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c22:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <HAL_RCC_ClockConfig+0x358>)
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	4a0d      	ldr	r2, [pc, #52]	; (8008c60 <HAL_RCC_ClockConfig+0x35c>)
 8008c2c:	5cd3      	ldrb	r3, [r2, r3]
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
 8008c38:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x360>)
 8008c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	; (8008c68 <HAL_RCC_ClockConfig+0x364>)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <HAL_RCC_ClockConfig+0x368>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 fdd2 	bl	80027f0 <HAL_InitTick>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	0800f010 	.word	0x0800f010
 8008c64:	24000028 	.word	0x24000028
 8008c68:	24000024 	.word	0x24000024
 8008c6c:	2400002c 	.word	0x2400002c

08008c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b089      	sub	sp, #36	; 0x24
 8008c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c76:	4bb3      	ldr	r3, [pc, #716]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c7e:	2b18      	cmp	r3, #24
 8008c80:	f200 8155 	bhi.w	8008f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008cf1 	.word	0x08008cf1
 8008c90:	08008f2f 	.word	0x08008f2f
 8008c94:	08008f2f 	.word	0x08008f2f
 8008c98:	08008f2f 	.word	0x08008f2f
 8008c9c:	08008f2f 	.word	0x08008f2f
 8008ca0:	08008f2f 	.word	0x08008f2f
 8008ca4:	08008f2f 	.word	0x08008f2f
 8008ca8:	08008f2f 	.word	0x08008f2f
 8008cac:	08008d17 	.word	0x08008d17
 8008cb0:	08008f2f 	.word	0x08008f2f
 8008cb4:	08008f2f 	.word	0x08008f2f
 8008cb8:	08008f2f 	.word	0x08008f2f
 8008cbc:	08008f2f 	.word	0x08008f2f
 8008cc0:	08008f2f 	.word	0x08008f2f
 8008cc4:	08008f2f 	.word	0x08008f2f
 8008cc8:	08008f2f 	.word	0x08008f2f
 8008ccc:	08008d1d 	.word	0x08008d1d
 8008cd0:	08008f2f 	.word	0x08008f2f
 8008cd4:	08008f2f 	.word	0x08008f2f
 8008cd8:	08008f2f 	.word	0x08008f2f
 8008cdc:	08008f2f 	.word	0x08008f2f
 8008ce0:	08008f2f 	.word	0x08008f2f
 8008ce4:	08008f2f 	.word	0x08008f2f
 8008ce8:	08008f2f 	.word	0x08008f2f
 8008cec:	08008d23 	.word	0x08008d23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf0:	4b94      	ldr	r3, [pc, #592]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d009      	beq.n	8008d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cfc:	4b91      	ldr	r3, [pc, #580]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	08db      	lsrs	r3, r3, #3
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	4a90      	ldr	r2, [pc, #576]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008d0e:	e111      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d10:	4b8d      	ldr	r3, [pc, #564]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d12:	61bb      	str	r3, [r7, #24]
    break;
 8008d14:	e10e      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008d16:	4b8d      	ldr	r3, [pc, #564]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d18:	61bb      	str	r3, [r7, #24]
    break;
 8008d1a:	e10b      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008d1c:	4b8c      	ldr	r3, [pc, #560]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d1e:	61bb      	str	r3, [r7, #24]
    break;
 8008d20:	e108      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d22:	4b88      	ldr	r3, [pc, #544]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008d2c:	4b85      	ldr	r3, [pc, #532]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	091b      	lsrs	r3, r3, #4
 8008d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d38:	4b82      	ldr	r3, [pc, #520]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d42:	4b80      	ldr	r3, [pc, #512]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	08db      	lsrs	r3, r3, #3
 8008d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	fb02 f303 	mul.w	r3, r2, r3
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80e1 	beq.w	8008f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	f000 8083 	beq.w	8008e74 <HAL_RCC_GetSysClockFreq+0x204>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f200 80a1 	bhi.w	8008eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCC_GetSysClockFreq+0x114>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d056      	beq.n	8008e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d82:	e099      	b.n	8008eb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d84:	4b6f      	ldr	r3, [pc, #444]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d02d      	beq.n	8008dec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d90:	4b6c      	ldr	r3, [pc, #432]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	08db      	lsrs	r3, r3, #3
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	4a6b      	ldr	r2, [pc, #428]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008da0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dba:	4b62      	ldr	r3, [pc, #392]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008dea:	e087      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfe:	4b51      	ldr	r3, [pc, #324]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2e:	e065      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b40      	ldr	r3, [pc, #256]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e72:	e043      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b2f      	ldr	r3, [pc, #188]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb6:	e021      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b1e      	ldr	r3, [pc, #120]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008efa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008efc:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	0a5b      	lsrs	r3, r3, #9
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	3301      	adds	r3, #1
 8008f08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f20:	ee17 3a90 	vmov	r3, s15
 8008f24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008f26:	e005      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61bb      	str	r3, [r7, #24]
    break;
 8008f2c:	e002      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f30:	61bb      	str	r3, [r7, #24]
    break;
 8008f32:	bf00      	nop
  }

  return sysclockfreq;
 8008f34:	69bb      	ldr	r3, [r7, #24]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3724      	adds	r7, #36	; 0x24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
 8008f48:	03d09000 	.word	0x03d09000
 8008f4c:	003d0900 	.word	0x003d0900
 8008f50:	017d7840 	.word	0x017d7840
 8008f54:	46000000 	.word	0x46000000
 8008f58:	4c742400 	.word	0x4c742400
 8008f5c:	4a742400 	.word	0x4a742400
 8008f60:	4bbebc20 	.word	0x4bbebc20

08008f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f6a:	f7ff fe81 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	490f      	ldr	r1, [pc, #60]	; (8008fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f7c:	5ccb      	ldrb	r3, [r1, r3]
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	fa22 f303 	lsr.w	r3, r2, r3
 8008f86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	4a09      	ldr	r2, [pc, #36]	; (8008fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f92:	5cd3      	ldrb	r3, [r2, r3]
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	4a07      	ldr	r2, [pc, #28]	; (8008fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fa2:	4a07      	ldr	r2, [pc, #28]	; (8008fc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	0800f010 	.word	0x0800f010
 8008fbc:	24000028 	.word	0x24000028
 8008fc0:	24000024 	.word	0x24000024

08008fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008fc8:	f7ff ffcc 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fda:	5ccb      	ldrb	r3, [r1, r3]
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	58024400 	.word	0x58024400
 8008fec:	0800f010 	.word	0x0800f010

08008ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008ff4:	f7ff ffb6 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	4904      	ldr	r1, [pc, #16]	; (8009018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009006:	5ccb      	ldrb	r3, [r1, r3]
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009010:	4618      	mov	r0, r3
 8009012:	bd80      	pop	{r7, pc}
 8009014:	58024400 	.word	0x58024400
 8009018:	0800f010 	.word	0x0800f010

0800901c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009028:	2300      	movs	r3, #0
 800902a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d03f      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800903c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009040:	d02a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009046:	d824      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800904c:	d018      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800904e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009052:	d81e      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800905c:	d007      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800905e:	e018      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009060:	4ba3      	ldr	r3, [pc, #652]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4aa2      	ldr	r2, [pc, #648]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800906a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800906c:	e015      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	2102      	movs	r1, #2
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fff9 	bl	800b06c <RCCEx_PLL2_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800907e:	e00c      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3324      	adds	r3, #36	; 0x24
 8009084:	2102      	movs	r1, #2
 8009086:	4618      	mov	r0, r3
 8009088:	f002 f8a2 	bl	800b1d0 <RCCEx_PLL3_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009090:	e003      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
      break;
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d109      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090a0:	4b93      	ldr	r3, [pc, #588]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ac:	4990      	ldr	r1, [pc, #576]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	650b      	str	r3, [r1, #80]	; 0x50
 80090b2:	e001      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d03d      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d826      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	080090e9 	.word	0x080090e9
 80090d8:	080090f7 	.word	0x080090f7
 80090dc:	08009109 	.word	0x08009109
 80090e0:	08009121 	.word	0x08009121
 80090e4:	08009121 	.word	0x08009121
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e8:	4b81      	ldr	r3, [pc, #516]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	4a80      	ldr	r2, [pc, #512]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090f4:	e015      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 ffb5 	bl	800b06c <RCCEx_PLL2_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009106:	e00c      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3324      	adds	r3, #36	; 0x24
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f002 f85e 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009118:	e003      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
      break;
 800911e:	e000      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009128:	4b71      	ldr	r3, [pc, #452]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800912a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912c:	f023 0207 	bic.w	r2, r3, #7
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009134:	496e      	ldr	r1, [pc, #440]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009136:	4313      	orrs	r3, r2
 8009138:	650b      	str	r3, [r1, #80]	; 0x50
 800913a:	e001      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009148:	2b00      	cmp	r3, #0
 800914a:	d042      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009154:	d02b      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	d825      	bhi.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800915c:	2bc0      	cmp	r3, #192	; 0xc0
 800915e:	d028      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009160:	2bc0      	cmp	r3, #192	; 0xc0
 8009162:	d821      	bhi.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009164:	2b80      	cmp	r3, #128	; 0x80
 8009166:	d016      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009168:	2b80      	cmp	r3, #128	; 0x80
 800916a:	d81d      	bhi.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009170:	2b40      	cmp	r3, #64	; 0x40
 8009172:	d007      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009174:	e018      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009176:	4b5e      	ldr	r3, [pc, #376]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	4a5d      	ldr	r2, [pc, #372]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800917c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009182:	e017      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	2100      	movs	r1, #0
 800918a:	4618      	mov	r0, r3
 800918c:	f001 ff6e 	bl	800b06c <RCCEx_PLL2_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009194:	e00e      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3324      	adds	r3, #36	; 0x24
 800919a:	2100      	movs	r1, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f002 f817 	bl	800b1d0 <RCCEx_PLL3_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091a6:	e005      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
      break;
 80091ac:	e002      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80091b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80091ba:	4b4d      	ldr	r3, [pc, #308]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c6:	494a      	ldr	r1, [pc, #296]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	650b      	str	r3, [r1, #80]	; 0x50
 80091cc:	e001      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d049      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091e8:	d030      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80091ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091ee:	d82a      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091f4:	d02c      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80091f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091fa:	d824      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009200:	d018      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009206:	d81e      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800920c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009210:	d007      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009212:	e018      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009214:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4a35      	ldr	r2, [pc, #212]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800921a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009220:	e017      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3304      	adds	r3, #4
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f001 ff1f 	bl	800b06c <RCCEx_PLL2_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009232:	e00e      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3324      	adds	r3, #36	; 0x24
 8009238:	2100      	movs	r1, #0
 800923a:	4618      	mov	r0, r3
 800923c:	f001 ffc8 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009244:	e005      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
      break;
 800924a:	e002      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800924c:	bf00      	nop
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009258:	4b25      	ldr	r3, [pc, #148]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009266:	4922      	ldr	r1, [pc, #136]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009268:	4313      	orrs	r3, r2
 800926a:	658b      	str	r3, [r1, #88]	; 0x58
 800926c:	e001      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800927a:	2b00      	cmp	r3, #0
 800927c:	d04b      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009288:	d030      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800928a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800928e:	d82a      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009294:	d02e      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800929a:	d824      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800929c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092a0:	d018      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80092a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092a6:	d81e      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80092ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092b0:	d007      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80092b2:	e018      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b4:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092c0:	e019      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3304      	adds	r3, #4
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fecf 	bl	800b06c <RCCEx_PLL2_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80092d2:	e010      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3324      	adds	r3, #36	; 0x24
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 ff78 	bl	800b1d0 <RCCEx_PLL3_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092e4:	e007      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ea:	e004      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80092f0:	58024400 	.word	0x58024400
      break;
 80092f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80092fc:	4b99      	ldr	r3, [pc, #612]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009300:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800930a:	4996      	ldr	r1, [pc, #600]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800930c:	4313      	orrs	r3, r2
 800930e:	658b      	str	r3, [r1, #88]	; 0x58
 8009310:	e001      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d032      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009326:	2b30      	cmp	r3, #48	; 0x30
 8009328:	d01c      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800932a:	2b30      	cmp	r3, #48	; 0x30
 800932c:	d817      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800932e:	2b20      	cmp	r3, #32
 8009330:	d00c      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009332:	2b20      	cmp	r3, #32
 8009334:	d813      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d016      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800933a:	2b10      	cmp	r3, #16
 800933c:	d10f      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800933e:	4b89      	ldr	r3, [pc, #548]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	4a88      	ldr	r2, [pc, #544]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800934a:	e00e      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	2102      	movs	r1, #2
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fe8a 	bl	800b06c <RCCEx_PLL2_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800935c:	e005      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
      break;
 8009362:	e002      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009364:	bf00      	nop
 8009366:	e000      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009370:	4b7c      	ldr	r3, [pc, #496]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937c:	4979      	ldr	r1, [pc, #484]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800937e:	4313      	orrs	r3, r2
 8009380:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009382:	e001      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d047      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800939c:	d030      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800939e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093a2:	d82a      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093a8:	d02c      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80093aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093ae:	d824      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093b4:	d018      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80093b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ba:	d81e      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80093c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c4:	d007      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80093c6:	e018      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c8:	4b66      	ldr	r3, [pc, #408]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	4a65      	ldr	r2, [pc, #404]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093d4:	e017      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 fe45 	bl	800b06c <RCCEx_PLL2_Config>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093e6:	e00e      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 feee 	bl	800b1d0 <RCCEx_PLL3_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093f8:	e005      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
      break;
 80093fe:	e002      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d109      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800940c:	4b55      	ldr	r3, [pc, #340]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800940e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009410:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009418:	4952      	ldr	r1, [pc, #328]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800941a:	4313      	orrs	r3, r2
 800941c:	650b      	str	r3, [r1, #80]	; 0x50
 800941e:	e001      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d049      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009438:	d02e      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800943a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800943e:	d828      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009444:	d02a      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800944a:	d822      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800944c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009450:	d026      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009456:	d81c      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800945c:	d010      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800945e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009462:	d816      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01d      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800946c:	d111      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3304      	adds	r3, #4
 8009472:	2101      	movs	r1, #1
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fdf9 	bl	800b06c <RCCEx_PLL2_Config>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800947e:	e012      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3324      	adds	r3, #36	; 0x24
 8009484:	2101      	movs	r1, #1
 8009486:	4618      	mov	r0, r3
 8009488:	f001 fea2 	bl	800b1d0 <RCCEx_PLL3_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009490:	e009      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
      break;
 8009496:	e006      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009498:	bf00      	nop
 800949a:	e004      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80094a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094ac:	4b2d      	ldr	r3, [pc, #180]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b8:	492a      	ldr	r1, [pc, #168]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	650b      	str	r3, [r1, #80]	; 0x50
 80094be:	e001      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d04d      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094da:	d02e      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80094dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094e0:	d828      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e6:	d02a      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ec:	d822      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80094ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094f2:	d026      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80094f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094f8:	d81c      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80094fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fe:	d010      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009504:	d816      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01d      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800950a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800950e:	d111      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	2101      	movs	r1, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fda8 	bl	800b06c <RCCEx_PLL2_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009520:	e012      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	; 0x24
 8009526:	2101      	movs	r1, #1
 8009528:	4618      	mov	r0, r3
 800952a:	f001 fe51 	bl	800b1d0 <RCCEx_PLL3_Config>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009532:	e009      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
      break;
 8009538:	e006      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800953a:	bf00      	nop
 800953c:	e004      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800953e:	bf00      	nop
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10c      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009552:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800955c:	4901      	ldr	r1, [pc, #4]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800955e:	4313      	orrs	r3, r2
 8009560:	658b      	str	r3, [r1, #88]	; 0x58
 8009562:	e003      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d02f      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009580:	d00e      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009586:	d814      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009588:	2b00      	cmp	r3, #0
 800958a:	d015      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800958c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009590:	d10f      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009592:	4baf      	ldr	r3, [pc, #700]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	4aae      	ldr	r2, [pc, #696]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800959e:	e00c      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3304      	adds	r3, #4
 80095a4:	2101      	movs	r1, #1
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 fd60 	bl	800b06c <RCCEx_PLL2_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095b0:	e003      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	75fb      	strb	r3, [r7, #23]
      break;
 80095b6:	e000      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80095b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095c0:	4ba3      	ldr	r3, [pc, #652]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095cc:	49a0      	ldr	r1, [pc, #640]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	650b      	str	r3, [r1, #80]	; 0x50
 80095d2:	e001      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d032      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d81b      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80095ec:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80095ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	0800962b 	.word	0x0800962b
 80095f8:	08009605 	.word	0x08009605
 80095fc:	08009613 	.word	0x08009613
 8009600:	0800962b 	.word	0x0800962b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009604:	4b92      	ldr	r3, [pc, #584]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a91      	ldr	r2, [pc, #580]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800960a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009610:	e00c      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	2102      	movs	r1, #2
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fd27 	bl	800b06c <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009622:	e003      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	75fb      	strb	r3, [r7, #23]
      break;
 8009628:	e000      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800962a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009632:	4b87      	ldr	r3, [pc, #540]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009636:	f023 0203 	bic.w	r2, r3, #3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963e:	4984      	ldr	r1, [pc, #528]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009640:	4313      	orrs	r3, r2
 8009642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009644:	e001      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8086 	beq.w	8009764 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009658:	4b7e      	ldr	r3, [pc, #504]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a7d      	ldr	r2, [pc, #500]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800965e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009664:	f7f9 f90e 	bl	8002884 <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800966a:	e009      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800966c:	f7f9 f90a 	bl	8002884 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b64      	cmp	r3, #100	; 0x64
 8009678:	d902      	bls.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	75fb      	strb	r3, [r7, #23]
        break;
 800967e:	e005      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009680:	4b74      	ldr	r3, [pc, #464]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0ef      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d166      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009692:	4b6f      	ldr	r3, [pc, #444]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800969c:	4053      	eors	r3, r2
 800969e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d013      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096a6:	4b6a      	ldr	r3, [pc, #424]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096b0:	4b67      	ldr	r3, [pc, #412]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b4:	4a66      	ldr	r2, [pc, #408]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096bc:	4b64      	ldr	r3, [pc, #400]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c0:	4a63      	ldr	r2, [pc, #396]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096c8:	4a61      	ldr	r2, [pc, #388]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d8:	d115      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096da:	f7f9 f8d3 	bl	8002884 <HAL_GetTick>
 80096de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096e0:	e00b      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096e2:	f7f9 f8cf 	bl	8002884 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d902      	bls.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	75fb      	strb	r3, [r7, #23]
            break;
 80096f8:	e005      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096fa:	4b55      	ldr	r3, [pc, #340]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ed      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d126      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800971a:	d10d      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800971c:	4b4c      	ldr	r3, [pc, #304]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800972a:	0919      	lsrs	r1, r3, #4
 800972c:	4b4a      	ldr	r3, [pc, #296]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800972e:	400b      	ands	r3, r1
 8009730:	4947      	ldr	r1, [pc, #284]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009732:	4313      	orrs	r3, r2
 8009734:	610b      	str	r3, [r1, #16]
 8009736:	e005      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009738:	4b45      	ldr	r3, [pc, #276]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	4a44      	ldr	r2, [pc, #272]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800973e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009742:	6113      	str	r3, [r2, #16]
 8009744:	4b42      	ldr	r3, [pc, #264]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800974e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009752:	493f      	ldr	r1, [pc, #252]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009754:	4313      	orrs	r3, r2
 8009756:	670b      	str	r3, [r1, #112]	; 0x70
 8009758:	e004      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	75bb      	strb	r3, [r7, #22]
 800975e:	e001      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8085 	beq.w	800987c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009776:	2b28      	cmp	r3, #40	; 0x28
 8009778:	d866      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	0800985d 	.word	0x0800985d
 8009784:	08009849 	.word	0x08009849
 8009788:	08009849 	.word	0x08009849
 800978c:	08009849 	.word	0x08009849
 8009790:	08009849 	.word	0x08009849
 8009794:	08009849 	.word	0x08009849
 8009798:	08009849 	.word	0x08009849
 800979c:	08009849 	.word	0x08009849
 80097a0:	08009825 	.word	0x08009825
 80097a4:	08009849 	.word	0x08009849
 80097a8:	08009849 	.word	0x08009849
 80097ac:	08009849 	.word	0x08009849
 80097b0:	08009849 	.word	0x08009849
 80097b4:	08009849 	.word	0x08009849
 80097b8:	08009849 	.word	0x08009849
 80097bc:	08009849 	.word	0x08009849
 80097c0:	08009837 	.word	0x08009837
 80097c4:	08009849 	.word	0x08009849
 80097c8:	08009849 	.word	0x08009849
 80097cc:	08009849 	.word	0x08009849
 80097d0:	08009849 	.word	0x08009849
 80097d4:	08009849 	.word	0x08009849
 80097d8:	08009849 	.word	0x08009849
 80097dc:	08009849 	.word	0x08009849
 80097e0:	0800985d 	.word	0x0800985d
 80097e4:	08009849 	.word	0x08009849
 80097e8:	08009849 	.word	0x08009849
 80097ec:	08009849 	.word	0x08009849
 80097f0:	08009849 	.word	0x08009849
 80097f4:	08009849 	.word	0x08009849
 80097f8:	08009849 	.word	0x08009849
 80097fc:	08009849 	.word	0x08009849
 8009800:	0800985d 	.word	0x0800985d
 8009804:	08009849 	.word	0x08009849
 8009808:	08009849 	.word	0x08009849
 800980c:	08009849 	.word	0x08009849
 8009810:	08009849 	.word	0x08009849
 8009814:	08009849 	.word	0x08009849
 8009818:	08009849 	.word	0x08009849
 800981c:	08009849 	.word	0x08009849
 8009820:	0800985d 	.word	0x0800985d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	2101      	movs	r1, #1
 800982a:	4618      	mov	r0, r3
 800982c:	f001 fc1e 	bl	800b06c <RCCEx_PLL2_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009834:	e013      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3324      	adds	r3, #36	; 0x24
 800983a:	2101      	movs	r1, #1
 800983c:	4618      	mov	r0, r3
 800983e:	f001 fcc7 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009846:	e00a      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	75fb      	strb	r3, [r7, #23]
      break;
 800984c:	e007      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	58024800 	.word	0x58024800
 8009858:	00ffffcf 	.word	0x00ffffcf
      break;
 800985c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009864:	4b96      	ldr	r3, [pc, #600]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009868:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009870:	4993      	ldr	r1, [pc, #588]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	654b      	str	r3, [r1, #84]	; 0x54
 8009876:	e001      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d038      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	2b05      	cmp	r3, #5
 800988e:	d821      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009890:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098db 	.word	0x080098db
 800989c:	080098b1 	.word	0x080098b1
 80098a0:	080098c3 	.word	0x080098c3
 80098a4:	080098db 	.word	0x080098db
 80098a8:	080098db 	.word	0x080098db
 80098ac:	080098db 	.word	0x080098db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2101      	movs	r1, #1
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 fbd8 	bl	800b06c <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098c0:	e00c      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3324      	adds	r3, #36	; 0x24
 80098c6:	2101      	movs	r1, #1
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 fc81 	bl	800b1d0 <RCCEx_PLL3_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80098da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098e2:	4b77      	ldr	r3, [pc, #476]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f023 0207 	bic.w	r2, r3, #7
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ee:	4974      	ldr	r1, [pc, #464]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	654b      	str	r3, [r1, #84]	; 0x54
 80098f4:	e001      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	d03a      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990c:	2b05      	cmp	r3, #5
 800990e:	d821      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	0800995b 	.word	0x0800995b
 800991c:	08009931 	.word	0x08009931
 8009920:	08009943 	.word	0x08009943
 8009924:	0800995b 	.word	0x0800995b
 8009928:	0800995b 	.word	0x0800995b
 800992c:	0800995b 	.word	0x0800995b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3304      	adds	r3, #4
 8009934:	2101      	movs	r1, #1
 8009936:	4618      	mov	r0, r3
 8009938:	f001 fb98 	bl	800b06c <RCCEx_PLL2_Config>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009940:	e00c      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3324      	adds	r3, #36	; 0x24
 8009946:	2101      	movs	r1, #1
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fc41 	bl	800b1d0 <RCCEx_PLL3_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009952:	e003      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	75fb      	strb	r3, [r7, #23]
      break;
 8009958:	e000      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800995a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009962:	4b57      	ldr	r3, [pc, #348]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009966:	f023 0207 	bic.w	r2, r3, #7
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	4953      	ldr	r1, [pc, #332]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009972:	4313      	orrs	r3, r2
 8009974:	658b      	str	r3, [r1, #88]	; 0x58
 8009976:	e001      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d04b      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800998e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009992:	d02e      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009998:	d828      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800999a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800999e:	d02a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80099a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a4:	d822      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099aa:	d026      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80099ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099b0:	d81c      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b6:	d010      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80099b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099bc:	d816      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01d      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80099c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099c6:	d111      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fb4c 	bl	800b06c <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80099d8:	e012      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3324      	adds	r3, #36	; 0x24
 80099de:	2102      	movs	r1, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fbf5 	bl	800b1d0 <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80099ea:	e009      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
      break;
 80099f0:	e006      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80099f2:	bf00      	nop
 80099f4:	e004      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80099f6:	bf00      	nop
 80099f8:	e002      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80099fa:	bf00      	nop
 80099fc:	e000      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80099fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10a      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a06:	4b2e      	ldr	r3, [pc, #184]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a14:	492a      	ldr	r1, [pc, #168]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	654b      	str	r3, [r1, #84]	; 0x54
 8009a1a:	e001      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d04d      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a36:	d02e      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009a38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a3c:	d828      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a42:	d02a      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	d822      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a4e:	d026      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a54:	d81c      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5a:	d010      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a60:	d816      	bhi.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01d      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6a:	d111      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fafa 	bl	800b06c <RCCEx_PLL2_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a7c:	e012      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3324      	adds	r3, #36	; 0x24
 8009a82:	2102      	movs	r1, #2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fba3 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a8e:	e009      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]
      break;
 8009a94:	e006      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a96:	bf00      	nop
 8009a98:	e004      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a9a:	bf00      	nop
 8009a9c:	e002      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a9e:	bf00      	nop
 8009aa0:	e000      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009aaa:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ab8:	4901      	ldr	r1, [pc, #4]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	658b      	str	r3, [r1, #88]	; 0x58
 8009abe:	e003      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d04b      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ada:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ade:	d02e      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009ae0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ae4:	d828      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aea:	d02a      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af0:	d822      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009af2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009af6:	d026      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009af8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009afc:	d81c      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b02:	d010      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b08:	d816      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01d      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b12:	d111      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3304      	adds	r3, #4
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 faa6 	bl	800b06c <RCCEx_PLL2_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b24:	e012      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3324      	adds	r3, #36	; 0x24
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 fb4f 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b36:	e009      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3c:	e006      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b3e:	bf00      	nop
 8009b40:	e004      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b42:	bf00      	nop
 8009b44:	e002      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b46:	bf00      	nop
 8009b48:	e000      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b52:	4b9d      	ldr	r3, [pc, #628]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b60:	4999      	ldr	r1, [pc, #612]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	658b      	str	r3, [r1, #88]	; 0x58
 8009b66:	e001      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01a      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b82:	d10a      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3324      	adds	r3, #36	; 0x24
 8009b88:	2102      	movs	r1, #2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fb20 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b9a:	4b8b      	ldr	r3, [pc, #556]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba8:	4987      	ldr	r1, [pc, #540]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01a      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc4:	d10a      	bne.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3324      	adds	r3, #36	; 0x24
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 faff 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bdc:	4b7a      	ldr	r3, [pc, #488]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bea:	4977      	ldr	r1, [pc, #476]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d034      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c06:	d01d      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c0c:	d817      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c16:	d009      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009c18:	e011      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 fa23 	bl	800b06c <RCCEx_PLL2_Config>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c2a:	e00c      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3324      	adds	r3, #36	; 0x24
 8009c30:	2102      	movs	r1, #2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 facc 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c3c:	e003      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
      break;
 8009c42:	e000      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c4c:	4b5e      	ldr	r3, [pc, #376]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c5a:	495b      	ldr	r1, [pc, #364]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8009c60:	e001      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d033      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7c:	d01c      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c82:	d816      	bhi.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c88:	d003      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8e:	d007      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009c90:	e00f      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c92:	4b4d      	ldr	r3, [pc, #308]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c9e:	e00c      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3324      	adds	r3, #36	; 0x24
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fa92 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb6:	e000      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cc0:	4b41      	ldr	r3, [pc, #260]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cce:	493e      	ldr	r1, [pc, #248]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	654b      	str	r3, [r1, #84]	; 0x54
 8009cd4:	e001      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d029      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf2:	d007      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009cf4:	e00f      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf6:	4b34      	ldr	r3, [pc, #208]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	4a33      	ldr	r2, [pc, #204]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d02:	e00b      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	2102      	movs	r1, #2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 f9ae 	bl	800b06c <RCCEx_PLL2_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d14:	e002      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d22:	4b29      	ldr	r3, [pc, #164]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2e:	4926      	ldr	r1, [pc, #152]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d34:	e001      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3324      	adds	r3, #36	; 0x24
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fa3f 	bl	800b1d0 <RCCEx_PLL3_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d033      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d70:	d017      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d76:	d811      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d7c:	d013      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d82:	d80b      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d010      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8c:	d106      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d8e:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	4a0d      	ldr	r2, [pc, #52]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009d9a:	e007      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009da0:	e004      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009da2:	bf00      	nop
 8009da4:	e002      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10c      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dbe:	4902      	ldr	r1, [pc, #8]	; (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	654b      	str	r3, [r1, #84]	; 0x54
 8009dc4:	e004      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d008      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009ddc:	4b31      	ldr	r3, [pc, #196]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	492e      	ldr	r1, [pc, #184]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009dfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e08:	4926      	ldr	r1, [pc, #152]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d008      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e1a:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e26:	491f      	ldr	r1, [pc, #124]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00d      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e38:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	4a19      	ldr	r2, [pc, #100]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e42:	6113      	str	r3, [r2, #16]
 8009e44:	4b17      	ldr	r3, [pc, #92]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e4e:	4915      	ldr	r1, [pc, #84]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da08      	bge.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e5c:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e68:	490e      	ldr	r1, [pc, #56]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d009      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e88:	4906      	ldr	r1, [pc, #24]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009e8e:	7dbb      	ldrb	r3, [r7, #22]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	e000      	b.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400

08009ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b090      	sub	sp, #64	; 0x40
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb6:	f040 8095 	bne.w	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009eba:	4b97      	ldr	r3, [pc, #604]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	f200 8088 	bhi.w	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ee9 	.word	0x08009ee9
 8009ed8:	08009f11 	.word	0x08009f11
 8009edc:	08009f39 	.word	0x08009f39
 8009ee0:	08009fd5 	.word	0x08009fd5
 8009ee4:	08009f61 	.word	0x08009f61
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ee8:	4b8b      	ldr	r3, [pc, #556]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef4:	d108      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 ff64 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f04:	f000 bc94 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f0c:	f000 bc90 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f10:	4b81      	ldr	r3, [pc, #516]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f1c:	d108      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1e:	f107 0318 	add.w	r3, r7, #24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fca8 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f2c:	f000 bc80 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f34:	f000 bc7c 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f38:	4b77      	ldr	r3, [pc, #476]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f44:	d108      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f46:	f107 030c 	add.w	r3, r7, #12
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fde8 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f54:	f000 bc6c 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f5c:	f000 bc68 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f60:	4b6d      	ldr	r3, [pc, #436]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f6a:	4b6b      	ldr	r3, [pc, #428]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d10c      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d109      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f7c:	4b66      	ldr	r3, [pc, #408]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	08db      	lsrs	r3, r3, #3
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	4a65      	ldr	r2, [pc, #404]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009f88:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8e:	e01f      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f90:	4b61      	ldr	r3, [pc, #388]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9c:	d106      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa4:	d102      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fa6:	4b5e      	ldr	r3, [pc, #376]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009faa:	e011      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fac:	4b5a      	ldr	r3, [pc, #360]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc0:	d102      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fc2:	4b58      	ldr	r3, [pc, #352]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc6:	e003      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009fcc:	f000 bc30 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009fd0:	f000 bc2e 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009fd4:	4b54      	ldr	r3, [pc, #336]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd8:	f000 bc2a 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fe0:	f000 bc26 	b.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fea:	f040 809f 	bne.w	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009fee:	4b4a      	ldr	r3, [pc, #296]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009ff6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ffe:	d04d      	beq.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a006:	f200 8084 	bhi.w	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	2bc0      	cmp	r3, #192	; 0xc0
 800a00e:	d07d      	beq.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	2bc0      	cmp	r3, #192	; 0xc0
 800a014:	d87d      	bhi.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	2b80      	cmp	r3, #128	; 0x80
 800a01a:	d02d      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	2b80      	cmp	r3, #128	; 0x80
 800a020:	d877      	bhi.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	2b40      	cmp	r3, #64	; 0x40
 800a02c:	d012      	beq.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a02e:	e070      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a030:	4b39      	ldr	r3, [pc, #228]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03c:	d107      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fec0 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a04c:	e3f0      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a052:	e3ed      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a054:	4b30      	ldr	r3, [pc, #192]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a060:	d107      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a062:	f107 0318 	add.w	r3, r7, #24
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fc06 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a070:	e3de      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a076:	e3db      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a078:	4b27      	ldr	r3, [pc, #156]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a084:	d107      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a086:	f107 030c 	add.w	r3, r7, #12
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fd48 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a094:	e3cc      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a09a:	e3c9      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a09c:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d10c      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d109      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0b8:	4b17      	ldr	r3, [pc, #92]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	4a16      	ldr	r2, [pc, #88]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ca:	e01e      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0cc:	4b12      	ldr	r3, [pc, #72]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d106      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a0e2:	4b0f      	ldr	r3, [pc, #60]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e6:	e010      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f4:	d106      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fc:	d102      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a102:	e002      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a108:	e392      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a10a:	e391      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a10c:	4b06      	ldr	r3, [pc, #24]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a110:	e38e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a116:	e38b      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a118:	58024400 	.word	0x58024400
 800a11c:	03d09000 	.word	0x03d09000
 800a120:	003d0900 	.word	0x003d0900
 800a124:	017d7840 	.word	0x017d7840
 800a128:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a132:	f040 809c 	bne.w	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a136:	4b9d      	ldr	r3, [pc, #628]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a146:	d054      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a14e:	f200 808b 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a158:	f000 8083 	beq.w	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a162:	f200 8081 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a16c:	d02f      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a174:	d878      	bhi.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a182:	d012      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a184:	e070      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a186:	4b89      	ldr	r3, [pc, #548]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a192:	d107      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fe15 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1a2:	e345      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a8:	e342      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1aa:	4b80      	ldr	r3, [pc, #512]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b8:	f107 0318 	add.w	r3, r7, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fb5b 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1c6:	e333      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1cc:	e330      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1ce:	4b77      	ldr	r3, [pc, #476]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fc9d 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ea:	e321      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f0:	e31e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1f2:	4b6e      	ldr	r3, [pc, #440]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1fa:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1fc:	4b6b      	ldr	r3, [pc, #428]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b04      	cmp	r3, #4
 800a206:	d10c      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a20e:	4b67      	ldr	r3, [pc, #412]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	08db      	lsrs	r3, r3, #3
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	4a65      	ldr	r2, [pc, #404]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a21a:	fa22 f303 	lsr.w	r3, r2, r3
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a220:	e01e      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a222:	4b62      	ldr	r3, [pc, #392]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22e:	d106      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a236:	d102      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a238:	4b5e      	ldr	r3, [pc, #376]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a23c:	e010      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a23e:	4b5b      	ldr	r3, [pc, #364]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a24a:	d106      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a254:	4b58      	ldr	r3, [pc, #352]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a25e:	e2e7      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a260:	e2e6      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a262:	4b56      	ldr	r3, [pc, #344]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a266:	e2e3      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a26c:	e2e0      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a274:	f040 80a7 	bne.w	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a278:	4b4c      	ldr	r3, [pc, #304]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a280:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a288:	d055      	beq.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a290:	f200 8096 	bhi.w	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a29a:	f000 8084 	beq.w	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2a4:	f200 808c 	bhi.w	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2ae:	d030      	beq.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b6:	f200 8083 	bhi.w	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2c6:	d012      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a2c8:	e07a      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ca:	4b38      	ldr	r3, [pc, #224]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d6:	d107      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fd73 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2e6:	e2a3      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ec:	e2a0      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ee:	4b2f      	ldr	r3, [pc, #188]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fa:	d107      	bne.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fc:	f107 0318 	add.w	r3, r7, #24
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fab9 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a30a:	e291      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a310:	e28e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a312:	4b26      	ldr	r3, [pc, #152]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a31a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31e:	d107      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a320:	f107 030c 	add.w	r3, r7, #12
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fbfb 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32e:	e27f      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a334:	e27c      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a336:	4b1d      	ldr	r3, [pc, #116]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a33e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a340:	4b1a      	ldr	r3, [pc, #104]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d10c      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a352:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	08db      	lsrs	r3, r3, #3
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	4a14      	ldr	r2, [pc, #80]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a35e:	fa22 f303 	lsr.w	r3, r2, r3
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a364:	e01e      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d106      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37a:	d102      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a37c:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a380:	e010      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a382:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38e:	d106      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a396:	d102      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a39c:	e002      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3a2:	e245      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3a4:	e244      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3a6:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3aa:	e241      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	03d09000 	.word	0x03d09000
 800a3b4:	003d0900 	.word	0x003d0900
 800a3b8:	017d7840 	.word	0x017d7840
 800a3bc:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c4:	e234      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3cc:	f040 809c 	bne.w	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a3d0:	4b9b      	ldr	r3, [pc, #620]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a3d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e0:	d054      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e8:	f200 808b 	bhi.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3f2:	f000 8083 	beq.w	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3fc:	f200 8081 	bhi.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a406:	d02f      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40e:	d878      	bhi.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	2b00      	cmp	r3, #0
 800a414:	d004      	beq.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41c:	d012      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a41e:	e070      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a420:	4b87      	ldr	r3, [pc, #540]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a42c:	d107      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a42e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fcc8 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a43c:	e1f8      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a442:	e1f5      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a444:	4b7e      	ldr	r3, [pc, #504]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a450:	d107      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a452:	f107 0318 	add.w	r3, r7, #24
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fa0e 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a460:	e1e6      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a466:	e1e3      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a468:	4b75      	ldr	r3, [pc, #468]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a474:	d107      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a476:	f107 030c 	add.w	r3, r7, #12
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fb50 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a484:	e1d4      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48a:	e1d1      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a48c:	4b6c      	ldr	r3, [pc, #432]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a494:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a496:	4b6a      	ldr	r3, [pc, #424]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0304 	and.w	r3, r3, #4
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d10c      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d109      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4a8:	4b65      	ldr	r3, [pc, #404]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	4a64      	ldr	r2, [pc, #400]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ba:	e01e      	b.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4bc:	4b60      	ldr	r3, [pc, #384]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c8:	d106      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4d0:	d102      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4d2:	4b5d      	ldr	r3, [pc, #372]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d6:	e010      	b.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4d8:	4b59      	ldr	r3, [pc, #356]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4e4:	d106      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ec:	d102      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4ee:	4b57      	ldr	r3, [pc, #348]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f2:	e002      	b.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4f8:	e19a      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a4fa:	e199      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4fc:	4b54      	ldr	r3, [pc, #336]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a500:	e196      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a506:	e193      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a50e:	d173      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a510:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a518:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a520:	d02f      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a528:	d863      	bhi.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a536:	d012      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800a538:	e05b      	b.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a53a:	4b41      	ldr	r3, [pc, #260]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a546:	d107      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a548:	f107 0318 	add.w	r3, r7, #24
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 f993 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a556:	e16b      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55c:	e168      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a55e:	4b38      	ldr	r3, [pc, #224]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a56a:	d107      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fad5 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57a:	e159      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a580:	e156      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a582:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a58c:	4b2c      	ldr	r3, [pc, #176]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b04      	cmp	r3, #4
 800a596:	d10c      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a59e:	4b28      	ldr	r3, [pc, #160]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	08db      	lsrs	r3, r3, #3
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	4a26      	ldr	r2, [pc, #152]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b0:	e01e      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5b2:	4b23      	ldr	r3, [pc, #140]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5be:	d106      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5c6:	d102      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5c8:	4b1f      	ldr	r3, [pc, #124]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5cc:	e010      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5ce:	4b1c      	ldr	r3, [pc, #112]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5da:	d106      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5e2:	d102      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5e4:	4b19      	ldr	r3, [pc, #100]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e8:	e002      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5ee:	e11f      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a5f0:	e11e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f6:	e11b      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5fe:	d13e      	bne.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a608:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a616:	d01d      	beq.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a618:	e02e      	b.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a626:	d107      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fbcb 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a636:	e0fb      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63c:	e0f8      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a63e:	bf00      	nop
 800a640:	58024400 	.word	0x58024400
 800a644:	03d09000 	.word	0x03d09000
 800a648:	003d0900 	.word	0x003d0900
 800a64c:	017d7840 	.word	0x017d7840
 800a650:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a654:	4b79      	ldr	r3, [pc, #484]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a65c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a660:	d107      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a662:	f107 0318 	add.w	r3, r7, #24
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f906 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a670:	e0de      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a676:	e0db      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67c:	e0d8      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a684:	f040 8085 	bne.w	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a688:	4b6c      	ldr	r3, [pc, #432]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a690:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a698:	d06b      	beq.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6a0:	d874      	bhi.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a8:	d056      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b0:	d86c      	bhi.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6b8:	d03b      	beq.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6c0:	d864      	bhi.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c8:	d021      	beq.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6d0:	d85c      	bhi.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d004      	beq.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6de:	d004      	beq.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a6e0:	e054      	b.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6e2:	f000 f8b3 	bl	800a84c <HAL_RCCEx_GetD3PCLK1Freq>
 800a6e6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a6e8:	e0a2      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ea:	4b54      	ldr	r3, [pc, #336]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6f6:	d107      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f8:	f107 0318 	add.w	r3, r7, #24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 f8bb 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a706:	e093      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a70c:	e090      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a70e:	4b4b      	ldr	r3, [pc, #300]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a71a:	d107      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a71c:	f107 030c 	add.w	r3, r7, #12
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f9fd 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a72a:	e081      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a730:	e07e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a732:	4b42      	ldr	r3, [pc, #264]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d109      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a73e:	4b3f      	ldr	r3, [pc, #252]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	08db      	lsrs	r3, r3, #3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	4a3d      	ldr	r2, [pc, #244]	; (800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a74a:	fa22 f303 	lsr.w	r3, r2, r3
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a750:	e06e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a756:	e06b      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a758:	4b38      	ldr	r3, [pc, #224]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a764:	d102      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a766:	4b37      	ldr	r3, [pc, #220]	; (800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a76a:	e061      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a770:	e05e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a772:	4b32      	ldr	r3, [pc, #200]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77e:	d102      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a780:	4b31      	ldr	r3, [pc, #196]	; (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a784:	e054      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78a:	e051      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a790:	e04e      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a798:	d148      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a79a:	4b28      	ldr	r3, [pc, #160]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7aa:	d02a      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b2:	d838      	bhi.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c0:	d00d      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a7c2:	e030      	b.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7c4:	4b1d      	ldr	r3, [pc, #116]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7d0:	d102      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7d6:	e02b      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7dc:	e028      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7de:	4b17      	ldr	r3, [pc, #92]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fae9 	bl	800adc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7fa:	e019      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a800:	e016      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a802:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a810:	f107 0318 	add.w	r3, r7, #24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 f82f 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a81e:	e007      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a824:	e004      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a82a:	e001      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a832:	4618      	mov	r0, r3
 800a834:	3740      	adds	r7, #64	; 0x40
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	58024400 	.word	0x58024400
 800a840:	03d09000 	.word	0x03d09000
 800a844:	003d0900 	.word	0x003d0900
 800a848:	017d7840 	.word	0x017d7840

0800a84c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a850:	f7fe fb88 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 800a854:	4602      	mov	r2, r0
 800a856:	4b06      	ldr	r3, [pc, #24]	; (800a870 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	091b      	lsrs	r3, r3, #4
 800a85c:	f003 0307 	and.w	r3, r3, #7
 800a860:	4904      	ldr	r1, [pc, #16]	; (800a874 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a862:	5ccb      	ldrb	r3, [r1, r3]
 800a864:	f003 031f 	and.w	r3, r3, #31
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	58024400 	.word	0x58024400
 800a874:	0800f010 	.word	0x0800f010

0800a878 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a878:	b480      	push	{r7}
 800a87a:	b089      	sub	sp, #36	; 0x24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a880:	4ba1      	ldr	r3, [pc, #644]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a88a:	4b9f      	ldr	r3, [pc, #636]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	0b1b      	lsrs	r3, r3, #12
 800a890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a894:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a896:	4b9c      	ldr	r3, [pc, #624]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	091b      	lsrs	r3, r3, #4
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a8a2:	4b99      	ldr	r3, [pc, #612]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	fb02 f303 	mul.w	r3, r2, r3
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 8111 	beq.w	800aae8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	f000 8083 	beq.w	800a9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	f200 80a1 	bhi.w	800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d056      	beq.n	800a990 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8e2:	e099      	b.n	800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e4:	4b88      	ldr	r3, [pc, #544]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0320 	and.w	r3, r3, #32
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d02d      	beq.n	800a94c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8f0:	4b85      	ldr	r3, [pc, #532]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	08db      	lsrs	r3, r3, #3
 800a8f6:	f003 0303 	and.w	r3, r3, #3
 800a8fa:	4a84      	ldr	r2, [pc, #528]	; (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a900:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91a:	4b7b      	ldr	r3, [pc, #492]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a92e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a946:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a94a:	e087      	b.n	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a95e:	4b6a      	ldr	r3, [pc, #424]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a972:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a98e:	e065      	b.n	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a2:	4b59      	ldr	r3, [pc, #356]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9d2:	e043      	b.n	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	4b48      	ldr	r3, [pc, #288]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa16:	e021      	b.n	800aa5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2a:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aa5c:	4b2a      	ldr	r3, [pc, #168]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	0a5b      	lsrs	r3, r3, #9
 800aa62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa76:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa82:	ee17 2a90 	vmov	r2, s15
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800aa8a:	4b1f      	ldr	r3, [pc, #124]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	0c1b      	lsrs	r3, r3, #16
 800aa90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aab0:	ee17 2a90 	vmov	r2, s15
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800aab8:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	0e1b      	lsrs	r3, r3, #24
 800aabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aace:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aad2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aade:	ee17 2a90 	vmov	r2, s15
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aae6:	e008      	b.n	800aafa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	609a      	str	r2, [r3, #8]
}
 800aafa:	bf00      	nop
 800aafc:	3724      	adds	r7, #36	; 0x24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	03d09000 	.word	0x03d09000
 800ab10:	46000000 	.word	0x46000000
 800ab14:	4c742400 	.word	0x4c742400
 800ab18:	4a742400 	.word	0x4a742400
 800ab1c:	4bbebc20 	.word	0x4bbebc20

0800ab20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b089      	sub	sp, #36	; 0x24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab28:	4ba1      	ldr	r3, [pc, #644]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2c:	f003 0303 	and.w	r3, r3, #3
 800ab30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ab32:	4b9f      	ldr	r3, [pc, #636]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab36:	0d1b      	lsrs	r3, r3, #20
 800ab38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab3e:	4b9c      	ldr	r3, [pc, #624]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ab4a:	4b99      	ldr	r3, [pc, #612]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8111 	beq.w	800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	f000 8083 	beq.w	800ac7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	f200 80a1 	bhi.w	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d056      	beq.n	800ac38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab8a:	e099      	b.n	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab8c:	4b88      	ldr	r3, [pc, #544]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d02d      	beq.n	800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab98:	4b85      	ldr	r3, [pc, #532]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	08db      	lsrs	r3, r3, #3
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	4a84      	ldr	r2, [pc, #528]	; (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aba4:	fa22 f303 	lsr.w	r3, r2, r3
 800aba8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	ee07 3a90 	vmov	s15, r3
 800abb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc2:	4b7b      	ldr	r3, [pc, #492]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abf2:	e087      	b.n	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac06:	4b6a      	ldr	r3, [pc, #424]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac36:	e065      	b.n	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4a:	4b59      	ldr	r3, [pc, #356]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac7a:	e043      	b.n	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8e:	4b48      	ldr	r3, [pc, #288]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acbe:	e021      	b.n	800ad04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd2:	4b37      	ldr	r3, [pc, #220]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ad04:	4b2a      	ldr	r3, [pc, #168]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	0a5b      	lsrs	r3, r3, #9
 800ad0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2a:	ee17 2a90 	vmov	r2, s15
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ad32:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad36:	0c1b      	lsrs	r3, r3, #16
 800ad38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3c:	ee07 3a90 	vmov	s15, r3
 800ad40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad58:	ee17 2a90 	vmov	r2, s15
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ad60:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	0e1b      	lsrs	r3, r3, #24
 800ad66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad86:	ee17 2a90 	vmov	r2, s15
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad8e:	e008      	b.n	800ada2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	609a      	str	r2, [r3, #8]
}
 800ada2:	bf00      	nop
 800ada4:	3724      	adds	r7, #36	; 0x24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	58024400 	.word	0x58024400
 800adb4:	03d09000 	.word	0x03d09000
 800adb8:	46000000 	.word	0x46000000
 800adbc:	4c742400 	.word	0x4c742400
 800adc0:	4a742400 	.word	0x4a742400
 800adc4:	4bbebc20 	.word	0x4bbebc20

0800adc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800adc8:	b480      	push	{r7}
 800adca:	b089      	sub	sp, #36	; 0x24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800add0:	4ba0      	ldr	r3, [pc, #640]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800adda:	4b9e      	ldr	r3, [pc, #632]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ade4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ade6:	4b9b      	ldr	r3, [pc, #620]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800adf0:	4b98      	ldr	r3, [pc, #608]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf4:	08db      	lsrs	r3, r3, #3
 800adf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 8111 	beq.w	800b036 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	f000 8083 	beq.w	800af22 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	f200 80a1 	bhi.w	800af66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d056      	beq.n	800aede <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae30:	e099      	b.n	800af66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae32:	4b88      	ldr	r3, [pc, #544]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d02d      	beq.n	800ae9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae3e:	4b85      	ldr	r3, [pc, #532]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	08db      	lsrs	r3, r3, #3
 800ae44:	f003 0303 	and.w	r3, r3, #3
 800ae48:	4a83      	ldr	r2, [pc, #524]	; (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	ee07 3a90 	vmov	s15, r3
 800ae60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae68:	4b7a      	ldr	r3, [pc, #488]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae78:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae98:	e087      	b.n	800afaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	ee07 3a90 	vmov	s15, r3
 800aea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeac:	4b69      	ldr	r3, [pc, #420]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aebc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aedc:	e065      	b.n	800afaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	ee07 3a90 	vmov	s15, r3
 800aee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aeec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef0:	4b58      	ldr	r3, [pc, #352]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af00:	ed97 6a03 	vldr	s12, [r7, #12]
 800af04:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af20:	e043      	b.n	800afaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	ee07 3a90 	vmov	s15, r3
 800af28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af34:	4b47      	ldr	r3, [pc, #284]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3c:	ee07 3a90 	vmov	s15, r3
 800af40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af44:	ed97 6a03 	vldr	s12, [r7, #12]
 800af48:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af64:	e021      	b.n	800afaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af70:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af78:	4b36      	ldr	r3, [pc, #216]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af88:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afa8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800afaa:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afae:	0a5b      	lsrs	r3, r3, #9
 800afb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb4:	ee07 3a90 	vmov	s15, r3
 800afb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd0:	ee17 2a90 	vmov	r2, s15
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800afd8:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afdc:	0c1b      	lsrs	r3, r3, #16
 800afde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800affe:	ee17 2a90 	vmov	r2, s15
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b006:	4b13      	ldr	r3, [pc, #76]	; (800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	0e1b      	lsrs	r3, r3, #24
 800b00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b010:	ee07 3a90 	vmov	s15, r3
 800b014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b01c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b020:	edd7 6a07 	vldr	s13, [r7, #28]
 800b024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b02c:	ee17 2a90 	vmov	r2, s15
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b034:	e008      	b.n	800b048 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	609a      	str	r2, [r3, #8]
}
 800b048:	bf00      	nop
 800b04a:	3724      	adds	r7, #36	; 0x24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	58024400 	.word	0x58024400
 800b058:	03d09000 	.word	0x03d09000
 800b05c:	46000000 	.word	0x46000000
 800b060:	4c742400 	.word	0x4c742400
 800b064:	4a742400 	.word	0x4a742400
 800b068:	4bbebc20 	.word	0x4bbebc20

0800b06c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b07a:	4b53      	ldr	r3, [pc, #332]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07e:	f003 0303 	and.w	r3, r3, #3
 800b082:	2b03      	cmp	r3, #3
 800b084:	d101      	bne.n	800b08a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e099      	b.n	800b1be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b08a:	4b4f      	ldr	r3, [pc, #316]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a4e      	ldr	r2, [pc, #312]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b090:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b096:	f7f7 fbf5 	bl	8002884 <HAL_GetTick>
 800b09a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b09c:	e008      	b.n	800b0b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b09e:	f7f7 fbf1 	bl	8002884 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d901      	bls.n	800b0b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e086      	b.n	800b1be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0b0:	4b45      	ldr	r3, [pc, #276]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f0      	bne.n	800b09e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0bc:	4b42      	ldr	r3, [pc, #264]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	031b      	lsls	r3, r3, #12
 800b0ca:	493f      	ldr	r1, [pc, #252]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	628b      	str	r3, [r1, #40]	; 0x28
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	025b      	lsls	r3, r3, #9
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	431a      	orrs	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	041b      	lsls	r3, r3, #16
 800b0ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	061b      	lsls	r3, r3, #24
 800b0fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b100:	4931      	ldr	r1, [pc, #196]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b102:	4313      	orrs	r3, r2
 800b104:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b106:	4b30      	ldr	r3, [pc, #192]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	492d      	ldr	r1, [pc, #180]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b114:	4313      	orrs	r3, r2
 800b116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b118:	4b2b      	ldr	r3, [pc, #172]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	f023 0220 	bic.w	r2, r3, #32
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	4928      	ldr	r1, [pc, #160]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b126:	4313      	orrs	r3, r2
 800b128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b12a:	4b27      	ldr	r3, [pc, #156]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	4a26      	ldr	r2, [pc, #152]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b130:	f023 0310 	bic.w	r3, r3, #16
 800b134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b136:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b13a:	4b24      	ldr	r3, [pc, #144]	; (800b1cc <RCCEx_PLL2_Config+0x160>)
 800b13c:	4013      	ands	r3, r2
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	69d2      	ldr	r2, [r2, #28]
 800b142:	00d2      	lsls	r2, r2, #3
 800b144:	4920      	ldr	r1, [pc, #128]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b146:	4313      	orrs	r3, r2
 800b148:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b14a:	4b1f      	ldr	r3, [pc, #124]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14e:	4a1e      	ldr	r2, [pc, #120]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b150:	f043 0310 	orr.w	r3, r3, #16
 800b154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d106      	bne.n	800b16a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b15c:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b166:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b168:	e00f      	b.n	800b18a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d106      	bne.n	800b17e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b170:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	4a14      	ldr	r2, [pc, #80]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b17a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b17c:	e005      	b.n	800b18a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	4a11      	ldr	r2, [pc, #68]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b188:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b18a:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a0e      	ldr	r2, [pc, #56]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b196:	f7f7 fb75 	bl	8002884 <HAL_GetTick>
 800b19a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b19c:	e008      	b.n	800b1b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b19e:	f7f7 fb71 	bl	8002884 <HAL_GetTick>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d901      	bls.n	800b1b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e006      	b.n	800b1be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1b0:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <RCCEx_PLL2_Config+0x15c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d0f0      	beq.n	800b19e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	58024400 	.word	0x58024400
 800b1cc:	ffff0007 	.word	0xffff0007

0800b1d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1de:	4b53      	ldr	r3, [pc, #332]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d101      	bne.n	800b1ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e099      	b.n	800b322 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1ee:	4b4f      	ldr	r3, [pc, #316]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a4e      	ldr	r2, [pc, #312]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1fa:	f7f7 fb43 	bl	8002884 <HAL_GetTick>
 800b1fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b200:	e008      	b.n	800b214 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b202:	f7f7 fb3f 	bl	8002884 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d901      	bls.n	800b214 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e086      	b.n	800b322 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b214:	4b45      	ldr	r3, [pc, #276]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1f0      	bne.n	800b202 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b220:	4b42      	ldr	r3, [pc, #264]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	051b      	lsls	r3, r3, #20
 800b22e:	493f      	ldr	r1, [pc, #252]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b230:	4313      	orrs	r3, r2
 800b232:	628b      	str	r3, [r1, #40]	; 0x28
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	3b01      	subs	r3, #1
 800b23a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	3b01      	subs	r3, #1
 800b244:	025b      	lsls	r3, r3, #9
 800b246:	b29b      	uxth	r3, r3
 800b248:	431a      	orrs	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	3b01      	subs	r3, #1
 800b250:	041b      	lsls	r3, r3, #16
 800b252:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b256:	431a      	orrs	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	061b      	lsls	r3, r3, #24
 800b260:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b264:	4931      	ldr	r1, [pc, #196]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b266:	4313      	orrs	r3, r2
 800b268:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b26a:	4b30      	ldr	r3, [pc, #192]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	492d      	ldr	r1, [pc, #180]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b27c:	4b2b      	ldr	r3, [pc, #172]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	4928      	ldr	r1, [pc, #160]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b28e:	4b27      	ldr	r3, [pc, #156]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	4a26      	ldr	r2, [pc, #152]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b29a:	4b24      	ldr	r3, [pc, #144]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b29e:	4b24      	ldr	r3, [pc, #144]	; (800b330 <RCCEx_PLL3_Config+0x160>)
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	69d2      	ldr	r2, [r2, #28]
 800b2a6:	00d2      	lsls	r2, r2, #3
 800b2a8:	4920      	ldr	r1, [pc, #128]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2ae:	4b1f      	ldr	r3, [pc, #124]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	4a1e      	ldr	r2, [pc, #120]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2c0:	4b1a      	ldr	r3, [pc, #104]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	4a19      	ldr	r2, [pc, #100]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2cc:	e00f      	b.n	800b2ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d106      	bne.n	800b2e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2d4:	4b15      	ldr	r3, [pc, #84]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d8:	4a14      	ldr	r2, [pc, #80]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2e0:	e005      	b.n	800b2ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2e2:	4b12      	ldr	r3, [pc, #72]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e6:	4a11      	ldr	r2, [pc, #68]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a0e      	ldr	r2, [pc, #56]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2fa:	f7f7 fac3 	bl	8002884 <HAL_GetTick>
 800b2fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b300:	e008      	b.n	800b314 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b302:	f7f7 fabf 	bl	8002884 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e006      	b.n	800b322 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <RCCEx_PLL3_Config+0x15c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f0      	beq.n	800b302 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	58024400 	.word	0x58024400
 800b330:	ffff0007 	.word	0xffff0007

0800b334 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e0f1      	b.n	800b52a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a78      	ldr	r2, [pc, #480]	; (800b534 <HAL_SPI_Init+0x200>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00f      	beq.n	800b376 <HAL_SPI_Init+0x42>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a77      	ldr	r2, [pc, #476]	; (800b538 <HAL_SPI_Init+0x204>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d00a      	beq.n	800b376 <HAL_SPI_Init+0x42>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a75      	ldr	r2, [pc, #468]	; (800b53c <HAL_SPI_Init+0x208>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d005      	beq.n	800b376 <HAL_SPI_Init+0x42>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	2b0f      	cmp	r3, #15
 800b370:	d901      	bls.n	800b376 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e0d9      	b.n	800b52a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fd74 	bl	800be64 <SPI_GetPacketSize>
 800b37c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a6c      	ldr	r2, [pc, #432]	; (800b534 <HAL_SPI_Init+0x200>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d00c      	beq.n	800b3a2 <HAL_SPI_Init+0x6e>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a6a      	ldr	r2, [pc, #424]	; (800b538 <HAL_SPI_Init+0x204>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d007      	beq.n	800b3a2 <HAL_SPI_Init+0x6e>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a69      	ldr	r2, [pc, #420]	; (800b53c <HAL_SPI_Init+0x208>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d002      	beq.n	800b3a2 <HAL_SPI_Init+0x6e>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b08      	cmp	r3, #8
 800b3a0:	d811      	bhi.n	800b3c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3a6:	4a63      	ldr	r2, [pc, #396]	; (800b534 <HAL_SPI_Init+0x200>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d009      	beq.n	800b3c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a61      	ldr	r2, [pc, #388]	; (800b538 <HAL_SPI_Init+0x204>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <HAL_SPI_Init+0x8c>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a60      	ldr	r2, [pc, #384]	; (800b53c <HAL_SPI_Init+0x208>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d104      	bne.n	800b3ca <HAL_SPI_Init+0x96>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d901      	bls.n	800b3ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e0af      	b.n	800b52a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d106      	bne.n	800b3e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7f6 fed0 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0201 	bic.w	r2, r2, #1
 800b3fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b406:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b410:	d119      	bne.n	800b446 <HAL_SPI_Init+0x112>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b41a:	d103      	bne.n	800b424 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b420:	2b00      	cmp	r3, #0
 800b422:	d008      	beq.n	800b436 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10c      	bne.n	800b446 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b434:	d107      	bne.n	800b446 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b444:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	69da      	ldr	r2, [r3, #28]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44e:	431a      	orrs	r2, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	431a      	orrs	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b458:	ea42 0103 	orr.w	r1, r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	430a      	orrs	r2, r1
 800b466:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	431a      	orrs	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b476:	431a      	orrs	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	431a      	orrs	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	431a      	orrs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b49a:	431a      	orrs	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a6:	ea42 0103 	orr.w	r1, r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d113      	bne.n	800b4e6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f022 0201 	bic.w	r2, r2, #1
 800b4f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	40013000 	.word	0x40013000
 800b538:	40003800 	.word	0x40003800
 800b53c:	40003c00 	.word	0x40003c00

0800b540 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	af02      	add	r7, sp, #8
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	4613      	mov	r3, r2
 800b54e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3330      	adds	r3, #48	; 0x30
 800b55a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b564:	d112      	bne.n	800b58c <HAL_SPI_Receive+0x4c>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10e      	bne.n	800b58c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2204      	movs	r2, #4
 800b572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b576:	88fa      	ldrh	r2, [r7, #6]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f978 	bl	800b878 <HAL_SPI_TransmitReceive>
 800b588:	4603      	mov	r3, r0
 800b58a:	e16f      	b.n	800b86c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b592:	2b01      	cmp	r3, #1
 800b594:	d101      	bne.n	800b59a <HAL_SPI_Receive+0x5a>
 800b596:	2302      	movs	r3, #2
 800b598:	e168      	b.n	800b86c <HAL_SPI_Receive+0x32c>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5a2:	f7f7 f96f 	bl	8002884 <HAL_GetTick>
 800b5a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d007      	beq.n	800b5c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b5c0:	7ffb      	ldrb	r3, [r7, #31]
 800b5c2:	e153      	b.n	800b86c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <HAL_SPI_Receive+0x90>
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d107      	bne.n	800b5e0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b5dc:	7ffb      	ldrb	r3, [r7, #31]
 800b5de:	e145      	b.n	800b86c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	88fa      	ldrh	r2, [r7, #6]
 800b5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b630:	d107      	bne.n	800b642 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b640:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	4b8a      	ldr	r3, [pc, #552]	; (800b874 <HAL_SPI_Receive+0x334>)
 800b64a:	4013      	ands	r3, r2
 800b64c:	88f9      	ldrh	r1, [r7, #6]
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	430b      	orrs	r3, r1
 800b654:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f042 0201 	orr.w	r2, r2, #1
 800b664:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b66e:	d107      	bne.n	800b680 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b67e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	2b0f      	cmp	r3, #15
 800b686:	d948      	bls.n	800b71a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b688:	e040      	b.n	800b70c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695a      	ldr	r2, [r3, #20]
 800b690:	f248 0308 	movw	r3, #32776	; 0x8008
 800b694:	4013      	ands	r3, r2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d014      	beq.n	800b6c4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b6c2:	e023      	b.n	800b70c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6c4:	f7f7 f8de 	bl	8002884 <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d803      	bhi.n	800b6dc <HAL_SPI_Receive+0x19c>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6da:	d102      	bne.n	800b6e2 <HAL_SPI_Receive+0x1a2>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d114      	bne.n	800b70c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 faf0 	bl	800bcc8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e0af      	b.n	800b86c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b712:	b29b      	uxth	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1b8      	bne.n	800b68a <HAL_SPI_Receive+0x14a>
 800b718:	e095      	b.n	800b846 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	2b07      	cmp	r3, #7
 800b720:	f240 808b 	bls.w	800b83a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b724:	e03f      	b.n	800b7a6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b01      	cmp	r3, #1
 800b732:	d114      	bne.n	800b75e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	8812      	ldrh	r2, [r2, #0]
 800b73c:	b292      	uxth	r2, r2
 800b73e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b744:	1c9a      	adds	r2, r3, #2
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b750:	b29b      	uxth	r3, r3
 800b752:	3b01      	subs	r3, #1
 800b754:	b29a      	uxth	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b75c:	e023      	b.n	800b7a6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b75e:	f7f7 f891 	bl	8002884 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d803      	bhi.n	800b776 <HAL_SPI_Receive+0x236>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b774:	d102      	bne.n	800b77c <HAL_SPI_Receive+0x23c>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d114      	bne.n	800b7a6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 faa3 	bl	800bcc8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	e062      	b.n	800b86c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1b9      	bne.n	800b726 <HAL_SPI_Receive+0x1e6>
 800b7b2:	e048      	b.n	800b846 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d117      	bne.n	800b7f2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ce:	7812      	ldrb	r2, [r2, #0]
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b7f0:	e023      	b.n	800b83a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7f2:	f7f7 f847 	bl	8002884 <HAL_GetTick>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d803      	bhi.n	800b80a <HAL_SPI_Receive+0x2ca>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b808:	d102      	bne.n	800b810 <HAL_SPI_Receive+0x2d0>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d114      	bne.n	800b83a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fa59 	bl	800bcc8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e018      	b.n	800b86c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1b6      	bne.n	800b7b4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 fa3e 	bl	800bcc8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800b86a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	ffff0000 	.word	0xffff0000

0800b878 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08e      	sub	sp, #56	; 0x38
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3320      	adds	r3, #32
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3330      	adds	r3, #48	; 0x30
 800b89a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d101      	bne.n	800b8aa <HAL_SPI_TransmitReceive+0x32>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e209      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8b2:	f7f6 ffe7 	bl	8002884 <HAL_GetTick>
 800b8b6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b8b8:	887b      	ldrh	r3, [r7, #2]
 800b8ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b8bc:	887b      	ldrh	r3, [r7, #2]
 800b8be:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8ce:	7efb      	ldrb	r3, [r7, #27]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d014      	beq.n	800b8fe <HAL_SPI_TransmitReceive+0x86>
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8da:	d106      	bne.n	800b8ea <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b8e4:	7efb      	ldrb	r3, [r7, #27]
 800b8e6:	2b04      	cmp	r3, #4
 800b8e8:	d009      	beq.n	800b8fe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b8f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8fc:	e1df      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d005      	beq.n	800b910 <HAL_SPI_TransmitReceive+0x98>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <HAL_SPI_TransmitReceive+0x98>
 800b90a:	887b      	ldrh	r3, [r7, #2]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b91e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b922:	e1cc      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	d003      	beq.n	800b938 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2205      	movs	r2, #5
 800b934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	887a      	ldrh	r2, [r7, #2]
 800b94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	887a      	ldrh	r2, [r7, #2]
 800b952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	887a      	ldrh	r2, [r7, #2]
 800b960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	887a      	ldrh	r2, [r7, #2]
 800b968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	4b82      	ldr	r3, [pc, #520]	; (800bb88 <HAL_SPI_TransmitReceive+0x310>)
 800b980:	4013      	ands	r3, r2
 800b982:	8879      	ldrh	r1, [r7, #2]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	6812      	ldr	r2, [r2, #0]
 800b988:	430b      	orrs	r3, r1
 800b98a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0201 	orr.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9a4:	d107      	bne.n	800b9b6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	2b0f      	cmp	r3, #15
 800b9bc:	d970      	bls.n	800baa0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b9be:	e068      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	f003 0302 	and.w	r3, r3, #2
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d11a      	bne.n	800ba04 <HAL_SPI_TransmitReceive+0x18c>
 800b9ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d017      	beq.n	800ba04 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6812      	ldr	r2, [r2, #0]
 800b9de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e4:	1d1a      	adds	r2, r3, #4
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba02:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ba0e:	4013      	ands	r3, r2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d01a      	beq.n	800ba4a <HAL_SPI_TransmitReceive+0x1d2>
 800ba14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d017      	beq.n	800ba4a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba24:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba48:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba4a:	f7f6 ff1b 	bl	8002884 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d803      	bhi.n	800ba62 <HAL_SPI_TransmitReceive+0x1ea>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba60:	d102      	bne.n	800ba68 <HAL_SPI_TransmitReceive+0x1f0>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d114      	bne.n	800ba92 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 f92d 	bl	800bcc8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e115      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d193      	bne.n	800b9c0 <HAL_SPI_TransmitReceive+0x148>
 800ba98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d190      	bne.n	800b9c0 <HAL_SPI_TransmitReceive+0x148>
 800ba9e:	e0e7      	b.n	800bc70 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	f240 80dd 	bls.w	800bc64 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800baaa:	e066      	b.n	800bb7a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d119      	bne.n	800baee <HAL_SPI_TransmitReceive+0x276>
 800baba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800babc:	2b00      	cmp	r3, #0
 800babe:	d016      	beq.n	800baee <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bac4:	881a      	ldrh	r2, [r3, #0]
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bace:	1c9a      	adds	r2, r3, #2
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800baec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d11a      	bne.n	800bb32 <HAL_SPI_TransmitReceive+0x2ba>
 800bafc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d017      	beq.n	800bb32 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb06:	6a3a      	ldr	r2, [r7, #32]
 800bb08:	8812      	ldrh	r2, [r2, #0]
 800bb0a:	b292      	uxth	r2, r2
 800bb0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb12:	1c9a      	adds	r2, r3, #2
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	3b01      	subs	r3, #1
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb30:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb32:	f7f6 fea7 	bl	8002884 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d803      	bhi.n	800bb4a <HAL_SPI_TransmitReceive+0x2d2>
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb48:	d102      	bne.n	800bb50 <HAL_SPI_TransmitReceive+0x2d8>
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d114      	bne.n	800bb7a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f8b9 	bl	800bcc8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e0a1      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bb7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d195      	bne.n	800baac <HAL_SPI_TransmitReceive+0x234>
 800bb80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d192      	bne.n	800baac <HAL_SPI_TransmitReceive+0x234>
 800bb86:	e073      	b.n	800bc70 <HAL_SPI_TransmitReceive+0x3f8>
 800bb88:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d11b      	bne.n	800bbd2 <HAL_SPI_TransmitReceive+0x35a>
 800bb9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d018      	beq.n	800bbd2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3320      	adds	r3, #32
 800bbaa:	7812      	ldrb	r2, [r2, #0]
 800bbac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d11d      	bne.n	800bc1c <HAL_SPI_TransmitReceive+0x3a4>
 800bbe0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d01a      	beq.n	800bc1c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbf2:	7812      	ldrb	r2, [r2, #0]
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc1c:	f7f6 fe32 	bl	8002884 <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d803      	bhi.n	800bc34 <HAL_SPI_TransmitReceive+0x3bc>
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc32:	d102      	bne.n	800bc3a <HAL_SPI_TransmitReceive+0x3c2>
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d114      	bne.n	800bc64 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f000 f844 	bl	800bcc8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e02c      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d190      	bne.n	800bb8c <HAL_SPI_TransmitReceive+0x314>
 800bc6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d18d      	bne.n	800bb8c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	2200      	movs	r2, #0
 800bc78:	2108      	movs	r1, #8
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 f8c4 	bl	800be08 <SPI_WaitOnFlagUntilTimeout>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc8c:	f043 0220 	orr.w	r2, r3, #32
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f000 f816 	bl	800bcc8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e001      	b.n	800bcbe <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800bcba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3730      	adds	r7, #48	; 0x30
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop

0800bcc8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699a      	ldr	r2, [r3, #24]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f042 0208 	orr.w	r2, r2, #8
 800bce6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	699a      	ldr	r2, [r3, #24]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f042 0210 	orr.w	r2, r2, #16
 800bcf6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 0201 	bic.w	r2, r2, #1
 800bd06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6919      	ldr	r1, [r3, #16]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	4b3c      	ldr	r3, [pc, #240]	; (800be04 <SPI_CloseTransfer+0x13c>)
 800bd14:	400b      	ands	r3, r1
 800bd16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689a      	ldr	r2, [r3, #8]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bd26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	d014      	beq.n	800bd5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00f      	beq.n	800bd5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	699a      	ldr	r2, [r3, #24]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f042 0220 	orr.w	r2, r2, #32
 800bd5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d014      	beq.n	800bd94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00f      	beq.n	800bd94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd7a:	f043 0204 	orr.w	r2, r3, #4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699a      	ldr	r2, [r3, #24]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00f      	beq.n	800bdbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda4:	f043 0201 	orr.w	r2, r3, #1
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	699a      	ldr	r2, [r3, #24]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00f      	beq.n	800bde8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdce:	f043 0208 	orr.w	r2, r3, #8
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bde6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bdf8:	bf00      	nop
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	fffffc90 	.word	0xfffffc90

0800be08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	4613      	mov	r3, r2
 800be16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800be18:	e010      	b.n	800be3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be1a:	f7f6 fd33 	bl	8002884 <HAL_GetTick>
 800be1e:	4602      	mov	r2, r0
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	429a      	cmp	r2, r3
 800be28:	d803      	bhi.n	800be32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be30:	d102      	bne.n	800be38 <SPI_WaitOnFlagUntilTimeout+0x30>
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800be38:	2303      	movs	r3, #3
 800be3a:	e00f      	b.n	800be5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	695a      	ldr	r2, [r3, #20]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	4013      	ands	r3, r2
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	429a      	cmp	r2, r3
 800be4a:	bf0c      	ite	eq
 800be4c:	2301      	moveq	r3, #1
 800be4e:	2300      	movne	r3, #0
 800be50:	b2db      	uxtb	r3, r3
 800be52:	461a      	mov	r2, r3
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	429a      	cmp	r2, r3
 800be58:	d0df      	beq.n	800be1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	095b      	lsrs	r3, r3, #5
 800be72:	3301      	adds	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	3307      	adds	r3, #7
 800be82:	08db      	lsrs	r3, r3, #3
 800be84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	fb02 f303 	mul.w	r3, r2, r3
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
	...

0800be9c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <HAL_TIM_OC_Start_IT+0x28>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b01      	cmp	r3, #1
 800beba:	bf14      	ite	ne
 800bebc:	2301      	movne	r3, #1
 800bebe:	2300      	moveq	r3, #0
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	e03c      	b.n	800bf3e <HAL_TIM_OC_Start_IT+0xa2>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	d109      	bne.n	800bede <HAL_TIM_OC_Start_IT+0x42>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	bf14      	ite	ne
 800bed6:	2301      	movne	r3, #1
 800bed8:	2300      	moveq	r3, #0
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	e02f      	b.n	800bf3e <HAL_TIM_OC_Start_IT+0xa2>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b08      	cmp	r3, #8
 800bee2:	d109      	bne.n	800bef8 <HAL_TIM_OC_Start_IT+0x5c>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b01      	cmp	r3, #1
 800beee:	bf14      	ite	ne
 800bef0:	2301      	movne	r3, #1
 800bef2:	2300      	moveq	r3, #0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	e022      	b.n	800bf3e <HAL_TIM_OC_Start_IT+0xa2>
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b0c      	cmp	r3, #12
 800befc:	d109      	bne.n	800bf12 <HAL_TIM_OC_Start_IT+0x76>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	bf14      	ite	ne
 800bf0a:	2301      	movne	r3, #1
 800bf0c:	2300      	moveq	r3, #0
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	e015      	b.n	800bf3e <HAL_TIM_OC_Start_IT+0xa2>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b10      	cmp	r3, #16
 800bf16:	d109      	bne.n	800bf2c <HAL_TIM_OC_Start_IT+0x90>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	bf14      	ite	ne
 800bf24:	2301      	movne	r3, #1
 800bf26:	2300      	moveq	r3, #0
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	e008      	b.n	800bf3e <HAL_TIM_OC_Start_IT+0xa2>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	bf14      	ite	ne
 800bf38:	2301      	movne	r3, #1
 800bf3a:	2300      	moveq	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e0ec      	b.n	800c120 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <HAL_TIM_OC_Start_IT+0xba>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf54:	e023      	b.n	800bf9e <HAL_TIM_OC_Start_IT+0x102>
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d104      	bne.n	800bf66 <HAL_TIM_OC_Start_IT+0xca>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf64:	e01b      	b.n	800bf9e <HAL_TIM_OC_Start_IT+0x102>
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d104      	bne.n	800bf76 <HAL_TIM_OC_Start_IT+0xda>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf74:	e013      	b.n	800bf9e <HAL_TIM_OC_Start_IT+0x102>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b0c      	cmp	r3, #12
 800bf7a:	d104      	bne.n	800bf86 <HAL_TIM_OC_Start_IT+0xea>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf84:	e00b      	b.n	800bf9e <HAL_TIM_OC_Start_IT+0x102>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b10      	cmp	r3, #16
 800bf8a:	d104      	bne.n	800bf96 <HAL_TIM_OC_Start_IT+0xfa>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf94:	e003      	b.n	800bf9e <HAL_TIM_OC_Start_IT+0x102>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2202      	movs	r2, #2
 800bf9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b0c      	cmp	r3, #12
 800bfa2:	d841      	bhi.n	800c028 <HAL_TIM_OC_Start_IT+0x18c>
 800bfa4:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <HAL_TIM_OC_Start_IT+0x110>)
 800bfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfaa:	bf00      	nop
 800bfac:	0800bfe1 	.word	0x0800bfe1
 800bfb0:	0800c029 	.word	0x0800c029
 800bfb4:	0800c029 	.word	0x0800c029
 800bfb8:	0800c029 	.word	0x0800c029
 800bfbc:	0800bff3 	.word	0x0800bff3
 800bfc0:	0800c029 	.word	0x0800c029
 800bfc4:	0800c029 	.word	0x0800c029
 800bfc8:	0800c029 	.word	0x0800c029
 800bfcc:	0800c005 	.word	0x0800c005
 800bfd0:	0800c029 	.word	0x0800c029
 800bfd4:	0800c029 	.word	0x0800c029
 800bfd8:	0800c029 	.word	0x0800c029
 800bfdc:	0800c017 	.word	0x0800c017
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0202 	orr.w	r2, r2, #2
 800bfee:	60da      	str	r2, [r3, #12]
      break;
 800bff0:	e01d      	b.n	800c02e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68da      	ldr	r2, [r3, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f042 0204 	orr.w	r2, r2, #4
 800c000:	60da      	str	r2, [r3, #12]
      break;
 800c002:	e014      	b.n	800c02e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68da      	ldr	r2, [r3, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f042 0208 	orr.w	r2, r2, #8
 800c012:	60da      	str	r2, [r3, #12]
      break;
 800c014:	e00b      	b.n	800c02e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f042 0210 	orr.w	r2, r2, #16
 800c024:	60da      	str	r2, [r3, #12]
      break;
 800c026:	e002      	b.n	800c02e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	73fb      	strb	r3, [r7, #15]
      break;
 800c02c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d174      	bne.n	800c11e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2201      	movs	r2, #1
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 fea9 	bl	800cd94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a38      	ldr	r2, [pc, #224]	; (800c128 <HAL_TIM_OC_Start_IT+0x28c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d013      	beq.n	800c074 <HAL_TIM_OC_Start_IT+0x1d8>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a36      	ldr	r2, [pc, #216]	; (800c12c <HAL_TIM_OC_Start_IT+0x290>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d00e      	beq.n	800c074 <HAL_TIM_OC_Start_IT+0x1d8>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a35      	ldr	r2, [pc, #212]	; (800c130 <HAL_TIM_OC_Start_IT+0x294>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d009      	beq.n	800c074 <HAL_TIM_OC_Start_IT+0x1d8>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a33      	ldr	r2, [pc, #204]	; (800c134 <HAL_TIM_OC_Start_IT+0x298>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d004      	beq.n	800c074 <HAL_TIM_OC_Start_IT+0x1d8>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a32      	ldr	r2, [pc, #200]	; (800c138 <HAL_TIM_OC_Start_IT+0x29c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d101      	bne.n	800c078 <HAL_TIM_OC_Start_IT+0x1dc>
 800c074:	2301      	movs	r3, #1
 800c076:	e000      	b.n	800c07a <HAL_TIM_OC_Start_IT+0x1de>
 800c078:	2300      	movs	r3, #0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d007      	beq.n	800c08e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c08c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a25      	ldr	r2, [pc, #148]	; (800c128 <HAL_TIM_OC_Start_IT+0x28c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d022      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a0:	d01d      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a25      	ldr	r2, [pc, #148]	; (800c13c <HAL_TIM_OC_Start_IT+0x2a0>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d018      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a23      	ldr	r2, [pc, #140]	; (800c140 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d013      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a22      	ldr	r2, [pc, #136]	; (800c144 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00e      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a19      	ldr	r2, [pc, #100]	; (800c12c <HAL_TIM_OC_Start_IT+0x290>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d009      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d004      	beq.n	800c0de <HAL_TIM_OC_Start_IT+0x242>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a15      	ldr	r2, [pc, #84]	; (800c130 <HAL_TIM_OC_Start_IT+0x294>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d115      	bne.n	800c10a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	4b19      	ldr	r3, [pc, #100]	; (800c14c <HAL_TIM_OC_Start_IT+0x2b0>)
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b06      	cmp	r3, #6
 800c0ee:	d015      	beq.n	800c11c <HAL_TIM_OC_Start_IT+0x280>
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f6:	d011      	beq.n	800c11c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0201 	orr.w	r2, r2, #1
 800c106:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c108:	e008      	b.n	800c11c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f042 0201 	orr.w	r2, r2, #1
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	e000      	b.n	800c11e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c11c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	40010000 	.word	0x40010000
 800c12c:	40010400 	.word	0x40010400
 800c130:	40014000 	.word	0x40014000
 800c134:	40014400 	.word	0x40014400
 800c138:	40014800 	.word	0x40014800
 800c13c:	40000400 	.word	0x40000400
 800c140:	40000800 	.word	0x40000800
 800c144:	40000c00 	.word	0x40000c00
 800c148:	40001800 	.word	0x40001800
 800c14c:	00010007 	.word	0x00010007

0800c150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e049      	b.n	800c1f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d106      	bne.n	800c17c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7f6 f8b4 	bl	80022e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f000 fa90 	bl	800c6b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	f003 0302 	and.w	r3, r3, #2
 800c210:	2b02      	cmp	r3, #2
 800c212:	d122      	bne.n	800c25a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d11b      	bne.n	800c25a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f06f 0202 	mvn.w	r2, #2
 800c22a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	f003 0303 	and.w	r3, r3, #3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fa19 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c246:	e005      	b.n	800c254 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7f4 f9dd 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fa1c 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	f003 0304 	and.w	r3, r3, #4
 800c264:	2b04      	cmp	r3, #4
 800c266:	d122      	bne.n	800c2ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	f003 0304 	and.w	r3, r3, #4
 800c272:	2b04      	cmp	r3, #4
 800c274:	d11b      	bne.n	800c2ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f06f 0204 	mvn.w	r2, #4
 800c27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f9ef 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c29a:	e005      	b.n	800c2a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7f4 f9b3 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f9f2 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	d122      	bne.n	800c302 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f003 0308 	and.w	r3, r3, #8
 800c2c6:	2b08      	cmp	r3, #8
 800c2c8:	d11b      	bne.n	800c302 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f06f 0208 	mvn.w	r2, #8
 800c2d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2204      	movs	r2, #4
 800c2d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	69db      	ldr	r3, [r3, #28]
 800c2e0:	f003 0303 	and.w	r3, r3, #3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d003      	beq.n	800c2f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f9c5 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c2ee:	e005      	b.n	800c2fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7f4 f989 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9c8 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	f003 0310 	and.w	r3, r3, #16
 800c30c:	2b10      	cmp	r3, #16
 800c30e:	d122      	bne.n	800c356 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f003 0310 	and.w	r3, r3, #16
 800c31a:	2b10      	cmp	r3, #16
 800c31c:	d11b      	bne.n	800c356 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f06f 0210 	mvn.w	r2, #16
 800c326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2208      	movs	r2, #8
 800c32c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f99b 	bl	800c678 <HAL_TIM_IC_CaptureCallback>
 800c342:	e005      	b.n	800c350 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f4 f95f 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f99e 	bl	800c68c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b01      	cmp	r3, #1
 800c362:	d10e      	bne.n	800c382 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d107      	bne.n	800c382 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f06f 0201 	mvn.w	r2, #1
 800c37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f971 	bl	800c664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38c:	2b80      	cmp	r3, #128	; 0x80
 800c38e:	d10e      	bne.n	800c3ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c39a:	2b80      	cmp	r3, #128	; 0x80
 800c39c:	d107      	bne.n	800c3ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fe2f 	bl	800d00c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3bc:	d10e      	bne.n	800c3dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c8:	2b80      	cmp	r3, #128	; 0x80
 800c3ca:	d107      	bne.n	800c3dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fe22 	bl	800d020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e6:	2b40      	cmp	r3, #64	; 0x40
 800c3e8:	d10e      	bne.n	800c408 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f4:	2b40      	cmp	r3, #64	; 0x40
 800c3f6:	d107      	bne.n	800c408 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f94c 	bl	800c6a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	f003 0320 	and.w	r3, r3, #32
 800c412:	2b20      	cmp	r3, #32
 800c414:	d10e      	bne.n	800c434 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	f003 0320 	and.w	r3, r3, #32
 800c420:	2b20      	cmp	r3, #32
 800c422:	d107      	bne.n	800c434 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f06f 0220 	mvn.w	r2, #32
 800c42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fde2 	bl	800cff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c456:	2302      	movs	r3, #2
 800c458:	e0ff      	b.n	800c65a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b14      	cmp	r3, #20
 800c466:	f200 80f0 	bhi.w	800c64a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c46a:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c4c5 	.word	0x0800c4c5
 800c474:	0800c64b 	.word	0x0800c64b
 800c478:	0800c64b 	.word	0x0800c64b
 800c47c:	0800c64b 	.word	0x0800c64b
 800c480:	0800c505 	.word	0x0800c505
 800c484:	0800c64b 	.word	0x0800c64b
 800c488:	0800c64b 	.word	0x0800c64b
 800c48c:	0800c64b 	.word	0x0800c64b
 800c490:	0800c547 	.word	0x0800c547
 800c494:	0800c64b 	.word	0x0800c64b
 800c498:	0800c64b 	.word	0x0800c64b
 800c49c:	0800c64b 	.word	0x0800c64b
 800c4a0:	0800c587 	.word	0x0800c587
 800c4a4:	0800c64b 	.word	0x0800c64b
 800c4a8:	0800c64b 	.word	0x0800c64b
 800c4ac:	0800c64b 	.word	0x0800c64b
 800c4b0:	0800c5c9 	.word	0x0800c5c9
 800c4b4:	0800c64b 	.word	0x0800c64b
 800c4b8:	0800c64b 	.word	0x0800c64b
 800c4bc:	0800c64b 	.word	0x0800c64b
 800c4c0:	0800c609 	.word	0x0800c609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68b9      	ldr	r1, [r7, #8]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f98c 	bl	800c7e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	699a      	ldr	r2, [r3, #24]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f042 0208 	orr.w	r2, r2, #8
 800c4de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	699a      	ldr	r2, [r3, #24]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0204 	bic.w	r2, r2, #4
 800c4ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6999      	ldr	r1, [r3, #24]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	691a      	ldr	r2, [r3, #16]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	619a      	str	r2, [r3, #24]
      break;
 800c502:	e0a5      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f9fc 	bl	800c908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	699a      	ldr	r2, [r3, #24]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c51e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	699a      	ldr	r2, [r3, #24]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c52e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6999      	ldr	r1, [r3, #24]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	021a      	lsls	r2, r3, #8
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	430a      	orrs	r2, r1
 800c542:	619a      	str	r2, [r3, #24]
      break;
 800c544:	e084      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	68b9      	ldr	r1, [r7, #8]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fa65 	bl	800ca1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	69da      	ldr	r2, [r3, #28]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f042 0208 	orr.w	r2, r2, #8
 800c560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	69da      	ldr	r2, [r3, #28]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0204 	bic.w	r2, r2, #4
 800c570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	69d9      	ldr	r1, [r3, #28]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	691a      	ldr	r2, [r3, #16]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	430a      	orrs	r2, r1
 800c582:	61da      	str	r2, [r3, #28]
      break;
 800c584:	e064      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68b9      	ldr	r1, [r7, #8]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 facd 	bl	800cb2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	69da      	ldr	r2, [r3, #28]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	69da      	ldr	r2, [r3, #28]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	69d9      	ldr	r1, [r3, #28]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	021a      	lsls	r2, r3, #8
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	430a      	orrs	r2, r1
 800c5c4:	61da      	str	r2, [r3, #28]
      break;
 800c5c6:	e043      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fb16 	bl	800cc00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f042 0208 	orr.w	r2, r2, #8
 800c5e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0204 	bic.w	r2, r2, #4
 800c5f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	691a      	ldr	r2, [r3, #16]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c606:	e023      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68b9      	ldr	r1, [r7, #8]
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fb5a 	bl	800ccc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	021a      	lsls	r2, r3, #8
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	430a      	orrs	r2, r1
 800c646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c648:	e002      	b.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	75fb      	strb	r3, [r7, #23]
      break;
 800c64e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c658:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop

0800c664 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a40      	ldr	r2, [pc, #256]	; (800c7c8 <TIM_Base_SetConfig+0x114>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d013      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6d2:	d00f      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a3d      	ldr	r2, [pc, #244]	; (800c7cc <TIM_Base_SetConfig+0x118>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d00b      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a3c      	ldr	r2, [pc, #240]	; (800c7d0 <TIM_Base_SetConfig+0x11c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d007      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a3b      	ldr	r2, [pc, #236]	; (800c7d4 <TIM_Base_SetConfig+0x120>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <TIM_Base_SetConfig+0x40>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a3a      	ldr	r2, [pc, #232]	; (800c7d8 <TIM_Base_SetConfig+0x124>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d108      	bne.n	800c706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a2f      	ldr	r2, [pc, #188]	; (800c7c8 <TIM_Base_SetConfig+0x114>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d01f      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c714:	d01b      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a2c      	ldr	r2, [pc, #176]	; (800c7cc <TIM_Base_SetConfig+0x118>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d017      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a2b      	ldr	r2, [pc, #172]	; (800c7d0 <TIM_Base_SetConfig+0x11c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d013      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a2a      	ldr	r2, [pc, #168]	; (800c7d4 <TIM_Base_SetConfig+0x120>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d00f      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a29      	ldr	r2, [pc, #164]	; (800c7d8 <TIM_Base_SetConfig+0x124>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d00b      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a28      	ldr	r2, [pc, #160]	; (800c7dc <TIM_Base_SetConfig+0x128>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d007      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a27      	ldr	r2, [pc, #156]	; (800c7e0 <TIM_Base_SetConfig+0x12c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d003      	beq.n	800c74e <TIM_Base_SetConfig+0x9a>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a26      	ldr	r2, [pc, #152]	; (800c7e4 <TIM_Base_SetConfig+0x130>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d108      	bne.n	800c760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a10      	ldr	r2, [pc, #64]	; (800c7c8 <TIM_Base_SetConfig+0x114>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d00f      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a12      	ldr	r2, [pc, #72]	; (800c7d8 <TIM_Base_SetConfig+0x124>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00b      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a11      	ldr	r2, [pc, #68]	; (800c7dc <TIM_Base_SetConfig+0x128>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d007      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a10      	ldr	r2, [pc, #64]	; (800c7e0 <TIM_Base_SetConfig+0x12c>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d003      	beq.n	800c7ac <TIM_Base_SetConfig+0xf8>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a0f      	ldr	r2, [pc, #60]	; (800c7e4 <TIM_Base_SetConfig+0x130>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d103      	bne.n	800c7b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	691a      	ldr	r2, [r3, #16]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	615a      	str	r2, [r3, #20]
}
 800c7ba:	bf00      	nop
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	40010000 	.word	0x40010000
 800c7cc:	40000400 	.word	0x40000400
 800c7d0:	40000800 	.word	0x40000800
 800c7d4:	40000c00 	.word	0x40000c00
 800c7d8:	40010400 	.word	0x40010400
 800c7dc:	40014000 	.word	0x40014000
 800c7e0:	40014400 	.word	0x40014400
 800c7e4:	40014800 	.word	0x40014800

0800c7e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	f023 0201 	bic.w	r2, r3, #1
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	4b37      	ldr	r3, [pc, #220]	; (800c8f0 <TIM_OC1_SetConfig+0x108>)
 800c814:	4013      	ands	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f023 0303 	bic.w	r3, r3, #3
 800c81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4313      	orrs	r3, r2
 800c828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f023 0302 	bic.w	r3, r3, #2
 800c830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	4313      	orrs	r3, r2
 800c83a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a2d      	ldr	r2, [pc, #180]	; (800c8f4 <TIM_OC1_SetConfig+0x10c>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d00f      	beq.n	800c864 <TIM_OC1_SetConfig+0x7c>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a2c      	ldr	r2, [pc, #176]	; (800c8f8 <TIM_OC1_SetConfig+0x110>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d00b      	beq.n	800c864 <TIM_OC1_SetConfig+0x7c>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a2b      	ldr	r2, [pc, #172]	; (800c8fc <TIM_OC1_SetConfig+0x114>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d007      	beq.n	800c864 <TIM_OC1_SetConfig+0x7c>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a2a      	ldr	r2, [pc, #168]	; (800c900 <TIM_OC1_SetConfig+0x118>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d003      	beq.n	800c864 <TIM_OC1_SetConfig+0x7c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a29      	ldr	r2, [pc, #164]	; (800c904 <TIM_OC1_SetConfig+0x11c>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d10c      	bne.n	800c87e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f023 0308 	bic.w	r3, r3, #8
 800c86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	4313      	orrs	r3, r2
 800c874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f023 0304 	bic.w	r3, r3, #4
 800c87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a1c      	ldr	r2, [pc, #112]	; (800c8f4 <TIM_OC1_SetConfig+0x10c>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d00f      	beq.n	800c8a6 <TIM_OC1_SetConfig+0xbe>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a1b      	ldr	r2, [pc, #108]	; (800c8f8 <TIM_OC1_SetConfig+0x110>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d00b      	beq.n	800c8a6 <TIM_OC1_SetConfig+0xbe>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a1a      	ldr	r2, [pc, #104]	; (800c8fc <TIM_OC1_SetConfig+0x114>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d007      	beq.n	800c8a6 <TIM_OC1_SetConfig+0xbe>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a19      	ldr	r2, [pc, #100]	; (800c900 <TIM_OC1_SetConfig+0x118>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d003      	beq.n	800c8a6 <TIM_OC1_SetConfig+0xbe>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a18      	ldr	r2, [pc, #96]	; (800c904 <TIM_OC1_SetConfig+0x11c>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d111      	bne.n	800c8ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	621a      	str	r2, [r3, #32]
}
 800c8e4:	bf00      	nop
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	fffeff8f 	.word	0xfffeff8f
 800c8f4:	40010000 	.word	0x40010000
 800c8f8:	40010400 	.word	0x40010400
 800c8fc:	40014000 	.word	0x40014000
 800c900:	40014400 	.word	0x40014400
 800c904:	40014800 	.word	0x40014800

0800c908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c908:	b480      	push	{r7}
 800c90a:	b087      	sub	sp, #28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	f023 0210 	bic.w	r2, r3, #16
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4b34      	ldr	r3, [pc, #208]	; (800ca04 <TIM_OC2_SetConfig+0xfc>)
 800c934:	4013      	ands	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	021b      	lsls	r3, r3, #8
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	4313      	orrs	r3, r2
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f023 0320 	bic.w	r3, r3, #32
 800c952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a29      	ldr	r2, [pc, #164]	; (800ca08 <TIM_OC2_SetConfig+0x100>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d003      	beq.n	800c970 <TIM_OC2_SetConfig+0x68>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a28      	ldr	r2, [pc, #160]	; (800ca0c <TIM_OC2_SetConfig+0x104>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d10d      	bne.n	800c98c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	011b      	lsls	r3, r3, #4
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	4313      	orrs	r3, r2
 800c982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c98a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a1e      	ldr	r2, [pc, #120]	; (800ca08 <TIM_OC2_SetConfig+0x100>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d00f      	beq.n	800c9b4 <TIM_OC2_SetConfig+0xac>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a1d      	ldr	r2, [pc, #116]	; (800ca0c <TIM_OC2_SetConfig+0x104>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d00b      	beq.n	800c9b4 <TIM_OC2_SetConfig+0xac>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a1c      	ldr	r2, [pc, #112]	; (800ca10 <TIM_OC2_SetConfig+0x108>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d007      	beq.n	800c9b4 <TIM_OC2_SetConfig+0xac>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a1b      	ldr	r2, [pc, #108]	; (800ca14 <TIM_OC2_SetConfig+0x10c>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d003      	beq.n	800c9b4 <TIM_OC2_SetConfig+0xac>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a1a      	ldr	r2, [pc, #104]	; (800ca18 <TIM_OC2_SetConfig+0x110>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d113      	bne.n	800c9dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	695b      	ldr	r3, [r3, #20]
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	693a      	ldr	r2, [r7, #16]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	621a      	str	r2, [r3, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	371c      	adds	r7, #28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	feff8fff 	.word	0xfeff8fff
 800ca08:	40010000 	.word	0x40010000
 800ca0c:	40010400 	.word	0x40010400
 800ca10:	40014000 	.word	0x40014000
 800ca14:	40014400 	.word	0x40014400
 800ca18:	40014800 	.word	0x40014800

0800ca1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	4b33      	ldr	r3, [pc, #204]	; (800cb14 <TIM_OC3_SetConfig+0xf8>)
 800ca48:	4013      	ands	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0303 	bic.w	r3, r3, #3
 800ca52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	021b      	lsls	r3, r3, #8
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a28      	ldr	r2, [pc, #160]	; (800cb18 <TIM_OC3_SetConfig+0xfc>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d003      	beq.n	800ca82 <TIM_OC3_SetConfig+0x66>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a27      	ldr	r2, [pc, #156]	; (800cb1c <TIM_OC3_SetConfig+0x100>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d10d      	bne.n	800ca9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	021b      	lsls	r3, r3, #8
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a1d      	ldr	r2, [pc, #116]	; (800cb18 <TIM_OC3_SetConfig+0xfc>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d00f      	beq.n	800cac6 <TIM_OC3_SetConfig+0xaa>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a1c      	ldr	r2, [pc, #112]	; (800cb1c <TIM_OC3_SetConfig+0x100>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d00b      	beq.n	800cac6 <TIM_OC3_SetConfig+0xaa>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a1b      	ldr	r2, [pc, #108]	; (800cb20 <TIM_OC3_SetConfig+0x104>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d007      	beq.n	800cac6 <TIM_OC3_SetConfig+0xaa>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a1a      	ldr	r2, [pc, #104]	; (800cb24 <TIM_OC3_SetConfig+0x108>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d003      	beq.n	800cac6 <TIM_OC3_SetConfig+0xaa>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a19      	ldr	r2, [pc, #100]	; (800cb28 <TIM_OC3_SetConfig+0x10c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d113      	bne.n	800caee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cacc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	011b      	lsls	r3, r3, #4
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	4313      	orrs	r3, r2
 800cae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	4313      	orrs	r3, r2
 800caec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	697a      	ldr	r2, [r7, #20]
 800cb06:	621a      	str	r2, [r3, #32]
}
 800cb08:	bf00      	nop
 800cb0a:	371c      	adds	r7, #28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr
 800cb14:	fffeff8f 	.word	0xfffeff8f
 800cb18:	40010000 	.word	0x40010000
 800cb1c:	40010400 	.word	0x40010400
 800cb20:	40014000 	.word	0x40014000
 800cb24:	40014400 	.word	0x40014400
 800cb28:	40014800 	.word	0x40014800

0800cb2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4b24      	ldr	r3, [pc, #144]	; (800cbe8 <TIM_OC4_SetConfig+0xbc>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	021b      	lsls	r3, r3, #8
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	031b      	lsls	r3, r3, #12
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a19      	ldr	r2, [pc, #100]	; (800cbec <TIM_OC4_SetConfig+0xc0>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00f      	beq.n	800cbac <TIM_OC4_SetConfig+0x80>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a18      	ldr	r2, [pc, #96]	; (800cbf0 <TIM_OC4_SetConfig+0xc4>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d00b      	beq.n	800cbac <TIM_OC4_SetConfig+0x80>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a17      	ldr	r2, [pc, #92]	; (800cbf4 <TIM_OC4_SetConfig+0xc8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d007      	beq.n	800cbac <TIM_OC4_SetConfig+0x80>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a16      	ldr	r2, [pc, #88]	; (800cbf8 <TIM_OC4_SetConfig+0xcc>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d003      	beq.n	800cbac <TIM_OC4_SetConfig+0x80>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a15      	ldr	r2, [pc, #84]	; (800cbfc <TIM_OC4_SetConfig+0xd0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d109      	bne.n	800cbc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	019b      	lsls	r3, r3, #6
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	621a      	str	r2, [r3, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	feff8fff 	.word	0xfeff8fff
 800cbec:	40010000 	.word	0x40010000
 800cbf0:	40010400 	.word	0x40010400
 800cbf4:	40014000 	.word	0x40014000
 800cbf8:	40014400 	.word	0x40014400
 800cbfc:	40014800 	.word	0x40014800

0800cc00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4b21      	ldr	r3, [pc, #132]	; (800ccb0 <TIM_OC5_SetConfig+0xb0>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cc40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	041b      	lsls	r3, r3, #16
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a18      	ldr	r2, [pc, #96]	; (800ccb4 <TIM_OC5_SetConfig+0xb4>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d00f      	beq.n	800cc76 <TIM_OC5_SetConfig+0x76>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <TIM_OC5_SetConfig+0xb8>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d00b      	beq.n	800cc76 <TIM_OC5_SetConfig+0x76>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a16      	ldr	r2, [pc, #88]	; (800ccbc <TIM_OC5_SetConfig+0xbc>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d007      	beq.n	800cc76 <TIM_OC5_SetConfig+0x76>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a15      	ldr	r2, [pc, #84]	; (800ccc0 <TIM_OC5_SetConfig+0xc0>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d003      	beq.n	800cc76 <TIM_OC5_SetConfig+0x76>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a14      	ldr	r2, [pc, #80]	; (800ccc4 <TIM_OC5_SetConfig+0xc4>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d109      	bne.n	800cc8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	621a      	str	r2, [r3, #32]
}
 800cca4:	bf00      	nop
 800cca6:	371c      	adds	r7, #28
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	fffeff8f 	.word	0xfffeff8f
 800ccb4:	40010000 	.word	0x40010000
 800ccb8:	40010400 	.word	0x40010400
 800ccbc:	40014000 	.word	0x40014000
 800ccc0:	40014400 	.word	0x40014400
 800ccc4:	40014800 	.word	0x40014800

0800ccc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4b22      	ldr	r3, [pc, #136]	; (800cd7c <TIM_OC6_SetConfig+0xb4>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	051b      	lsls	r3, r3, #20
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a19      	ldr	r2, [pc, #100]	; (800cd80 <TIM_OC6_SetConfig+0xb8>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00f      	beq.n	800cd40 <TIM_OC6_SetConfig+0x78>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a18      	ldr	r2, [pc, #96]	; (800cd84 <TIM_OC6_SetConfig+0xbc>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d00b      	beq.n	800cd40 <TIM_OC6_SetConfig+0x78>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a17      	ldr	r2, [pc, #92]	; (800cd88 <TIM_OC6_SetConfig+0xc0>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d007      	beq.n	800cd40 <TIM_OC6_SetConfig+0x78>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <TIM_OC6_SetConfig+0xc4>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d003      	beq.n	800cd40 <TIM_OC6_SetConfig+0x78>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a15      	ldr	r2, [pc, #84]	; (800cd90 <TIM_OC6_SetConfig+0xc8>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d109      	bne.n	800cd54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	029b      	lsls	r3, r3, #10
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	621a      	str	r2, [r3, #32]
}
 800cd6e:	bf00      	nop
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	feff8fff 	.word	0xfeff8fff
 800cd80:	40010000 	.word	0x40010000
 800cd84:	40010400 	.word	0x40010400
 800cd88:	40014000 	.word	0x40014000
 800cd8c:	40014400 	.word	0x40014400
 800cd90:	40014800 	.word	0x40014800

0800cd94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b087      	sub	sp, #28
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	f003 031f 	and.w	r3, r3, #31
 800cda6:	2201      	movs	r2, #1
 800cda8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a1a      	ldr	r2, [r3, #32]
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	43db      	mvns	r3, r3
 800cdb6:	401a      	ands	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a1a      	ldr	r2, [r3, #32]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	f003 031f 	and.w	r3, r3, #31
 800cdc6:	6879      	ldr	r1, [r7, #4]
 800cdc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	621a      	str	r2, [r3, #32]
}
 800cdd2:	bf00      	nop
 800cdd4:	371c      	adds	r7, #28
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d101      	bne.n	800cdf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	e06d      	b.n	800ced4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a30      	ldr	r2, [pc, #192]	; (800cee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d004      	beq.n	800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a2f      	ldr	r2, [pc, #188]	; (800cee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d108      	bne.n	800ce3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a20      	ldr	r2, [pc, #128]	; (800cee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d022      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce6a:	d01d      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a1d      	ldr	r2, [pc, #116]	; (800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d018      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a1c      	ldr	r2, [pc, #112]	; (800ceec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d013      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a1a      	ldr	r2, [pc, #104]	; (800cef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d00e      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a15      	ldr	r2, [pc, #84]	; (800cee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d009      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a16      	ldr	r2, [pc, #88]	; (800cef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d004      	beq.n	800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a15      	ldr	r2, [pc, #84]	; (800cef8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d10c      	bne.n	800cec2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	40010000 	.word	0x40010000
 800cee4:	40010400 	.word	0x40010400
 800cee8:	40000400 	.word	0x40000400
 800ceec:	40000800 	.word	0x40000800
 800cef0:	40000c00 	.word	0x40000c00
 800cef4:	40001800 	.word	0x40001800
 800cef8:	40014000 	.word	0x40014000

0800cefc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d101      	bne.n	800cf18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cf14:	2302      	movs	r3, #2
 800cf16:	e065      	b.n	800cfe4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a16      	ldr	r2, [pc, #88]	; (800cff0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d004      	beq.n	800cfa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a14      	ldr	r2, [pc, #80]	; (800cff4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d115      	bne.n	800cfd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb0:	051b      	lsls	r3, r3, #20
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40010400 	.word	0x40010400

0800cff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e042      	b.n	800d0cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d106      	bne.n	800d05e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7f5 fa05 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2224      	movs	r2, #36	; 0x24
 800d062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f022 0201 	bic.w	r2, r2, #1
 800d074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f92e 	bl	800d2d8 <UART_SetConfig>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d101      	bne.n	800d086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e022      	b.n	800d0cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fe8a 	bl	800dda8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f042 0201 	orr.w	r2, r2, #1
 800d0c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 ff11 	bl	800deec <UART_CheckIdleState>
 800d0ca:	4603      	mov	r3, r0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0ea:	2b20      	cmp	r3, #32
 800d0ec:	f040 8083 	bne.w	800d1f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <HAL_UART_Transmit+0x28>
 800d0f6:	88fb      	ldrh	r3, [r7, #6]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e07b      	b.n	800d1f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d106:	2b01      	cmp	r3, #1
 800d108:	d101      	bne.n	800d10e <HAL_UART_Transmit+0x3a>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e074      	b.n	800d1f8 <HAL_UART_Transmit+0x124>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2221      	movs	r2, #33	; 0x21
 800d122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d126:	f7f5 fbad 	bl	8002884 <HAL_GetTick>
 800d12a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	88fa      	ldrh	r2, [r7, #6]
 800d130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	88fa      	ldrh	r2, [r7, #6]
 800d138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d144:	d108      	bne.n	800d158 <HAL_UART_Transmit+0x84>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d104      	bne.n	800d158 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	e003      	b.n	800d160 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d15c:	2300      	movs	r3, #0
 800d15e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d168:	e02c      	b.n	800d1c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2200      	movs	r2, #0
 800d172:	2180      	movs	r1, #128	; 0x80
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 ff04 	bl	800df82 <UART_WaitOnFlagUntilTimeout>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d180:	2303      	movs	r3, #3
 800d182:	e039      	b.n	800d1f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	3302      	adds	r3, #2
 800d19e:	61bb      	str	r3, [r7, #24]
 800d1a0:	e007      	b.n	800d1b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	781a      	ldrb	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1cc      	bne.n	800d16a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2140      	movs	r1, #64	; 0x40
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 fed1 	bl	800df82 <UART_WaitOnFlagUntilTimeout>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	e006      	b.n	800d1f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2220      	movs	r2, #32
 800d1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e000      	b.n	800d1f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d1f6:	2302      	movs	r3, #2
  }
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3720      	adds	r7, #32
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08a      	sub	sp, #40	; 0x28
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	4613      	mov	r3, r2
 800d20c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d214:	2b20      	cmp	r3, #32
 800d216:	d142      	bne.n	800d29e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <HAL_UART_Receive_IT+0x24>
 800d21e:	88fb      	ldrh	r3, [r7, #6]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	e03b      	b.n	800d2a0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d101      	bne.n	800d236 <HAL_UART_Receive_IT+0x36>
 800d232:	2302      	movs	r3, #2
 800d234:	e034      	b.n	800d2a0 <HAL_UART_Receive_IT+0xa0>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <HAL_UART_Receive_IT+0xa8>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d01f      	beq.n	800d28e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d018      	beq.n	800d28e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	e853 3f00 	ldrex	r3, [r3]
 800d268:	613b      	str	r3, [r7, #16]
   return(result);
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d270:	627b      	str	r3, [r7, #36]	; 0x24
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	623b      	str	r3, [r7, #32]
 800d27c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27e:	69f9      	ldr	r1, [r7, #28]
 800d280:	6a3a      	ldr	r2, [r7, #32]
 800d282:	e841 2300 	strex	r3, r2, [r1]
 800d286:	61bb      	str	r3, [r7, #24]
   return(result);
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e6      	bne.n	800d25c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d28e:	88fb      	ldrh	r3, [r7, #6]
 800d290:	461a      	mov	r2, r3
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f000 ff3d 	bl	800e114 <UART_Start_Receive_IT>
 800d29a:	4603      	mov	r3, r0
 800d29c:	e000      	b.n	800d2a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d29e:	2302      	movs	r3, #2
  }
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3728      	adds	r7, #40	; 0x28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	58000c00 	.word	0x58000c00

0800d2ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d2b4:	bf00      	nop
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2dc:	b092      	sub	sp, #72	; 0x48
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4bbe      	ldr	r3, [pc, #760]	; (800d600 <UART_SetConfig+0x328>)
 800d308:	4013      	ands	r3, r2
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d310:	430b      	orrs	r3, r1
 800d312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4ab3      	ldr	r2, [pc, #716]	; (800d604 <UART_SetConfig+0x32c>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d004      	beq.n	800d344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d340:	4313      	orrs	r3, r2
 800d342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	4baf      	ldr	r3, [pc, #700]	; (800d608 <UART_SetConfig+0x330>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d354:	430b      	orrs	r3, r1
 800d356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35e:	f023 010f 	bic.w	r1, r3, #15
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4aa6      	ldr	r2, [pc, #664]	; (800d60c <UART_SetConfig+0x334>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d177      	bne.n	800d468 <UART_SetConfig+0x190>
 800d378:	4ba5      	ldr	r3, [pc, #660]	; (800d610 <UART_SetConfig+0x338>)
 800d37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d380:	2b28      	cmp	r3, #40	; 0x28
 800d382:	d86d      	bhi.n	800d460 <UART_SetConfig+0x188>
 800d384:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <UART_SetConfig+0xb4>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d431 	.word	0x0800d431
 800d390:	0800d461 	.word	0x0800d461
 800d394:	0800d461 	.word	0x0800d461
 800d398:	0800d461 	.word	0x0800d461
 800d39c:	0800d461 	.word	0x0800d461
 800d3a0:	0800d461 	.word	0x0800d461
 800d3a4:	0800d461 	.word	0x0800d461
 800d3a8:	0800d461 	.word	0x0800d461
 800d3ac:	0800d439 	.word	0x0800d439
 800d3b0:	0800d461 	.word	0x0800d461
 800d3b4:	0800d461 	.word	0x0800d461
 800d3b8:	0800d461 	.word	0x0800d461
 800d3bc:	0800d461 	.word	0x0800d461
 800d3c0:	0800d461 	.word	0x0800d461
 800d3c4:	0800d461 	.word	0x0800d461
 800d3c8:	0800d461 	.word	0x0800d461
 800d3cc:	0800d441 	.word	0x0800d441
 800d3d0:	0800d461 	.word	0x0800d461
 800d3d4:	0800d461 	.word	0x0800d461
 800d3d8:	0800d461 	.word	0x0800d461
 800d3dc:	0800d461 	.word	0x0800d461
 800d3e0:	0800d461 	.word	0x0800d461
 800d3e4:	0800d461 	.word	0x0800d461
 800d3e8:	0800d461 	.word	0x0800d461
 800d3ec:	0800d449 	.word	0x0800d449
 800d3f0:	0800d461 	.word	0x0800d461
 800d3f4:	0800d461 	.word	0x0800d461
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d461 	.word	0x0800d461
 800d400:	0800d461 	.word	0x0800d461
 800d404:	0800d461 	.word	0x0800d461
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d451 	.word	0x0800d451
 800d410:	0800d461 	.word	0x0800d461
 800d414:	0800d461 	.word	0x0800d461
 800d418:	0800d461 	.word	0x0800d461
 800d41c:	0800d461 	.word	0x0800d461
 800d420:	0800d461 	.word	0x0800d461
 800d424:	0800d461 	.word	0x0800d461
 800d428:	0800d461 	.word	0x0800d461
 800d42c:	0800d459 	.word	0x0800d459
 800d430:	2301      	movs	r3, #1
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e222      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d438:	2304      	movs	r3, #4
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e21e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d440:	2308      	movs	r3, #8
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e21a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d448:	2310      	movs	r3, #16
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e216      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d450:	2320      	movs	r3, #32
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e212      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e20e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d460:	2380      	movs	r3, #128	; 0x80
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e20a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a69      	ldr	r2, [pc, #420]	; (800d614 <UART_SetConfig+0x33c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d130      	bne.n	800d4d4 <UART_SetConfig+0x1fc>
 800d472:	4b67      	ldr	r3, [pc, #412]	; (800d610 <UART_SetConfig+0x338>)
 800d474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d826      	bhi.n	800d4cc <UART_SetConfig+0x1f4>
 800d47e:	a201      	add	r2, pc, #4	; (adr r2, 800d484 <UART_SetConfig+0x1ac>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d49d 	.word	0x0800d49d
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4ad 	.word	0x0800d4ad
 800d490:	0800d4b5 	.word	0x0800d4b5
 800d494:	0800d4bd 	.word	0x0800d4bd
 800d498:	0800d4c5 	.word	0x0800d4c5
 800d49c:	2300      	movs	r3, #0
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a2:	e1ec      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e1e8      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e1e4      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4b4:	2310      	movs	r3, #16
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e1e0      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4bc:	2320      	movs	r3, #32
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e1dc      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4c4:	2340      	movs	r3, #64	; 0x40
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e1d8      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4cc:	2380      	movs	r3, #128	; 0x80
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e1d4      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a4f      	ldr	r2, [pc, #316]	; (800d618 <UART_SetConfig+0x340>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d130      	bne.n	800d540 <UART_SetConfig+0x268>
 800d4de:	4b4c      	ldr	r3, [pc, #304]	; (800d610 <UART_SetConfig+0x338>)
 800d4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e2:	f003 0307 	and.w	r3, r3, #7
 800d4e6:	2b05      	cmp	r3, #5
 800d4e8:	d826      	bhi.n	800d538 <UART_SetConfig+0x260>
 800d4ea:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <UART_SetConfig+0x218>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d509 	.word	0x0800d509
 800d4f4:	0800d511 	.word	0x0800d511
 800d4f8:	0800d519 	.word	0x0800d519
 800d4fc:	0800d521 	.word	0x0800d521
 800d500:	0800d529 	.word	0x0800d529
 800d504:	0800d531 	.word	0x0800d531
 800d508:	2300      	movs	r3, #0
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e1b6      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d510:	2304      	movs	r3, #4
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e1b2      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d518:	2308      	movs	r3, #8
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e1ae      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d520:	2310      	movs	r3, #16
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e1aa      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d528:	2320      	movs	r3, #32
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e1a6      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d530:	2340      	movs	r3, #64	; 0x40
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e1a2      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d538:	2380      	movs	r3, #128	; 0x80
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e19e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a35      	ldr	r2, [pc, #212]	; (800d61c <UART_SetConfig+0x344>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d130      	bne.n	800d5ac <UART_SetConfig+0x2d4>
 800d54a:	4b31      	ldr	r3, [pc, #196]	; (800d610 <UART_SetConfig+0x338>)
 800d54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54e:	f003 0307 	and.w	r3, r3, #7
 800d552:	2b05      	cmp	r3, #5
 800d554:	d826      	bhi.n	800d5a4 <UART_SetConfig+0x2cc>
 800d556:	a201      	add	r2, pc, #4	; (adr r2, 800d55c <UART_SetConfig+0x284>)
 800d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55c:	0800d575 	.word	0x0800d575
 800d560:	0800d57d 	.word	0x0800d57d
 800d564:	0800d585 	.word	0x0800d585
 800d568:	0800d58d 	.word	0x0800d58d
 800d56c:	0800d595 	.word	0x0800d595
 800d570:	0800d59d 	.word	0x0800d59d
 800d574:	2300      	movs	r3, #0
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e180      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d57c:	2304      	movs	r3, #4
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e17c      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d584:	2308      	movs	r3, #8
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e178      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d58c:	2310      	movs	r3, #16
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e174      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d594:	2320      	movs	r3, #32
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e170      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d59c:	2340      	movs	r3, #64	; 0x40
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e16c      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d5a4:	2380      	movs	r3, #128	; 0x80
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e168      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a1b      	ldr	r2, [pc, #108]	; (800d620 <UART_SetConfig+0x348>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d142      	bne.n	800d63c <UART_SetConfig+0x364>
 800d5b6:	4b16      	ldr	r3, [pc, #88]	; (800d610 <UART_SetConfig+0x338>)
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ba:	f003 0307 	and.w	r3, r3, #7
 800d5be:	2b05      	cmp	r3, #5
 800d5c0:	d838      	bhi.n	800d634 <UART_SetConfig+0x35c>
 800d5c2:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <UART_SetConfig+0x2f0>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5e1 	.word	0x0800d5e1
 800d5cc:	0800d5e9 	.word	0x0800d5e9
 800d5d0:	0800d5f1 	.word	0x0800d5f1
 800d5d4:	0800d5f9 	.word	0x0800d5f9
 800d5d8:	0800d625 	.word	0x0800d625
 800d5dc:	0800d62d 	.word	0x0800d62d
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e14a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d5e8:	2304      	movs	r3, #4
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e146      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e142      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e13e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d600:	cfff69f3 	.word	0xcfff69f3
 800d604:	58000c00 	.word	0x58000c00
 800d608:	11fff4ff 	.word	0x11fff4ff
 800d60c:	40011000 	.word	0x40011000
 800d610:	58024400 	.word	0x58024400
 800d614:	40004400 	.word	0x40004400
 800d618:	40004800 	.word	0x40004800
 800d61c:	40004c00 	.word	0x40004c00
 800d620:	40005000 	.word	0x40005000
 800d624:	2320      	movs	r3, #32
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e128      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d62c:	2340      	movs	r3, #64	; 0x40
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e124      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d634:	2380      	movs	r3, #128	; 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e120      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4acb      	ldr	r2, [pc, #812]	; (800d970 <UART_SetConfig+0x698>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d176      	bne.n	800d734 <UART_SetConfig+0x45c>
 800d646:	4bcb      	ldr	r3, [pc, #812]	; (800d974 <UART_SetConfig+0x69c>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d64e:	2b28      	cmp	r3, #40	; 0x28
 800d650:	d86c      	bhi.n	800d72c <UART_SetConfig+0x454>
 800d652:	a201      	add	r2, pc, #4	; (adr r2, 800d658 <UART_SetConfig+0x380>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d6fd 	.word	0x0800d6fd
 800d65c:	0800d72d 	.word	0x0800d72d
 800d660:	0800d72d 	.word	0x0800d72d
 800d664:	0800d72d 	.word	0x0800d72d
 800d668:	0800d72d 	.word	0x0800d72d
 800d66c:	0800d72d 	.word	0x0800d72d
 800d670:	0800d72d 	.word	0x0800d72d
 800d674:	0800d72d 	.word	0x0800d72d
 800d678:	0800d705 	.word	0x0800d705
 800d67c:	0800d72d 	.word	0x0800d72d
 800d680:	0800d72d 	.word	0x0800d72d
 800d684:	0800d72d 	.word	0x0800d72d
 800d688:	0800d72d 	.word	0x0800d72d
 800d68c:	0800d72d 	.word	0x0800d72d
 800d690:	0800d72d 	.word	0x0800d72d
 800d694:	0800d72d 	.word	0x0800d72d
 800d698:	0800d70d 	.word	0x0800d70d
 800d69c:	0800d72d 	.word	0x0800d72d
 800d6a0:	0800d72d 	.word	0x0800d72d
 800d6a4:	0800d72d 	.word	0x0800d72d
 800d6a8:	0800d72d 	.word	0x0800d72d
 800d6ac:	0800d72d 	.word	0x0800d72d
 800d6b0:	0800d72d 	.word	0x0800d72d
 800d6b4:	0800d72d 	.word	0x0800d72d
 800d6b8:	0800d715 	.word	0x0800d715
 800d6bc:	0800d72d 	.word	0x0800d72d
 800d6c0:	0800d72d 	.word	0x0800d72d
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d72d 	.word	0x0800d72d
 800d6cc:	0800d72d 	.word	0x0800d72d
 800d6d0:	0800d72d 	.word	0x0800d72d
 800d6d4:	0800d72d 	.word	0x0800d72d
 800d6d8:	0800d71d 	.word	0x0800d71d
 800d6dc:	0800d72d 	.word	0x0800d72d
 800d6e0:	0800d72d 	.word	0x0800d72d
 800d6e4:	0800d72d 	.word	0x0800d72d
 800d6e8:	0800d72d 	.word	0x0800d72d
 800d6ec:	0800d72d 	.word	0x0800d72d
 800d6f0:	0800d72d 	.word	0x0800d72d
 800d6f4:	0800d72d 	.word	0x0800d72d
 800d6f8:	0800d725 	.word	0x0800d725
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d702:	e0bc      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d704:	2304      	movs	r3, #4
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70a:	e0b8      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d70c:	2308      	movs	r3, #8
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e0b4      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d714:	2310      	movs	r3, #16
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e0b0      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d71c:	2320      	movs	r3, #32
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e0ac      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d724:	2340      	movs	r3, #64	; 0x40
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e0a8      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d72c:	2380      	movs	r3, #128	; 0x80
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e0a4      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a8f      	ldr	r2, [pc, #572]	; (800d978 <UART_SetConfig+0x6a0>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d130      	bne.n	800d7a0 <UART_SetConfig+0x4c8>
 800d73e:	4b8d      	ldr	r3, [pc, #564]	; (800d974 <UART_SetConfig+0x69c>)
 800d740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b05      	cmp	r3, #5
 800d748:	d826      	bhi.n	800d798 <UART_SetConfig+0x4c0>
 800d74a:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <UART_SetConfig+0x478>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d769 	.word	0x0800d769
 800d754:	0800d771 	.word	0x0800d771
 800d758:	0800d779 	.word	0x0800d779
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d789 	.word	0x0800d789
 800d764:	0800d791 	.word	0x0800d791
 800d768:	2300      	movs	r3, #0
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e086      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d770:	2304      	movs	r3, #4
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e082      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d778:	2308      	movs	r3, #8
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e07e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d780:	2310      	movs	r3, #16
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e07a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d788:	2320      	movs	r3, #32
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e076      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d790:	2340      	movs	r3, #64	; 0x40
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e072      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e06e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a75      	ldr	r2, [pc, #468]	; (800d97c <UART_SetConfig+0x6a4>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d130      	bne.n	800d80c <UART_SetConfig+0x534>
 800d7aa:	4b72      	ldr	r3, [pc, #456]	; (800d974 <UART_SetConfig+0x69c>)
 800d7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ae:	f003 0307 	and.w	r3, r3, #7
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	d826      	bhi.n	800d804 <UART_SetConfig+0x52c>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <UART_SetConfig+0x4e4>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7d5 	.word	0x0800d7d5
 800d7c0:	0800d7dd 	.word	0x0800d7dd
 800d7c4:	0800d7e5 	.word	0x0800d7e5
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7f5 	.word	0x0800d7f5
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e050      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e04c      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e048      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e044      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e040      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d7fc:	2340      	movs	r3, #64	; 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e03c      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d804:	2380      	movs	r3, #128	; 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e038      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a5b      	ldr	r2, [pc, #364]	; (800d980 <UART_SetConfig+0x6a8>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d130      	bne.n	800d878 <UART_SetConfig+0x5a0>
 800d816:	4b57      	ldr	r3, [pc, #348]	; (800d974 <UART_SetConfig+0x69c>)
 800d818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d826      	bhi.n	800d870 <UART_SetConfig+0x598>
 800d822:	a201      	add	r2, pc, #4	; (adr r2, 800d828 <UART_SetConfig+0x550>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d849 	.word	0x0800d849
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	2302      	movs	r3, #2
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e01a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d848:	2304      	movs	r3, #4
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e016      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d850:	2308      	movs	r3, #8
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d856:	e012      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d858:	2310      	movs	r3, #16
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85e:	e00e      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d866:	e00a      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d868:	2340      	movs	r3, #64	; 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e006      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d870:	2380      	movs	r3, #128	; 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e002      	b.n	800d87e <UART_SetConfig+0x5a6>
 800d878:	2380      	movs	r3, #128	; 0x80
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a3f      	ldr	r2, [pc, #252]	; (800d980 <UART_SetConfig+0x6a8>)
 800d884:	4293      	cmp	r3, r2
 800d886:	f040 80f8 	bne.w	800da7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d88a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d88e:	2b20      	cmp	r3, #32
 800d890:	dc46      	bgt.n	800d920 <UART_SetConfig+0x648>
 800d892:	2b02      	cmp	r3, #2
 800d894:	f2c0 8082 	blt.w	800d99c <UART_SetConfig+0x6c4>
 800d898:	3b02      	subs	r3, #2
 800d89a:	2b1e      	cmp	r3, #30
 800d89c:	d87e      	bhi.n	800d99c <UART_SetConfig+0x6c4>
 800d89e:	a201      	add	r2, pc, #4	; (adr r2, 800d8a4 <UART_SetConfig+0x5cc>)
 800d8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a4:	0800d927 	.word	0x0800d927
 800d8a8:	0800d99d 	.word	0x0800d99d
 800d8ac:	0800d92f 	.word	0x0800d92f
 800d8b0:	0800d99d 	.word	0x0800d99d
 800d8b4:	0800d99d 	.word	0x0800d99d
 800d8b8:	0800d99d 	.word	0x0800d99d
 800d8bc:	0800d93f 	.word	0x0800d93f
 800d8c0:	0800d99d 	.word	0x0800d99d
 800d8c4:	0800d99d 	.word	0x0800d99d
 800d8c8:	0800d99d 	.word	0x0800d99d
 800d8cc:	0800d99d 	.word	0x0800d99d
 800d8d0:	0800d99d 	.word	0x0800d99d
 800d8d4:	0800d99d 	.word	0x0800d99d
 800d8d8:	0800d99d 	.word	0x0800d99d
 800d8dc:	0800d94f 	.word	0x0800d94f
 800d8e0:	0800d99d 	.word	0x0800d99d
 800d8e4:	0800d99d 	.word	0x0800d99d
 800d8e8:	0800d99d 	.word	0x0800d99d
 800d8ec:	0800d99d 	.word	0x0800d99d
 800d8f0:	0800d99d 	.word	0x0800d99d
 800d8f4:	0800d99d 	.word	0x0800d99d
 800d8f8:	0800d99d 	.word	0x0800d99d
 800d8fc:	0800d99d 	.word	0x0800d99d
 800d900:	0800d99d 	.word	0x0800d99d
 800d904:	0800d99d 	.word	0x0800d99d
 800d908:	0800d99d 	.word	0x0800d99d
 800d90c:	0800d99d 	.word	0x0800d99d
 800d910:	0800d99d 	.word	0x0800d99d
 800d914:	0800d99d 	.word	0x0800d99d
 800d918:	0800d99d 	.word	0x0800d99d
 800d91c:	0800d98f 	.word	0x0800d98f
 800d920:	2b40      	cmp	r3, #64	; 0x40
 800d922:	d037      	beq.n	800d994 <UART_SetConfig+0x6bc>
 800d924:	e03a      	b.n	800d99c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d926:	f7fc ff91 	bl	800a84c <HAL_RCCEx_GetD3PCLK1Freq>
 800d92a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d92c:	e03c      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d932:	4618      	mov	r0, r3
 800d934:	f7fc ffa0 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d93c:	e034      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d93e:	f107 0318 	add.w	r3, r7, #24
 800d942:	4618      	mov	r0, r3
 800d944:	f7fd f8ec 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d94c:	e02c      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d94e:	4b09      	ldr	r3, [pc, #36]	; (800d974 <UART_SetConfig+0x69c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0320 	and.w	r3, r3, #32
 800d956:	2b00      	cmp	r3, #0
 800d958:	d016      	beq.n	800d988 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d95a:	4b06      	ldr	r3, [pc, #24]	; (800d974 <UART_SetConfig+0x69c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	08db      	lsrs	r3, r3, #3
 800d960:	f003 0303 	and.w	r3, r3, #3
 800d964:	4a07      	ldr	r2, [pc, #28]	; (800d984 <UART_SetConfig+0x6ac>)
 800d966:	fa22 f303 	lsr.w	r3, r2, r3
 800d96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d96c:	e01c      	b.n	800d9a8 <UART_SetConfig+0x6d0>
 800d96e:	bf00      	nop
 800d970:	40011400 	.word	0x40011400
 800d974:	58024400 	.word	0x58024400
 800d978:	40007800 	.word	0x40007800
 800d97c:	40007c00 	.word	0x40007c00
 800d980:	58000c00 	.word	0x58000c00
 800d984:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d988:	4b9d      	ldr	r3, [pc, #628]	; (800dc00 <UART_SetConfig+0x928>)
 800d98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d98c:	e00c      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d98e:	4b9d      	ldr	r3, [pc, #628]	; (800dc04 <UART_SetConfig+0x92c>)
 800d990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d992:	e009      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d99a:	e005      	b.n	800d9a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d99c:	2300      	movs	r3, #0
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 81de 	beq.w	800dd6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	4a94      	ldr	r2, [pc, #592]	; (800dc08 <UART_SetConfig+0x930>)
 800d9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	4413      	add	r3, r2
 800d9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d305      	bcc.n	800d9e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d903      	bls.n	800d9e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d9e6:	e1c1      	b.n	800dd6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	60bb      	str	r3, [r7, #8]
 800d9ee:	60fa      	str	r2, [r7, #12]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f4:	4a84      	ldr	r2, [pc, #528]	; (800dc08 <UART_SetConfig+0x930>)
 800d9f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	607a      	str	r2, [r7, #4]
 800da02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da0a:	f7f2 fc65 	bl	80002d8 <__aeabi_uldivmod>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4610      	mov	r0, r2
 800da14:	4619      	mov	r1, r3
 800da16:	f04f 0200 	mov.w	r2, #0
 800da1a:	f04f 0300 	mov.w	r3, #0
 800da1e:	020b      	lsls	r3, r1, #8
 800da20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da24:	0202      	lsls	r2, r0, #8
 800da26:	6979      	ldr	r1, [r7, #20]
 800da28:	6849      	ldr	r1, [r1, #4]
 800da2a:	0849      	lsrs	r1, r1, #1
 800da2c:	2000      	movs	r0, #0
 800da2e:	460c      	mov	r4, r1
 800da30:	4605      	mov	r5, r0
 800da32:	eb12 0804 	adds.w	r8, r2, r4
 800da36:	eb43 0905 	adc.w	r9, r3, r5
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	469a      	mov	sl, r3
 800da42:	4693      	mov	fp, r2
 800da44:	4652      	mov	r2, sl
 800da46:	465b      	mov	r3, fp
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fc44 	bl	80002d8 <__aeabi_uldivmod>
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4613      	mov	r3, r2
 800da56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da5e:	d308      	bcc.n	800da72 <UART_SetConfig+0x79a>
 800da60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da66:	d204      	bcs.n	800da72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da6e:	60da      	str	r2, [r3, #12]
 800da70:	e17c      	b.n	800dd6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da78:	e178      	b.n	800dd6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da82:	f040 80c5 	bne.w	800dc10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800da86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da8a:	2b20      	cmp	r3, #32
 800da8c:	dc48      	bgt.n	800db20 <UART_SetConfig+0x848>
 800da8e:	2b00      	cmp	r3, #0
 800da90:	db7b      	blt.n	800db8a <UART_SetConfig+0x8b2>
 800da92:	2b20      	cmp	r3, #32
 800da94:	d879      	bhi.n	800db8a <UART_SetConfig+0x8b2>
 800da96:	a201      	add	r2, pc, #4	; (adr r2, 800da9c <UART_SetConfig+0x7c4>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800db27 	.word	0x0800db27
 800daa0:	0800db2f 	.word	0x0800db2f
 800daa4:	0800db8b 	.word	0x0800db8b
 800daa8:	0800db8b 	.word	0x0800db8b
 800daac:	0800db37 	.word	0x0800db37
 800dab0:	0800db8b 	.word	0x0800db8b
 800dab4:	0800db8b 	.word	0x0800db8b
 800dab8:	0800db8b 	.word	0x0800db8b
 800dabc:	0800db47 	.word	0x0800db47
 800dac0:	0800db8b 	.word	0x0800db8b
 800dac4:	0800db8b 	.word	0x0800db8b
 800dac8:	0800db8b 	.word	0x0800db8b
 800dacc:	0800db8b 	.word	0x0800db8b
 800dad0:	0800db8b 	.word	0x0800db8b
 800dad4:	0800db8b 	.word	0x0800db8b
 800dad8:	0800db8b 	.word	0x0800db8b
 800dadc:	0800db57 	.word	0x0800db57
 800dae0:	0800db8b 	.word	0x0800db8b
 800dae4:	0800db8b 	.word	0x0800db8b
 800dae8:	0800db8b 	.word	0x0800db8b
 800daec:	0800db8b 	.word	0x0800db8b
 800daf0:	0800db8b 	.word	0x0800db8b
 800daf4:	0800db8b 	.word	0x0800db8b
 800daf8:	0800db8b 	.word	0x0800db8b
 800dafc:	0800db8b 	.word	0x0800db8b
 800db00:	0800db8b 	.word	0x0800db8b
 800db04:	0800db8b 	.word	0x0800db8b
 800db08:	0800db8b 	.word	0x0800db8b
 800db0c:	0800db8b 	.word	0x0800db8b
 800db10:	0800db8b 	.word	0x0800db8b
 800db14:	0800db8b 	.word	0x0800db8b
 800db18:	0800db8b 	.word	0x0800db8b
 800db1c:	0800db7d 	.word	0x0800db7d
 800db20:	2b40      	cmp	r3, #64	; 0x40
 800db22:	d02e      	beq.n	800db82 <UART_SetConfig+0x8aa>
 800db24:	e031      	b.n	800db8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db26:	f7fb fa4d 	bl	8008fc4 <HAL_RCC_GetPCLK1Freq>
 800db2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db2c:	e033      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db2e:	f7fb fa5f 	bl	8008ff0 <HAL_RCC_GetPCLK2Freq>
 800db32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db34:	e02f      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fc fe9c 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db44:	e027      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db46:	f107 0318 	add.w	r3, r7, #24
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fc ffe8 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db54:	e01f      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db56:	4b2d      	ldr	r3, [pc, #180]	; (800dc0c <UART_SetConfig+0x934>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f003 0320 	and.w	r3, r3, #32
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db62:	4b2a      	ldr	r3, [pc, #168]	; (800dc0c <UART_SetConfig+0x934>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	08db      	lsrs	r3, r3, #3
 800db68:	f003 0303 	and.w	r3, r3, #3
 800db6c:	4a24      	ldr	r2, [pc, #144]	; (800dc00 <UART_SetConfig+0x928>)
 800db6e:	fa22 f303 	lsr.w	r3, r2, r3
 800db72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db74:	e00f      	b.n	800db96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db76:	4b22      	ldr	r3, [pc, #136]	; (800dc00 <UART_SetConfig+0x928>)
 800db78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db7a:	e00c      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db7c:	4b21      	ldr	r3, [pc, #132]	; (800dc04 <UART_SetConfig+0x92c>)
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db80:	e009      	b.n	800db96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db88:	e005      	b.n	800db96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db8a:	2300      	movs	r3, #0
 800db8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 80e7 	beq.w	800dd6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba2:	4a19      	ldr	r2, [pc, #100]	; (800dc08 <UART_SetConfig+0x930>)
 800dba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dba8:	461a      	mov	r2, r3
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbb0:	005a      	lsls	r2, r3, #1
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	441a      	add	r2, r3
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	2b0f      	cmp	r3, #15
 800dbc8:	d916      	bls.n	800dbf8 <UART_SetConfig+0x920>
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd0:	d212      	bcs.n	800dbf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	f023 030f 	bic.w	r3, r3, #15
 800dbda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	085b      	lsrs	r3, r3, #1
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	f003 0307 	and.w	r3, r3, #7
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbea:	4313      	orrs	r3, r2
 800dbec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dbf4:	60da      	str	r2, [r3, #12]
 800dbf6:	e0b9      	b.n	800dd6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dbfe:	e0b5      	b.n	800dd6c <UART_SetConfig+0xa94>
 800dc00:	03d09000 	.word	0x03d09000
 800dc04:	003d0900 	.word	0x003d0900
 800dc08:	0800f028 	.word	0x0800f028
 800dc0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc14:	2b20      	cmp	r3, #32
 800dc16:	dc49      	bgt.n	800dcac <UART_SetConfig+0x9d4>
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	db7c      	blt.n	800dd16 <UART_SetConfig+0xa3e>
 800dc1c:	2b20      	cmp	r3, #32
 800dc1e:	d87a      	bhi.n	800dd16 <UART_SetConfig+0xa3e>
 800dc20:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <UART_SetConfig+0x950>)
 800dc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc26:	bf00      	nop
 800dc28:	0800dcb3 	.word	0x0800dcb3
 800dc2c:	0800dcbb 	.word	0x0800dcbb
 800dc30:	0800dd17 	.word	0x0800dd17
 800dc34:	0800dd17 	.word	0x0800dd17
 800dc38:	0800dcc3 	.word	0x0800dcc3
 800dc3c:	0800dd17 	.word	0x0800dd17
 800dc40:	0800dd17 	.word	0x0800dd17
 800dc44:	0800dd17 	.word	0x0800dd17
 800dc48:	0800dcd3 	.word	0x0800dcd3
 800dc4c:	0800dd17 	.word	0x0800dd17
 800dc50:	0800dd17 	.word	0x0800dd17
 800dc54:	0800dd17 	.word	0x0800dd17
 800dc58:	0800dd17 	.word	0x0800dd17
 800dc5c:	0800dd17 	.word	0x0800dd17
 800dc60:	0800dd17 	.word	0x0800dd17
 800dc64:	0800dd17 	.word	0x0800dd17
 800dc68:	0800dce3 	.word	0x0800dce3
 800dc6c:	0800dd17 	.word	0x0800dd17
 800dc70:	0800dd17 	.word	0x0800dd17
 800dc74:	0800dd17 	.word	0x0800dd17
 800dc78:	0800dd17 	.word	0x0800dd17
 800dc7c:	0800dd17 	.word	0x0800dd17
 800dc80:	0800dd17 	.word	0x0800dd17
 800dc84:	0800dd17 	.word	0x0800dd17
 800dc88:	0800dd17 	.word	0x0800dd17
 800dc8c:	0800dd17 	.word	0x0800dd17
 800dc90:	0800dd17 	.word	0x0800dd17
 800dc94:	0800dd17 	.word	0x0800dd17
 800dc98:	0800dd17 	.word	0x0800dd17
 800dc9c:	0800dd17 	.word	0x0800dd17
 800dca0:	0800dd17 	.word	0x0800dd17
 800dca4:	0800dd17 	.word	0x0800dd17
 800dca8:	0800dd09 	.word	0x0800dd09
 800dcac:	2b40      	cmp	r3, #64	; 0x40
 800dcae:	d02e      	beq.n	800dd0e <UART_SetConfig+0xa36>
 800dcb0:	e031      	b.n	800dd16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcb2:	f7fb f987 	bl	8008fc4 <HAL_RCC_GetPCLK1Freq>
 800dcb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dcb8:	e033      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcba:	f7fb f999 	bl	8008ff0 <HAL_RCC_GetPCLK2Freq>
 800dcbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dcc0:	e02f      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fc fdd6 	bl	800a878 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcd0:	e027      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcd2:	f107 0318 	add.w	r3, r7, #24
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fc ff22 	bl	800ab20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dce0:	e01f      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dce2:	4b2d      	ldr	r3, [pc, #180]	; (800dd98 <UART_SetConfig+0xac0>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 0320 	and.w	r3, r3, #32
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d009      	beq.n	800dd02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dcee:	4b2a      	ldr	r3, [pc, #168]	; (800dd98 <UART_SetConfig+0xac0>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	08db      	lsrs	r3, r3, #3
 800dcf4:	f003 0303 	and.w	r3, r3, #3
 800dcf8:	4a28      	ldr	r2, [pc, #160]	; (800dd9c <UART_SetConfig+0xac4>)
 800dcfa:	fa22 f303 	lsr.w	r3, r2, r3
 800dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd00:	e00f      	b.n	800dd22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dd02:	4b26      	ldr	r3, [pc, #152]	; (800dd9c <UART_SetConfig+0xac4>)
 800dd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd06:	e00c      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd08:	4b25      	ldr	r3, [pc, #148]	; (800dda0 <UART_SetConfig+0xac8>)
 800dd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd0c:	e009      	b.n	800dd22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd14:	e005      	b.n	800dd22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dd16:	2300      	movs	r3, #0
 800dd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd20:	bf00      	nop
    }

    if (pclk != 0U)
 800dd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d021      	beq.n	800dd6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2c:	4a1d      	ldr	r2, [pc, #116]	; (800dda4 <UART_SetConfig+0xacc>)
 800dd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd32:	461a      	mov	r2, r3
 800dd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd36:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	085b      	lsrs	r3, r3, #1
 800dd40:	441a      	add	r2, r3
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4e:	2b0f      	cmp	r3, #15
 800dd50:	d909      	bls.n	800dd66 <UART_SetConfig+0xa8e>
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd58:	d205      	bcs.n	800dd66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60da      	str	r2, [r3, #12]
 800dd64:	e002      	b.n	800dd6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2200      	movs	r2, #0
 800dd86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dd88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3748      	adds	r7, #72	; 0x48
 800dd90:	46bd      	mov	sp, r7
 800dd92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd96:	bf00      	nop
 800dd98:	58024400 	.word	0x58024400
 800dd9c:	03d09000 	.word	0x03d09000
 800dda0:	003d0900 	.word	0x003d0900
 800dda4:	0800f028 	.word	0x0800f028

0800dda8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00a      	beq.n	800ddd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd6:	f003 0302 	and.w	r3, r3, #2
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00a      	beq.n	800ddf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf8:	f003 0304 	and.w	r3, r3, #4
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00a      	beq.n	800de16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	430a      	orrs	r2, r1
 800de14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	f003 0308 	and.w	r3, r3, #8
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00a      	beq.n	800de38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	430a      	orrs	r2, r1
 800de36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de3c:	f003 0310 	and.w	r3, r3, #16
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00a      	beq.n	800de5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	430a      	orrs	r2, r1
 800de58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	f003 0320 	and.w	r3, r3, #32
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00a      	beq.n	800de7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	430a      	orrs	r2, r1
 800de7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01a      	beq.n	800debe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	430a      	orrs	r2, r1
 800de9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dea6:	d10a      	bne.n	800debe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00a      	beq.n	800dee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	605a      	str	r2, [r3, #4]
  }
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af02      	add	r7, sp, #8
 800def2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800defc:	f7f4 fcc2 	bl	8002884 <HAL_GetTick>
 800df00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 0308 	and.w	r3, r3, #8
 800df0c:	2b08      	cmp	r3, #8
 800df0e:	d10e      	bne.n	800df2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2200      	movs	r2, #0
 800df1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f82f 	bl	800df82 <UART_WaitOnFlagUntilTimeout>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df2a:	2303      	movs	r3, #3
 800df2c:	e025      	b.n	800df7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 0304 	and.w	r3, r3, #4
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d10e      	bne.n	800df5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f819 	bl	800df82 <UART_WaitOnFlagUntilTimeout>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e00f      	b.n	800df7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2220      	movs	r2, #32
 800df5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b09c      	sub	sp, #112	; 0x70
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	603b      	str	r3, [r7, #0]
 800df8e:	4613      	mov	r3, r2
 800df90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df92:	e0a9      	b.n	800e0e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df9a:	f000 80a5 	beq.w	800e0e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df9e:	f7f4 fc71 	bl	8002884 <HAL_GetTick>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d302      	bcc.n	800dfb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800dfae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d140      	bne.n	800e036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfbc:	e853 3f00 	ldrex	r3, [r3]
 800dfc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dfc8:	667b      	str	r3, [r7, #100]	; 0x64
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfda:	e841 2300 	strex	r3, r2, [r1]
 800dfde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1e6      	bne.n	800dfb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3308      	adds	r3, #8
 800dfec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	e853 3f00 	ldrex	r3, [r3]
 800dff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	f023 0301 	bic.w	r3, r3, #1
 800dffc:	663b      	str	r3, [r7, #96]	; 0x60
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3308      	adds	r3, #8
 800e004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e006:	64ba      	str	r2, [r7, #72]	; 0x48
 800e008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e00e:	e841 2300 	strex	r3, r2, [r1]
 800e012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1e5      	bne.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2220      	movs	r2, #32
 800e026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e069      	b.n	800e10a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 0304 	and.w	r3, r3, #4
 800e040:	2b00      	cmp	r3, #0
 800e042:	d051      	beq.n	800e0e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69db      	ldr	r3, [r3, #28]
 800e04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e052:	d149      	bne.n	800e0e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e05c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e072:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	461a      	mov	r2, r3
 800e07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e07c:	637b      	str	r3, [r7, #52]	; 0x34
 800e07e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e6      	bne.n	800e05e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3308      	adds	r3, #8
 800e096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	e853 3f00 	ldrex	r3, [r3]
 800e09e:	613b      	str	r3, [r7, #16]
   return(result);
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f023 0301 	bic.w	r3, r3, #1
 800e0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e0b0:	623a      	str	r2, [r7, #32]
 800e0b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	6a3a      	ldr	r2, [r7, #32]
 800e0b8:	e841 2300 	strex	r3, r2, [r1]
 800e0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e5      	bne.n	800e090 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2220      	movs	r2, #32
 800e0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2220      	movs	r2, #32
 800e0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	e010      	b.n	800e10a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	69da      	ldr	r2, [r3, #28]
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	bf0c      	ite	eq
 800e0f8:	2301      	moveq	r3, #1
 800e0fa:	2300      	movne	r3, #0
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	461a      	mov	r2, r3
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	429a      	cmp	r2, r3
 800e104:	f43f af46 	beq.w	800df94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3770      	adds	r7, #112	; 0x70
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e114:	b480      	push	{r7}
 800e116:	b0a3      	sub	sp, #140	; 0x8c
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	88fa      	ldrh	r2, [r7, #6]
 800e12c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	88fa      	ldrh	r2, [r7, #6]
 800e134:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e146:	d10e      	bne.n	800e166 <UART_Start_Receive_IT+0x52>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d105      	bne.n	800e15c <UART_Start_Receive_IT+0x48>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e156:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e15a:	e02d      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	22ff      	movs	r2, #255	; 0xff
 800e160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e164:	e028      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10d      	bne.n	800e18a <UART_Start_Receive_IT+0x76>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d104      	bne.n	800e180 <UART_Start_Receive_IT+0x6c>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	22ff      	movs	r2, #255	; 0xff
 800e17a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e17e:	e01b      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	227f      	movs	r2, #127	; 0x7f
 800e184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e188:	e016      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e192:	d10d      	bne.n	800e1b0 <UART_Start_Receive_IT+0x9c>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d104      	bne.n	800e1a6 <UART_Start_Receive_IT+0x92>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	227f      	movs	r2, #127	; 0x7f
 800e1a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e1a4:	e008      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	223f      	movs	r2, #63	; 0x3f
 800e1aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e1ae:	e003      	b.n	800e1b8 <UART_Start_Receive_IT+0xa4>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2222      	movs	r2, #34	; 0x22
 800e1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1d2:	e853 3f00 	ldrex	r3, [r3]
 800e1d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e1d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1da:	f043 0301 	orr.w	r3, r3, #1
 800e1de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e1ec:	673a      	str	r2, [r7, #112]	; 0x70
 800e1ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e1f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e1fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e3      	bne.n	800e1c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e208:	d153      	bne.n	800e2b2 <UART_Start_Receive_IT+0x19e>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e210:	88fa      	ldrh	r2, [r7, #6]
 800e212:	429a      	cmp	r2, r3
 800e214:	d34d      	bcc.n	800e2b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e21e:	d107      	bne.n	800e230 <UART_Start_Receive_IT+0x11c>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d103      	bne.n	800e230 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4a4b      	ldr	r2, [pc, #300]	; (800e358 <UART_Start_Receive_IT+0x244>)
 800e22c:	671a      	str	r2, [r3, #112]	; 0x70
 800e22e:	e002      	b.n	800e236 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a4a      	ldr	r2, [pc, #296]	; (800e35c <UART_Start_Receive_IT+0x248>)
 800e234:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2200      	movs	r2, #0
 800e23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01a      	beq.n	800e27c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e24e:	e853 3f00 	ldrex	r3, [r3]
 800e252:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e25a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	461a      	mov	r2, r3
 800e264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e26a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e26e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e270:	e841 2300 	strex	r3, r2, [r1]
 800e274:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e4      	bne.n	800e246 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	3308      	adds	r3, #8
 800e282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e286:	e853 3f00 	ldrex	r3, [r3]
 800e28a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e292:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3308      	adds	r3, #8
 800e29a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e29c:	64ba      	str	r2, [r7, #72]	; 0x48
 800e29e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2a4:	e841 2300 	strex	r3, r2, [r1]
 800e2a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1e5      	bne.n	800e27c <UART_Start_Receive_IT+0x168>
 800e2b0:	e04a      	b.n	800e348 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2ba:	d107      	bne.n	800e2cc <UART_Start_Receive_IT+0x1b8>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d103      	bne.n	800e2cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	4a26      	ldr	r2, [pc, #152]	; (800e360 <UART_Start_Receive_IT+0x24c>)
 800e2c8:	671a      	str	r2, [r3, #112]	; 0x70
 800e2ca:	e002      	b.n	800e2d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4a25      	ldr	r2, [pc, #148]	; (800e364 <UART_Start_Receive_IT+0x250>)
 800e2d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d019      	beq.n	800e316 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	e853 3f00 	ldrex	r3, [r3]
 800e2ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e2f6:	677b      	str	r3, [r7, #116]	; 0x74
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e300:	637b      	str	r3, [r7, #52]	; 0x34
 800e302:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e308:	e841 2300 	strex	r3, r2, [r1]
 800e30c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1e6      	bne.n	800e2e2 <UART_Start_Receive_IT+0x1ce>
 800e314:	e018      	b.n	800e348 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	e853 3f00 	ldrex	r3, [r3]
 800e322:	613b      	str	r3, [r7, #16]
   return(result);
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	f043 0320 	orr.w	r3, r3, #32
 800e32a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	461a      	mov	r2, r3
 800e332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e334:	623b      	str	r3, [r7, #32]
 800e336:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e338:	69f9      	ldr	r1, [r7, #28]
 800e33a:	6a3a      	ldr	r2, [r7, #32]
 800e33c:	e841 2300 	strex	r3, r2, [r1]
 800e340:	61bb      	str	r3, [r7, #24]
   return(result);
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1e6      	bne.n	800e316 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	378c      	adds	r7, #140	; 0x8c
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	0800e921 	.word	0x0800e921
 800e35c:	0800e629 	.word	0x0800e629
 800e360:	0800e4c9 	.word	0x0800e4c9
 800e364:	0800e369 	.word	0x0800e369

0800e368 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b096      	sub	sp, #88	; 0x58
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e376:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e380:	2b22      	cmp	r3, #34	; 0x22
 800e382:	f040 8095 	bne.w	800e4b0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e390:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e394:	b2d9      	uxtb	r1, r3
 800e396:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a0:	400a      	ands	r2, r1
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d178      	bne.n	800e4c0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	e853 3f00 	ldrex	r3, [r3]
 800e3da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3e2:	653b      	str	r3, [r7, #80]	; 0x50
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e3ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3f4:	e841 2300 	strex	r3, r2, [r1]
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e6      	bne.n	800e3ce <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3308      	adds	r3, #8
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	e853 3f00 	ldrex	r3, [r3]
 800e40e:	623b      	str	r3, [r7, #32]
   return(result);
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	f023 0301 	bic.w	r3, r3, #1
 800e416:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3308      	adds	r3, #8
 800e41e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e420:	633a      	str	r2, [r7, #48]	; 0x30
 800e422:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e428:	e841 2300 	strex	r3, r2, [r1]
 800e42c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1e5      	bne.n	800e400 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2220      	movs	r2, #32
 800e438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e446:	2b01      	cmp	r3, #1
 800e448:	d12e      	bne.n	800e4a8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	e853 3f00 	ldrex	r3, [r3]
 800e45c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f023 0310 	bic.w	r3, r3, #16
 800e464:	64bb      	str	r3, [r7, #72]	; 0x48
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	461a      	mov	r2, r3
 800e46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e46e:	61fb      	str	r3, [r7, #28]
 800e470:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e472:	69b9      	ldr	r1, [r7, #24]
 800e474:	69fa      	ldr	r2, [r7, #28]
 800e476:	e841 2300 	strex	r3, r2, [r1]
 800e47a:	617b      	str	r3, [r7, #20]
   return(result);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e6      	bne.n	800e450 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69db      	ldr	r3, [r3, #28]
 800e488:	f003 0310 	and.w	r3, r3, #16
 800e48c:	2b10      	cmp	r3, #16
 800e48e:	d103      	bne.n	800e498 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2210      	movs	r2, #16
 800e496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7fe ff0d 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e4a6:	e00b      	b.n	800e4c0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7f2 fc1d 	bl	8000ce8 <HAL_UART_RxCpltCallback>
}
 800e4ae:	e007      	b.n	800e4c0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	699a      	ldr	r2, [r3, #24]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f042 0208 	orr.w	r2, r2, #8
 800e4be:	619a      	str	r2, [r3, #24]
}
 800e4c0:	bf00      	nop
 800e4c2:	3758      	adds	r7, #88	; 0x58
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b096      	sub	sp, #88	; 0x58
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4e0:	2b22      	cmp	r3, #34	; 0x22
 800e4e2:	f040 8095 	bne.w	800e610 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e4f6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e4fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e4fe:	4013      	ands	r3, r2
 800e500:	b29a      	uxth	r2, r3
 800e502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e504:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e50a:	1c9a      	adds	r2, r3, #2
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e516:	b29b      	uxth	r3, r3
 800e518:	3b01      	subs	r3, #1
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e528:	b29b      	uxth	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d178      	bne.n	800e620 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e536:	e853 3f00 	ldrex	r3, [r3]
 800e53a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e542:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	461a      	mov	r2, r3
 800e54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e54c:	643b      	str	r3, [r7, #64]	; 0x40
 800e54e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e554:	e841 2300 	strex	r3, r2, [r1]
 800e558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e6      	bne.n	800e52e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3308      	adds	r3, #8
 800e566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	e853 3f00 	ldrex	r3, [r3]
 800e56e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	f023 0301 	bic.w	r3, r3, #1
 800e576:	64bb      	str	r3, [r7, #72]	; 0x48
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3308      	adds	r3, #8
 800e57e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e580:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e588:	e841 2300 	strex	r3, r2, [r1]
 800e58c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1e5      	bne.n	800e560 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2220      	movs	r2, #32
 800e598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d12e      	bne.n	800e608 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	f023 0310 	bic.w	r3, r3, #16
 800e5c4:	647b      	str	r3, [r7, #68]	; 0x44
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ce:	61bb      	str	r3, [r7, #24]
 800e5d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d2:	6979      	ldr	r1, [r7, #20]
 800e5d4:	69ba      	ldr	r2, [r7, #24]
 800e5d6:	e841 2300 	strex	r3, r2, [r1]
 800e5da:	613b      	str	r3, [r7, #16]
   return(result);
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1e6      	bne.n	800e5b0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	69db      	ldr	r3, [r3, #28]
 800e5e8:	f003 0310 	and.w	r3, r3, #16
 800e5ec:	2b10      	cmp	r3, #16
 800e5ee:	d103      	bne.n	800e5f8 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2210      	movs	r2, #16
 800e5f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7fe fe5d 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e606:	e00b      	b.n	800e620 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7f2 fb6d 	bl	8000ce8 <HAL_UART_RxCpltCallback>
}
 800e60e:	e007      	b.n	800e620 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	699a      	ldr	r2, [r3, #24]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f042 0208 	orr.w	r2, r2, #8
 800e61e:	619a      	str	r2, [r3, #24]
}
 800e620:	bf00      	nop
 800e622:	3758      	adds	r7, #88	; 0x58
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b0a6      	sub	sp, #152	; 0x98
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e636:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e65e:	2b22      	cmp	r3, #34	; 0x22
 800e660:	f040 814d 	bne.w	800e8fe <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e66a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e66e:	e0f4      	b.n	800e85a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e67a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e67e:	b2d9      	uxtb	r1, r3
 800e680:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e684:	b2da      	uxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e68a:	400a      	ands	r2, r1
 800e68c:	b2d2      	uxtb	r2, r2
 800e68e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e694:	1c5a      	adds	r2, r3, #1
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e6b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6ba:	f003 0307 	and.w	r3, r3, #7
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d053      	beq.n	800e76a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d011      	beq.n	800e6f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e6ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00b      	beq.n	800e6f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6e8:	f043 0201 	orr.w	r2, r3, #1
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d011      	beq.n	800e722 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e6fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	2b00      	cmp	r3, #0
 800e708:	d00b      	beq.n	800e722 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2202      	movs	r2, #2
 800e710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e718:	f043 0204 	orr.w	r2, r3, #4
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e726:	f003 0304 	and.w	r3, r3, #4
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d011      	beq.n	800e752 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e72e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e732:	f003 0301 	and.w	r3, r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2204      	movs	r2, #4
 800e740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e748:	f043 0202 	orr.w	r2, r3, #2
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d006      	beq.n	800e76a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7fe fda5 	bl	800d2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e770:	b29b      	uxth	r3, r3
 800e772:	2b00      	cmp	r3, #0
 800e774:	d171      	bne.n	800e85a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e77e:	e853 3f00 	ldrex	r3, [r3]
 800e782:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e78a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e798:	66bb      	str	r3, [r7, #104]	; 0x68
 800e79a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e79e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7a0:	e841 2300 	strex	r3, r2, [r1]
 800e7a4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1e4      	bne.n	800e776 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b6:	e853 3f00 	ldrex	r3, [r3]
 800e7ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e7bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7be:	4b56      	ldr	r3, [pc, #344]	; (800e918 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e7cc:	657a      	str	r2, [r7, #84]	; 0x54
 800e7ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7d4:	e841 2300 	strex	r3, r2, [r1]
 800e7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1e5      	bne.n	800e7ac <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2220      	movs	r2, #32
 800e7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d12e      	bne.n	800e854 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	e853 3f00 	ldrex	r3, [r3]
 800e808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	f023 0310 	bic.w	r3, r3, #16
 800e810:	67bb      	str	r3, [r7, #120]	; 0x78
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e81a:	643b      	str	r3, [r7, #64]	; 0x40
 800e81c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e6      	bne.n	800e7fc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	f003 0310 	and.w	r3, r3, #16
 800e838:	2b10      	cmp	r3, #16
 800e83a:	d103      	bne.n	800e844 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2210      	movs	r2, #16
 800e842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7fe fd37 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
 800e852:	e002      	b.n	800e85a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7f2 fa47 	bl	8000ce8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e85a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d006      	beq.n	800e870 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e866:	f003 0320 	and.w	r3, r3, #32
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f af00 	bne.w	800e670 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e876:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e87a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d045      	beq.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e888:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d23e      	bcs.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3308      	adds	r3, #8
 800e896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	e853 3f00 	ldrex	r3, [r3]
 800e89e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8a6:	673b      	str	r3, [r7, #112]	; 0x70
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3308      	adds	r3, #8
 800e8ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8b8:	e841 2300 	strex	r3, r2, [r1]
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e5      	bne.n	800e890 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a15      	ldr	r2, [pc, #84]	; (800e91c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e8c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	e853 3f00 	ldrex	r3, [r3]
 800e8d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	f043 0320 	orr.w	r3, r3, #32
 800e8de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e8:	61bb      	str	r3, [r7, #24]
 800e8ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ec:	6979      	ldr	r1, [r7, #20]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	e841 2300 	strex	r3, r2, [r1]
 800e8f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1e6      	bne.n	800e8ca <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8fc:	e007      	b.n	800e90e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	699a      	ldr	r2, [r3, #24]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f042 0208 	orr.w	r2, r2, #8
 800e90c:	619a      	str	r2, [r3, #24]
}
 800e90e:	bf00      	nop
 800e910:	3798      	adds	r7, #152	; 0x98
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	effffffe 	.word	0xeffffffe
 800e91c:	0800e369 	.word	0x0800e369

0800e920 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b0a8      	sub	sp, #160	; 0xa0
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e92e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e956:	2b22      	cmp	r3, #34	; 0x22
 800e958:	f040 8151 	bne.w	800ebfe <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e962:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e966:	e0f8      	b.n	800eb5a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e97a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e97e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e982:	4013      	ands	r3, r2
 800e984:	b29a      	uxth	r2, r3
 800e986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e98a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e990:	1c9a      	adds	r2, r3, #2
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d053      	beq.n	800ea66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d011      	beq.n	800e9ee <UART_RxISR_16BIT_FIFOEN+0xce>
 800e9ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00b      	beq.n	800e9ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9e4:	f043 0201 	orr.w	r2, r3, #1
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d011      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e9fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea14:	f043 0204 	orr.w	r2, r3, #4
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d011      	beq.n	800ea4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ea2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00b      	beq.n	800ea4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2204      	movs	r2, #4
 800ea3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea44:	f043 0202 	orr.w	r2, r3, #2
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7fe fc27 	bl	800d2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d173      	bne.n	800eb5a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea7a:	e853 3f00 	ldrex	r3, [r3]
 800ea7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ea80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea96:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eaa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e4      	bne.n	800ea72 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3308      	adds	r3, #8
 800eaae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eab2:	e853 3f00 	ldrex	r3, [r3]
 800eab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaba:	4b57      	ldr	r3, [pc, #348]	; (800ec18 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800eabc:	4013      	ands	r3, r2
 800eabe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3308      	adds	r3, #8
 800eac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eacc:	65ba      	str	r2, [r7, #88]	; 0x58
 800eace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ead2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ead4:	e841 2300 	strex	r3, r2, [r1]
 800ead8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e3      	bne.n	800eaa8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d12e      	bne.n	800eb54 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	f023 0310 	bic.w	r3, r3, #16
 800eb10:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb1a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e6      	bne.n	800eafc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	f003 0310 	and.w	r3, r3, #16
 800eb38:	2b10      	cmp	r3, #16
 800eb3a:	d103      	bne.n	800eb44 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2210      	movs	r2, #16
 800eb42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7fe fbb7 	bl	800d2c0 <HAL_UARTEx_RxEventCallback>
 800eb52:	e002      	b.n	800eb5a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7f2 f8c7 	bl	8000ce8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb5a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <UART_RxISR_16BIT_FIFOEN+0x250>
 800eb62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eb66:	f003 0320 	and.w	r3, r3, #32
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f47f aefc 	bne.w	800e968 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb76:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb7a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d045      	beq.n	800ec0e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb88:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d23e      	bcs.n	800ec0e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	3308      	adds	r3, #8
 800eb96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9a:	e853 3f00 	ldrex	r3, [r3]
 800eb9e:	623b      	str	r3, [r7, #32]
   return(result);
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eba6:	677b      	str	r3, [r7, #116]	; 0x74
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	3308      	adds	r3, #8
 800ebae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ebb0:	633a      	str	r2, [r7, #48]	; 0x30
 800ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebb8:	e841 2300 	strex	r3, r2, [r1]
 800ebbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1e5      	bne.n	800eb90 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4a15      	ldr	r2, [pc, #84]	; (800ec1c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ebc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	e853 3f00 	ldrex	r3, [r3]
 800ebd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f043 0320 	orr.w	r3, r3, #32
 800ebde:	673b      	str	r3, [r7, #112]	; 0x70
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebe8:	61fb      	str	r3, [r7, #28]
 800ebea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebec:	69b9      	ldr	r1, [r7, #24]
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	e841 2300 	strex	r3, r2, [r1]
 800ebf4:	617b      	str	r3, [r7, #20]
   return(result);
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1e6      	bne.n	800ebca <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebfc:	e007      	b.n	800ec0e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	699a      	ldr	r2, [r3, #24]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f042 0208 	orr.w	r2, r2, #8
 800ec0c:	619a      	str	r2, [r3, #24]
}
 800ec0e:	bf00      	nop
 800ec10:	37a0      	adds	r7, #160	; 0xa0
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	effffffe 	.word	0xeffffffe
 800ec1c:	0800e4c9 	.word	0x0800e4c9

0800ec20 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	1d3b      	adds	r3, r7, #4
 800ec2a:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d101      	bne.n	800ec40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	e046      	b.n	800ecce <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2224      	movs	r2, #36	; 0x24
 800ec4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f022 0201 	bic.w	r2, r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	430a      	orrs	r2, r1
 800ec72:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d105      	bne.n	800ec86 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ec7a:	1d3b      	adds	r3, r7, #4
 800ec7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 f910 	bl	800eea6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f042 0201 	orr.w	r2, r2, #1
 800ec94:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec96:	f7f3 fdf5 	bl	8002884 <HAL_GetTick>
 800ec9a:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f7ff f969 	bl	800df82 <UART_WaitOnFlagUntilTimeout>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d002      	beq.n	800ecbc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	75fb      	strb	r3, [r7, #23]
 800ecba:	e003      	b.n	800ecc4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2220      	movs	r2, #32
 800ecc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3718      	adds	r7, #24
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ecd6:	b480      	push	{r7}
 800ecd8:	b089      	sub	sp, #36	; 0x24
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d101      	bne.n	800ecec <HAL_UARTEx_EnableStopMode+0x16>
 800ece8:	2302      	movs	r3, #2
 800ecea:	e021      	b.n	800ed30 <HAL_UARTEx_EnableStopMode+0x5a>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	e853 3f00 	ldrex	r3, [r3]
 800ed00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f043 0302 	orr.w	r3, r3, #2
 800ed08:	61fb      	str	r3, [r7, #28]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	61bb      	str	r3, [r7, #24]
 800ed14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed16:	6979      	ldr	r1, [r7, #20]
 800ed18:	69ba      	ldr	r2, [r7, #24]
 800ed1a:	e841 2300 	strex	r3, r2, [r1]
 800ed1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e6      	bne.n	800ecf4 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3724      	adds	r7, #36	; 0x24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d101      	bne.n	800ed52 <HAL_UARTEx_DisableFifoMode+0x16>
 800ed4e:	2302      	movs	r3, #2
 800ed50:	e027      	b.n	800eda2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2224      	movs	r2, #36	; 0x24
 800ed5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f022 0201 	bic.w	r2, r2, #1
 800ed78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ed80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2220      	movs	r2, #32
 800ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d101      	bne.n	800edc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800edc2:	2302      	movs	r3, #2
 800edc4:	e02d      	b.n	800ee22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2201      	movs	r2, #1
 800edca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2224      	movs	r2, #36	; 0x24
 800edd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f022 0201 	bic.w	r2, r2, #1
 800edec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	430a      	orrs	r2, r1
 800ee00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f872 	bl	800eeec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2220      	movs	r2, #32
 800ee14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d101      	bne.n	800ee42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ee3e:	2302      	movs	r3, #2
 800ee40:	e02d      	b.n	800ee9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2201      	movs	r2, #1
 800ee46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2224      	movs	r2, #36	; 0x24
 800ee4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f022 0201 	bic.w	r2, r2, #1
 800ee68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	430a      	orrs	r2, r1
 800ee7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f834 	bl	800eeec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2220      	movs	r2, #32
 800ee90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800eea6:	b480      	push	{r7}
 800eea8:	b085      	sub	sp, #20
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	60f8      	str	r0, [r7, #12]
 800eeae:	1d3b      	adds	r3, r7, #4
 800eeb0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f023 0210 	bic.w	r2, r3, #16
 800eebe:	893b      	ldrh	r3, [r7, #8]
 800eec0:	4619      	mov	r1, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800eed4:	7abb      	ldrb	r3, [r7, #10]
 800eed6:	061a      	lsls	r2, r3, #24
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	430a      	orrs	r2, r1
 800eede:	605a      	str	r2, [r3, #4]
}
 800eee0:	bf00      	nop
 800eee2:	3714      	adds	r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d108      	bne.n	800ef0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef0c:	e031      	b.n	800ef72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef0e:	2310      	movs	r3, #16
 800ef10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef12:	2310      	movs	r3, #16
 800ef14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	0e5b      	lsrs	r3, r3, #25
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	f003 0307 	and.w	r3, r3, #7
 800ef24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	0f5b      	lsrs	r3, r3, #29
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	f003 0307 	and.w	r3, r3, #7
 800ef34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef36:	7bbb      	ldrb	r3, [r7, #14]
 800ef38:	7b3a      	ldrb	r2, [r7, #12]
 800ef3a:	4911      	ldr	r1, [pc, #68]	; (800ef80 <UARTEx_SetNbDataToProcess+0x94>)
 800ef3c:	5c8a      	ldrb	r2, [r1, r2]
 800ef3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef42:	7b3a      	ldrb	r2, [r7, #12]
 800ef44:	490f      	ldr	r1, [pc, #60]	; (800ef84 <UARTEx_SetNbDataToProcess+0x98>)
 800ef46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
 800ef56:	7b7a      	ldrb	r2, [r7, #13]
 800ef58:	4909      	ldr	r1, [pc, #36]	; (800ef80 <UARTEx_SetNbDataToProcess+0x94>)
 800ef5a:	5c8a      	ldrb	r2, [r1, r2]
 800ef5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef60:	7b7a      	ldrb	r2, [r7, #13]
 800ef62:	4908      	ldr	r1, [pc, #32]	; (800ef84 <UARTEx_SetNbDataToProcess+0x98>)
 800ef64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef72:	bf00      	nop
 800ef74:	3714      	adds	r7, #20
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	0800f040 	.word	0x0800f040
 800ef84:	0800f048 	.word	0x0800f048

0800ef88 <__libc_init_array>:
 800ef88:	b570      	push	{r4, r5, r6, lr}
 800ef8a:	4d0d      	ldr	r5, [pc, #52]	; (800efc0 <__libc_init_array+0x38>)
 800ef8c:	4c0d      	ldr	r4, [pc, #52]	; (800efc4 <__libc_init_array+0x3c>)
 800ef8e:	1b64      	subs	r4, r4, r5
 800ef90:	10a4      	asrs	r4, r4, #2
 800ef92:	2600      	movs	r6, #0
 800ef94:	42a6      	cmp	r6, r4
 800ef96:	d109      	bne.n	800efac <__libc_init_array+0x24>
 800ef98:	4d0b      	ldr	r5, [pc, #44]	; (800efc8 <__libc_init_array+0x40>)
 800ef9a:	4c0c      	ldr	r4, [pc, #48]	; (800efcc <__libc_init_array+0x44>)
 800ef9c:	f000 f820 	bl	800efe0 <_init>
 800efa0:	1b64      	subs	r4, r4, r5
 800efa2:	10a4      	asrs	r4, r4, #2
 800efa4:	2600      	movs	r6, #0
 800efa6:	42a6      	cmp	r6, r4
 800efa8:	d105      	bne.n	800efb6 <__libc_init_array+0x2e>
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	f855 3b04 	ldr.w	r3, [r5], #4
 800efb0:	4798      	blx	r3
 800efb2:	3601      	adds	r6, #1
 800efb4:	e7ee      	b.n	800ef94 <__libc_init_array+0xc>
 800efb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efba:	4798      	blx	r3
 800efbc:	3601      	adds	r6, #1
 800efbe:	e7f2      	b.n	800efa6 <__libc_init_array+0x1e>
 800efc0:	0800f058 	.word	0x0800f058
 800efc4:	0800f058 	.word	0x0800f058
 800efc8:	0800f058 	.word	0x0800f058
 800efcc:	0800f05c 	.word	0x0800f05c

0800efd0 <memset>:
 800efd0:	4402      	add	r2, r0
 800efd2:	4603      	mov	r3, r0
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d100      	bne.n	800efda <memset+0xa>
 800efd8:	4770      	bx	lr
 800efda:	f803 1b01 	strb.w	r1, [r3], #1
 800efde:	e7f9      	b.n	800efd4 <memset+0x4>

0800efe0 <_init>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	bf00      	nop
 800efe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efe6:	bc08      	pop	{r3}
 800efe8:	469e      	mov	lr, r3
 800efea:	4770      	bx	lr

0800efec <_fini>:
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	bf00      	nop
 800eff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eff2:	bc08      	pop	{r3}
 800eff4:	469e      	mov	lr, r3
 800eff6:	4770      	bx	lr
