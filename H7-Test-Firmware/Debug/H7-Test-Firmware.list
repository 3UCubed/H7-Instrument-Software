
H7-Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800fde8  0800fde8  0001fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe40  0800fe40  0001fe40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe48  0800fe48  0001fe48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fe4c  0800fe4c  0001fe4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000034  24000000  0800fe50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b4  24000040  0800fe84  00020040  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240005f4  0800fe84  000205f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023954  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035e5  00000000  00000000  000439b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  00046fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a8  00000000  00000000  00048a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ada1  00000000  00000000  0004a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002399c  00000000  00000000  000851c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ff4c  00000000  00000000  000a8b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228ab1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007530  00000000  00000000  00228b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fdd0 	.word	0x0800fdd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	0800fdd0 	.word	0x0800fdd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4aab      	ldr	r2, [pc, #684]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 8315 	bne.w	8000c44 <HAL_TIM_OC_DelayElapsedCallback+0x63c>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800061a:	4baa      	ldr	r3, [pc, #680]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 809f 	beq.w	8000762 <HAL_TIM_OC_DelayElapsedCallback+0x15a>
         */

        /* Write to SPI (begin transfer?) */


		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) { 	//check pin state
 8000624:	bf00      	nop
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48a7      	ldr	r0, [pc, #668]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c0>)
 800062c:	f007 f994 	bl	8007958 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		/* Write to SPI (begin transfer?) */
		HAL_SPI_Receive(&hspi2,(uint8_t *)spi2RxBuffer, 1, 1);
 8000636:	2301      	movs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	49a4      	ldr	r1, [pc, #656]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800063c:	48a4      	ldr	r0, [pc, #656]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 800063e:	f00b fa09 	bl	800ba54 <HAL_SPI_Receive>
		uint8_t SPI2_LSB = ((spi2RxBuffer[0] & 0xFF00) >> 8);
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t SPI2_MSB = (spi2RxBuffer[1] & 0xFF);
 8000648:	4ba0      	ldr	r3, [pc, #640]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x2c4>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		hspi2.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000650:	4b9f      	ldr	r3, [pc, #636]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b9e      	ldr	r3, [pc, #632]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x2c8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	601a      	str	r2, [r3, #0]

		uint32_t current_step = DAC_OUT[step];
 8000660:	4b9c      	ldr	r3, [pc, #624]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b9c      	ldr	r3, [pc, #624]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 800066e:	4b99      	ldr	r3, [pc, #612]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x2cc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x2d0>)
 8000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	4897      	ldr	r0, [pc, #604]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000680:	f004 f829 	bl	80046d6 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4895      	ldr	r0, [pc, #596]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x2d4>)
 8000688:	f003 ffd3 	bl	8004632 <HAL_DAC_Start>



        HAL_ADC_Stop_DMA(&hadc1);
 800068c:	4894      	ldr	r0, [pc, #592]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 800068e:	f002 fe03 	bl	8003298 <HAL_ADC_Stop_DMA>
		if (HAL_ADC_Start_DMA(&hadc1,
 8000692:	2220      	movs	r2, #32
 8000694:	4993      	ldr	r1, [pc, #588]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 8000696:	4892      	ldr	r0, [pc, #584]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>)
 8000698:	f002 fd3a 	bl	8003110 <HAL_ADC_Start_DMA>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_TIM_OC_DelayElapsedCallback+0x9e>
			(uint32_t *)aADCxConvertedData,
			 ADC_CONVERTED_DATA_BUFFER_SIZE
		) != HAL_OK) {
		     Error_Handler();
 80006a2:	f001 fb93 	bl	8001dcc <Error_Handler>
		}

		uint16_t PF11 = aADCxConvertedData[13]; 		// ENDmon -- verified
 80006a6:	4b8f      	ldr	r3, [pc, #572]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006a8:	8b5b      	ldrh	r3, [r3, #26]
 80006aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t PA6 = aADCxConvertedData[14]; 			// SWPmon -- verified
 80006ac:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006ae:	8b9b      	ldrh	r3, [r3, #28]
 80006b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t PC4 = aADCxConvertedData[15]; 			// TEMP1 -- verified
 80006b2:	4b8c      	ldr	r3, [pc, #560]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006b4:	8bdb      	ldrh	r3, [r3, #30]
 80006b6:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t PB1 = aADCxConvertedData[0];			// TEMP2 -- verified
 80006b8:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	853b      	strh	r3, [r7, #40]	; 0x28

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80006be:	22aa      	movs	r2, #170	; 0xaa
 80006c0:	4b89      	ldr	r3, [pc, #548]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006c2:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80006c4:	22aa      	movs	r2, #170	; 0xaa
 80006c6:	4b88      	ldr	r3, [pc, #544]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006c8:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80006ca:	4b88      	ldr	r3, [pc, #544]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b84      	ldr	r3, [pc, #528]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006d6:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80006d8:	4b84      	ldr	r3, [pc, #528]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b82      	ldr	r3, [pc, #520]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006e0:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PF11 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80006e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b7f      	ldr	r3, [pc, #508]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006ec:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PF11 & 0xFF);               		// ENDmon LSB
 80006ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b7d      	ldr	r3, [pc, #500]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 80006f4:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA6 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80006f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b7a      	ldr	r3, [pc, #488]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000700:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA6 & 0xFF);               		// SWP Monitored LSB
 8000702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b78      	ldr	r3, [pc, #480]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000708:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PC4 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800070a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000714:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PC4 & 0xFF);               		// TEMPURATURE 1 LSB
 8000716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b73      	ldr	r3, [pc, #460]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800071c:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800071e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b70      	ldr	r3, [pc, #448]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000728:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800072a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b6e      	ldr	r3, [pc, #440]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000730:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = SPI2_MSB;					    // ERPA eADC MSB
 8000732:	4a6d      	ldr	r2, [pc, #436]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 8000734:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000738:	7313      	strb	r3, [r2, #12]
		erpa_buf[13] = SPI2_LSB;          				// ERPA eADC LSB
 800073a:	4a6b      	ldr	r2, [pc, #428]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800073c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000740:	7353      	strb	r3, [r2, #13]


		erpa_seq++;
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b68      	ldr	r3, [pc, #416]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 800074c:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d005      	beq.n	8000762 <HAL_TIM_OC_DelayElapsedCallback+0x15a>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	220e      	movs	r2, #14
 800075a:	4963      	ldr	r1, [pc, #396]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>)
 800075c:	4864      	ldr	r0, [pc, #400]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800075e:	f00c ff43 	bl	800d5e8 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 8000762:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 82b8 	beq.w	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
      {
        if (hk_counter == HK_CADENCE)
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 824e 	bne.w	8000c14 <HAL_TIM_OC_DelayElapsedCallback+0x60c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000778:	2300      	movs	r3, #0
 800077a:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	b299      	uxth	r1, r3
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	485b      	ldr	r0, [pc, #364]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800078e:	f007 f9a5 	bl	8007adc <HAL_I2C_Master_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          if (ret != HAL_OK)
 8000798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4a56      	ldr	r2, [pc, #344]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e024      	b.n	80007fe <HAL_TIM_OC_DelayElapsedCallback+0x1f6>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	b299      	uxth	r1, r3
 80007b8:	f107 0208 	add.w	r2, r7, #8
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2302      	movs	r3, #2
 80007c4:	484d      	ldr	r0, [pc, #308]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 80007c6:	f007 fa7d 	bl	8007cc4 <HAL_I2C_Master_Receive>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80007d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d009      	beq.n	80007ec <HAL_TIM_OC_DelayElapsedCallback+0x1e4>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4a49      	ldr	r2, [pc, #292]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	3302      	adds	r3, #2
 80007e6:	0c12      	lsrs	r2, r2, #16
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e008      	b.n	80007fe <HAL_TIM_OC_DelayElapsedCallback+0x1f6>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80007ec:	7a3b      	ldrb	r3, [r7, #8]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
              output1 = (output1 | buf[1]) >> 3;
 80007f2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80007f6:	7a7a      	ldrb	r2, [r7, #9]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	10db      	asrs	r3, r3, #3
 80007fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80007fe:	2300      	movs	r3, #0
 8000800:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000802:	2394      	movs	r3, #148	; 0x94
 8000804:	b299      	uxth	r1, r3
 8000806:	f107 0208 	add.w	r2, r7, #8
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 8000814:	f007 f962 	bl	8007adc <HAL_I2C_Master_Transmit>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800081e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <HAL_TIM_OC_DelayElapsedCallback+0x232>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4a35      	ldr	r2, [pc, #212]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800082c:	ca07      	ldmia	r2, {r0, r1, r2}
 800082e:	c303      	stmia	r3!, {r0, r1}
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	3302      	adds	r3, #2
 8000834:	0c12      	lsrs	r2, r2, #16
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e024      	b.n	8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800083a:	2394      	movs	r3, #148	; 0x94
 800083c:	b299      	uxth	r1, r3
 800083e:	f107 0208 	add.w	r2, r7, #8
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800084c:	f007 fa3a 	bl	8007cc4 <HAL_I2C_Master_Receive>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800085a:	2b00      	cmp	r3, #0
 800085c:	d009      	beq.n	8000872 <HAL_TIM_OC_DelayElapsedCallback+0x26a>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4a28      	ldr	r2, [pc, #160]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	3302      	adds	r3, #2
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e008      	b.n	8000884 <HAL_TIM_OC_DelayElapsedCallback+0x27c>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000872:	7a3b      	ldrb	r3, [r7, #8]
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	87bb      	strh	r3, [r7, #60]	; 0x3c
              output2 = (output2 | buf[1]) >> 3;
 8000878:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800087c:	7a7a      	ldrb	r2, [r7, #9]
 800087e:	4313      	orrs	r3, r2
 8000880:	10db      	asrs	r3, r3, #3
 8000882:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000884:	2300      	movs	r3, #0
 8000886:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000888:	2392      	movs	r3, #146	; 0x92
 800088a:	b299      	uxth	r1, r3
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800089a:	f007 f91f 	bl	8007adc <HAL_I2C_Master_Transmit>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80008a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d02d      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x300>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 80008b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b4:	c303      	stmia	r3!, {r0, r1}
 80008b6:	801a      	strh	r2, [r3, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e048      	b.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x34a>
 80008c0:	240003d0 	.word	0x240003d0
 80008c4:	24000021 	.word	0x24000021
 80008c8:	58020400 	.word	0x58020400
 80008cc:	240005a8 	.word	0x240005a8
 80008d0:	240002fc 	.word	0x240002fc
 80008d4:	240005a0 	.word	0x240005a0
 80008d8:	24000000 	.word	0x24000000
 80008dc:	24000214 	.word	0x24000214
 80008e0:	2400005c 	.word	0x2400005c
 80008e4:	24000520 	.word	0x24000520
 80008e8:	240005ac 	.word	0x240005ac
 80008ec:	240005ba 	.word	0x240005ba
 80008f0:	2400041c 	.word	0x2400041c
 80008f4:	24000022 	.word	0x24000022
 80008f8:	240005ec 	.word	0x240005ec
 80008fc:	24000228 	.word	0x24000228
 8000900:	0800fde8 	.word	0x0800fde8
 8000904:	0800fdf4 	.word	0x0800fdf4
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000908:	2392      	movs	r3, #146	; 0x92
 800090a:	b299      	uxth	r1, r3
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	482b      	ldr	r0, [pc, #172]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 800091a:	f007 f9d3 	bl	8007cc4 <HAL_I2C_Master_Receive>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 8000924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <HAL_TIM_OC_DelayElapsedCallback+0x338>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000932:	ca07      	ldmia	r2, {r0, r1, r2}
 8000934:	c303      	stmia	r3!, {r0, r1}
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e008      	b.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x34a>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000940:	7a3b      	ldrb	r3, [r7, #8]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	877b      	strh	r3, [r7, #58]	; 0x3a
              output3 = (output3 | buf[1]) >> 3;
 8000946:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800094a:	7a7a      	ldrb	r2, [r7, #9]
 800094c:	4313      	orrs	r3, r2
 800094e:	10db      	asrs	r3, r3, #3
 8000950:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000952:	2300      	movs	r3, #0
 8000954:	723b      	strb	r3, [r7, #8]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000956:	2396      	movs	r3, #150	; 0x96
 8000958:	b299      	uxth	r1, r3
 800095a:	f107 0208 	add.w	r2, r7, #8
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000968:	f007 f8b8 	bl	8007adc <HAL_I2C_Master_Transmit>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000976:	2b00      	cmp	r3, #0
 8000978:	d009      	beq.n	800098e <HAL_TIM_OC_DelayElapsedCallback+0x386>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000980:	ca07      	ldmia	r2, {r0, r1, r2}
 8000982:	c303      	stmia	r3!, {r0, r1}
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	3302      	adds	r3, #2
 8000988:	0c12      	lsrs	r2, r2, #16
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e02b      	b.n	80009e6 <HAL_TIM_OC_DelayElapsedCallback+0x3de>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800098e:	2396      	movs	r3, #150	; 0x96
 8000990:	b299      	uxth	r1, r3
 8000992:	f107 0208 	add.w	r2, r7, #8
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2302      	movs	r3, #2
 800099e:	480a      	ldr	r0, [pc, #40]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80009a0:	f007 f990 	bl	8007cc4 <HAL_I2C_Master_Receive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         1000);
            if (ret != HAL_OK)
 80009aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d010      	beq.n	80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80009b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ba:	c303      	stmia	r3!, {r0, r1}
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	0c12      	lsrs	r2, r2, #16
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e00f      	b.n	80009e6 <HAL_TIM_OC_DelayElapsedCallback+0x3de>
 80009c6:	bf00      	nop
 80009c8:	24000228 	.word	0x24000228
 80009cc:	0800fdf4 	.word	0x0800fdf4
 80009d0:	0800fde8 	.word	0x0800fde8
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	873b      	strh	r3, [r7, #56]	; 0x38
              output4 = (output4 | buf[1]) >> 3;
 80009da:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80009de:	7a7a      	ldrb	r2, [r7, #9]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	10db      	asrs	r3, r3, #3
 80009e4:	873b      	strh	r3, [r7, #56]	; 0x38
            }
          }

          HAL_ADC_Stop_DMA(&hadc3);
 80009e6:	488e      	ldr	r0, [pc, #568]	; (8000c20 <HAL_TIM_OC_DelayElapsedCallback+0x618>)
 80009e8:	f002 fc56 	bl	8003298 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc3,
 80009ec:	2220      	movs	r2, #32
 80009ee:	498d      	ldr	r1, [pc, #564]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 80009f0:	488b      	ldr	r0, [pc, #556]	; (8000c20 <HAL_TIM_OC_DelayElapsedCallback+0x618>)
 80009f2:	f002 fb8d 	bl	8003110 <HAL_ADC_Start_DMA>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
          (uint32_t *)aADC3ConvertedData,
          ADC_CONVERTED_DATA_BUFFER_SIZE)
          != HAL_OK) {
             Error_Handler();
 80009fc:	f001 f9e6 	bl	8001dcc <Error_Handler>
          }

          uint16_t vrefint = aADC3ConvertedData[0];
 8000a00:	4b88      	ldr	r3, [pc, #544]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	84bb      	strh	r3, [r7, #36]	; 0x24
          uint16_t vsense = aADC3ConvertedData[1];
 8000a06:	4b87      	ldr	r3, [pc, #540]	; (8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x61c>)
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	847b      	strh	r3, [r7, #34]	; 0x22


          HAL_ADC_Stop_DMA(&hadc1);
 8000a0c:	4886      	ldr	r0, [pc, #536]	; (8000c28 <HAL_TIM_OC_DelayElapsedCallback+0x620>)
 8000a0e:	f002 fc43 	bl	8003298 <HAL_ADC_Stop_DMA>
          if (HAL_ADC_Start_DMA(&hadc1,
 8000a12:	2220      	movs	r2, #32
 8000a14:	4985      	ldr	r1, [pc, #532]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a16:	4884      	ldr	r0, [pc, #528]	; (8000c28 <HAL_TIM_OC_DelayElapsedCallback+0x620>)
 8000a18:	f002 fb7a 	bl	8003110 <HAL_ADC_Start_DMA>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_TIM_OC_DelayElapsedCallback+0x41e>
          	(uint32_t *)aADCxConvertedData,
          	ADC_CONVERTED_DATA_BUFFER_SIZE)
        	!= HAL_OK) {
          	Error_Handler();
 8000a22:	f001 f9d3 	bl	8001dcc <Error_Handler>
          }

          uint16_t PF12 = aADCxConvertedData[2];		// BUSVmon -- sending as ENDMON
 8000a26:	4b81      	ldr	r3, [pc, #516]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	843b      	strh	r3, [r7, #32]
          uint16_t PA7 = aADCxConvertedData[1];			// BUSImon -- sending as n800vmon
 8000a2c:	4b7f      	ldr	r3, [pc, #508]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a2e:	885b      	ldrh	r3, [r3, #2]
 8000a30:	83fb      	strh	r3, [r7, #30]
          uint16_t PC5 = aADCxConvertedData[4];			// 2v5mon -- verified sending as TMP1 too
 8000a32:	4b7e      	ldr	r3, [pc, #504]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a34:	891b      	ldrh	r3, [r3, #8]
 8000a36:	83bb      	strh	r3, [r7, #28]
          uint16_t PB0 = aADCxConvertedData[5];			// 3v3mon -- verified sending as TMP2 too
 8000a38:	4b7c      	ldr	r3, [pc, #496]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a3a:	895b      	ldrh	r3, [r3, #10]
 8000a3c:	837b      	strh	r3, [r7, #26]
          uint16_t PC0 = aADCxConvertedData[6];			// 5vmon -- verified
 8000a3e:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	833b      	strh	r3, [r7, #24]
          uint16_t PC1 = aADCxConvertedData[7];			// n3v3mon -- verified sending as SWPMon too
 8000a44:	4b79      	ldr	r3, [pc, #484]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a46:	89db      	ldrh	r3, [r3, #14]
 8000a48:	82fb      	strh	r3, [r7, #22]
          uint16_t PA2 = aADCxConvertedData[8];			// n5vmon -- verified
 8000a4a:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a4c:	8a1b      	ldrh	r3, [r3, #16]
 8000a4e:	82bb      	strh	r3, [r7, #20]
          uint16_t PA3 = aADCxConvertedData[9];			// 15vmon -- verified
 8000a50:	4b76      	ldr	r3, [pc, #472]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a52:	8a5b      	ldrh	r3, [r3, #18]
 8000a54:	827b      	strh	r3, [r7, #18]
          uint16_t PA0 = aADCxConvertedData[10];		// 5vrefmon -- verified
 8000a56:	4b75      	ldr	r3, [pc, #468]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a58:	8a9b      	ldrh	r3, [r3, #20]
 8000a5a:	823b      	strh	r3, [r7, #16]
          uint16_t PA1 = aADCxConvertedData[11];		// n200vmon -- verified
 8000a5c:	4b73      	ldr	r3, [pc, #460]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a5e:	8adb      	ldrh	r3, [r3, #22]
 8000a60:	81fb      	strh	r3, [r7, #14]
          uint16_t PA5 = aADCxConvertedData[12];		// n800vmon -- verified
 8000a62:	4b72      	ldr	r3, [pc, #456]	; (8000c2c <HAL_TIM_OC_DelayElapsedCallback+0x624>)
 8000a64:	8b1b      	ldrh	r3, [r3, #24]
 8000a66:	81bb      	strh	r3, [r7, #12]


          hk_buf[0] = hk_sync;                     		// HK SYNC 0xCC MSB					0 SYNC
 8000a68:	22cc      	movs	r2, #204	; 0xcc
 8000a6a:	4b71      	ldr	r3, [pc, #452]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a6c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     		// HK SYNC 0xCC LSB
 8000a6e:	22cc      	movs	r2, #204	; 0xcc
 8000a70:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a72:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    		// HK SEQ # MSB		1 SEQUENCE
 8000a74:	4b6f      	ldr	r3, [pc, #444]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a80:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             		// HK SEQ # LSB
 8000a82:	4b6c      	ldr	r3, [pc, #432]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b69      	ldr	r3, [pc, #420]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a8a:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((vsense & 0xFF00) >> 8);
 8000a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b66      	ldr	r3, [pc, #408]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a96:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (vsense & 0xFF);
 8000a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000a9e:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((vrefint & 0xFF00) >> 8);
 8000aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000aaa:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (vrefint & 0xFF);
 8000aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ab2:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000ab4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000ab8:	121b      	asrs	r3, r3, #8
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000abe:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ac6:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000ac8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000acc:	121b      	asrs	r3, r3, #8
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b57      	ldr	r3, [pc, #348]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ad2:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000ad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ada:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000adc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000ae0:	121b      	asrs	r3, r3, #8
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b52      	ldr	r3, [pc, #328]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ae6:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000ae8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000aee:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000af0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000af4:	121b      	asrs	r3, r3, #8
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000afa:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000afc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b02:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PF12 & 0xFF00) >> 8);
 8000b04:	8c3b      	ldrh	r3, [r7, #32]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b0e:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PF12 & 0xFF);
 8000b10:	8c3b      	ldrh	r3, [r7, #32]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b16:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA7 & 0xFF00) >> 8);
 8000b18:	8bfb      	ldrh	r3, [r7, #30]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b22:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA7 & 0xFF);
 8000b24:	8bfb      	ldrh	r3, [r7, #30]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b2a:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC5 & 0xFF00) >> 8);
 8000b2c:	8bbb      	ldrh	r3, [r7, #28]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b36:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC5 & 0xFF);
 8000b38:	8bbb      	ldrh	r3, [r7, #28]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b3e:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PB0 & 0xFF00) >> 8);
 8000b40:	8b7b      	ldrh	r3, [r7, #26]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b4a:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PB0 & 0xFF);
 8000b4c:	8b7b      	ldrh	r3, [r7, #26]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b52:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC0 & 0xFF00) >> 8);
 8000b54:	8b3b      	ldrh	r3, [r7, #24]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b5e:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC0 & 0xFF);
 8000b60:	8b3b      	ldrh	r3, [r7, #24]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b66:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC1 & 0xFF00) >> 8);
 8000b68:	8afb      	ldrh	r3, [r7, #22]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b72:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC1 & 0xFF);
 8000b74:	8afb      	ldrh	r3, [r7, #22]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b7a:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PA2 & 0xFF00) >> 8);
 8000b7c:	8abb      	ldrh	r3, [r7, #20]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b86:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PA2 & 0xFF);
 8000b88:	8abb      	ldrh	r3, [r7, #20]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b8e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PA3 & 0xFF00) >> 8);
 8000b90:	8a7b      	ldrh	r3, [r7, #18]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000b9a:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PA3 & 0xFF);
 8000b9c:	8a7b      	ldrh	r3, [r7, #18]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000ba2:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PA0 & 0xFF00) >> 8);
 8000ba4:	8a3b      	ldrh	r3, [r7, #16]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]
          hk_buf[33] = (PA0 & 0xFF);
 8000bb2:	8a3b      	ldrh	r3, [r7, #16]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          hk_buf[34] = ((PA1 & 0xFF00) >> 8);
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          hk_buf[35] = (PA1 & 0xFF);
 8000bca:	89fb      	ldrh	r3, [r7, #14]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bd0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          hk_buf[36] = ((PA5 & 0xFF00) >> 8);
 8000bd4:	89bb      	ldrh	r3, [r7, #12]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          hk_buf[37] = (PA5 & 0xFF);
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


          if (HK_ON)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_TIM_OC_DelayElapsedCallback+0x630>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x5f8>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2226      	movs	r2, #38	; 0x26
 8000bf8:	490d      	ldr	r1, [pc, #52]	; (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x628>)
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <HAL_TIM_OC_DelayElapsedCallback+0x634>)
 8000bfc:	f00c fcf4 	bl	800d5e8 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
          hk_seq++;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x62c>)
 8000c10:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000c12:	e063      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
          hk_counter++;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x638>)
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	e05d      	b.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
 8000c20:	240000c0 	.word	0x240000c0
 8000c24:	24000560 	.word	0x24000560
 8000c28:	2400005c 	.word	0x2400005c
 8000c2c:	24000520 	.word	0x24000520
 8000c30:	240005c4 	.word	0x240005c4
 8000c34:	240005ea 	.word	0x240005ea
 8000c38:	24000022 	.word	0x24000022
 8000c3c:	2400041c 	.word	0x2400041c
 8000c40:	240005ec 	.word	0x240005ec
  else if (htim == &htim1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d147      	bne.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
      if (PMT_ON)
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d043      	beq.n	8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x6d4>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c54:	bf00      	nop
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4824      	ldr	r0, [pc, #144]	; (8000cec <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000c5c:	f006 fe7c 	bl	8007958 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f7      	bne.n	8000c56 <HAL_TIM_OC_DelayElapsedCallback+0x64e>
  		HAL_SPI_Receive(&hspi1, (uint8_t *)spi1RxBuffer, 1, 1);
 8000c66:	2301      	movs	r3, #1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4921      	ldr	r1, [pc, #132]	; (8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c6e:	f00a fef1 	bl	800ba54 <HAL_SPI_Receive>
  		uint8_t SPI1_LSB = ((spi1RxBuffer[0] & 0xFF00) >> 8);
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  		uint8_t SPI1_MSB = (spi1RxBuffer[1] & 0xFF);
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		hspi1.Instance->CR1 |= 1<<10; // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c8e:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000c90:	22bb      	movs	r2, #187	; 0xbb
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000c94:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 8000c96:	22bb      	movs	r2, #187	; 0xbb
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000c9a:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000ca8:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cb2:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = SPI1_MSB;
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cba:	7113      	strb	r3, [r2, #4]
		pmt_buf[5] = SPI1_LSB;
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cc2:	7153      	strb	r3, [r2, #5]
		pmt_seq++;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 8000cce:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 8000cd8:	f00c fc86 	bl	800d5e8 <HAL_UART_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3740      	adds	r7, #64	; 0x40
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000384 	.word	0x24000384
 8000ce8:	24000020 	.word	0x24000020
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	240005a4 	.word	0x240005a4
 8000cf4:	24000274 	.word	0x24000274
 8000cf8:	240005bc 	.word	0x240005bc
 8000cfc:	240005c2 	.word	0x240005c2
 8000d00:	2400041c 	.word	0x2400041c

08000d04 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	498e      	ldr	r1, [pc, #568]	; (8000f48 <HAL_UART_RxCpltCallback+0x244>)
 8000d10:	488e      	ldr	r0, [pc, #568]	; (8000f4c <HAL_UART_RxCpltCallback+0x248>)
 8000d12:	f00c fcff 	bl	800d714 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000d16:	4b8c      	ldr	r3, [pc, #560]	; (8000f48 <HAL_UART_RxCpltCallback+0x244>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	73fb      	strb	r3, [r7, #15]

  switch (key)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b1c      	cmp	r3, #28
 8000d20:	f200 810d 	bhi.w	8000f3e <HAL_UART_RxCpltCallback+0x23a>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <HAL_UART_RxCpltCallback+0x28>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000e09 	.word	0x08000e09
 8000d30:	08000e25 	.word	0x08000e25
 8000d34:	08000e41 	.word	0x08000e41
 8000d38:	08000e61 	.word	0x08000e61
 8000d3c:	08000e81 	.word	0x08000e81
 8000d40:	08000e9d 	.word	0x08000e9d
 8000d44:	08000ebd 	.word	0x08000ebd
 8000d48:	08000edd 	.word	0x08000edd
 8000d4c:	08000dbd 	.word	0x08000dbd
 8000d50:	08000dcb 	.word	0x08000dcb
 8000d54:	08000daf 	.word	0x08000daf
 8000d58:	08000da1 	.word	0x08000da1
 8000d5c:	08000ef9 	.word	0x08000ef9
 8000d60:	08000f09 	.word	0x08000f09
 8000d64:	08000f19 	.word	0x08000f19
 8000d68:	08000f29 	.word	0x08000f29
 8000d6c:	08000f11 	.word	0x08000f11
 8000d70:	08000f21 	.word	0x08000f21
 8000d74:	08000f31 	.word	0x08000f31
 8000d78:	08000e17 	.word	0x08000e17
 8000d7c:	08000e33 	.word	0x08000e33
 8000d80:	08000e51 	.word	0x08000e51
 8000d84:	08000e71 	.word	0x08000e71
 8000d88:	08000e8f 	.word	0x08000e8f
 8000d8c:	08000ead 	.word	0x08000ead
 8000d90:	08000ecd 	.word	0x08000ecd
 8000d94:	08000eeb 	.word	0x08000eeb
 8000d98:	08000dd9 	.word	0x08000dd9
 8000d9c:	08000df1 	.word	0x08000df1
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000da0:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_UART_RxCpltCallback+0x24c>)
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	2201      	movs	r2, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f006 fdee 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000dac:	e0c7      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000dae:	4b68      	ldr	r3, [pc, #416]	; (8000f50 <HAL_UART_RxCpltCallback+0x24c>)
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	2200      	movs	r2, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fde7 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000dba:	e0c0      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_UART_RxCpltCallback+0x24c>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fde0 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000dc8:	e0b9      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000dca:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <HAL_UART_RxCpltCallback+0x24c>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fdd9 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000dd6:	e0b2      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000dd8:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	f200 80ab 	bhi.w	8000f38 <HAL_UART_RxCpltCallback+0x234>
    {
      step++;
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000dec:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000dee:	e0a3      	b.n	8000f38 <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x1C:
  {
    if (step > 0)
 8000df0:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80a1 	beq.w	8000f3c <HAL_UART_RxCpltCallback+0x238>
    {
      step--;
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b54      	ldr	r3, [pc, #336]	; (8000f54 <HAL_UART_RxCpltCallback+0x250>)
 8000e04:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000e06:	e099      	b.n	8000f3c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_UART_RxCpltCallback+0x254>)
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fdba 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e14:	e093      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e16:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_UART_RxCpltCallback+0x254>)
 8000e18:	2120      	movs	r1, #32
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f006 fdb3 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e22:	e08c      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_UART_RxCpltCallback+0x254>)
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 fdac 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e30:	e085      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_UART_RxCpltCallback+0x254>)
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	2200      	movs	r2, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f006 fda5 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e3e:	e07e      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e46:	2201      	movs	r2, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fd9d 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e4e:	e076      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e50:	4b42      	ldr	r3, [pc, #264]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e56:	2200      	movs	r2, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fd95 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e5e:	e06e      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e60:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	2201      	movs	r2, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fd8d 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e6e:	e066      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e76:	2200      	movs	r2, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fd85 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e7e:	e05e      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	2201      	movs	r2, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fd7e 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e8c:	e057      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	2200      	movs	r2, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fd77 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000e9a:	e050      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fd6f 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000eaa:	e048      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fd67 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000eba:	e040      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f006 fd5f 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000eca:	e038      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fd57 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000eda:	e030      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 fd50 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000ee8:	e029      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_UART_RxCpltCallback+0x258>)
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fd49 	bl	8007988 <HAL_GPIO_WritePin>
    break;
 8000ef6:	e022      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000ef8:	f001 fd14 	bl	8002924 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2001      	movs	r0, #1
 8000f00:	f007 fae6 	bl	80084d0 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000f04:	f7ff fb6a 	bl	80005dc <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_RxCpltCallback+0x25c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    break;
 8000f0e:	e016      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_RxCpltCallback+0x25c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    break;
 8000f16:	e012      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_UART_RxCpltCallback+0x260>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    break;
 8000f1e:	e00e      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_UART_RxCpltCallback+0x260>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
    break;
 8000f26:	e00a      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_UART_RxCpltCallback+0x264>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
    break;
 8000f2e:	e006      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_UART_RxCpltCallback+0x264>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    break;
 8000f36:	e002      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000f3c:	bf00      	nop
  }
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240004ac 	.word	0x240004ac
 8000f4c:	2400041c 	.word	0x2400041c
 8000f50:	58021400 	.word	0x58021400
 8000f54:	240005a0 	.word	0x240005a0
 8000f58:	58020400 	.word	0x58020400
 8000f5c:	58020800 	.word	0x58020800
 8000f60:	24000020 	.word	0x24000020
 8000f64:	24000021 	.word	0x24000021
 8000f68:	24000022 	.word	0x24000022

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f001 fc22 	bl	80027b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f884 	bl	8001080 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f78:	f000 f908 	bl	800118c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 fd8e 	bl	8001a9c <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f80:	f000 fb0c 	bl	800159c <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f84:	f000 fc2c 	bl	80017e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f88:	f000 fcba 	bl	8001900 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f8c:	f000 fb38 	bl	8001600 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f90:	f000 fb76 	bl	8001680 <MX_SPI1_Init>
  MX_DMA_Init();
 8000f94:	f000 fd5a 	bl	8001a4c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f98:	f000 f926 	bl	80011e8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f9c:	f000 fd0a 	bl	80019b4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000fa0:	f000 fa88 	bl	80014b4 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000fa4:	f000 fbc4 	bl	8001730 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	482d      	ldr	r0, [pc, #180]	; (8001060 <main+0xf4>)
 8000fac:	f003 fb41 	bl	8004632 <HAL_DAC_Start>


  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000fb0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fb8:	482a      	ldr	r0, [pc, #168]	; (8001064 <main+0xf8>)
 8000fba:	f003 f8c7 	bl	800414c <HAL_ADCEx_Calibration_Start>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <main+0x5c>
  {
    /* Calibration Error */
    Error_Handler();
 8000fc4:	f000 ff02 	bl	8001dcc <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000fc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fd0:	4825      	ldr	r0, [pc, #148]	; (8001068 <main+0xfc>)
 8000fd2:	f003 f8bb 	bl	800414c <HAL_ADCEx_Calibration_Start>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <main+0x74>
  {
	/* Calibration Error */
	Error_Handler();
 8000fdc:	f000 fef6 	bl	8001dcc <Error_Handler>
  }

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4822      	ldr	r0, [pc, #136]	; (800106c <main+0x100>)
 8000fe4:	f00b f9e4 	bl	800c3b0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fe8:	210c      	movs	r1, #12
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0x104>)
 8000fec:	f00b f9e0 	bl	800c3b0 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000ff0:	bf00      	nop
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <main+0x108>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d0f7      	beq.n	8000ff2 <main+0x86>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001002:	bf00      	nop
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <main+0x108>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001012:	d1f7      	bne.n	8001004 <main+0x98>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <main+0x10c>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <main+0x10c>)
 800101c:	2210      	movs	r2, #16
 800101e:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <main+0x10c>)
 8001022:	225b      	movs	r2, #91	; 0x5b
 8001024:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <main+0x10c>)
 8001028:	e893 0006 	ldmia.w	r3, {r1, r2}
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <main+0x108>)
 800102e:	f00e fcef 	bl	800fa10 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <main+0xd0>
      Error_Handler();
 8001038:	f000 fec8 	bl	8001dcc <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <main+0x108>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <main+0x108>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800104a:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <main+0x108>)
 800104e:	f00e fd3a 	bl	800fac6 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <main+0x110>)
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <main+0x108>)
 8001058:	f00c fb5c 	bl	800d714 <HAL_UART_Receive_IT>
 800105c:	e7f9      	b.n	8001052 <main+0xe6>
 800105e:	bf00      	nop
 8001060:	24000214 	.word	0x24000214
 8001064:	2400005c 	.word	0x2400005c
 8001068:	240000c0 	.word	0x240000c0
 800106c:	24000384 	.word	0x24000384
 8001070:	240003d0 	.word	0x240003d0
 8001074:	2400041c 	.word	0x2400041c
 8001078:	24000510 	.word	0x24000510
 800107c:	240004ac 	.word	0x240004ac

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09c      	sub	sp, #112	; 0x70
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	224c      	movs	r2, #76	; 0x4c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f00e fe96 	bl	800fdc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2220      	movs	r2, #32
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00e fe90 	bl	800fdc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010a0:	2002      	movs	r0, #2
 80010a2:	f007 fa51 	bl	8008548 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <SystemClock_Config+0x100>)
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	4a34      	ldr	r2, [pc, #208]	; (8001180 <SystemClock_Config+0x100>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <SystemClock_Config+0x100>)
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <SystemClock_Config+0x104>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <SystemClock_Config+0x104>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <SystemClock_Config+0x104>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010dc:	bf00      	nop
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <SystemClock_Config+0x104>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ea:	d1f8      	bne.n	80010de <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <SystemClock_Config+0x108>)
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <SystemClock_Config+0x108>)
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2340      	movs	r3, #64	; 0x40
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001110:	230c      	movs	r3, #12
 8001112:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001120:	230c      	movs	r3, #12
 8001122:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001124:	2300      	movs	r3, #0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4618      	mov	r0, r3
 8001132:	f007 fa43 	bl	80085bc <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800113c:	f000 fe46 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2303      	movs	r3, #3
 8001146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fe56 	bl	8008e18 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001172:	f000 fe2b 	bl	8001dcc <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3770      	adds	r7, #112	; 0x70
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	58000400 	.word	0x58000400
 8001184:	58024800 	.word	0x58024800
 8001188:	58024400 	.word	0x58024400

0800118c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b0      	sub	sp, #192	; 0xc0
 8001190:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	22bc      	movs	r2, #188	; 0xbc
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f00e fe11 	bl	800fdc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011a2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80011a8:	2309      	movs	r3, #9
 80011aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011bc:	2320      	movs	r3, #32
 80011be:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4618      	mov	r0, r3
 80011d0:	f008 f9ae 	bl	8009530 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80011da:	f000 fdf7 	bl	8001dcc <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	37c0      	adds	r7, #192	; 0xc0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800120c:	4b98      	ldr	r3, [pc, #608]	; (8001470 <MX_ADC1_Init+0x288>)
 800120e:	4a99      	ldr	r2, [pc, #612]	; (8001474 <MX_ADC1_Init+0x28c>)
 8001210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001212:	4b97      	ldr	r3, [pc, #604]	; (8001470 <MX_ADC1_Init+0x288>)
 8001214:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001218:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <MX_ADC1_Init+0x288>)
 800121c:	2208      	movs	r2, #8
 800121e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001220:	4b93      	ldr	r3, [pc, #588]	; (8001470 <MX_ADC1_Init+0x288>)
 8001222:	2201      	movs	r2, #1
 8001224:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001226:	4b92      	ldr	r3, [pc, #584]	; (8001470 <MX_ADC1_Init+0x288>)
 8001228:	2204      	movs	r2, #4
 800122a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800122c:	4b90      	ldr	r3, [pc, #576]	; (8001470 <MX_ADC1_Init+0x288>)
 800122e:	2200      	movs	r2, #0
 8001230:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <MX_ADC1_Init+0x288>)
 8001234:	2201      	movs	r2, #1
 8001236:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 15;
 8001238:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <MX_ADC1_Init+0x288>)
 800123a:	220f      	movs	r2, #15
 800123c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <MX_ADC1_Init+0x288>)
 8001240:	2200      	movs	r2, #0
 8001242:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001244:	4b8a      	ldr	r3, [pc, #552]	; (8001470 <MX_ADC1_Init+0x288>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <MX_ADC1_Init+0x288>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001250:	4b87      	ldr	r3, [pc, #540]	; (8001470 <MX_ADC1_Init+0x288>)
 8001252:	2203      	movs	r2, #3
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <MX_ADC1_Init+0x288>)
 8001258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800125e:	4b84      	ldr	r3, [pc, #528]	; (8001470 <MX_ADC1_Init+0x288>)
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001264:	4b82      	ldr	r3, [pc, #520]	; (8001470 <MX_ADC1_Init+0x288>)
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	4880      	ldr	r0, [pc, #512]	; (8001470 <MX_ADC1_Init+0x288>)
 800126e:	f001 fdad 	bl	8002dcc <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001278:	f000 fda8 	bl	8001dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	487a      	ldr	r0, [pc, #488]	; (8001470 <MX_ADC1_Init+0x288>)
 8001288:	f002 ffc4 	bl	8004214 <HAL_ADCEx_MultiModeConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001292:	f000 fd9b 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <MX_ADC1_Init+0x290>)
 8001298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129a:	2306      	movs	r3, #6
 800129c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800129e:	2307      	movs	r3, #7
 80012a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a8:	2304      	movs	r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	486d      	ldr	r0, [pc, #436]	; (8001470 <MX_ADC1_Init+0x288>)
 80012ba:	f002 f859 	bl	8003370 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012c4:	f000 fd82 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012c8:	4b6c      	ldr	r3, [pc, #432]	; (800147c <MX_ADC1_Init+0x294>)
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012cc:	230c      	movs	r3, #12
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4866      	ldr	r0, [pc, #408]	; (8001470 <MX_ADC1_Init+0x288>)
 80012d6:	f002 f84b 	bl	8003370 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80012e0:	f000 fd74 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <MX_ADC1_Init+0x298>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012e8:	2312      	movs	r3, #18
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	485f      	ldr	r0, [pc, #380]	; (8001470 <MX_ADC1_Init+0x288>)
 80012f2:	f002 f83d 	bl	8003370 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012fc:	f000 fd66 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001300:	4b60      	ldr	r3, [pc, #384]	; (8001484 <MX_ADC1_Init+0x29c>)
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001304:	2318      	movs	r3, #24
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4858      	ldr	r0, [pc, #352]	; (8001470 <MX_ADC1_Init+0x288>)
 800130e:	f002 f82f 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001318:	f000 fd58 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800131c:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <MX_ADC1_Init+0x2a0>)
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4851      	ldr	r0, [pc, #324]	; (8001470 <MX_ADC1_Init+0x288>)
 800132c:	f002 f820 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001336:	f000 fd49 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <MX_ADC1_Init+0x2a4>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800133e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4849      	ldr	r0, [pc, #292]	; (8001470 <MX_ADC1_Init+0x288>)
 800134a:	f002 f811 	bl	8003370 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001354:	f000 fd3a 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <MX_ADC1_Init+0x2a8>)
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800135c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4842      	ldr	r0, [pc, #264]	; (8001470 <MX_ADC1_Init+0x288>)
 8001368:	f002 f802 	bl	8003370 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001372:	f000 fd2b 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <MX_ADC1_Init+0x2ac>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800137a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	483a      	ldr	r0, [pc, #232]	; (8001470 <MX_ADC1_Init+0x288>)
 8001386:	f001 fff3 	bl	8003370 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001390:	f000 fd1c 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_ADC1_Init+0x2b0>)
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001398:	f44f 738c 	mov.w	r3, #280	; 0x118
 800139c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4619      	mov	r1, r3
 80013a2:	4833      	ldr	r0, [pc, #204]	; (8001470 <MX_ADC1_Init+0x288>)
 80013a4:	f001 ffe4 	bl	8003370 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80013ae:	f000 fd0d 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <MX_ADC1_Init+0x2b4>)
 80013b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	482b      	ldr	r0, [pc, #172]	; (8001470 <MX_ADC1_Init+0x288>)
 80013c2:	f001 ffd5 	bl	8003370 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80013cc:	f000 fcfe 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_ADC1_Init+0x2b8>)
 80013d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013d4:	f240 2306 	movw	r3, #518	; 0x206
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4824      	ldr	r0, [pc, #144]	; (8001470 <MX_ADC1_Init+0x288>)
 80013e0:	f001 ffc6 	bl	8003370 <HAL_ADC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013ea:	f000 fcef 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_ADC1_Init+0x2bc>)
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80013f2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_ADC1_Init+0x288>)
 80013fe:	f001 ffb7 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001408:	f000 fce0 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC1_Init+0x2c0>)
 800140e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001410:	f240 2312 	movw	r3, #530	; 0x212
 8001414:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <MX_ADC1_Init+0x288>)
 800141c:	f001 ffa8 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8001426:	f000 fcd1 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_ADC1_Init+0x2c4>)
 800142c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800142e:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_ADC1_Init+0x288>)
 800143a:	f001 ff99 	bl	8003370 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x260>
  {
    Error_Handler();
 8001444:	f000 fcc2 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_ADC1_Init+0x2c8>)
 800144a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800144c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001450:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_ADC1_Init+0x288>)
 8001458:	f001 ff8a 	bl	8003370 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0x27e>
  {
    Error_Handler();
 8001462:	f000 fcb3 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2400005c 	.word	0x2400005c
 8001474:	40022000 	.word	0x40022000
 8001478:	08600004 	.word	0x08600004
 800147c:	0c900008 	.word	0x0c900008
 8001480:	10c00010 	.word	0x10c00010
 8001484:	14f00020 	.word	0x14f00020
 8001488:	19200040 	.word	0x19200040
 800148c:	1d500080 	.word	0x1d500080
 8001490:	21800100 	.word	0x21800100
 8001494:	25b00200 	.word	0x25b00200
 8001498:	2a000400 	.word	0x2a000400
 800149c:	2e300800 	.word	0x2e300800
 80014a0:	3ac04000 	.word	0x3ac04000
 80014a4:	3ef08000 	.word	0x3ef08000
 80014a8:	43210000 	.word	0x43210000
 80014ac:	47520000 	.word	0x47520000
 80014b0:	4fb80000 	.word	0x4fb80000

080014b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <MX_ADC3_Init+0xd8>)
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <MX_ADC3_Init+0xdc>)
 80014d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_ADC3_Init+0xd8>)
 80014d4:	2208      	movs	r2, #8
 80014d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_ADC3_Init+0xd8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_ADC3_Init+0xd8>)
 80014e0:	2204      	movs	r2, #4
 80014e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_ADC3_Init+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_ADC3_Init+0xd8>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_ADC3_Init+0xd8>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_ADC3_Init+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_ADC3_Init+0xd8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_ADC3_Init+0xd8>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_ADC3_Init+0xd8>)
 800150a:	2203      	movs	r2, #3
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC3_Init+0xd8>)
 8001510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_ADC3_Init+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_ADC3_Init+0xd8>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <MX_ADC3_Init+0xd8>)
 8001526:	f001 fc51 	bl	8002dcc <HAL_ADC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001530:	f000 fc4c 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_ADC3_Init+0xe0>)
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001538:	2306      	movs	r3, #6
 800153a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800153c:	2307      	movs	r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001540:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001544:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001546:	2304      	movs	r3, #4
 8001548:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_ADC3_Init+0xd8>)
 8001558:	f001 ff0a 	bl	8003370 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001562:	f000 fc33 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_ADC3_Init+0xe4>)
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800156a:	230c      	movs	r3, #12
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_ADC3_Init+0xd8>)
 8001574:	f001 fefc 	bl	8003370 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800157e:	f000 fc25 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	240000c0 	.word	0x240000c0
 8001590:	58026000 	.word	0x58026000
 8001594:	cfb80000 	.word	0xcfb80000
 8001598:	cb840000 	.word	0xcb840000

0800159c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2224      	movs	r2, #36	; 0x24
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e fc09 	bl	800fdc0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_DAC1_Init+0x5c>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_DAC1_Init+0x60>)
 80015b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015b4:	4810      	ldr	r0, [pc, #64]	; (80015f8 <MX_DAC1_Init+0x5c>)
 80015b6:	f003 f81a 	bl	80045ee <HAL_DAC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015c0:	f000 fc04 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_DAC1_Init+0x5c>)
 80015e0:	f003 f89e 	bl	8004720 <HAL_DAC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015ea:	f000 fbef 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000214 	.word	0x24000214
 80015fc:	40007400 	.word	0x40007400

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_I2C1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_I2C1_Init+0x74>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_I2C1_Init+0x7c>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_I2C1_Init+0x74>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_I2C1_Init+0x74>)
 800163c:	f006 f9be 	bl	80079bc <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 fbc1 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_I2C1_Init+0x74>)
 800164e:	f006 fea7 	bl	80083a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 fbb8 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_I2C1_Init+0x74>)
 8001660:	f006 fee9 	bl	8008436 <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fbaf 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000228 	.word	0x24000228
 8001678:	40005400 	.word	0x40005400
 800167c:	20303e5d 	.word	0x20303e5d

08001680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_SPI1_Init+0xa8>)
 8001686:	4a29      	ldr	r2, [pc, #164]	; (800172c <MX_SPI1_Init+0xac>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_SPI1_Init+0xa8>)
 800168c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_SPI1_Init+0xa8>)
 8001694:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001698:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_SPI1_Init+0xa8>)
 800169c:	220f      	movs	r2, #15
 800169e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016b6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_SPI1_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_SPI1_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_SPI1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_SPI1_Init+0xa8>)
 8001714:	f00a f898 	bl	800b848 <HAL_SPI_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800171e:	f000 fb55 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000274 	.word	0x24000274
 800172c:	40013000 	.word	0x40013000

08001730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <MX_SPI2_Init+0xac>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800173c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001744:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001748:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800174c:	220f      	movs	r2, #15
 800174e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800175e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001762:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001766:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800176a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_SPI2_Init+0xa8>)
 80017c4:	f00a f840 	bl	800b848 <HAL_SPI_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017ce:	f000 fafd 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	240002fc 	.word	0x240002fc
 80017dc:	40003800 	.word	0x40003800

080017e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	222c      	movs	r2, #44	; 0x2c
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00e fad7 	bl	800fdc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001814:	4a39      	ldr	r2, [pc, #228]	; (80018fc <MX_TIM1_Init+0x11c>)
 8001816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <MX_TIM1_Init+0x118>)
 800181a:	2263      	movs	r2, #99	; 0x63
 800181c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000 - 1;
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001826:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800182a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <MX_TIM1_Init+0x118>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_TIM1_Init+0x118>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800183e:	482e      	ldr	r0, [pc, #184]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001840:	f00a ff10 	bl	800c664 <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800184a:	f000 fabf 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800185e:	4619      	mov	r1, r3
 8001860:	4825      	ldr	r0, [pc, #148]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001862:	f00b fd47 	bl	800d2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800186c:	f000 faae 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001870:	2360      	movs	r3, #96	; 0x60
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480 -1;
 8001874:	f240 13df 	movw	r3, #479	; 0x1df
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_TIM1_Init+0x118>)
 8001898:	f00b f85a 	bl	800c950 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018a2:	f000 fa93 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM1_Init+0x118>)
 80018dc:	f00b fd98 	bl	800d410 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80018e6:	f000 fa71 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM1_Init+0x118>)
 80018ec:	f000 fd66 	bl	80023bc <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	24000384 	.word	0x24000384
 80018fc:	40010000 	.word	0x40010000

08001900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_TIM2_Init+0xb0>)
 8001926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 -1;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_TIM2_Init+0xb0>)
 800192e:	2263      	movs	r2, #99	; 0x63
 8001930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_TIM2_Init+0xb0>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000 - 1;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM2_Init+0xb0>)
 800193a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800193e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM2_Init+0xb0>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM2_Init+0xb0>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800194c:	4818      	ldr	r0, [pc, #96]	; (80019b0 <MX_TIM2_Init+0xb0>)
 800194e:	f00a fe89 	bl	800c664 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001958:	f000 fa38 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_TIM2_Init+0xb0>)
 800196c:	f00b fcc2 	bl	800d2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001976:	f000 fa29 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197a:	2360      	movs	r3, #96	; 0x60
 800197c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 480 - 1;
 800197e:	f240 13df 	movw	r3, #479	; 0x1df
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	220c      	movs	r2, #12
 8001990:	4619      	mov	r1, r3
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM2_Init+0xb0>)
 8001994:	f00a ffdc 	bl	800c950 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800199e:	f000 fa15 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a2:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM2_Init+0xb0>)
 80019a4:	f000 fd0a 	bl	80023bc <HAL_TIM_MspPostInit>

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	240003d0 	.word	0x240003d0

080019b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <MX_USART1_UART_Init+0x94>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019c0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80019c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019fc:	4811      	ldr	r0, [pc, #68]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 80019fe:	f00b fda3 	bl	800d548 <HAL_UART_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a08:	f000 f9e0 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 8001a10:	f00e f8c5 	bl	800fb9e <HAL_UARTEx_SetTxFifoThreshold>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a1a:	f000 f9d7 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 8001a22:	f00e f8fa 	bl	800fc1a <HAL_UARTEx_SetRxFifoThreshold>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a2c:	f000 f9ce 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_USART1_UART_Init+0x90>)
 8001a32:	f00e f87b 	bl	800fb2c <HAL_UARTEx_DisableFifoMode>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a3c:	f000 f9c6 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2400041c 	.word	0x2400041c
 8001a48:	40011000 	.word	0x40011000

08001a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_DMA_Init+0x4c>)
 8001a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <MX_DMA_Init+0x4c>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <MX_DMA_Init+0x4c>)
 8001a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	200b      	movs	r0, #11
 8001a76:	f002 fd86 	bl	8004586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a7a:	200b      	movs	r0, #11
 8001a7c:	f002 fd9d 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	200c      	movs	r0, #12
 8001a86:	f002 fd7e 	bl	8004586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f002 fd95 	bl	80045ba <HAL_NVIC_EnableIRQ>

}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	58024400 	.word	0x58024400

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	4a43      	ldr	r2, [pc, #268]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <MX_GPIO_Init+0x168>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	21c0      	movs	r1, #192	; 0xc0
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_GPIO_Init+0x16c>)
 8001b6c:	f005 ff0c 	bl	8007988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001b76:	4825      	ldr	r0, [pc, #148]	; (8001c0c <MX_GPIO_Init+0x170>)
 8001b78:	f005 ff06 	bl	8007988 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2160      	movs	r1, #96	; 0x60
 8001b80:	4823      	ldr	r0, [pc, #140]	; (8001c10 <MX_GPIO_Init+0x174>)
 8001b82:	f005 ff01 	bl	8007988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481a      	ldr	r0, [pc, #104]	; (8001c08 <MX_GPIO_Init+0x16c>)
 8001b9e:	f005 fd2b 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ba2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ba6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4814      	ldr	r0, [pc, #80]	; (8001c0c <MX_GPIO_Init+0x170>)
 8001bbc:	f005 fd1c 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bc0:	2360      	movs	r3, #96	; 0x60
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <MX_GPIO_Init+0x178>)
 8001bdc:	f005 fd0c 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_GPIO_Init+0x174>)
 8001bf8:	f005 fcfe 	bl	80075f8 <HAL_GPIO_Init>

}
 8001bfc:	bf00      	nop
 8001bfe:	3730      	adds	r7, #48	; 0x30
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58024400 	.word	0x58024400
 8001c08:	58021400 	.word	0x58021400
 8001c0c:	58020800 	.word	0x58020800
 8001c10:	58020400 	.word	0x58020400
 8001c14:	58020c00 	.word	0x58020c00

08001c18 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d129      	bne.n	8001c7c <HAL_ADC_ConvHalfCpltCallback+0x64>
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dd1d      	ble.n	8001c72 <HAL_ADC_ConvHalfCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	4413      	add	r3, r2
 8001c40:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c46:	f3bf 8f4f 	dsb	sy
}
 8001c4a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001c4c:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	3320      	adds	r3, #32
 8001c58:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b20      	subs	r3, #32
 8001c5e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dcf2      	bgt.n	8001c4c <HAL_ADC_ConvHalfCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c66:	f3bf 8f4f 	dsb	sy
}
 8001c6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c6c:	f3bf 8f6f 	isb	sy
}
 8001c70:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001c72:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001c74:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001c76:	f001 fb0f 	bl	8003298 <HAL_ADC_Stop_DMA>
	} else if (hadc == &hadc3) {
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);
	}

}
 8001c7a:	e02c      	b.n	8001cd6 <HAL_ADC_ConvHalfCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d128      	bne.n	8001cd6 <HAL_ADC_ConvHalfCpltCallback+0xbe>
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	2320      	movs	r3, #32
 8001c8a:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	dd1d      	ble.n	8001cce <HAL_ADC_ConvHalfCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ca2:	f3bf 8f4f 	dsb	sy
}
 8001ca6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	3320      	adds	r3, #32
 8001cb4:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3b20      	subs	r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	dcf2      	bgt.n	8001ca8 <HAL_ADC_ConvHalfCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc2:	f3bf 8f4f 	dsb	sy
}
 8001cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc8:	f3bf 8f6f 	isb	sy
}
 8001ccc:	bf00      	nop
}
 8001cce:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001cd2:	f001 fae1 	bl	8003298 <HAL_ADC_Stop_DMA>
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2400005c 	.word	0x2400005c
 8001ce4:	24000520 	.word	0x24000520
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	240000c0 	.word	0x240000c0

08001cf0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
	if (hadc == &hadc1) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d129      	bne.n	8001d54 <HAL_ADC_ConvCpltCallback+0x64>
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	2320      	movs	r3, #32
 8001d06:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dd1d      	ble.n	8001d4a <HAL_ADC_ConvCpltCallback+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	4413      	add	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1e:	f3bf 8f4f 	dsb	sy
}
 8001d22:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d24:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3320      	adds	r3, #32
 8001d30:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b20      	subs	r3, #32
 8001d36:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dcf2      	bgt.n	8001d24 <HAL_ADC_ConvCpltCallback+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3e:	f3bf 8f4f 	dsb	sy
}
 8001d42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d44:	f3bf 8f6f 	isb	sy
}
 8001d48:	bf00      	nop
}
 8001d4a:	bf00      	nop
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc1);
 8001d4c:	481a      	ldr	r0, [pc, #104]	; (8001db8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001d4e:	f001 faa3 	bl	8003298 <HAL_ADC_Stop_DMA>
		SCB_InvalidateDCache_by_Addr((uint32_t *) &aADC3ConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
		HAL_ADC_Stop_DMA(&hadc3);

	}

}
 8001d52:	e02c      	b.n	8001dae <HAL_ADC_ConvCpltCallback+0xbe>
	} else if (hadc == &hadc3) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d128      	bne.n	8001dae <HAL_ADC_ConvCpltCallback+0xbe>
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	2320      	movs	r3, #32
 8001d62:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	dd1d      	ble.n	8001da6 <HAL_ADC_ConvCpltCallback+0xb6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d80:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b20      	subs	r3, #32
 8001d92:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dcf2      	bgt.n	8001d80 <HAL_ADC_ConvCpltCallback+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9a:	f3bf 8f4f 	dsb	sy
}
 8001d9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001da0:	f3bf 8f6f 	isb	sy
}
 8001da4:	bf00      	nop
}
 8001da6:	bf00      	nop
		HAL_ADC_Stop_DMA(&hadc3);
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001daa:	f001 fa75 	bl	8003298 <HAL_ADC_Stop_DMA>
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2400005c 	.word	0x2400005c
 8001dbc:	24000540 	.word	0x24000540
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	240000c0 	.word	0x240000c0
 8001dc8:	24000580 	.word	0x24000580

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_MspInit+0x30>)
 8001de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_MspInit+0x30>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_MspInit+0x30>)
 8001df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	58024400 	.word	0x58024400

08001e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	; 0x38
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7c      	ldr	r2, [pc, #496]	; (800201c <HAL_ADC_MspInit+0x210>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	f040 80ad 	bne.w	8001f8a <HAL_ADC_MspInit+0x17e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e30:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e36:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e38:	f043 0320 	orr.w	r3, r3, #32
 8001e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e40:	4b77      	ldr	r3, [pc, #476]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b74      	ldr	r3, [pc, #464]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a72      	ldr	r2, [pc, #456]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b70      	ldr	r3, [pc, #448]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e72:	4a6b      	ldr	r2, [pc, #428]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e90:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9a:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea8:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ec6:	2333      	movs	r3, #51	; 0x33
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4852      	ldr	r0, [pc, #328]	; (8002024 <HAL_ADC_MspInit+0x218>)
 8001eda:	f005 fb8d 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ede:	23ef      	movs	r3, #239	; 0xef
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	484d      	ldr	r0, [pc, #308]	; (8002028 <HAL_ADC_MspInit+0x21c>)
 8001ef2:	f005 fb81 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4848      	ldr	r0, [pc, #288]	; (800202c <HAL_ADC_MspInit+0x220>)
 8001f0a:	f005 fb75 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4843      	ldr	r0, [pc, #268]	; (8002030 <HAL_ADC_MspInit+0x224>)
 8001f24:	f005 fb68 	bl	80075f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_ADC_MspInit+0x22c>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f30:	2209      	movs	r2, #9
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f6c:	4831      	ldr	r0, [pc, #196]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f6e:	f002 fd07 	bl	8004980 <HAL_DMA_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_ADC_MspInit+0x170>
    {
      Error_Handler();
 8001f78:	f7ff ff28 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_ADC_MspInit+0x228>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f88:	e043      	b.n	8002012 <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_ADC_MspInit+0x230>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d13e      	bne.n	8002012 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_ADC_MspInit+0x214>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    hdma_adc3.Instance = DMA1_Stream1;
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_ADC_MspInit+0x238>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fba:	2273      	movs	r2, #115	; 0x73
 8001fbc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <HAL_ADC_MspInit+0x234>)
 8001ff8:	f002 fcc2 	bl	8004980 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8002002:	f7ff fee3 	bl	8001dcc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_ADC_MspInit+0x234>)
 800200a:	64da      	str	r2, [r3, #76]	; 0x4c
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <HAL_ADC_MspInit+0x234>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002012:	bf00      	nop
 8002014:	3738      	adds	r7, #56	; 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	58024400 	.word	0x58024400
 8002024:	58020800 	.word	0x58020800
 8002028:	58020000 	.word	0x58020000
 800202c:	58020400 	.word	0x58020400
 8002030:	58021400 	.word	0x58021400
 8002034:	24000124 	.word	0x24000124
 8002038:	40020010 	.word	0x40020010
 800203c:	58026000 	.word	0x58026000
 8002040:	2400019c 	.word	0x2400019c
 8002044:	40020028 	.word	0x40020028

08002048 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_DAC_MspInit+0x80>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d129      	bne.n	80020be <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_DAC_MspInit+0x84>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_DAC_MspInit+0x84>)
 8002072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_DAC_MspInit+0x84>)
 800207c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_DAC_MspInit+0x84>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_DAC_MspInit+0x84>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_DAC_MspInit+0x84>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a6:	2310      	movs	r3, #16
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020aa:	2303      	movs	r3, #3
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <HAL_DAC_MspInit+0x88>)
 80020ba:	f005 fa9d 	bl	80075f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40007400 	.word	0x40007400
 80020cc:	58024400 	.word	0x58024400
 80020d0:	58020000 	.word	0x58020000

080020d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b8      	sub	sp, #224	; 0xe0
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	22bc      	movs	r2, #188	; 0xbc
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00d fe63 	bl	800fdc0 <memset>
  if(hi2c->Instance==I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_I2C_MspInit+0xc0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d142      	bne.n	800218a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002104:	2308      	movs	r3, #8
 8002106:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f007 fa0c 	bl	8009530 <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800211e:	f7ff fe55 	bl	8001dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800215a:	2304      	movs	r3, #4
 800215c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <HAL_I2C_MspInit+0xc8>)
 8002168:	f005 fa46 	bl	80075f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 800216e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_I2C_MspInit+0xc4>)
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	37e0      	adds	r7, #224	; 0xe0
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40005400 	.word	0x40005400
 8002198:	58024400 	.word	0x58024400
 800219c:	58020400 	.word	0x58020400

080021a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0ba      	sub	sp, #232	; 0xe8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	22bc      	movs	r2, #188	; 0xbc
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00d fdfd 	bl	800fdc0 <memset>
  if(hspi->Instance==SPI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_SPI_MspInit+0x150>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d142      	bne.n	8002256 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021da:	f107 0318 	add.w	r3, r7, #24
 80021de:	4618      	mov	r0, r3
 80021e0:	f007 f9a6 	bl	8009530 <HAL_RCCEx_PeriphCLKConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80021ea:	f7ff fdef 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 80021f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f4:	4a3f      	ldr	r2, [pc, #252]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 80021f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 8002200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800222a:	2318      	movs	r3, #24
 800222c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002242:	2305      	movs	r3, #5
 8002244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800224c:	4619      	mov	r1, r3
 800224e:	482a      	ldr	r0, [pc, #168]	; (80022f8 <HAL_SPI_MspInit+0x158>)
 8002250:	f005 f9d2 	bl	80075f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002254:	e047      	b.n	80022e6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a28      	ldr	r2, [pc, #160]	; (80022fc <HAL_SPI_MspInit+0x15c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d142      	bne.n	80022e6 <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002264:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002266:	2300      	movs	r3, #0
 8002268:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	4618      	mov	r0, r3
 8002270:	f007 f95e 	bl	8009530 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800227a:	f7ff fda7 	bl	8001dcc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 8002280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 8002290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a2:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_SPI_MspInit+0x154>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80022ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d4:	2305      	movs	r3, #5
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <HAL_SPI_MspInit+0x158>)
 80022e2:	f005 f989 	bl	80075f8 <HAL_GPIO_Init>
}
 80022e6:	bf00      	nop
 80022e8:	37e8      	adds	r7, #232	; 0xe8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40013000 	.word	0x40013000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020400 	.word	0x58020400
 80022fc:	40003800 	.word	0x40003800

08002300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_TIM_PWM_MspInit+0xb4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12f      	bne.n	8002372 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2018      	movs	r0, #24
 8002336:	f002 f926 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800233a:	2018      	movs	r0, #24
 800233c:	f002 f93d 	bl	80045ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2019      	movs	r0, #25
 8002346:	f002 f91e 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800234a:	2019      	movs	r0, #25
 800234c:	f002 f935 	bl	80045ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	201a      	movs	r0, #26
 8002356:	f002 f916 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800235a:	201a      	movs	r0, #26
 800235c:	f002 f92d 	bl	80045ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	201b      	movs	r0, #27
 8002366:	f002 f90e 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800236a:	201b      	movs	r0, #27
 800236c:	f002 f925 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002370:	e01b      	b.n	80023aa <HAL_TIM_PWM_MspInit+0xaa>
  else if(htim_pwm->Instance==TIM2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d116      	bne.n	80023aa <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 800237e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_TIM_PWM_MspInit+0xb8>)
 800238e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	201c      	movs	r0, #28
 80023a0:	f002 f8f1 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023a4:	201c      	movs	r0, #28
 80023a6:	f002 f908 	bl	80045ba <HAL_NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	58024400 	.word	0x58024400

080023bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_TIM_MspPostInit+0xb8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d120      	bne.n	8002420 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800240e:	2301      	movs	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <HAL_TIM_MspPostInit+0xc0>)
 800241a:	f005 f8ed 	bl	80075f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800241e:	e024      	b.n	800246a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d11f      	bne.n	800246a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_TIM_MspPostInit+0xbc>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <HAL_TIM_MspPostInit+0xc4>)
 8002466:	f005 f8c7 	bl	80075f8 <HAL_GPIO_Init>
}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	58024400 	.word	0x58024400
 800247c:	58020000 	.word	0x58020000
 8002480:	58020400 	.word	0x58020400

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0b8      	sub	sp, #224	; 0xe0
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	22bc      	movs	r2, #188	; 0xbc
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00d fc8b 	bl	800fdc0 <memset>
  if(huart->Instance==USART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_UART_MspInit+0xd0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d14a      	bne.n	800254a <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4618      	mov	r0, r3
 80024c4:	f007 f834 	bl	8009530 <HAL_RCCEx_PeriphCLKConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ce:	f7ff fc7d 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_UART_MspInit+0xd4>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_UART_MspInit+0xd4>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002528:	2307      	movs	r3, #7
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002532:	4619      	mov	r1, r3
 8002534:	4809      	ldr	r0, [pc, #36]	; (800255c <HAL_UART_MspInit+0xd8>)
 8002536:	f005 f85f 	bl	80075f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2025      	movs	r0, #37	; 0x25
 8002540:	f002 f821 	bl	8004586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002544:	2025      	movs	r0, #37	; 0x25
 8002546:	f002 f838 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	37e0      	adds	r7, #224	; 0xe0
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40011000 	.word	0x40011000
 8002558:	58024400 	.word	0x58024400
 800255c:	58020000 	.word	0x58020000

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f976 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Stream0_IRQHandler+0x10>)
 80025ba:	f003 fd0b 	bl	8005fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000124 	.word	0x24000124

080025c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream1_IRQHandler+0x10>)
 80025ce:	f003 fd01 	bl	8005fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2400019c 	.word	0x2400019c

080025dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM1_BRK_IRQHandler+0x10>)
 80025e2:	f00a f896 	bl	800c712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24000384 	.word	0x24000384

080025f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM1_UP_IRQHandler+0x10>)
 80025f6:	f00a f88c 	bl	800c712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24000384 	.word	0x24000384

08002604 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM1_TRG_COM_IRQHandler+0x10>)
 800260a:	f00a f882 	bl	800c712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24000384 	.word	0x24000384

08002618 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM1_CC_IRQHandler+0x10>)
 800261e:	f00a f878 	bl	800c712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000384 	.word	0x24000384

0800262c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM2_IRQHandler+0x10>)
 8002632:	f00a f86e 	bl	800c712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	240003d0 	.word	0x240003d0

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f00b f8bb 	bl	800d7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2400041c 	.word	0x2400041c

08002654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002658:	4b37      	ldr	r3, [pc, #220]	; (8002738 <SystemInit+0xe4>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a36      	ldr	r2, [pc, #216]	; (8002738 <SystemInit+0xe4>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <SystemInit+0xe8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	2b06      	cmp	r3, #6
 8002672:	d807      	bhi.n	8002684 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <SystemInit+0xe8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 030f 	bic.w	r3, r3, #15
 800267c:	4a2f      	ldr	r2, [pc, #188]	; (800273c <SystemInit+0xe8>)
 800267e:	f043 0307 	orr.w	r3, r3, #7
 8002682:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <SystemInit+0xec>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <SystemInit+0xec>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <SystemInit+0xec>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <SystemInit+0xec>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4929      	ldr	r1, [pc, #164]	; (8002740 <SystemInit+0xec>)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <SystemInit+0xf0>)
 800269e:	4013      	ands	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <SystemInit+0xe8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <SystemInit+0xe8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <SystemInit+0xe8>)
 80026b8:	f043 0307 	orr.w	r3, r3, #7
 80026bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <SystemInit+0xec>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <SystemInit+0xec>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <SystemInit+0xec>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <SystemInit+0xec>)
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <SystemInit+0xf4>)
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <SystemInit+0xec>)
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <SystemInit+0xf8>)
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <SystemInit+0xec>)
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <SystemInit+0xfc>)
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <SystemInit+0xec>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <SystemInit+0xec>)
 80026ea:	4a19      	ldr	r2, [pc, #100]	; (8002750 <SystemInit+0xfc>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <SystemInit+0xec>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <SystemInit+0xec>)
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <SystemInit+0xfc>)
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <SystemInit+0xec>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <SystemInit+0xec>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <SystemInit+0xec>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <SystemInit+0xec>)
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <SystemInit+0x100>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <SystemInit+0x104>)
 8002718:	4013      	ands	r3, r2
 800271a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271e:	d202      	bcs.n	8002726 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <SystemInit+0x108>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <SystemInit+0x10c>)
 8002728:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800272c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	52002000 	.word	0x52002000
 8002740:	58024400 	.word	0x58024400
 8002744:	eaf6ed7f 	.word	0xeaf6ed7f
 8002748:	02020200 	.word	0x02020200
 800274c:	01ff0000 	.word	0x01ff0000
 8002750:	01010280 	.word	0x01010280
 8002754:	5c001000 	.word	0x5c001000
 8002758:	ffff0000 	.word	0xffff0000
 800275c:	51008108 	.word	0x51008108
 8002760:	52004000 	.word	0x52004000

08002764 <Reset_Handler>:
 8002764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800279c <LoopFillZerobss+0xe>
 8002768:	f7ff ff74 	bl	8002654 <SystemInit>
 800276c:	480c      	ldr	r0, [pc, #48]	; (80027a0 <LoopFillZerobss+0x12>)
 800276e:	490d      	ldr	r1, [pc, #52]	; (80027a4 <LoopFillZerobss+0x16>)
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <LoopFillZerobss+0x1a>)
 8002772:	2300      	movs	r3, #0
 8002774:	e002      	b.n	800277c <LoopCopyDataInit>

08002776 <CopyDataInit>:
 8002776:	58d4      	ldr	r4, [r2, r3]
 8002778:	50c4      	str	r4, [r0, r3]
 800277a:	3304      	adds	r3, #4

0800277c <LoopCopyDataInit>:
 800277c:	18c4      	adds	r4, r0, r3
 800277e:	428c      	cmp	r4, r1
 8002780:	d3f9      	bcc.n	8002776 <CopyDataInit>
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <LoopFillZerobss+0x1e>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <LoopFillZerobss+0x22>)
 8002786:	2300      	movs	r3, #0
 8002788:	e001      	b.n	800278e <LoopFillZerobss>

0800278a <FillZerobss>:
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	3204      	adds	r2, #4

0800278e <LoopFillZerobss>:
 800278e:	42a2      	cmp	r2, r4
 8002790:	d3fb      	bcc.n	800278a <FillZerobss>
 8002792:	f00d faf1 	bl	800fd78 <__libc_init_array>
 8002796:	f7fe fbe9 	bl	8000f6c <main>
 800279a:	4770      	bx	lr
 800279c:	24080000 	.word	0x24080000
 80027a0:	24000000 	.word	0x24000000
 80027a4:	24000034 	.word	0x24000034
 80027a8:	0800fe50 	.word	0x0800fe50
 80027ac:	24000040 	.word	0x24000040
 80027b0:	240005f4 	.word	0x240005f4

080027b4 <ADC3_IRQHandler>:
 80027b4:	e7fe      	b.n	80027b4 <ADC3_IRQHandler>
	...

080027b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027be:	2003      	movs	r0, #3
 80027c0:	f001 fed6 	bl	8004570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c4:	f006 fcde 	bl	8009184 <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_Init+0x68>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4913      	ldr	r1, [pc, #76]	; (8002824 <HAL_Init+0x6c>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_Init+0x68>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_Init+0x6c>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <HAL_Init+0x70>)
 80027fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027fc:	4a0b      	ldr	r2, [pc, #44]	; (800282c <HAL_Init+0x74>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002802:	200f      	movs	r0, #15
 8002804:	f000 f814 	bl	8002830 <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e002      	b.n	8002818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7ff fae1 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024400 	.word	0x58024400
 8002824:	0800fe00 	.word	0x0800fe00
 8002828:	24000028 	.word	0x24000028
 800282c:	24000024 	.word	0x24000024

08002830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_InitTick+0x60>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e021      	b.n	8002888 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_InitTick+0x64>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_InitTick+0x60>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f001 febb 	bl	80045d6 <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002878:	f001 fe85 	bl	8004586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_InitTick+0x68>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	24000030 	.word	0x24000030
 8002894:	24000024 	.word	0x24000024
 8002898:	2400002c 	.word	0x2400002c

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	24000030 	.word	0x24000030
 80028c0:	240005f0 	.word	0x240005f0

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	240005f0 	.word	0x240005f0

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	24000030 	.word	0x24000030

08002924 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_SuspendTick+0x1c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_SuspendTick+0x1c>)
 800292e:	f023 0302 	bic.w	r3, r3, #2
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetREVID+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0c1b      	lsrs	r3, r3, #16
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	5c001000 	.word	0x5c001000

0800295c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
  }
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3330      	adds	r3, #48	; 0x30
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	4413      	add	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	211f      	movs	r1, #31
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 011f 	and.w	r1, r3, #31
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f023 0203 	bic.w	r2, r3, #3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0e5b      	lsrs	r3, r3, #25
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0d1b      	lsrs	r3, r3, #20
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	401a      	ands	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	0d1b      	lsrs	r3, r3, #20
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0318 	and.w	r3, r3, #24
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b8c:	40d9      	lsrs	r1, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	400b      	ands	r3, r1
 8002b92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	000fffff 	.word	0x000fffff

08002bb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <LL_ADC_DisableDeepPowerDown+0x20>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6093      	str	r3, [r2, #8]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	5fffffc0 	.word	0x5fffffc0

08002bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <LL_ADC_EnableInternalRegulator+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	6fffffc0 	.word	0x6fffffc0

08002c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <LL_ADC_Enable+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	7fffffc0 	.word	0x7fffffc0

08002c90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_ADC_Disable+0x24>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f043 0202 	orr.w	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	7fffffc0 	.word	0x7fffffc0

08002cb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <LL_ADC_IsEnabled+0x18>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_ADC_IsEnabled+0x1a>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsDisableOngoing+0x18>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsDisableOngoing+0x1a>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_ADC_REG_StartConversion+0x24>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	7fffffc0 	.word	0x7fffffc0

08002d2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LL_ADC_REG_StopConversion+0x24>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f043 0210 	orr.w	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	7fffffc0 	.word	0x7fffffc0

08002d54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <LL_ADC_INJ_StopConversion+0x24>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	7fffffc0 	.word	0x7fffffc0

08002da4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e18f      	b.n	8003106 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff f809 	bl	8001e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff feef 	bl	8002bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fed5 	bl	8002bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff0a 	bl	8002c40 <LL_ADC_IsInternalRegulatorEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d114      	bne.n	8002e5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff feee 	bl	8002c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3c:	4b87      	ldr	r3, [pc, #540]	; (800305c <HAL_ADC_Init+0x290>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_ADC_Init+0x294>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e4e:	e002      	b.n	8002e56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff feed 	bl	8002c40 <LL_ADC_IsInternalRegulatorEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff61 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8002e92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8129 	bne.w	80030f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8125 	bne.w	80030f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fefa 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d136      	bne.n	8002f38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_ADC_Init+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_Init+0x112>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10e      	bne.n	8002efc <HAL_ADC_Init+0x130>
 8002ede:	4861      	ldr	r0, [pc, #388]	; (8003064 <HAL_ADC_Init+0x298>)
 8002ee0:	f7ff feea 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4860      	ldr	r0, [pc, #384]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002ee8:	f7ff fee6 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e008      	b.n	8002f0e <HAL_ADC_Init+0x142>
 8002efc:	485b      	ldr	r0, [pc, #364]	; (800306c <HAL_ADC_Init+0x2a0>)
 8002efe:	f7ff fedb 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d012      	beq.n	8002f38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a53      	ldr	r2, [pc, #332]	; (8003064 <HAL_ADC_Init+0x298>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_ADC_Init+0x15a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_ADC_Init+0x29c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0x15e>
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_ADC_Init+0x2a4>)
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0x160>
 8002f2a:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_ADC_Init+0x2a8>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7ff fd12 	bl	800295c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f38:	f7ff fd04 	bl	8002944 <HAL_GetREVID>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d914      	bls.n	8002f70 <HAL_ADC_Init+0x1a4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d110      	bne.n	8002f70 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7d5b      	ldrb	r3, [r3, #21]
 8002f52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7f1b      	ldrb	r3, [r3, #28]
 8002f64:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f66:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f68:	f043 030c 	orr.w	r3, r3, #12
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e00d      	b.n	8002f8c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7d5b      	ldrb	r3, [r3, #21]
 8002f74:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f7a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f80:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7f1b      	ldrb	r3, [r3, #28]
 8002f86:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7f1b      	ldrb	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	045b      	lsls	r3, r3, #17
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <HAL_ADC_Init+0x2ac>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff febc 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8002fdc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fede 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8002fe8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d15f      	bne.n	80030b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15c      	bne.n	80030b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7d1b      	ldrb	r3, [r3, #20]
 8002ffa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_ADC_Init+0x2b0>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	430b      	orrs	r3, r1
 8003016:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	2b01      	cmp	r3, #1
 8003020:	d130      	bne.n	8003084 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_ADC_Init+0x2b4>)
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003036:	3a01      	subs	r2, #1
 8003038:	0411      	lsls	r1, r2, #16
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800304a:	430a      	orrs	r2, r1
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	611a      	str	r2, [r3, #16]
 8003058:	e01c      	b.n	8003094 <HAL_ADC_Init+0x2c8>
 800305a:	bf00      	nop
 800305c:	24000024 	.word	0x24000024
 8003060:	053e2d63 	.word	0x053e2d63
 8003064:	40022000 	.word	0x40022000
 8003068:	40022100 	.word	0x40022100
 800306c:	58026000 	.word	0x58026000
 8003070:	40022300 	.word	0x40022300
 8003074:	58026300 	.word	0x58026300
 8003078:	fff0c003 	.word	0xfff0c003
 800307c:	ffffbffc 	.word	0xffffbffc
 8003080:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 feea 	bl	8003e84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f023 010f 	bic.w	r1, r3, #15
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
 80030d0:	e007      	b.n	80030e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 020f 	bic.w	r2, r2, #15
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
 80030f2:	e007      	b.n	8003104 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003104:	7ffb      	ldrb	r3, [r7, #31]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	bf00      	nop

08003110 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a55      	ldr	r2, [pc, #340]	; (8003278 <HAL_ADC_Start_DMA+0x168>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_Start_DMA+0x20>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a54      	ldr	r2, [pc, #336]	; (800327c <HAL_ADC_Start_DMA+0x16c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_ADC_Start_DMA+0x24>
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_ADC_Start_DMA+0x170>)
 8003132:	e000      	b.n	8003136 <HAL_ADC_Start_DMA+0x26>
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_ADC_Start_DMA+0x174>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fd3a 	bl	8002bb0 <LL_ADC_GetMultimode>
 800313c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fe06 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 808c 	bne.w	8003268 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_ADC_Start_DMA+0x4e>
 800315a:	2302      	movs	r3, #2
 800315c:	e087      	b.n	800326e <HAL_ADC_Start_DMA+0x15e>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d002      	beq.n	8003178 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d170      	bne.n	800325a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fd05 	bl	8003b88 <ADC_Enable>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d163      	bne.n	8003250 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_ADC_Start_DMA+0x178>)
 800318e:	4013      	ands	r3, r2
 8003190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_ADC_Start_DMA+0x16c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d002      	beq.n	80031a8 <HAL_ADC_Start_DMA+0x98>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	e000      	b.n	80031aa <HAL_ADC_Start_DMA+0x9a>
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_ADC_Start_DMA+0x168>)
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f023 0206 	bic.w	r2, r3, #6
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	659a      	str	r2, [r3, #88]	; 0x58
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_ADC_Start_DMA+0x17c>)
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_ADC_Start_DMA+0x180>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_ADC_Start_DMA+0x184>)
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	221c      	movs	r2, #28
 8003202:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0210 	orr.w	r2, r2, #16
 800321a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7ff fc5f 	bl	8002aea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3340      	adds	r3, #64	; 0x40
 8003236:	4619      	mov	r1, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f001 fefc 	bl	8005038 <HAL_DMA_Start_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fd5b 	bl	8002d04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800324e:	e00d      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003258:	e008      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003266:	e001      	b.n	800326c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40022100 	.word	0x40022100
 8003280:	40022300 	.word	0x40022300
 8003284:	58026300 	.word	0x58026300
 8003288:	fffff0fe 	.word	0xfffff0fe
 800328c:	08003d5b 	.word	0x08003d5b
 8003290:	08003e33 	.word	0x08003e33
 8003294:	08003e4f 	.word	0x08003e4f

08003298 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_Stop_DMA+0x16>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e04f      	b.n	800334e <HAL_ADC_Stop_DMA+0xb6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032b6:	2103      	movs	r1, #3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fba9 	bl	8003a10 <ADC_ConversionStop>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13d      	bne.n	8003344 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0203 	bic.w	r2, r2, #3
 80032d6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d10f      	bne.n	8003306 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 f90e 	bl	800550c <HAL_DMA_Abort>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0210 	bic.w	r2, r2, #16
 8003314:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fcbd 	bl	8003c9c <ADC_Disable>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e002      	b.n	800332e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fcb7 	bl	8003c9c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_ADC_Stop_DMA+0xc0>)
 800333a:	4013      	ands	r3, r2
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	ffffeefe 	.word	0xffffeefe

0800335c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b0a1      	sub	sp, #132	; 0x84
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a9d      	ldr	r2, [pc, #628]	; (8003600 <HAL_ADC_ConfigChannel+0x290>)
 800338a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x2a>
 8003396:	2302      	movs	r3, #2
 8003398:	e321      	b.n	80039de <HAL_ADC_ConfigChannel+0x66e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fcd4 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 8306 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x62>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2201      	movs	r2, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	e016      	b.n	8003400 <HAL_ADC_ConfigChannel+0x90>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80033ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2201      	movs	r2, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	69d1      	ldr	r1, [r2, #28]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	430b      	orrs	r3, r1
 800340c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	f7ff fb39 	bl	8002a92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fc95 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 800342a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fcb7 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8003436:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 80b3 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 80af 	bne.w	80035a6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	461a      	mov	r2, r3
 8003456:	f7ff fb5b 	bl	8002b10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800345a:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_ADC_ConfigChannel+0x294>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003466:	d10b      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x110>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	e01d      	b.n	80034bc <HAL_ADC_ConfigChannel+0x14c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x136>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	e00a      	b.n	80034bc <HAL_ADC_ConfigChannel+0x14c>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d027      	beq.n	8003516 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d4:	f7ff fa76 	bl	80029c4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	7e5b      	ldrb	r3, [r3, #25]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x17e>
 80034e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034ec:	e000      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x180>
 80034ee:	2300      	movs	r3, #0
 80034f0:	461a      	mov	r2, r3
 80034f2:	f7ff faa0 	bl	8002a36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	7e1b      	ldrb	r3, [r3, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_ADC_ConfigChannel+0x19c>
 8003506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800350a:	e000      	b.n	800350e <HAL_ADC_ConfigChannel+0x19e>
 800350c:	2300      	movs	r3, #0
 800350e:	461a      	mov	r2, r3
 8003510:	f7ff fa78 	bl	8002a04 <LL_ADC_SetDataRightShift>
 8003514:	e047      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	069b      	lsls	r3, r3, #26
 8003526:	429a      	cmp	r2, r3
 8003528:	d107      	bne.n	800353a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	069b      	lsls	r3, r3, #26
 800354a:	429a      	cmp	r2, r3
 800354c:	d107      	bne.n	800355e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800355c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	429a      	cmp	r2, r3
 8003570:	d107      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003580:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	069b      	lsls	r3, r3, #26
 8003592:	429a      	cmp	r2, r3
 8003594:	d107      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fb84 	bl	8002cb8 <LL_ADC_IsEnabled>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 820d 	bne.w	80039d2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff facf 	bl	8002b68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <HAL_ADC_ConfigChannel+0x290>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	f040 8133 	bne.w	800383c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d110      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x298>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2b09      	cmp	r3, #9
 80035f4:	bf94      	ite	ls
 80035f6:	2301      	movls	r3, #1
 80035f8:	2300      	movhi	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e01e      	b.n	800363c <HAL_ADC_ConfigChannel+0x2cc>
 80035fe:	bf00      	nop
 8003600:	47ff0000 	.word	0x47ff0000
 8003604:	5c001000 	.word	0x5c001000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003618:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2b09      	cmp	r3, #9
 8003634:	bf94      	ite	ls
 8003636:	2301      	movls	r3, #1
 8003638:	2300      	movhi	r3, #0
 800363a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363c:	2b00      	cmp	r3, #0
 800363e:	d079      	beq.n	8003734 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <HAL_ADC_ConfigChannel+0x2ec>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	3301      	adds	r3, #1
 8003654:	069b      	lsls	r3, r3, #26
 8003656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800365a:	e015      	b.n	8003688 <HAL_ADC_ConfigChannel+0x318>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e003      	b.n	8003680 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x338>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	3301      	adds	r3, #1
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	e017      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x368>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e003      	b.n	80036cc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	ea42 0103 	orr.w	r1, r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x38e>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	051b      	lsls	r3, r3, #20
 80036fc:	e018      	b.n	8003730 <HAL_ADC_ConfigChannel+0x3c0>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e003      	b.n	8003722 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003730:	430b      	orrs	r3, r1
 8003732:	e07e      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x3e0>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	3301      	adds	r3, #1
 8003748:	069b      	lsls	r3, r3, #26
 800374a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800374e:	e015      	b.n	800377c <HAL_ADC_ConfigChannel+0x40c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_ADC_ConfigChannel+0x42c>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	3301      	adds	r3, #1
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	e017      	b.n	80037cc <HAL_ADC_ConfigChannel+0x45c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	61bb      	str	r3, [r7, #24]
  return result;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e003      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	ea42 0103 	orr.w	r1, r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x488>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	3b1e      	subs	r3, #30
 80037f0:	051b      	lsls	r3, r3, #20
 80037f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037f6:	e01b      	b.n	8003830 <HAL_ADC_ConfigChannel+0x4c0>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	60fb      	str	r3, [r7, #12]
  return result;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e003      	b.n	800381c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f003 021f 	and.w	r2, r3, #31
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	3b1e      	subs	r3, #30
 800382a:	051b      	lsls	r3, r3, #20
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003830:	430b      	orrs	r3, r1
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	6892      	ldr	r2, [r2, #8]
 8003836:	4619      	mov	r1, r3
 8003838:	f7ff f96a 	bl	8002b10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f280 80c6 	bge.w	80039d2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_ADC_ConfigChannel+0x4ea>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x4ee>
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_ADC_ConfigChannel+0x680>)
 800385c:	e000      	b.n	8003860 <HAL_ADC_ConfigChannel+0x4f0>
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_ADC_ConfigChannel+0x684>)
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f8a1 	bl	80029a8 <LL_ADC_GetCommonPathInternalCh>
 8003866:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_ADC_ConfigChannel+0x50c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10e      	bne.n	800389a <HAL_ADC_ConfigChannel+0x52a>
 800387c:	485a      	ldr	r0, [pc, #360]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 800387e:	f7ff fa1b 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003882:	4604      	mov	r4, r0
 8003884:	4859      	ldr	r0, [pc, #356]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 8003886:	f7ff fa17 	bl	8002cb8 <LL_ADC_IsEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	4323      	orrs	r3, r4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e008      	b.n	80038ac <HAL_ADC_ConfigChannel+0x53c>
 800389a:	4857      	ldr	r0, [pc, #348]	; (80039f8 <HAL_ADC_ConfigChannel+0x688>)
 800389c:	f7ff fa0c 	bl	8002cb8 <LL_ADC_IsEnabled>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d07d      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_ADC_ConfigChannel+0x68c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d130      	bne.n	800391c <HAL_ADC_ConfigChannel+0x5ac>
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d12b      	bne.n	800391c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_ADC_ConfigChannel+0x688>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	f040 8081 	bne.w	80039d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_ADC_ConfigChannel+0x574>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a43      	ldr	r2, [pc, #268]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x578>
 80038e4:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_ADC_ConfigChannel+0x680>)
 80038e6:	e000      	b.n	80038ea <HAL_ADC_ConfigChannel+0x57a>
 80038e8:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <HAL_ADC_ConfigChannel+0x684>)
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7ff f845 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_ADC_ConfigChannel+0x690>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	4a41      	ldr	r2, [pc, #260]	; (8003a04 <HAL_ADC_ConfigChannel+0x694>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800390c:	e002      	b.n	8003914 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3b01      	subs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800391a:	e05a      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_ADC_ConfigChannel+0x698>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d11e      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x5f4>
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d119      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_ADC_ConfigChannel+0x688>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d14b      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_ADC_ConfigChannel+0x5de>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x5e2>
 800394e:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_ADC_ConfigChannel+0x680>)
 8003950:	e000      	b.n	8003954 <HAL_ADC_ConfigChannel+0x5e4>
 8003952:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_ADC_ConfigChannel+0x684>)
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f7ff f810 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003962:	e036      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_ConfigChannel+0x69c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d131      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d12c      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_ADC_ConfigChannel+0x688>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d127      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_ADC_ConfigChannel+0x678>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x626>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a16      	ldr	r2, [pc, #88]	; (80039ec <HAL_ADC_ConfigChannel+0x67c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x62a>
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_ADC_ConfigChannel+0x680>)
 8003998:	e000      	b.n	800399c <HAL_ADC_ConfigChannel+0x62c>
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <HAL_ADC_ConfigChannel+0x684>)
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7fe ffec 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
 80039aa:	e012      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039be:	e008      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3784      	adds	r7, #132	; 0x84
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40022100 	.word	0x40022100
 80039f0:	40022300 	.word	0x40022300
 80039f4:	58026300 	.word	0x58026300
 80039f8:	58026000 	.word	0x58026000
 80039fc:	cb840000 	.word	0xcb840000
 8003a00:	24000024 	.word	0x24000024
 8003a04:	053e2d63 	.word	0x053e2d63
 8003a08:	c7520000 	.word	0xc7520000
 8003a0c:	cfb80000 	.word	0xcfb80000

08003a10 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f994 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f9b6 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8003a38:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8098 	beq.w	8003b78 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02a      	beq.n	8003aac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7d5b      	ldrb	r3, [r3, #21]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d126      	bne.n	8003aac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7d1b      	ldrb	r3, [r3, #20]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d122      	bne.n	8003aac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a6a:	e014      	b.n	8003a96 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4a45      	ldr	r2, [pc, #276]	; (8003b84 <ADC_ConversionStop+0x174>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d90d      	bls.n	8003a90 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e074      	b.n	8003b7a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d1e3      	bne.n	8003a6c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d014      	beq.n	8003adc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f94c 	bl	8002d54 <LL_ADC_REG_IsConversionOngoing>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f909 	bl	8002cde <LL_ADC_IsDisableOngoing>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f928 	bl	8002d2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d014      	beq.n	8003b0c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f95c 	bl	8002da4 <LL_ADC_INJ_IsConversionOngoing>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f8f1 	bl	8002cde <LL_ADC_IsDisableOngoing>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff f938 	bl	8002d7c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d005      	beq.n	8003b1e <ADC_ConversionStop+0x10e>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d105      	bne.n	8003b24 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b18:	230c      	movs	r3, #12
 8003b1a:	617b      	str	r3, [r7, #20]
        break;
 8003b1c:	e005      	b.n	8003b2a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b1e:	2308      	movs	r3, #8
 8003b20:	617b      	str	r3, [r7, #20]
        break;
 8003b22:	e002      	b.n	8003b2a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b24:	2304      	movs	r3, #4
 8003b26:	617b      	str	r3, [r7, #20]
        break;
 8003b28:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b2a:	f7fe fecb 	bl	80028c4 <HAL_GetTick>
 8003b2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b30:	e01b      	b.n	8003b6a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b32:	f7fe fec7 	bl	80028c4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d914      	bls.n	8003b6a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e007      	b.n	8003b7a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1dc      	bne.n	8003b32 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	000cdbff 	.word	0x000cdbff

08003b88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f88f 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d16e      	bne.n	8003c7e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <ADC_Enable+0x100>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e05a      	b.n	8003c80 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f84a 	bl	8002c68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bd4:	f7fe fe76 	bl	80028c4 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <ADC_Enable+0x104>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <ADC_Enable+0x66>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a29      	ldr	r2, [pc, #164]	; (8003c90 <ADC_Enable+0x108>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <ADC_Enable+0x6a>
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <ADC_Enable+0x10c>)
 8003bf0:	e000      	b.n	8003bf4 <ADC_Enable+0x6c>
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <ADC_Enable+0x110>)
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe ffdb 	bl	8002bb0 <LL_ADC_GetMultimode>
 8003bfa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <ADC_Enable+0x108>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d002      	beq.n	8003c0c <ADC_Enable+0x84>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e000      	b.n	8003c0e <ADC_Enable+0x86>
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <ADC_Enable+0x104>)
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02c      	beq.n	8003c70 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d130      	bne.n	8003c7e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c1c:	e028      	b.n	8003c70 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f848 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff f818 	bl	8002c68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c38:	f7fe fe44 	bl	80028c4 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d914      	bls.n	8003c70 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d00d      	beq.n	8003c70 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d1cf      	bne.n	8003c1e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	8000003f 	.word	0x8000003f
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40022100 	.word	0x40022100
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300

08003c9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f818 	bl	8002cde <LL_ADC_IsDisableOngoing>
 8003cae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe ffff 	bl	8002cb8 <LL_ADC_IsEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d047      	beq.n	8003d50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d144      	bne.n	8003d50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 030d 	and.w	r3, r3, #13
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10c      	bne.n	8003cee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe ffd9 	bl	8002c90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ce6:	f7fe fded 	bl	80028c4 <HAL_GetTick>
 8003cea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cec:	e029      	b.n	8003d42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f043 0210 	orr.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e023      	b.n	8003d52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d0a:	f7fe fddb 	bl	80028c4 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d914      	bls.n	8003d42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f043 0210 	orr.w	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f043 0201 	orr.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e007      	b.n	8003d52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1dc      	bne.n	8003d0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d14b      	bne.n	8003e0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d021      	beq.n	8003dd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fe6a 	bl	8002a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d032      	beq.n	8003e04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d12b      	bne.n	8003e04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11f      	bne.n	8003e04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
 8003dd0:	e018      	b.n	8003e04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d111      	bne.n	8003e04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7fd ff73 	bl	8001cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e0a:	e00e      	b.n	8003e2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fa9f 	bl	800335c <HAL_ADC_ErrorCallback>
}
 8003e1e:	e004      	b.n	8003e2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7fd fee9 	bl	8001c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff fa71 	bl	800335c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a79      	ldr	r2, [pc, #484]	; (8004078 <ADC_ConfigureBoostMode+0x1f4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <ADC_ConfigureBoostMode+0x1c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a78      	ldr	r2, [pc, #480]	; (800407c <ADC_ConfigureBoostMode+0x1f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d109      	bne.n	8003eb4 <ADC_ConfigureBoostMode+0x30>
 8003ea0:	4b77      	ldr	r3, [pc, #476]	; (8004080 <ADC_ConfigureBoostMode+0x1fc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e008      	b.n	8003ec6 <ADC_ConfigureBoostMode+0x42>
 8003eb4:	4b73      	ldr	r3, [pc, #460]	; (8004084 <ADC_ConfigureBoostMode+0x200>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01c      	beq.n	8003f04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003eca:	f005 fad5 	bl	8009478 <HAL_RCC_GetHCLKFreq>
 8003ece:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ed8:	d010      	beq.n	8003efc <ADC_ConfigureBoostMode+0x78>
 8003eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ede:	d871      	bhi.n	8003fc4 <ADC_ConfigureBoostMode+0x140>
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d002      	beq.n	8003eec <ADC_ConfigureBoostMode+0x68>
 8003ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eea:	d16b      	bne.n	8003fc4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	60fb      	str	r3, [r7, #12]
        break;
 8003efa:	e066      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	60fb      	str	r3, [r7, #12]
        break;
 8003f02:	e062      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f08:	f006 fa58 	bl	800a3bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003f0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f16:	d051      	beq.n	8003fbc <ADC_ConfigureBoostMode+0x138>
 8003f18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f1c:	d854      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f22:	d047      	beq.n	8003fb4 <ADC_ConfigureBoostMode+0x130>
 8003f24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f28:	d84e      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f2e:	d03d      	beq.n	8003fac <ADC_ConfigureBoostMode+0x128>
 8003f30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f34:	d848      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3a:	d033      	beq.n	8003fa4 <ADC_ConfigureBoostMode+0x120>
 8003f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f40:	d842      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f46:	d029      	beq.n	8003f9c <ADC_ConfigureBoostMode+0x118>
 8003f48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f4c:	d83c      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f52:	d01a      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x106>
 8003f54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f58:	d836      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f5e:	d014      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x106>
 8003f60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f64:	d830      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6a:	d00e      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x106>
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f70:	d82a      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f76:	d008      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x106>
 8003f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f7c:	d824      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
 8003f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f82:	d002      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x106>
 8003f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f88:	d11e      	bne.n	8003fc8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0c9b      	lsrs	r3, r3, #18
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	60fb      	str	r3, [r7, #12]
        break;
 8003f9a:	e016      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
        break;
 8003fa2:	e012      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	60fb      	str	r3, [r7, #12]
        break;
 8003faa:	e00e      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	60fb      	str	r3, [r7, #12]
        break;
 8003fb2:	e00a      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	09db      	lsrs	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
        break;
 8003fba:	e006      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	60fb      	str	r3, [r7, #12]
        break;
 8003fc2:	e002      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003fc8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003fca:	f7fe fcbb 	bl	8002944 <HAL_GetREVID>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d815      	bhi.n	8004004 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <ADC_ConfigureBoostMode+0x204>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d908      	bls.n	8003ff2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ff0:	e03e      	b.n	8004070 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	e035      	b.n	8004070 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <ADC_ConfigureBoostMode+0x208>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d808      	bhi.n	8004024 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004020:	609a      	str	r2, [r3, #8]
}
 8004022:	e025      	b.n	8004070 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <ADC_ConfigureBoostMode+0x20c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d80a      	bhi.n	8004042 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	e016      	b.n	8004070 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <ADC_ConfigureBoostMode+0x210>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d80a      	bhi.n	8004060 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405c:	609a      	str	r2, [r3, #8]
}
 800405e:	e007      	b.n	8004070 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40022000 	.word	0x40022000
 800407c:	40022100 	.word	0x40022100
 8004080:	40022300 	.word	0x40022300
 8004084:	58026300 	.word	0x58026300
 8004088:	01312d00 	.word	0x01312d00
 800408c:	005f5e10 	.word	0x005f5e10
 8004090:	00bebc20 	.word	0x00bebc20
 8004094:	017d7840 	.word	0x017d7840

08004098 <LL_ADC_IsEnabled>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <LL_ADC_IsEnabled+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_ADC_IsEnabled+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <LL_ADC_StartCalibration>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <LL_ADC_StartCalibration+0x38>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	609a      	str	r2, [r3, #8]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	3ffeffc0 	.word	0x3ffeffc0

080040fc <LL_ADC_IsCalibrationOnGoing>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800410c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004110:	d101      	bne.n	8004116 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_ADC_REG_IsConversionOngoing>:
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d101      	bne.n	800413c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_ADCEx_Calibration_Start+0x1e>
 8004166:	2302      	movs	r3, #2
 8004168:	e04c      	b.n	8004204 <HAL_ADCEx_Calibration_Start+0xb8>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fd92 	bl	8003c9c <ADC_Disable>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d135      	bne.n	80041ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004188:	4013      	ands	r3, r2
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff90 	bl	80040c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041a0:	e014      	b.n	80041cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3301      	adds	r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4a19      	ldr	r2, [pc, #100]	; (8004210 <HAL_ADCEx_Calibration_Start+0xc4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d30d      	bcc.n	80041cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	f023 0312 	bic.w	r3, r3, #18
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01b      	b.n	8004204 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff93 	bl	80040fc <LL_ADC_IsCalibrationOnGoing>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e2      	bne.n	80041a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f023 0303 	bic.w	r3, r3, #3
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
 80041ec:	e005      	b.n	80041fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	ffffeefd 	.word	0xffffeefd
 8004210:	25c3f800 	.word	0x25c3f800

08004214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b09f      	sub	sp, #124	; 0x7c
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0be      	b.n	80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800423e:	2300      	movs	r3, #0
 8004240:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5c      	ldr	r2, [pc, #368]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800424c:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	e001      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e09d      	b.n	80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff54 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 800427c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff4e 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d17f      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800428e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004290:	2b00      	cmp	r3, #0
 8004292:	d17c      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a47      	ldr	r2, [pc, #284]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a46      	ldr	r2, [pc, #280]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042a8:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042aa:	e000      	b.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d039      	beq.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3a      	ldr	r2, [pc, #232]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10e      	bne.n	80042fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042de:	4836      	ldr	r0, [pc, #216]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e0:	f7ff feda 	bl	8004098 <LL_ADC_IsEnabled>
 80042e4:	4604      	mov	r4, r0
 80042e6:	4835      	ldr	r0, [pc, #212]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042e8:	f7ff fed6 	bl	8004098 <LL_ADC_IsEnabled>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4323      	orrs	r3, r4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042fc:	4832      	ldr	r0, [pc, #200]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042fe:	f7ff fecb 	bl	8004098 <LL_ADC_IsEnabled>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d047      	beq.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004318:	4013      	ands	r3, r2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	6892      	ldr	r2, [r2, #8]
 8004322:	430a      	orrs	r2, r1
 8004324:	431a      	orrs	r2, r3
 8004326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004328:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800432a:	e03a      	b.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10e      	bne.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800434c:	481a      	ldr	r0, [pc, #104]	; (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800434e:	f7ff fea3 	bl	8004098 <LL_ADC_IsEnabled>
 8004352:	4604      	mov	r4, r0
 8004354:	4819      	ldr	r0, [pc, #100]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004356:	f7ff fe9f 	bl	8004098 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	4323      	orrs	r3, r4
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e008      	b.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800436a:	4817      	ldr	r0, [pc, #92]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800436c:	f7ff fe94 	bl	8004098 <LL_ADC_IsEnabled>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004386:	4013      	ands	r3, r2
 8004388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800438a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800438c:	e009      	b.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80043a0:	e000      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	377c      	adds	r7, #124	; 0x7c
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40022100 	.word	0x40022100
 80043c0:	40022300 	.word	0x40022300
 80043c4:	58026300 	.word	0x58026300
 80043c8:	58026000 	.word	0x58026000
 80043cc:	fffff0e0 	.word	0xfffff0e0

080043d0 <__NVIC_SetPriorityGrouping>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <__NVIC_SetPriorityGrouping+0x40>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043fe:	4a04      	ldr	r2, [pc, #16]	; (8004410 <__NVIC_SetPriorityGrouping+0x40>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	60d3      	str	r3, [r2, #12]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000ed00 	.word	0xe000ed00
 8004414:	05fa0000 	.word	0x05fa0000

08004418 <__NVIC_GetPriorityGrouping>:
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <__NVIC_GetPriorityGrouping+0x18>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0307 	and.w	r3, r3, #7
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_EnableIRQ>:
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db0b      	blt.n	800445e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <__NVIC_EnableIRQ+0x38>)
 800444e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	; (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	; (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453c:	d301      	bcc.n	8004542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800453e:	2301      	movs	r3, #1
 8004540:	e00f      	b.n	8004562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004542:	4a0a      	ldr	r2, [pc, #40]	; (800456c <SysTick_Config+0x40>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800454a:	210f      	movs	r1, #15
 800454c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004550:	f7ff ff8e 	bl	8004470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <SysTick_Config+0x40>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <SysTick_Config+0x40>)
 800455c:	2207      	movs	r2, #7
 800455e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	e000e010 	.word	0xe000e010

08004570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff29 	bl	80043d0 <__NVIC_SetPriorityGrouping>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	4603      	mov	r3, r0
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004594:	f7ff ff40 	bl	8004418 <__NVIC_GetPriorityGrouping>
 8004598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff ff90 	bl	80044c4 <NVIC_EncodePriority>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff5f 	bl	8004470 <__NVIC_SetPriority>
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff33 	bl	8004434 <__NVIC_EnableIRQ>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffa4 	bl	800452c <SysTick_Config>
 80045e4:	4603      	mov	r3, r0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e014      	b.n	800462a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	791b      	ldrb	r3, [r3, #4]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fd fd19 	bl	8002048 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	795b      	ldrb	r3, [r3, #5]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_DAC_Start+0x16>
 8004644:	2302      	movs	r3, #2
 8004646:	e040      	b.n	80046ca <HAL_DAC_Start+0x98>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2201      	movs	r2, #1
 8004662:	409a      	lsls	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800467c:	2b02      	cmp	r3, #2
 800467e:	d11d      	bne.n	80046bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	e014      	b.n	80046bc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2102      	movs	r1, #2
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0202 	orr.w	r2, r2, #2
 80046ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	3308      	adds	r3, #8
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e004      	b.n	800470a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	3314      	adds	r3, #20
 8004708:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	461a      	mov	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	795b      	ldrb	r3, [r3, #5]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_DAC_ConfigChannel+0x18>
 8004734:	2302      	movs	r3, #2
 8004736:	e11d      	b.n	8004974 <HAL_DAC_ConfigChannel+0x254>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d174      	bne.n	8004836 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800474c:	f7fe f8ba 	bl	80028c4 <HAL_GetTick>
 8004750:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d134      	bne.n	80047c2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004758:	e011      	b.n	800477e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800475a:	f7fe f8b3 	bl	80028c4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d90a      	bls.n	800477e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f043 0208 	orr.w	r2, r3, #8
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2203      	movs	r2, #3
 8004778:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0fa      	b.n	8004974 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004784:	4b7d      	ldr	r3, [pc, #500]	; (800497c <HAL_DAC_ConfigChannel+0x25c>)
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800478c:	2001      	movs	r0, #1
 800478e:	f7fe f8a5 	bl	80028dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	6992      	ldr	r2, [r2, #24]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
 800479c:	e01e      	b.n	80047dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800479e:	f7fe f891 	bl	80028c4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d90a      	bls.n	80047c2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f043 0208 	orr.w	r2, r3, #8
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2203      	movs	r2, #3
 80047bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0d8      	b.n	8004974 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dbe8      	blt.n	800479e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80047cc:	2001      	movs	r0, #1
 80047ce:	f7fe f885 	bl	80028dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	6992      	ldr	r2, [r2, #24]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	ea02 0103 	and.w	r1, r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	409a      	lsls	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	21ff      	movs	r1, #255	; 0xff
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	ea02 0103 	and.w	r1, r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d11d      	bne.n	800487a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	221f      	movs	r2, #31
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4013      	ands	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2207      	movs	r2, #7
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4013      	ands	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d102      	bne.n	80048a4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e00f      	b.n	80048c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d102      	bne.n	80048b2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e008      	b.n	80048c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	e001      	b.n	80048c4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	400a      	ands	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	22c0      	movs	r2, #192	; 0xc0
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43da      	mvns	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20008000 	.word	0x20008000

08004980 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004988:	f7fd ff9c 	bl	80028c4 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e316      	b.n	8004fc6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a66      	ldr	r2, [pc, #408]	; (8004b38 <HAL_DMA_Init+0x1b8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04a      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a65      	ldr	r2, [pc, #404]	; (8004b3c <HAL_DMA_Init+0x1bc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d045      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a63      	ldr	r2, [pc, #396]	; (8004b40 <HAL_DMA_Init+0x1c0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d040      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a62      	ldr	r2, [pc, #392]	; (8004b44 <HAL_DMA_Init+0x1c4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d03b      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a60      	ldr	r2, [pc, #384]	; (8004b48 <HAL_DMA_Init+0x1c8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d036      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5f      	ldr	r2, [pc, #380]	; (8004b4c <HAL_DMA_Init+0x1cc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d031      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5d      	ldr	r2, [pc, #372]	; (8004b50 <HAL_DMA_Init+0x1d0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02c      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a5c      	ldr	r2, [pc, #368]	; (8004b54 <HAL_DMA_Init+0x1d4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <HAL_DMA_Init+0x1d8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a59      	ldr	r2, [pc, #356]	; (8004b5c <HAL_DMA_Init+0x1dc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_DMA_Init+0x1e0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a56      	ldr	r2, [pc, #344]	; (8004b64 <HAL_DMA_Init+0x1e4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <HAL_DMA_Init+0x1e8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <HAL_DMA_Init+0x1ec>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <HAL_DMA_Init+0x1f0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_Init+0xb8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a50      	ldr	r2, [pc, #320]	; (8004b74 <HAL_DMA_Init+0x1f4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_DMA_Init+0xbc>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_DMA_Init+0xbe>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 813b 	beq.w	8004cba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a37      	ldr	r2, [pc, #220]	; (8004b38 <HAL_DMA_Init+0x1b8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d04a      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a36      	ldr	r2, [pc, #216]	; (8004b3c <HAL_DMA_Init+0x1bc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d045      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a34      	ldr	r2, [pc, #208]	; (8004b40 <HAL_DMA_Init+0x1c0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d040      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <HAL_DMA_Init+0x1c4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d03b      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <HAL_DMA_Init+0x1c8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d036      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_DMA_Init+0x1cc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d031      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2e      	ldr	r2, [pc, #184]	; (8004b50 <HAL_DMA_Init+0x1d0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02c      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <HAL_DMA_Init+0x1d4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d027      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2b      	ldr	r2, [pc, #172]	; (8004b58 <HAL_DMA_Init+0x1d8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <HAL_DMA_Init+0x1dc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d01d      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <HAL_DMA_Init+0x1e0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <HAL_DMA_Init+0x1e4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_DMA_Init+0x1e8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_DMA_Init+0x1ec>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_DMA_Init+0x1f0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_DMA_Init+0x174>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <HAL_DMA_Init+0x1f4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <HAL_DMA_Init+0x186>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e007      	b.n	8004b16 <HAL_DMA_Init+0x196>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b16:	e02f      	b.n	8004b78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b18:	f7fd fed4 	bl	80028c4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d928      	bls.n	8004b78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e246      	b.n	8004fc6 <HAL_DMA_Init+0x646>
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1c8      	bne.n	8004b18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4b83      	ldr	r3, [pc, #524]	; (8004da0 <HAL_DMA_Init+0x420>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004baa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d107      	bne.n	8004bdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004bdc:	4b71      	ldr	r3, [pc, #452]	; (8004da4 <HAL_DMA_Init+0x424>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b71      	ldr	r3, [pc, #452]	; (8004da8 <HAL_DMA_Init+0x428>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d328      	bcc.n	8004c3c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b28      	cmp	r3, #40	; 0x28
 8004bf0:	d903      	bls.n	8004bfa <HAL_DMA_Init+0x27a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf8:	d917      	bls.n	8004c2a <HAL_DMA_Init+0x2aa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004c00:	d903      	bls.n	8004c0a <HAL_DMA_Init+0x28a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b42      	cmp	r3, #66	; 0x42
 8004c08:	d90f      	bls.n	8004c2a <HAL_DMA_Init+0x2aa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b46      	cmp	r3, #70	; 0x46
 8004c10:	d903      	bls.n	8004c1a <HAL_DMA_Init+0x29a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b48      	cmp	r3, #72	; 0x48
 8004c18:	d907      	bls.n	8004c2a <HAL_DMA_Init+0x2aa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b4e      	cmp	r3, #78	; 0x4e
 8004c20:	d905      	bls.n	8004c2e <HAL_DMA_Init+0x2ae>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b52      	cmp	r3, #82	; 0x52
 8004c28:	d801      	bhi.n	8004c2e <HAL_DMA_Init+0x2ae>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_DMA_Init+0x2b0>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d117      	bne.n	8004c96 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00e      	beq.n	8004c96 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f002 fb33 	bl	80072e4 <DMA_CheckFifoParam>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e197      	b.n	8004fc6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f002 fa6e 	bl	8007180 <DMA_CalcBaseAndBitshift>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	223f      	movs	r2, #63	; 0x3f
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	e0cd      	b.n	8004e56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_DMA_Init+0x42c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_DMA_Init+0x430>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a38      	ldr	r2, [pc, #224]	; (8004db4 <HAL_DMA_Init+0x434>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a36      	ldr	r2, [pc, #216]	; (8004db8 <HAL_DMA_Init+0x438>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a35      	ldr	r2, [pc, #212]	; (8004dbc <HAL_DMA_Init+0x43c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a33      	ldr	r2, [pc, #204]	; (8004dc0 <HAL_DMA_Init+0x440>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_DMA_Init+0x444>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_DMA_Init+0x38a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <HAL_DMA_Init+0x448>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_DMA_Init+0x38e>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <HAL_DMA_Init+0x390>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_DMA_Init+0x42c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d021      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_DMA_Init+0x430>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01c      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <HAL_DMA_Init+0x434>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d017      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_DMA_Init+0x438>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d012      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_DMA_Init+0x43c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00d      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_DMA_Init+0x440>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d008      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_DMA_Init+0x444>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <HAL_DMA_Init+0x3e4>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_DMA_Init+0x448>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_DMA_Init+0x44c>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d020      	beq.n	8004dd0 <HAL_DMA_Init+0x450>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d102      	bne.n	8004d9c <HAL_DMA_Init+0x41c>
 8004d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d9a:	e01a      	b.n	8004dd2 <HAL_DMA_Init+0x452>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e018      	b.n	8004dd2 <HAL_DMA_Init+0x452>
 8004da0:	fe10803f 	.word	0xfe10803f
 8004da4:	5c001000 	.word	0x5c001000
 8004da8:	ffff0000 	.word	0xffff0000
 8004dac:	58025408 	.word	0x58025408
 8004db0:	5802541c 	.word	0x5802541c
 8004db4:	58025430 	.word	0x58025430
 8004db8:	58025444 	.word	0x58025444
 8004dbc:	58025458 	.word	0x58025458
 8004dc0:	5802546c 	.word	0x5802546c
 8004dc4:	58025480 	.word	0x58025480
 8004dc8:	58025494 	.word	0x58025494
 8004dcc:	fffe000f 	.word	0xfffe000f
 8004dd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004de0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b6e      	ldr	r3, [pc, #440]	; (8004fd0 <HAL_DMA_Init+0x650>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4a6e      	ldr	r2, [pc, #440]	; (8004fd4 <HAL_DMA_Init+0x654>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	009a      	lsls	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f002 f9a9 	bl	8007180 <DMA_CalcBaseAndBitshift>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e008      	b.n	8004e56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0b7      	b.n	8004fc6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5f      	ldr	r2, [pc, #380]	; (8004fd8 <HAL_DMA_Init+0x658>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d072      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_DMA_Init+0x65c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d06d      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_DMA_Init+0x660>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d068      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_DMA_Init+0x664>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d063      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a59      	ldr	r2, [pc, #356]	; (8004fe8 <HAL_DMA_Init+0x668>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d05e      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_DMA_Init+0x66c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d059      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a56      	ldr	r2, [pc, #344]	; (8004ff0 <HAL_DMA_Init+0x670>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d054      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a54      	ldr	r2, [pc, #336]	; (8004ff4 <HAL_DMA_Init+0x674>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04f      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a53      	ldr	r2, [pc, #332]	; (8004ff8 <HAL_DMA_Init+0x678>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a51      	ldr	r2, [pc, #324]	; (8004ffc <HAL_DMA_Init+0x67c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a50      	ldr	r2, [pc, #320]	; (8005000 <HAL_DMA_Init+0x680>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a4e      	ldr	r2, [pc, #312]	; (8005004 <HAL_DMA_Init+0x684>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	; (8005008 <HAL_DMA_Init+0x688>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	; (800500c <HAL_DMA_Init+0x68c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <HAL_DMA_Init+0x690>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a48      	ldr	r2, [pc, #288]	; (8005014 <HAL_DMA_Init+0x694>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	; (8005018 <HAL_DMA_Init+0x698>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a45      	ldr	r2, [pc, #276]	; (800501c <HAL_DMA_Init+0x69c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a44      	ldr	r2, [pc, #272]	; (8005020 <HAL_DMA_Init+0x6a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a42      	ldr	r2, [pc, #264]	; (8005024 <HAL_DMA_Init+0x6a4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a41      	ldr	r2, [pc, #260]	; (8005028 <HAL_DMA_Init+0x6a8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3f      	ldr	r2, [pc, #252]	; (800502c <HAL_DMA_Init+0x6ac>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3e      	ldr	r2, [pc, #248]	; (8005030 <HAL_DMA_Init+0x6b0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_Init+0x5c6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <HAL_DMA_Init+0x6b4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_DMA_Init+0x5ca>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_DMA_Init+0x5cc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d032      	beq.n	8004fb6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f002 fa43 	bl	80073dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d102      	bne.n	8004f64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_DMA_Init+0x624>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d80c      	bhi.n	8004fa4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f002 fac0 	bl	8007510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e008      	b.n	8004fb6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	a7fdabf8 	.word	0xa7fdabf8
 8004fd4:	cccccccd 	.word	0xcccccccd
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
 8005018:	58025408 	.word	0x58025408
 800501c:	5802541c 	.word	0x5802541c
 8005020:	58025430 	.word	0x58025430
 8005024:	58025444 	.word	0x58025444
 8005028:	58025458 	.word	0x58025458
 800502c:	5802546c 	.word	0x5802546c
 8005030:	58025480 	.word	0x58025480
 8005034:	58025494 	.word	0x58025494

08005038 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e226      	b.n	80054a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_DMA_Start_IT+0x2a>
 800505e:	2302      	movs	r3, #2
 8005060:	e21f      	b.n	80054a2 <HAL_DMA_Start_IT+0x46a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	f040 820a 	bne.w	800548c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a68      	ldr	r2, [pc, #416]	; (800522c <HAL_DMA_Start_IT+0x1f4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d04a      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a66      	ldr	r2, [pc, #408]	; (8005230 <HAL_DMA_Start_IT+0x1f8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d045      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a65      	ldr	r2, [pc, #404]	; (8005234 <HAL_DMA_Start_IT+0x1fc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d040      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a63      	ldr	r2, [pc, #396]	; (8005238 <HAL_DMA_Start_IT+0x200>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d03b      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a62      	ldr	r2, [pc, #392]	; (800523c <HAL_DMA_Start_IT+0x204>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d036      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a60      	ldr	r2, [pc, #384]	; (8005240 <HAL_DMA_Start_IT+0x208>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d031      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a5f      	ldr	r2, [pc, #380]	; (8005244 <HAL_DMA_Start_IT+0x20c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d02c      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5d      	ldr	r2, [pc, #372]	; (8005248 <HAL_DMA_Start_IT+0x210>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d027      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5c      	ldr	r2, [pc, #368]	; (800524c <HAL_DMA_Start_IT+0x214>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d022      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5a      	ldr	r2, [pc, #360]	; (8005250 <HAL_DMA_Start_IT+0x218>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01d      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a59      	ldr	r2, [pc, #356]	; (8005254 <HAL_DMA_Start_IT+0x21c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a57      	ldr	r2, [pc, #348]	; (8005258 <HAL_DMA_Start_IT+0x220>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a56      	ldr	r2, [pc, #344]	; (800525c <HAL_DMA_Start_IT+0x224>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a54      	ldr	r2, [pc, #336]	; (8005260 <HAL_DMA_Start_IT+0x228>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a53      	ldr	r2, [pc, #332]	; (8005264 <HAL_DMA_Start_IT+0x22c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_DMA_Start_IT+0xee>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a51      	ldr	r2, [pc, #324]	; (8005268 <HAL_DMA_Start_IT+0x230>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <HAL_DMA_Start_IT+0x100>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e007      	b.n	8005148 <HAL_DMA_Start_IT+0x110>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f001 fe6a 	bl	8006e28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a34      	ldr	r2, [pc, #208]	; (800522c <HAL_DMA_Start_IT+0x1f4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a33      	ldr	r2, [pc, #204]	; (8005230 <HAL_DMA_Start_IT+0x1f8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a31      	ldr	r2, [pc, #196]	; (8005234 <HAL_DMA_Start_IT+0x1fc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a30      	ldr	r2, [pc, #192]	; (8005238 <HAL_DMA_Start_IT+0x200>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2e      	ldr	r2, [pc, #184]	; (800523c <HAL_DMA_Start_IT+0x204>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <HAL_DMA_Start_IT+0x208>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <HAL_DMA_Start_IT+0x20c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <HAL_DMA_Start_IT+0x210>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a28      	ldr	r2, [pc, #160]	; (800524c <HAL_DMA_Start_IT+0x214>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <HAL_DMA_Start_IT+0x218>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a25      	ldr	r2, [pc, #148]	; (8005254 <HAL_DMA_Start_IT+0x21c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a24      	ldr	r2, [pc, #144]	; (8005258 <HAL_DMA_Start_IT+0x220>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <HAL_DMA_Start_IT+0x224>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_DMA_Start_IT+0x228>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_DMA_Start_IT+0x22c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_Start_IT+0x1bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_DMA_Start_IT+0x230>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <HAL_DMA_Start_IT+0x1c0>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_DMA_Start_IT+0x1c2>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d036      	beq.n	800526c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 021e 	bic.w	r2, r3, #30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0216 	orr.w	r2, r2, #22
 8005210:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d03e      	beq.n	8005298 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e035      	b.n	8005298 <HAL_DMA_Start_IT+0x260>
 800522c:	40020010 	.word	0x40020010
 8005230:	40020028 	.word	0x40020028
 8005234:	40020040 	.word	0x40020040
 8005238:	40020058 	.word	0x40020058
 800523c:	40020070 	.word	0x40020070
 8005240:	40020088 	.word	0x40020088
 8005244:	400200a0 	.word	0x400200a0
 8005248:	400200b8 	.word	0x400200b8
 800524c:	40020410 	.word	0x40020410
 8005250:	40020428 	.word	0x40020428
 8005254:	40020440 	.word	0x40020440
 8005258:	40020458 	.word	0x40020458
 800525c:	40020470 	.word	0x40020470
 8005260:	40020488 	.word	0x40020488
 8005264:	400204a0 	.word	0x400204a0
 8005268:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 020e 	bic.w	r2, r3, #14
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 020a 	orr.w	r2, r2, #10
 800527e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0204 	orr.w	r2, r2, #4
 8005296:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a83      	ldr	r2, [pc, #524]	; (80054ac <HAL_DMA_Start_IT+0x474>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d072      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a82      	ldr	r2, [pc, #520]	; (80054b0 <HAL_DMA_Start_IT+0x478>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d06d      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a80      	ldr	r2, [pc, #512]	; (80054b4 <HAL_DMA_Start_IT+0x47c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d068      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7f      	ldr	r2, [pc, #508]	; (80054b8 <HAL_DMA_Start_IT+0x480>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d063      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7d      	ldr	r2, [pc, #500]	; (80054bc <HAL_DMA_Start_IT+0x484>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d05e      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7c      	ldr	r2, [pc, #496]	; (80054c0 <HAL_DMA_Start_IT+0x488>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d059      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a7a      	ldr	r2, [pc, #488]	; (80054c4 <HAL_DMA_Start_IT+0x48c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d054      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a79      	ldr	r2, [pc, #484]	; (80054c8 <HAL_DMA_Start_IT+0x490>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d04f      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a77      	ldr	r2, [pc, #476]	; (80054cc <HAL_DMA_Start_IT+0x494>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04a      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a76      	ldr	r2, [pc, #472]	; (80054d0 <HAL_DMA_Start_IT+0x498>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d045      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a74      	ldr	r2, [pc, #464]	; (80054d4 <HAL_DMA_Start_IT+0x49c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d040      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a73      	ldr	r2, [pc, #460]	; (80054d8 <HAL_DMA_Start_IT+0x4a0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d03b      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a71      	ldr	r2, [pc, #452]	; (80054dc <HAL_DMA_Start_IT+0x4a4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d036      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a70      	ldr	r2, [pc, #448]	; (80054e0 <HAL_DMA_Start_IT+0x4a8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d031      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a6e      	ldr	r2, [pc, #440]	; (80054e4 <HAL_DMA_Start_IT+0x4ac>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02c      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6d      	ldr	r2, [pc, #436]	; (80054e8 <HAL_DMA_Start_IT+0x4b0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d027      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6b      	ldr	r2, [pc, #428]	; (80054ec <HAL_DMA_Start_IT+0x4b4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6a      	ldr	r2, [pc, #424]	; (80054f0 <HAL_DMA_Start_IT+0x4b8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a68      	ldr	r2, [pc, #416]	; (80054f4 <HAL_DMA_Start_IT+0x4bc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a67      	ldr	r2, [pc, #412]	; (80054f8 <HAL_DMA_Start_IT+0x4c0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_DMA_Start_IT+0x4c4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a64      	ldr	r2, [pc, #400]	; (8005500 <HAL_DMA_Start_IT+0x4c8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a62      	ldr	r2, [pc, #392]	; (8005504 <HAL_DMA_Start_IT+0x4cc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_DMA_Start_IT+0x350>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a61      	ldr	r2, [pc, #388]	; (8005508 <HAL_DMA_Start_IT+0x4d0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <HAL_DMA_Start_IT+0x354>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_DMA_Start_IT+0x356>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01a      	beq.n	80053c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a37      	ldr	r2, [pc, #220]	; (80054ac <HAL_DMA_Start_IT+0x474>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d04a      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a36      	ldr	r2, [pc, #216]	; (80054b0 <HAL_DMA_Start_IT+0x478>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d045      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <HAL_DMA_Start_IT+0x47c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d040      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a33      	ldr	r2, [pc, #204]	; (80054b8 <HAL_DMA_Start_IT+0x480>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d03b      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a31      	ldr	r2, [pc, #196]	; (80054bc <HAL_DMA_Start_IT+0x484>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d036      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a30      	ldr	r2, [pc, #192]	; (80054c0 <HAL_DMA_Start_IT+0x488>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d031      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <HAL_DMA_Start_IT+0x48c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d02c      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <HAL_DMA_Start_IT+0x490>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d027      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2b      	ldr	r2, [pc, #172]	; (80054cc <HAL_DMA_Start_IT+0x494>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <HAL_DMA_Start_IT+0x498>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d01d      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <HAL_DMA_Start_IT+0x49c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <HAL_DMA_Start_IT+0x4a0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	; (80054dc <HAL_DMA_Start_IT+0x4a4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <HAL_DMA_Start_IT+0x4a8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <HAL_DMA_Start_IT+0x4ac>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_DMA_Start_IT+0x430>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HAL_DMA_Start_IT+0x4b0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <HAL_DMA_Start_IT+0x442>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e012      	b.n	80054a0 <HAL_DMA_Start_IT+0x468>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e009      	b.n	80054a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
 80054ec:	58025408 	.word	0x58025408
 80054f0:	5802541c 	.word	0x5802541c
 80054f4:	58025430 	.word	0x58025430
 80054f8:	58025444 	.word	0x58025444
 80054fc:	58025458 	.word	0x58025458
 8005500:	5802546c 	.word	0x5802546c
 8005504:	58025480 	.word	0x58025480
 8005508:	58025494 	.word	0x58025494

0800550c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005514:	f7fd f9d6 	bl	80028c4 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e2dc      	b.n	8005ade <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d008      	beq.n	8005542 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e2cd      	b.n	8005ade <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a76      	ldr	r2, [pc, #472]	; (8005720 <HAL_DMA_Abort+0x214>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a74      	ldr	r2, [pc, #464]	; (8005724 <HAL_DMA_Abort+0x218>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a73      	ldr	r2, [pc, #460]	; (8005728 <HAL_DMA_Abort+0x21c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a71      	ldr	r2, [pc, #452]	; (800572c <HAL_DMA_Abort+0x220>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a70      	ldr	r2, [pc, #448]	; (8005730 <HAL_DMA_Abort+0x224>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6e      	ldr	r2, [pc, #440]	; (8005734 <HAL_DMA_Abort+0x228>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6d      	ldr	r2, [pc, #436]	; (8005738 <HAL_DMA_Abort+0x22c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a6b      	ldr	r2, [pc, #428]	; (800573c <HAL_DMA_Abort+0x230>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6a      	ldr	r2, [pc, #424]	; (8005740 <HAL_DMA_Abort+0x234>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a68      	ldr	r2, [pc, #416]	; (8005744 <HAL_DMA_Abort+0x238>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a67      	ldr	r2, [pc, #412]	; (8005748 <HAL_DMA_Abort+0x23c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a65      	ldr	r2, [pc, #404]	; (800574c <HAL_DMA_Abort+0x240>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a64      	ldr	r2, [pc, #400]	; (8005750 <HAL_DMA_Abort+0x244>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a62      	ldr	r2, [pc, #392]	; (8005754 <HAL_DMA_Abort+0x248>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a61      	ldr	r2, [pc, #388]	; (8005758 <HAL_DMA_Abort+0x24c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort+0xd6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a5f      	ldr	r2, [pc, #380]	; (800575c <HAL_DMA_Abort+0x250>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_DMA_Abort+0xda>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_DMA_Abort+0xdc>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 021e 	bic.w	r2, r2, #30
 80055fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e00a      	b.n	800562a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 020e 	bic.w	r2, r2, #14
 8005622:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3c      	ldr	r2, [pc, #240]	; (8005720 <HAL_DMA_Abort+0x214>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d072      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3a      	ldr	r2, [pc, #232]	; (8005724 <HAL_DMA_Abort+0x218>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d06d      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a39      	ldr	r2, [pc, #228]	; (8005728 <HAL_DMA_Abort+0x21c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d068      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a37      	ldr	r2, [pc, #220]	; (800572c <HAL_DMA_Abort+0x220>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d063      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a36      	ldr	r2, [pc, #216]	; (8005730 <HAL_DMA_Abort+0x224>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d05e      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a34      	ldr	r2, [pc, #208]	; (8005734 <HAL_DMA_Abort+0x228>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d059      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a33      	ldr	r2, [pc, #204]	; (8005738 <HAL_DMA_Abort+0x22c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d054      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a31      	ldr	r2, [pc, #196]	; (800573c <HAL_DMA_Abort+0x230>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d04f      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a30      	ldr	r2, [pc, #192]	; (8005740 <HAL_DMA_Abort+0x234>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d04a      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2e      	ldr	r2, [pc, #184]	; (8005744 <HAL_DMA_Abort+0x238>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d045      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <HAL_DMA_Abort+0x23c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d040      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a2b      	ldr	r2, [pc, #172]	; (800574c <HAL_DMA_Abort+0x240>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d03b      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <HAL_DMA_Abort+0x244>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d036      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a28      	ldr	r2, [pc, #160]	; (8005754 <HAL_DMA_Abort+0x248>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d031      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <HAL_DMA_Abort+0x24c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02c      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <HAL_DMA_Abort+0x250>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d027      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a24      	ldr	r2, [pc, #144]	; (8005760 <HAL_DMA_Abort+0x254>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a22      	ldr	r2, [pc, #136]	; (8005764 <HAL_DMA_Abort+0x258>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a21      	ldr	r2, [pc, #132]	; (8005768 <HAL_DMA_Abort+0x25c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1f      	ldr	r2, [pc, #124]	; (800576c <HAL_DMA_Abort+0x260>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_DMA_Abort+0x264>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1c      	ldr	r2, [pc, #112]	; (8005774 <HAL_DMA_Abort+0x268>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_DMA_Abort+0x26c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_DMA_Abort+0x20e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_DMA_Abort+0x270>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d132      	bne.n	8005780 <HAL_DMA_Abort+0x274>
 800571a:	2301      	movs	r3, #1
 800571c:	e031      	b.n	8005782 <HAL_DMA_Abort+0x276>
 800571e:	bf00      	nop
 8005720:	40020010 	.word	0x40020010
 8005724:	40020028 	.word	0x40020028
 8005728:	40020040 	.word	0x40020040
 800572c:	40020058 	.word	0x40020058
 8005730:	40020070 	.word	0x40020070
 8005734:	40020088 	.word	0x40020088
 8005738:	400200a0 	.word	0x400200a0
 800573c:	400200b8 	.word	0x400200b8
 8005740:	40020410 	.word	0x40020410
 8005744:	40020428 	.word	0x40020428
 8005748:	40020440 	.word	0x40020440
 800574c:	40020458 	.word	0x40020458
 8005750:	40020470 	.word	0x40020470
 8005754:	40020488 	.word	0x40020488
 8005758:	400204a0 	.word	0x400204a0
 800575c:	400204b8 	.word	0x400204b8
 8005760:	58025408 	.word	0x58025408
 8005764:	5802541c 	.word	0x5802541c
 8005768:	58025430 	.word	0x58025430
 800576c:	58025444 	.word	0x58025444
 8005770:	58025458 	.word	0x58025458
 8005774:	5802546c 	.word	0x5802546c
 8005778:	58025480 	.word	0x58025480
 800577c:	58025494 	.word	0x58025494
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005794:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6d      	ldr	r2, [pc, #436]	; (8005950 <HAL_DMA_Abort+0x444>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a6b      	ldr	r2, [pc, #428]	; (8005954 <HAL_DMA_Abort+0x448>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a6a      	ldr	r2, [pc, #424]	; (8005958 <HAL_DMA_Abort+0x44c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a68      	ldr	r2, [pc, #416]	; (800595c <HAL_DMA_Abort+0x450>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a67      	ldr	r2, [pc, #412]	; (8005960 <HAL_DMA_Abort+0x454>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a65      	ldr	r2, [pc, #404]	; (8005964 <HAL_DMA_Abort+0x458>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a64      	ldr	r2, [pc, #400]	; (8005968 <HAL_DMA_Abort+0x45c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a62      	ldr	r2, [pc, #392]	; (800596c <HAL_DMA_Abort+0x460>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a61      	ldr	r2, [pc, #388]	; (8005970 <HAL_DMA_Abort+0x464>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5f      	ldr	r2, [pc, #380]	; (8005974 <HAL_DMA_Abort+0x468>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5e      	ldr	r2, [pc, #376]	; (8005978 <HAL_DMA_Abort+0x46c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5c      	ldr	r2, [pc, #368]	; (800597c <HAL_DMA_Abort+0x470>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <HAL_DMA_Abort+0x474>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a59      	ldr	r2, [pc, #356]	; (8005984 <HAL_DMA_Abort+0x478>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a58      	ldr	r2, [pc, #352]	; (8005988 <HAL_DMA_Abort+0x47c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_Abort+0x32a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a56      	ldr	r2, [pc, #344]	; (800598c <HAL_DMA_Abort+0x480>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <HAL_DMA_Abort+0x33c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e007      	b.n	8005858 <HAL_DMA_Abort+0x34c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005858:	e013      	b.n	8005882 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800585a:	f7fd f833 	bl	80028c4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b05      	cmp	r3, #5
 8005866:	d90c      	bls.n	8005882 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2203      	movs	r2, #3
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e12d      	b.n	8005ade <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <HAL_DMA_Abort+0x444>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d04a      	beq.n	800592e <HAL_DMA_Abort+0x422>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <HAL_DMA_Abort+0x448>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d045      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <HAL_DMA_Abort+0x44c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d040      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2a      	ldr	r2, [pc, #168]	; (800595c <HAL_DMA_Abort+0x450>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d03b      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a29      	ldr	r2, [pc, #164]	; (8005960 <HAL_DMA_Abort+0x454>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d036      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <HAL_DMA_Abort+0x458>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d031      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a26      	ldr	r2, [pc, #152]	; (8005968 <HAL_DMA_Abort+0x45c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d02c      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a24      	ldr	r2, [pc, #144]	; (800596c <HAL_DMA_Abort+0x460>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d027      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a23      	ldr	r2, [pc, #140]	; (8005970 <HAL_DMA_Abort+0x464>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_DMA_Abort+0x468>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01d      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a20      	ldr	r2, [pc, #128]	; (8005978 <HAL_DMA_Abort+0x46c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_DMA_Abort+0x422>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1e      	ldr	r2, [pc, #120]	; (800597c <HAL_DMA_Abort+0x470>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_DMA_Abort+0x422>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_DMA_Abort+0x474>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_DMA_Abort+0x422>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <HAL_DMA_Abort+0x478>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_DMA_Abort+0x422>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <HAL_DMA_Abort+0x47c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_DMA_Abort+0x422>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_DMA_Abort+0x480>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_DMA_Abort+0x426>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_DMA_Abort+0x428>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d02b      	beq.n	8005990 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	223f      	movs	r2, #63	; 0x3f
 8005948:	409a      	lsls	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	609a      	str	r2, [r3, #8]
 800594e:	e02a      	b.n	80059a6 <HAL_DMA_Abort+0x49a>
 8005950:	40020010 	.word	0x40020010
 8005954:	40020028 	.word	0x40020028
 8005958:	40020040 	.word	0x40020040
 800595c:	40020058 	.word	0x40020058
 8005960:	40020070 	.word	0x40020070
 8005964:	40020088 	.word	0x40020088
 8005968:	400200a0 	.word	0x400200a0
 800596c:	400200b8 	.word	0x400200b8
 8005970:	40020410 	.word	0x40020410
 8005974:	40020428 	.word	0x40020428
 8005978:	40020440 	.word	0x40020440
 800597c:	40020458 	.word	0x40020458
 8005980:	40020470 	.word	0x40020470
 8005984:	40020488 	.word	0x40020488
 8005988:	400204a0 	.word	0x400204a0
 800598c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005994:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2201      	movs	r2, #1
 80059a0:	409a      	lsls	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a4f      	ldr	r2, [pc, #316]	; (8005ae8 <HAL_DMA_Abort+0x5dc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d072      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a4d      	ldr	r2, [pc, #308]	; (8005aec <HAL_DMA_Abort+0x5e0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d06d      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a4c      	ldr	r2, [pc, #304]	; (8005af0 <HAL_DMA_Abort+0x5e4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d068      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <HAL_DMA_Abort+0x5e8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d063      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a49      	ldr	r2, [pc, #292]	; (8005af8 <HAL_DMA_Abort+0x5ec>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d05e      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a47      	ldr	r2, [pc, #284]	; (8005afc <HAL_DMA_Abort+0x5f0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d059      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a46      	ldr	r2, [pc, #280]	; (8005b00 <HAL_DMA_Abort+0x5f4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d054      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a44      	ldr	r2, [pc, #272]	; (8005b04 <HAL_DMA_Abort+0x5f8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04f      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a43      	ldr	r2, [pc, #268]	; (8005b08 <HAL_DMA_Abort+0x5fc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04a      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a41      	ldr	r2, [pc, #260]	; (8005b0c <HAL_DMA_Abort+0x600>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d045      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a40      	ldr	r2, [pc, #256]	; (8005b10 <HAL_DMA_Abort+0x604>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3e      	ldr	r2, [pc, #248]	; (8005b14 <HAL_DMA_Abort+0x608>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d03b      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3d      	ldr	r2, [pc, #244]	; (8005b18 <HAL_DMA_Abort+0x60c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d036      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <HAL_DMA_Abort+0x610>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d031      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3a      	ldr	r2, [pc, #232]	; (8005b20 <HAL_DMA_Abort+0x614>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d02c      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a38      	ldr	r2, [pc, #224]	; (8005b24 <HAL_DMA_Abort+0x618>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d027      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a37      	ldr	r2, [pc, #220]	; (8005b28 <HAL_DMA_Abort+0x61c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <HAL_DMA_Abort+0x620>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a34      	ldr	r2, [pc, #208]	; (8005b30 <HAL_DMA_Abort+0x624>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a32      	ldr	r2, [pc, #200]	; (8005b34 <HAL_DMA_Abort+0x628>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a31      	ldr	r2, [pc, #196]	; (8005b38 <HAL_DMA_Abort+0x62c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <HAL_DMA_Abort+0x630>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2e      	ldr	r2, [pc, #184]	; (8005b40 <HAL_DMA_Abort+0x634>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMA_Abort+0x58a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <HAL_DMA_Abort+0x638>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_DMA_Abort+0x58e>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_DMA_Abort+0x590>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005aa8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40020010 	.word	0x40020010
 8005aec:	40020028 	.word	0x40020028
 8005af0:	40020040 	.word	0x40020040
 8005af4:	40020058 	.word	0x40020058
 8005af8:	40020070 	.word	0x40020070
 8005afc:	40020088 	.word	0x40020088
 8005b00:	400200a0 	.word	0x400200a0
 8005b04:	400200b8 	.word	0x400200b8
 8005b08:	40020410 	.word	0x40020410
 8005b0c:	40020428 	.word	0x40020428
 8005b10:	40020440 	.word	0x40020440
 8005b14:	40020458 	.word	0x40020458
 8005b18:	40020470 	.word	0x40020470
 8005b1c:	40020488 	.word	0x40020488
 8005b20:	400204a0 	.word	0x400204a0
 8005b24:	400204b8 	.word	0x400204b8
 8005b28:	58025408 	.word	0x58025408
 8005b2c:	5802541c 	.word	0x5802541c
 8005b30:	58025430 	.word	0x58025430
 8005b34:	58025444 	.word	0x58025444
 8005b38:	58025458 	.word	0x58025458
 8005b3c:	5802546c 	.word	0x5802546c
 8005b40:	58025480 	.word	0x58025480
 8005b44:	58025494 	.word	0x58025494

08005b48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e237      	b.n	8005fca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d004      	beq.n	8005b70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e22c      	b.n	8005fca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a5c      	ldr	r2, [pc, #368]	; (8005ce8 <HAL_DMA_Abort_IT+0x1a0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d04a      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a5b      	ldr	r2, [pc, #364]	; (8005cec <HAL_DMA_Abort_IT+0x1a4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d045      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_DMA_Abort_IT+0x1a8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d040      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a58      	ldr	r2, [pc, #352]	; (8005cf4 <HAL_DMA_Abort_IT+0x1ac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d03b      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a56      	ldr	r2, [pc, #344]	; (8005cf8 <HAL_DMA_Abort_IT+0x1b0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d036      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a55      	ldr	r2, [pc, #340]	; (8005cfc <HAL_DMA_Abort_IT+0x1b4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d031      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a53      	ldr	r2, [pc, #332]	; (8005d00 <HAL_DMA_Abort_IT+0x1b8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02c      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a52      	ldr	r2, [pc, #328]	; (8005d04 <HAL_DMA_Abort_IT+0x1bc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d027      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <HAL_DMA_Abort_IT+0x1c0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d022      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <HAL_DMA_Abort_IT+0x1c4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01d      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a4d      	ldr	r2, [pc, #308]	; (8005d10 <HAL_DMA_Abort_IT+0x1c8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a4c      	ldr	r2, [pc, #304]	; (8005d14 <HAL_DMA_Abort_IT+0x1cc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a4a      	ldr	r2, [pc, #296]	; (8005d18 <HAL_DMA_Abort_IT+0x1d0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a49      	ldr	r2, [pc, #292]	; (8005d1c <HAL_DMA_Abort_IT+0x1d4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a47      	ldr	r2, [pc, #284]	; (8005d20 <HAL_DMA_Abort_IT+0x1d8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_DMA_Abort_IT+0xc8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <HAL_DMA_Abort_IT+0x1dc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d101      	bne.n	8005c14 <HAL_DMA_Abort_IT+0xcc>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <HAL_DMA_Abort_IT+0xce>
 8005c14:	2300      	movs	r3, #0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8086 	beq.w	8005d28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <HAL_DMA_Abort_IT+0x1a0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04a      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <HAL_DMA_Abort_IT+0x1a4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d045      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2c      	ldr	r2, [pc, #176]	; (8005cf0 <HAL_DMA_Abort_IT+0x1a8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d040      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_DMA_Abort_IT+0x1ac>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d03b      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <HAL_DMA_Abort_IT+0x1b0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d036      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <HAL_DMA_Abort_IT+0x1b4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d031      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <HAL_DMA_Abort_IT+0x1b8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02c      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_DMA_Abort_IT+0x1bc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d027      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <HAL_DMA_Abort_IT+0x1c0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d022      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <HAL_DMA_Abort_IT+0x1c4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d01d      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <HAL_DMA_Abort_IT+0x1c8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <HAL_DMA_Abort_IT+0x1cc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_DMA_Abort_IT+0x1d0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_DMA_Abort_IT+0x1d4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_DMA_Abort_IT+0x1d8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0x17c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <HAL_DMA_Abort_IT+0x1dc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <HAL_DMA_Abort_IT+0x18e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e178      	b.n	8005fc8 <HAL_DMA_Abort_IT+0x480>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e16f      	b.n	8005fc8 <HAL_DMA_Abort_IT+0x480>
 8005ce8:	40020010 	.word	0x40020010
 8005cec:	40020028 	.word	0x40020028
 8005cf0:	40020040 	.word	0x40020040
 8005cf4:	40020058 	.word	0x40020058
 8005cf8:	40020070 	.word	0x40020070
 8005cfc:	40020088 	.word	0x40020088
 8005d00:	400200a0 	.word	0x400200a0
 8005d04:	400200b8 	.word	0x400200b8
 8005d08:	40020410 	.word	0x40020410
 8005d0c:	40020428 	.word	0x40020428
 8005d10:	40020440 	.word	0x40020440
 8005d14:	40020458 	.word	0x40020458
 8005d18:	40020470 	.word	0x40020470
 8005d1c:	40020488 	.word	0x40020488
 8005d20:	400204a0 	.word	0x400204a0
 8005d24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 020e 	bic.w	r2, r2, #14
 8005d36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a6c      	ldr	r2, [pc, #432]	; (8005ef0 <HAL_DMA_Abort_IT+0x3a8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d04a      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6b      	ldr	r2, [pc, #428]	; (8005ef4 <HAL_DMA_Abort_IT+0x3ac>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d045      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a69      	ldr	r2, [pc, #420]	; (8005ef8 <HAL_DMA_Abort_IT+0x3b0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d040      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a68      	ldr	r2, [pc, #416]	; (8005efc <HAL_DMA_Abort_IT+0x3b4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d03b      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a66      	ldr	r2, [pc, #408]	; (8005f00 <HAL_DMA_Abort_IT+0x3b8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d036      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a65      	ldr	r2, [pc, #404]	; (8005f04 <HAL_DMA_Abort_IT+0x3bc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d031      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a63      	ldr	r2, [pc, #396]	; (8005f08 <HAL_DMA_Abort_IT+0x3c0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d02c      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a62      	ldr	r2, [pc, #392]	; (8005f0c <HAL_DMA_Abort_IT+0x3c4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d027      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a60      	ldr	r2, [pc, #384]	; (8005f10 <HAL_DMA_Abort_IT+0x3c8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d022      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a5f      	ldr	r2, [pc, #380]	; (8005f14 <HAL_DMA_Abort_IT+0x3cc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d01d      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a5d      	ldr	r2, [pc, #372]	; (8005f18 <HAL_DMA_Abort_IT+0x3d0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a5c      	ldr	r2, [pc, #368]	; (8005f1c <HAL_DMA_Abort_IT+0x3d4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5a      	ldr	r2, [pc, #360]	; (8005f20 <HAL_DMA_Abort_IT+0x3d8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a59      	ldr	r2, [pc, #356]	; (8005f24 <HAL_DMA_Abort_IT+0x3dc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a57      	ldr	r2, [pc, #348]	; (8005f28 <HAL_DMA_Abort_IT+0x3e0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_DMA_Abort_IT+0x290>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a56      	ldr	r2, [pc, #344]	; (8005f2c <HAL_DMA_Abort_IT+0x3e4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <HAL_DMA_Abort_IT+0x2a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0201 	bic.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e007      	b.n	8005dfa <HAL_DMA_Abort_IT+0x2b2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_DMA_Abort_IT+0x3a8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d072      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a3a      	ldr	r2, [pc, #232]	; (8005ef4 <HAL_DMA_Abort_IT+0x3ac>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d06d      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a39      	ldr	r2, [pc, #228]	; (8005ef8 <HAL_DMA_Abort_IT+0x3b0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d068      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a37      	ldr	r2, [pc, #220]	; (8005efc <HAL_DMA_Abort_IT+0x3b4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d063      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <HAL_DMA_Abort_IT+0x3b8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d05e      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a34      	ldr	r2, [pc, #208]	; (8005f04 <HAL_DMA_Abort_IT+0x3bc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d059      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a33      	ldr	r2, [pc, #204]	; (8005f08 <HAL_DMA_Abort_IT+0x3c0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d054      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a31      	ldr	r2, [pc, #196]	; (8005f0c <HAL_DMA_Abort_IT+0x3c4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d04f      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a30      	ldr	r2, [pc, #192]	; (8005f10 <HAL_DMA_Abort_IT+0x3c8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d04a      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <HAL_DMA_Abort_IT+0x3cc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d045      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <HAL_DMA_Abort_IT+0x3d0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d040      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_DMA_Abort_IT+0x3d4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d03b      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_DMA_Abort_IT+0x3d8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d036      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_DMA_Abort_IT+0x3dc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d031      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a27      	ldr	r2, [pc, #156]	; (8005f28 <HAL_DMA_Abort_IT+0x3e0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02c      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <HAL_DMA_Abort_IT+0x3e4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d027      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <HAL_DMA_Abort_IT+0x3e8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <HAL_DMA_Abort_IT+0x3ec>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01d      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_DMA_Abort_IT+0x3f0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_DMA_Abort_IT+0x3f4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_DMA_Abort_IT+0x3f8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_DMA_Abort_IT+0x3fc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_DMA_Abort_IT+0x400>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_DMA_Abort_IT+0x3a2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_DMA_Abort_IT+0x404>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d132      	bne.n	8005f50 <HAL_DMA_Abort_IT+0x408>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e031      	b.n	8005f52 <HAL_DMA_Abort_IT+0x40a>
 8005eee:	bf00      	nop
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
 8005f30:	58025408 	.word	0x58025408
 8005f34:	5802541c 	.word	0x5802541c
 8005f38:	58025430 	.word	0x58025430
 8005f3c:	58025444 	.word	0x58025444
 8005f40:	58025458 	.word	0x58025458
 8005f44:	5802546c 	.word	0x5802546c
 8005f48:	58025480 	.word	0x58025480
 8005f4c:	58025494 	.word	0x58025494
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d028      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2201      	movs	r2, #1
 8005f76:	409a      	lsls	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop

08005fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fe0:	4b67      	ldr	r3, [pc, #412]	; (8006180 <HAL_DMA_IRQHandler+0x1ac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a67      	ldr	r2, [pc, #412]	; (8006184 <HAL_DMA_IRQHandler+0x1b0>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0a9b      	lsrs	r3, r3, #10
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5f      	ldr	r2, [pc, #380]	; (8006188 <HAL_DMA_IRQHandler+0x1b4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d04a      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5d      	ldr	r2, [pc, #372]	; (800618c <HAL_DMA_IRQHandler+0x1b8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d045      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5c      	ldr	r2, [pc, #368]	; (8006190 <HAL_DMA_IRQHandler+0x1bc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d040      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5a      	ldr	r2, [pc, #360]	; (8006194 <HAL_DMA_IRQHandler+0x1c0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d03b      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a59      	ldr	r2, [pc, #356]	; (8006198 <HAL_DMA_IRQHandler+0x1c4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d036      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a57      	ldr	r2, [pc, #348]	; (800619c <HAL_DMA_IRQHandler+0x1c8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a56      	ldr	r2, [pc, #344]	; (80061a0 <HAL_DMA_IRQHandler+0x1cc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02c      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a54      	ldr	r2, [pc, #336]	; (80061a4 <HAL_DMA_IRQHandler+0x1d0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a53      	ldr	r2, [pc, #332]	; (80061a8 <HAL_DMA_IRQHandler+0x1d4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a51      	ldr	r2, [pc, #324]	; (80061ac <HAL_DMA_IRQHandler+0x1d8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a50      	ldr	r2, [pc, #320]	; (80061b0 <HAL_DMA_IRQHandler+0x1dc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a4e      	ldr	r2, [pc, #312]	; (80061b4 <HAL_DMA_IRQHandler+0x1e0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a4d      	ldr	r2, [pc, #308]	; (80061b8 <HAL_DMA_IRQHandler+0x1e4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <HAL_DMA_IRQHandler+0x1e8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a4a      	ldr	r2, [pc, #296]	; (80061c0 <HAL_DMA_IRQHandler+0x1ec>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xd2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a48      	ldr	r2, [pc, #288]	; (80061c4 <HAL_DMA_IRQHandler+0x1f0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_DMA_IRQHandler+0xd6>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_DMA_IRQHandler+0xd8>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 842b 	beq.w	8006908 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2208      	movs	r2, #8
 80060bc:	409a      	lsls	r2, r3
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a2 	beq.w	800620c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2e      	ldr	r2, [pc, #184]	; (8006188 <HAL_DMA_IRQHandler+0x1b4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2d      	ldr	r2, [pc, #180]	; (800618c <HAL_DMA_IRQHandler+0x1b8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <HAL_DMA_IRQHandler+0x1bc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2a      	ldr	r2, [pc, #168]	; (8006194 <HAL_DMA_IRQHandler+0x1c0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a28      	ldr	r2, [pc, #160]	; (8006198 <HAL_DMA_IRQHandler+0x1c4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a27      	ldr	r2, [pc, #156]	; (800619c <HAL_DMA_IRQHandler+0x1c8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a25      	ldr	r2, [pc, #148]	; (80061a0 <HAL_DMA_IRQHandler+0x1cc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <HAL_DMA_IRQHandler+0x1d0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <HAL_DMA_IRQHandler+0x1d4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	; (80061ac <HAL_DMA_IRQHandler+0x1d8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <HAL_DMA_IRQHandler+0x1dc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_DMA_IRQHandler+0x1e0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <HAL_DMA_IRQHandler+0x1e4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <HAL_DMA_IRQHandler+0x1e8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a19      	ldr	r2, [pc, #100]	; (80061c0 <HAL_DMA_IRQHandler+0x1ec>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_DMA_IRQHandler+0x194>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_DMA_IRQHandler+0x1f0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d12f      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x1f4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e02e      	b.n	80061dc <HAL_DMA_IRQHandler+0x208>
 800617e:	bf00      	nop
 8006180:	24000024 	.word	0x24000024
 8006184:	1b4e81b5 	.word	0x1b4e81b5
 8006188:	40020010 	.word	0x40020010
 800618c:	40020028 	.word	0x40020028
 8006190:	40020040 	.word	0x40020040
 8006194:	40020058 	.word	0x40020058
 8006198:	40020070 	.word	0x40020070
 800619c:	40020088 	.word	0x40020088
 80061a0:	400200a0 	.word	0x400200a0
 80061a4:	400200b8 	.word	0x400200b8
 80061a8:	40020410 	.word	0x40020410
 80061ac:	40020428 	.word	0x40020428
 80061b0:	40020440 	.word	0x40020440
 80061b4:	40020458 	.word	0x40020458
 80061b8:	40020470 	.word	0x40020470
 80061bc:	40020488 	.word	0x40020488
 80061c0:	400204a0 	.word	0x400204a0
 80061c4:	400204b8 	.word	0x400204b8
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2208      	movs	r2, #8
 80061fa:	409a      	lsls	r2, r3
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f043 0201 	orr.w	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d06e      	beq.n	8006300 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a69      	ldr	r2, [pc, #420]	; (80063cc <HAL_DMA_IRQHandler+0x3f8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <HAL_DMA_IRQHandler+0x3fc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a66      	ldr	r2, [pc, #408]	; (80063d4 <HAL_DMA_IRQHandler+0x400>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a64      	ldr	r2, [pc, #400]	; (80063d8 <HAL_DMA_IRQHandler+0x404>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a63      	ldr	r2, [pc, #396]	; (80063dc <HAL_DMA_IRQHandler+0x408>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a61      	ldr	r2, [pc, #388]	; (80063e0 <HAL_DMA_IRQHandler+0x40c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_DMA_IRQHandler+0x410>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5e      	ldr	r2, [pc, #376]	; (80063e8 <HAL_DMA_IRQHandler+0x414>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a5d      	ldr	r2, [pc, #372]	; (80063ec <HAL_DMA_IRQHandler+0x418>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a5b      	ldr	r2, [pc, #364]	; (80063f0 <HAL_DMA_IRQHandler+0x41c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a5a      	ldr	r2, [pc, #360]	; (80063f4 <HAL_DMA_IRQHandler+0x420>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a58      	ldr	r2, [pc, #352]	; (80063f8 <HAL_DMA_IRQHandler+0x424>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a57      	ldr	r2, [pc, #348]	; (80063fc <HAL_DMA_IRQHandler+0x428>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a55      	ldr	r2, [pc, #340]	; (8006400 <HAL_DMA_IRQHandler+0x42c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a54      	ldr	r2, [pc, #336]	; (8006404 <HAL_DMA_IRQHandler+0x430>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x2ee>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a52      	ldr	r2, [pc, #328]	; (8006408 <HAL_DMA_IRQHandler+0x434>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10a      	bne.n	80062d8 <HAL_DMA_IRQHandler+0x304>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e003      	b.n	80062e0 <HAL_DMA_IRQHandler+0x30c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f043 0202 	orr.w	r2, r3, #2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2204      	movs	r2, #4
 800630a:	409a      	lsls	r2, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 808f 	beq.w	8006434 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2c      	ldr	r2, [pc, #176]	; (80063cc <HAL_DMA_IRQHandler+0x3f8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d04a      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <HAL_DMA_IRQHandler+0x3fc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d045      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a29      	ldr	r2, [pc, #164]	; (80063d4 <HAL_DMA_IRQHandler+0x400>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d040      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <HAL_DMA_IRQHandler+0x404>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d03b      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a26      	ldr	r2, [pc, #152]	; (80063dc <HAL_DMA_IRQHandler+0x408>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d036      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a24      	ldr	r2, [pc, #144]	; (80063e0 <HAL_DMA_IRQHandler+0x40c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d031      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <HAL_DMA_IRQHandler+0x410>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d02c      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <HAL_DMA_IRQHandler+0x414>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d027      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a20      	ldr	r2, [pc, #128]	; (80063ec <HAL_DMA_IRQHandler+0x418>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d022      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <HAL_DMA_IRQHandler+0x41c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01d      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <HAL_DMA_IRQHandler+0x420>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d018      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <HAL_DMA_IRQHandler+0x424>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <HAL_DMA_IRQHandler+0x428>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00e      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_DMA_IRQHandler+0x42c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d009      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a17      	ldr	r2, [pc, #92]	; (8006404 <HAL_DMA_IRQHandler+0x430>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d004      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x3e2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_DMA_IRQHandler+0x434>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d12a      	bne.n	800640c <HAL_DMA_IRQHandler+0x438>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e023      	b.n	8006414 <HAL_DMA_IRQHandler+0x440>
 80063cc:	40020010 	.word	0x40020010
 80063d0:	40020028 	.word	0x40020028
 80063d4:	40020040 	.word	0x40020040
 80063d8:	40020058 	.word	0x40020058
 80063dc:	40020070 	.word	0x40020070
 80063e0:	40020088 	.word	0x40020088
 80063e4:	400200a0 	.word	0x400200a0
 80063e8:	400200b8 	.word	0x400200b8
 80063ec:	40020410 	.word	0x40020410
 80063f0:	40020428 	.word	0x40020428
 80063f4:	40020440 	.word	0x40020440
 80063f8:	40020458 	.word	0x40020458
 80063fc:	40020470 	.word	0x40020470
 8006400:	40020488 	.word	0x40020488
 8006404:	400204a0 	.word	0x400204a0
 8006408:	400204b8 	.word	0x400204b8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00d      	beq.n	8006434 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	2204      	movs	r2, #4
 8006422:	409a      	lsls	r2, r3
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	f043 0204 	orr.w	r2, r3, #4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2210      	movs	r2, #16
 800643e:	409a      	lsls	r2, r3
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80a6 	beq.w	8006596 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a85      	ldr	r2, [pc, #532]	; (8006664 <HAL_DMA_IRQHandler+0x690>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d04a      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a83      	ldr	r2, [pc, #524]	; (8006668 <HAL_DMA_IRQHandler+0x694>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d045      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a82      	ldr	r2, [pc, #520]	; (800666c <HAL_DMA_IRQHandler+0x698>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d040      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a80      	ldr	r2, [pc, #512]	; (8006670 <HAL_DMA_IRQHandler+0x69c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d03b      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7f      	ldr	r2, [pc, #508]	; (8006674 <HAL_DMA_IRQHandler+0x6a0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d036      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7d      	ldr	r2, [pc, #500]	; (8006678 <HAL_DMA_IRQHandler+0x6a4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d031      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a7c      	ldr	r2, [pc, #496]	; (800667c <HAL_DMA_IRQHandler+0x6a8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d02c      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a7a      	ldr	r2, [pc, #488]	; (8006680 <HAL_DMA_IRQHandler+0x6ac>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d027      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a79      	ldr	r2, [pc, #484]	; (8006684 <HAL_DMA_IRQHandler+0x6b0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a77      	ldr	r2, [pc, #476]	; (8006688 <HAL_DMA_IRQHandler+0x6b4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01d      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a76      	ldr	r2, [pc, #472]	; (800668c <HAL_DMA_IRQHandler+0x6b8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a74      	ldr	r2, [pc, #464]	; (8006690 <HAL_DMA_IRQHandler+0x6bc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a73      	ldr	r2, [pc, #460]	; (8006694 <HAL_DMA_IRQHandler+0x6c0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a71      	ldr	r2, [pc, #452]	; (8006698 <HAL_DMA_IRQHandler+0x6c4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a70      	ldr	r2, [pc, #448]	; (800669c <HAL_DMA_IRQHandler+0x6c8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_DMA_IRQHandler+0x516>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a6e      	ldr	r2, [pc, #440]	; (80066a0 <HAL_DMA_IRQHandler+0x6cc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10a      	bne.n	8006500 <HAL_DMA_IRQHandler+0x52c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	e009      	b.n	8006514 <HAL_DMA_IRQHandler+0x540>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d03e      	beq.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2210      	movs	r2, #16
 8006522:	409a      	lsls	r2, r3
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d024      	beq.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
 8006554:	e01f      	b.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01b      	beq.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
 8006566:	e016      	b.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0208 	bic.w	r2, r2, #8
 8006584:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2220      	movs	r2, #32
 80065a0:	409a      	lsls	r2, r3
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8110 	beq.w	80067cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <HAL_DMA_IRQHandler+0x690>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04a      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <HAL_DMA_IRQHandler+0x694>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d045      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a29      	ldr	r2, [pc, #164]	; (800666c <HAL_DMA_IRQHandler+0x698>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d040      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a28      	ldr	r2, [pc, #160]	; (8006670 <HAL_DMA_IRQHandler+0x69c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a26      	ldr	r2, [pc, #152]	; (8006674 <HAL_DMA_IRQHandler+0x6a0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d036      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a25      	ldr	r2, [pc, #148]	; (8006678 <HAL_DMA_IRQHandler+0x6a4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d031      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a23      	ldr	r2, [pc, #140]	; (800667c <HAL_DMA_IRQHandler+0x6a8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02c      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a22      	ldr	r2, [pc, #136]	; (8006680 <HAL_DMA_IRQHandler+0x6ac>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d027      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <HAL_DMA_IRQHandler+0x6b0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <HAL_DMA_IRQHandler+0x6b4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_DMA_IRQHandler+0x6b8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_DMA_IRQHandler+0x6bc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <HAL_DMA_IRQHandler+0x6c0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a19      	ldr	r2, [pc, #100]	; (8006698 <HAL_DMA_IRQHandler+0x6c4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a17      	ldr	r2, [pc, #92]	; (800669c <HAL_DMA_IRQHandler+0x6c8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_DMA_IRQHandler+0x678>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <HAL_DMA_IRQHandler+0x6cc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d12b      	bne.n	80066a4 <HAL_DMA_IRQHandler+0x6d0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf14      	ite	ne
 800665a:	2301      	movne	r3, #1
 800665c:	2300      	moveq	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	e02a      	b.n	80066b8 <HAL_DMA_IRQHandler+0x6e4>
 8006662:	bf00      	nop
 8006664:	40020010 	.word	0x40020010
 8006668:	40020028 	.word	0x40020028
 800666c:	40020040 	.word	0x40020040
 8006670:	40020058 	.word	0x40020058
 8006674:	40020070 	.word	0x40020070
 8006678:	40020088 	.word	0x40020088
 800667c:	400200a0 	.word	0x400200a0
 8006680:	400200b8 	.word	0x400200b8
 8006684:	40020410 	.word	0x40020410
 8006688:	40020428 	.word	0x40020428
 800668c:	40020440 	.word	0x40020440
 8006690:	40020458 	.word	0x40020458
 8006694:	40020470 	.word	0x40020470
 8006698:	40020488 	.word	0x40020488
 800669c:	400204a0 	.word	0x400204a0
 80066a0:	400204b8 	.word	0x400204b8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bf14      	ite	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	2300      	moveq	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8087 	beq.w	80067cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2220      	movs	r2, #32
 80066c8:	409a      	lsls	r2, r3
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d139      	bne.n	800674e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0216 	bic.w	r2, r2, #22
 80066e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <HAL_DMA_IRQHandler+0x736>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0208 	bic.w	r2, r2, #8
 8006718:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	223f      	movs	r2, #63	; 0x3f
 8006724:	409a      	lsls	r2, r3
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 834a 	beq.w	8006dd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
          }
          return;
 800674c:	e344      	b.n	8006dd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d018      	beq.n	800678e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d108      	bne.n	800677c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	2b00      	cmp	r3, #0
 8006770:	d02c      	beq.n	80067cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
 800677a:	e027      	b.n	80067cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d023      	beq.n	80067cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
 800678c:	e01e      	b.n	80067cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0210 	bic.w	r2, r2, #16
 80067aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8306 	beq.w	8006de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8088 	beq.w	80068f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2204      	movs	r2, #4
 80067e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a7a      	ldr	r2, [pc, #488]	; (80069dc <HAL_DMA_IRQHandler+0xa08>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d04a      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a79      	ldr	r2, [pc, #484]	; (80069e0 <HAL_DMA_IRQHandler+0xa0c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d045      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a77      	ldr	r2, [pc, #476]	; (80069e4 <HAL_DMA_IRQHandler+0xa10>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d040      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a76      	ldr	r2, [pc, #472]	; (80069e8 <HAL_DMA_IRQHandler+0xa14>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d03b      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a74      	ldr	r2, [pc, #464]	; (80069ec <HAL_DMA_IRQHandler+0xa18>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d036      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a73      	ldr	r2, [pc, #460]	; (80069f0 <HAL_DMA_IRQHandler+0xa1c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d031      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a71      	ldr	r2, [pc, #452]	; (80069f4 <HAL_DMA_IRQHandler+0xa20>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d02c      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a70      	ldr	r2, [pc, #448]	; (80069f8 <HAL_DMA_IRQHandler+0xa24>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d027      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_DMA_IRQHandler+0xa28>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d022      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a6d      	ldr	r2, [pc, #436]	; (8006a00 <HAL_DMA_IRQHandler+0xa2c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d01d      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6b      	ldr	r2, [pc, #428]	; (8006a04 <HAL_DMA_IRQHandler+0xa30>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d018      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6a      	ldr	r2, [pc, #424]	; (8006a08 <HAL_DMA_IRQHandler+0xa34>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a68      	ldr	r2, [pc, #416]	; (8006a0c <HAL_DMA_IRQHandler+0xa38>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a67      	ldr	r2, [pc, #412]	; (8006a10 <HAL_DMA_IRQHandler+0xa3c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a65      	ldr	r2, [pc, #404]	; (8006a14 <HAL_DMA_IRQHandler+0xa40>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_DMA_IRQHandler+0x8b8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a64      	ldr	r2, [pc, #400]	; (8006a18 <HAL_DMA_IRQHandler+0xa44>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d108      	bne.n	800689e <HAL_DMA_IRQHandler+0x8ca>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e007      	b.n	80068ae <HAL_DMA_IRQHandler+0x8da>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d307      	bcc.n	80068ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f2      	bne.n	80068ae <HAL_DMA_IRQHandler+0x8da>
 80068c8:	e000      	b.n	80068cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068e2:	e003      	b.n	80068ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8272 	beq.w	8006de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	e26c      	b.n	8006de2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a43      	ldr	r2, [pc, #268]	; (8006a1c <HAL_DMA_IRQHandler+0xa48>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a42      	ldr	r2, [pc, #264]	; (8006a20 <HAL_DMA_IRQHandler+0xa4c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <HAL_DMA_IRQHandler+0xa50>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a3f      	ldr	r2, [pc, #252]	; (8006a28 <HAL_DMA_IRQHandler+0xa54>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a3d      	ldr	r2, [pc, #244]	; (8006a2c <HAL_DMA_IRQHandler+0xa58>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a3c      	ldr	r2, [pc, #240]	; (8006a30 <HAL_DMA_IRQHandler+0xa5c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3a      	ldr	r2, [pc, #232]	; (8006a34 <HAL_DMA_IRQHandler+0xa60>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x984>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a39      	ldr	r2, [pc, #228]	; (8006a38 <HAL_DMA_IRQHandler+0xa64>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <HAL_DMA_IRQHandler+0x988>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <HAL_DMA_IRQHandler+0x98a>
 800695c:	2300      	movs	r3, #0
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 823f 	beq.w	8006de2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	2204      	movs	r2, #4
 8006976:	409a      	lsls	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80cd 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xb48>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80c7 	beq.w	8006b1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2204      	movs	r2, #4
 8006998:	409a      	lsls	r2, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d049      	beq.n	8006a3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8210 	beq.w	8006ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069c4:	e20a      	b.n	8006ddc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8206 	beq.w	8006ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069d8:	e200      	b.n	8006ddc <HAL_DMA_IRQHandler+0xe08>
 80069da:	bf00      	nop
 80069dc:	40020010 	.word	0x40020010
 80069e0:	40020028 	.word	0x40020028
 80069e4:	40020040 	.word	0x40020040
 80069e8:	40020058 	.word	0x40020058
 80069ec:	40020070 	.word	0x40020070
 80069f0:	40020088 	.word	0x40020088
 80069f4:	400200a0 	.word	0x400200a0
 80069f8:	400200b8 	.word	0x400200b8
 80069fc:	40020410 	.word	0x40020410
 8006a00:	40020428 	.word	0x40020428
 8006a04:	40020440 	.word	0x40020440
 8006a08:	40020458 	.word	0x40020458
 8006a0c:	40020470 	.word	0x40020470
 8006a10:	40020488 	.word	0x40020488
 8006a14:	400204a0 	.word	0x400204a0
 8006a18:	400204b8 	.word	0x400204b8
 8006a1c:	58025408 	.word	0x58025408
 8006a20:	5802541c 	.word	0x5802541c
 8006a24:	58025430 	.word	0x58025430
 8006a28:	58025444 	.word	0x58025444
 8006a2c:	58025458 	.word	0x58025458
 8006a30:	5802546c 	.word	0x5802546c
 8006a34:	58025480 	.word	0x58025480
 8006a38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d160      	bne.n	8006b08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7f      	ldr	r2, [pc, #508]	; (8006c48 <HAL_DMA_IRQHandler+0xc74>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d04a      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7d      	ldr	r2, [pc, #500]	; (8006c4c <HAL_DMA_IRQHandler+0xc78>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d045      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a7c      	ldr	r2, [pc, #496]	; (8006c50 <HAL_DMA_IRQHandler+0xc7c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d040      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <HAL_DMA_IRQHandler+0xc80>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d03b      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a79      	ldr	r2, [pc, #484]	; (8006c58 <HAL_DMA_IRQHandler+0xc84>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d036      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a77      	ldr	r2, [pc, #476]	; (8006c5c <HAL_DMA_IRQHandler+0xc88>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d031      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a76      	ldr	r2, [pc, #472]	; (8006c60 <HAL_DMA_IRQHandler+0xc8c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d02c      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a74      	ldr	r2, [pc, #464]	; (8006c64 <HAL_DMA_IRQHandler+0xc90>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d027      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a73      	ldr	r2, [pc, #460]	; (8006c68 <HAL_DMA_IRQHandler+0xc94>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a71      	ldr	r2, [pc, #452]	; (8006c6c <HAL_DMA_IRQHandler+0xc98>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a70      	ldr	r2, [pc, #448]	; (8006c70 <HAL_DMA_IRQHandler+0xc9c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a6e      	ldr	r2, [pc, #440]	; (8006c74 <HAL_DMA_IRQHandler+0xca0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a6d      	ldr	r2, [pc, #436]	; (8006c78 <HAL_DMA_IRQHandler+0xca4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6b      	ldr	r2, [pc, #428]	; (8006c7c <HAL_DMA_IRQHandler+0xca8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6a      	ldr	r2, [pc, #424]	; (8006c80 <HAL_DMA_IRQHandler+0xcac>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xb12>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a68      	ldr	r2, [pc, #416]	; (8006c84 <HAL_DMA_IRQHandler+0xcb0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d108      	bne.n	8006af8 <HAL_DMA_IRQHandler+0xb24>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0208 	bic.w	r2, r2, #8
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e007      	b.n	8006b08 <HAL_DMA_IRQHandler+0xb34>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8165 	beq.w	8006ddc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b1a:	e15f      	b.n	8006ddc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2202      	movs	r2, #2
 8006b26:	409a      	lsls	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80c5 	beq.w	8006cbc <HAL_DMA_IRQHandler+0xce8>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80bf 	beq.w	8006cbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2202      	movs	r2, #2
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d018      	beq.n	8006b8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 813a 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b74:	e134      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8130 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b88:	e12a      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8089 	bne.w	8006ca8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <HAL_DMA_IRQHandler+0xc74>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d04a      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <HAL_DMA_IRQHandler+0xc78>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d045      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a28      	ldr	r2, [pc, #160]	; (8006c50 <HAL_DMA_IRQHandler+0xc7c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d040      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a26      	ldr	r2, [pc, #152]	; (8006c54 <HAL_DMA_IRQHandler+0xc80>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d03b      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <HAL_DMA_IRQHandler+0xc84>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d036      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a23      	ldr	r2, [pc, #140]	; (8006c5c <HAL_DMA_IRQHandler+0xc88>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d031      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a22      	ldr	r2, [pc, #136]	; (8006c60 <HAL_DMA_IRQHandler+0xc8c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d02c      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a20      	ldr	r2, [pc, #128]	; (8006c64 <HAL_DMA_IRQHandler+0xc90>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d027      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_DMA_IRQHandler+0xc94>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d022      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_DMA_IRQHandler+0xc98>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d01d      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_DMA_IRQHandler+0xc9c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d018      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <HAL_DMA_IRQHandler+0xca0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a19      	ldr	r2, [pc, #100]	; (8006c78 <HAL_DMA_IRQHandler+0xca4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00e      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	; (8006c7c <HAL_DMA_IRQHandler+0xca8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d009      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <HAL_DMA_IRQHandler+0xcac>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d004      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xc62>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a14      	ldr	r2, [pc, #80]	; (8006c84 <HAL_DMA_IRQHandler+0xcb0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d128      	bne.n	8006c88 <HAL_DMA_IRQHandler+0xcb4>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0214 	bic.w	r2, r2, #20
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e027      	b.n	8006c98 <HAL_DMA_IRQHandler+0xcc4>
 8006c48:	40020010 	.word	0x40020010
 8006c4c:	40020028 	.word	0x40020028
 8006c50:	40020040 	.word	0x40020040
 8006c54:	40020058 	.word	0x40020058
 8006c58:	40020070 	.word	0x40020070
 8006c5c:	40020088 	.word	0x40020088
 8006c60:	400200a0 	.word	0x400200a0
 8006c64:	400200b8 	.word	0x400200b8
 8006c68:	40020410 	.word	0x40020410
 8006c6c:	40020428 	.word	0x40020428
 8006c70:	40020440 	.word	0x40020440
 8006c74:	40020458 	.word	0x40020458
 8006c78:	40020470 	.word	0x40020470
 8006c7c:	40020488 	.word	0x40020488
 8006c80:	400204a0 	.word	0x400204a0
 8006c84:	400204b8 	.word	0x400204b8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 020a 	bic.w	r2, r2, #10
 8006c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8097 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cba:	e091      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8088 	beq.w	8006de2 <HAL_DMA_IRQHandler+0xe0e>
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8082 	beq.w	8006de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a41      	ldr	r2, [pc, #260]	; (8006de8 <HAL_DMA_IRQHandler+0xe14>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d04a      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <HAL_DMA_IRQHandler+0xe18>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d045      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3e      	ldr	r2, [pc, #248]	; (8006df0 <HAL_DMA_IRQHandler+0xe1c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d040      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3c      	ldr	r2, [pc, #240]	; (8006df4 <HAL_DMA_IRQHandler+0xe20>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d03b      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a3b      	ldr	r2, [pc, #236]	; (8006df8 <HAL_DMA_IRQHandler+0xe24>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d036      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <HAL_DMA_IRQHandler+0xe28>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d031      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a38      	ldr	r2, [pc, #224]	; (8006e00 <HAL_DMA_IRQHandler+0xe2c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d02c      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a36      	ldr	r2, [pc, #216]	; (8006e04 <HAL_DMA_IRQHandler+0xe30>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d027      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a35      	ldr	r2, [pc, #212]	; (8006e08 <HAL_DMA_IRQHandler+0xe34>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d022      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a33      	ldr	r2, [pc, #204]	; (8006e0c <HAL_DMA_IRQHandler+0xe38>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01d      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a32      	ldr	r2, [pc, #200]	; (8006e10 <HAL_DMA_IRQHandler+0xe3c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <HAL_DMA_IRQHandler+0xe40>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <HAL_DMA_IRQHandler+0xe44>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2d      	ldr	r2, [pc, #180]	; (8006e1c <HAL_DMA_IRQHandler+0xe48>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <HAL_DMA_IRQHandler+0xe4c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_DMA_IRQHandler+0xdaa>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <HAL_DMA_IRQHandler+0xe50>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d108      	bne.n	8006d90 <HAL_DMA_IRQHandler+0xdbc>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 021c 	bic.w	r2, r2, #28
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e007      	b.n	8006da0 <HAL_DMA_IRQHandler+0xdcc>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 020e 	bic.w	r2, r2, #14
 8006d9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2201      	movs	r2, #1
 8006daa:	409a      	lsls	r2, r3
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	e004      	b.n	8006de2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006dd8:	bf00      	nop
 8006dda:	e002      	b.n	8006de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006de2:	3728      	adds	r7, #40	; 0x28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40020010 	.word	0x40020010
 8006dec:	40020028 	.word	0x40020028
 8006df0:	40020040 	.word	0x40020040
 8006df4:	40020058 	.word	0x40020058
 8006df8:	40020070 	.word	0x40020070
 8006dfc:	40020088 	.word	0x40020088
 8006e00:	400200a0 	.word	0x400200a0
 8006e04:	400200b8 	.word	0x400200b8
 8006e08:	40020410 	.word	0x40020410
 8006e0c:	40020428 	.word	0x40020428
 8006e10:	40020440 	.word	0x40020440
 8006e14:	40020458 	.word	0x40020458
 8006e18:	40020470 	.word	0x40020470
 8006e1c:	40020488 	.word	0x40020488
 8006e20:	400204a0 	.word	0x400204a0
 8006e24:	400204b8 	.word	0x400204b8

08006e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7f      	ldr	r2, [pc, #508]	; (8007044 <DMA_SetConfig+0x21c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d072      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7d      	ldr	r2, [pc, #500]	; (8007048 <DMA_SetConfig+0x220>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d06d      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a7c      	ldr	r2, [pc, #496]	; (800704c <DMA_SetConfig+0x224>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d068      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a7a      	ldr	r2, [pc, #488]	; (8007050 <DMA_SetConfig+0x228>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d063      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a79      	ldr	r2, [pc, #484]	; (8007054 <DMA_SetConfig+0x22c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d05e      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a77      	ldr	r2, [pc, #476]	; (8007058 <DMA_SetConfig+0x230>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d059      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a76      	ldr	r2, [pc, #472]	; (800705c <DMA_SetConfig+0x234>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d054      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a74      	ldr	r2, [pc, #464]	; (8007060 <DMA_SetConfig+0x238>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04f      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a73      	ldr	r2, [pc, #460]	; (8007064 <DMA_SetConfig+0x23c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a71      	ldr	r2, [pc, #452]	; (8007068 <DMA_SetConfig+0x240>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a70      	ldr	r2, [pc, #448]	; (800706c <DMA_SetConfig+0x244>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6e      	ldr	r2, [pc, #440]	; (8007070 <DMA_SetConfig+0x248>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6d      	ldr	r2, [pc, #436]	; (8007074 <DMA_SetConfig+0x24c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a6b      	ldr	r2, [pc, #428]	; (8007078 <DMA_SetConfig+0x250>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a6a      	ldr	r2, [pc, #424]	; (800707c <DMA_SetConfig+0x254>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a68      	ldr	r2, [pc, #416]	; (8007080 <DMA_SetConfig+0x258>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a67      	ldr	r2, [pc, #412]	; (8007084 <DMA_SetConfig+0x25c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a65      	ldr	r2, [pc, #404]	; (8007088 <DMA_SetConfig+0x260>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a64      	ldr	r2, [pc, #400]	; (800708c <DMA_SetConfig+0x264>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a62      	ldr	r2, [pc, #392]	; (8007090 <DMA_SetConfig+0x268>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a61      	ldr	r2, [pc, #388]	; (8007094 <DMA_SetConfig+0x26c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a5f      	ldr	r2, [pc, #380]	; (8007098 <DMA_SetConfig+0x270>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a5e      	ldr	r2, [pc, #376]	; (800709c <DMA_SetConfig+0x274>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <DMA_SetConfig+0x10a>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a5c      	ldr	r2, [pc, #368]	; (80070a0 <DMA_SetConfig+0x278>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <DMA_SetConfig+0x10e>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <DMA_SetConfig+0x110>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00d      	beq.n	8006f58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	; (8007044 <DMA_SetConfig+0x21c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d04a      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a38      	ldr	r2, [pc, #224]	; (8007048 <DMA_SetConfig+0x220>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d045      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a36      	ldr	r2, [pc, #216]	; (800704c <DMA_SetConfig+0x224>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d040      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a35      	ldr	r2, [pc, #212]	; (8007050 <DMA_SetConfig+0x228>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d03b      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a33      	ldr	r2, [pc, #204]	; (8007054 <DMA_SetConfig+0x22c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d036      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a32      	ldr	r2, [pc, #200]	; (8007058 <DMA_SetConfig+0x230>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d031      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a30      	ldr	r2, [pc, #192]	; (800705c <DMA_SetConfig+0x234>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02c      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <DMA_SetConfig+0x238>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d027      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <DMA_SetConfig+0x23c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <DMA_SetConfig+0x240>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01d      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <DMA_SetConfig+0x244>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <DMA_SetConfig+0x248>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a27      	ldr	r2, [pc, #156]	; (8007074 <DMA_SetConfig+0x24c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <DMA_SetConfig+0x250>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a24      	ldr	r2, [pc, #144]	; (800707c <DMA_SetConfig+0x254>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <DMA_SetConfig+0x1d0>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a23      	ldr	r2, [pc, #140]	; (8007080 <DMA_SetConfig+0x258>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d101      	bne.n	8006ffc <DMA_SetConfig+0x1d4>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <DMA_SetConfig+0x1d6>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d059      	beq.n	80070b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	223f      	movs	r2, #63	; 0x3f
 800700c:	409a      	lsls	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007020:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d138      	bne.n	80070a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007042:	e086      	b.n	8007152 <DMA_SetConfig+0x32a>
 8007044:	40020010 	.word	0x40020010
 8007048:	40020028 	.word	0x40020028
 800704c:	40020040 	.word	0x40020040
 8007050:	40020058 	.word	0x40020058
 8007054:	40020070 	.word	0x40020070
 8007058:	40020088 	.word	0x40020088
 800705c:	400200a0 	.word	0x400200a0
 8007060:	400200b8 	.word	0x400200b8
 8007064:	40020410 	.word	0x40020410
 8007068:	40020428 	.word	0x40020428
 800706c:	40020440 	.word	0x40020440
 8007070:	40020458 	.word	0x40020458
 8007074:	40020470 	.word	0x40020470
 8007078:	40020488 	.word	0x40020488
 800707c:	400204a0 	.word	0x400204a0
 8007080:	400204b8 	.word	0x400204b8
 8007084:	58025408 	.word	0x58025408
 8007088:	5802541c 	.word	0x5802541c
 800708c:	58025430 	.word	0x58025430
 8007090:	58025444 	.word	0x58025444
 8007094:	58025458 	.word	0x58025458
 8007098:	5802546c 	.word	0x5802546c
 800709c:	58025480 	.word	0x58025480
 80070a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]
}
 80070b4:	e04d      	b.n	8007152 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a29      	ldr	r2, [pc, #164]	; (8007160 <DMA_SetConfig+0x338>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a27      	ldr	r2, [pc, #156]	; (8007164 <DMA_SetConfig+0x33c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a26      	ldr	r2, [pc, #152]	; (8007168 <DMA_SetConfig+0x340>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a24      	ldr	r2, [pc, #144]	; (800716c <DMA_SetConfig+0x344>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a23      	ldr	r2, [pc, #140]	; (8007170 <DMA_SetConfig+0x348>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a21      	ldr	r2, [pc, #132]	; (8007174 <DMA_SetConfig+0x34c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a20      	ldr	r2, [pc, #128]	; (8007178 <DMA_SetConfig+0x350>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <DMA_SetConfig+0x2de>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1e      	ldr	r2, [pc, #120]	; (800717c <DMA_SetConfig+0x354>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d101      	bne.n	800710a <DMA_SetConfig+0x2e2>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <DMA_SetConfig+0x2e4>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d020      	beq.n	8007152 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2201      	movs	r2, #1
 800711a:	409a      	lsls	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d108      	bne.n	8007142 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	60da      	str	r2, [r3, #12]
}
 8007140:	e007      	b.n	8007152 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	60da      	str	r2, [r3, #12]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	58025408 	.word	0x58025408
 8007164:	5802541c 	.word	0x5802541c
 8007168:	58025430 	.word	0x58025430
 800716c:	58025444 	.word	0x58025444
 8007170:	58025458 	.word	0x58025458
 8007174:	5802546c 	.word	0x5802546c
 8007178:	58025480 	.word	0x58025480
 800717c:	58025494 	.word	0x58025494

08007180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a42      	ldr	r2, [pc, #264]	; (8007298 <DMA_CalcBaseAndBitshift+0x118>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d04a      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a41      	ldr	r2, [pc, #260]	; (800729c <DMA_CalcBaseAndBitshift+0x11c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d045      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a3f      	ldr	r2, [pc, #252]	; (80072a0 <DMA_CalcBaseAndBitshift+0x120>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d040      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3e      	ldr	r2, [pc, #248]	; (80072a4 <DMA_CalcBaseAndBitshift+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d03b      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3c      	ldr	r2, [pc, #240]	; (80072a8 <DMA_CalcBaseAndBitshift+0x128>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d036      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a3b      	ldr	r2, [pc, #236]	; (80072ac <DMA_CalcBaseAndBitshift+0x12c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d031      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a39      	ldr	r2, [pc, #228]	; (80072b0 <DMA_CalcBaseAndBitshift+0x130>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d02c      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <DMA_CalcBaseAndBitshift+0x134>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d027      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a36      	ldr	r2, [pc, #216]	; (80072b8 <DMA_CalcBaseAndBitshift+0x138>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d022      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a35      	ldr	r2, [pc, #212]	; (80072bc <DMA_CalcBaseAndBitshift+0x13c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01d      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a33      	ldr	r2, [pc, #204]	; (80072c0 <DMA_CalcBaseAndBitshift+0x140>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d018      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a32      	ldr	r2, [pc, #200]	; (80072c4 <DMA_CalcBaseAndBitshift+0x144>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a30      	ldr	r2, [pc, #192]	; (80072c8 <DMA_CalcBaseAndBitshift+0x148>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00e      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <DMA_CalcBaseAndBitshift+0x14c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2d      	ldr	r2, [pc, #180]	; (80072d0 <DMA_CalcBaseAndBitshift+0x150>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xa8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <DMA_CalcBaseAndBitshift+0x154>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d101      	bne.n	800722c <DMA_CalcBaseAndBitshift+0xac>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <DMA_CalcBaseAndBitshift+0xae>
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d024      	beq.n	800727c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	3b10      	subs	r3, #16
 800723a:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <DMA_CalcBaseAndBitshift+0x158>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	4a24      	ldr	r2, [pc, #144]	; (80072dc <DMA_CalcBaseAndBitshift+0x15c>)
 800724c:	5cd3      	ldrb	r3, [r2, r3]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b03      	cmp	r3, #3
 8007258:	d908      	bls.n	800726c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <DMA_CalcBaseAndBitshift+0x160>)
 8007262:	4013      	ands	r3, r2
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	659a      	str	r2, [r3, #88]	; 0x58
 800726a:	e00d      	b.n	8007288 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <DMA_CalcBaseAndBitshift+0x160>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6593      	str	r3, [r2, #88]	; 0x58
 800727a:	e005      	b.n	8007288 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40020010 	.word	0x40020010
 800729c:	40020028 	.word	0x40020028
 80072a0:	40020040 	.word	0x40020040
 80072a4:	40020058 	.word	0x40020058
 80072a8:	40020070 	.word	0x40020070
 80072ac:	40020088 	.word	0x40020088
 80072b0:	400200a0 	.word	0x400200a0
 80072b4:	400200b8 	.word	0x400200b8
 80072b8:	40020410 	.word	0x40020410
 80072bc:	40020428 	.word	0x40020428
 80072c0:	40020440 	.word	0x40020440
 80072c4:	40020458 	.word	0x40020458
 80072c8:	40020470 	.word	0x40020470
 80072cc:	40020488 	.word	0x40020488
 80072d0:	400204a0 	.word	0x400204a0
 80072d4:	400204b8 	.word	0x400204b8
 80072d8:	aaaaaaab 	.word	0xaaaaaaab
 80072dc:	0800fe10 	.word	0x0800fe10
 80072e0:	fffffc00 	.word	0xfffffc00

080072e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d120      	bne.n	800733a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d858      	bhi.n	80073b2 <DMA_CheckFifoParam+0xce>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <DMA_CheckFifoParam+0x24>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007319 	.word	0x08007319
 800730c:	0800732b 	.word	0x0800732b
 8007310:	08007319 	.word	0x08007319
 8007314:	080073b3 	.word	0x080073b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d048      	beq.n	80073b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007328:	e045      	b.n	80073b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007332:	d142      	bne.n	80073ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007338:	e03f      	b.n	80073ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007342:	d123      	bne.n	800738c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	2b03      	cmp	r3, #3
 800734a:	d838      	bhi.n	80073be <DMA_CheckFifoParam+0xda>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <DMA_CheckFifoParam+0x70>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007365 	.word	0x08007365
 8007358:	0800736b 	.word	0x0800736b
 800735c:	08007365 	.word	0x08007365
 8007360:	0800737d 	.word	0x0800737d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
        break;
 8007368:	e030      	b.n	80073cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d025      	beq.n	80073c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800737a:	e022      	b.n	80073c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007384:	d11f      	bne.n	80073c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800738a:	e01c      	b.n	80073c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	2b02      	cmp	r3, #2
 8007392:	d902      	bls.n	800739a <DMA_CheckFifoParam+0xb6>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d003      	beq.n	80073a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007398:	e018      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	73fb      	strb	r3, [r7, #15]
        break;
 800739e:	e015      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
    break;
 80073b0:	e00b      	b.n	80073ca <DMA_CheckFifoParam+0xe6>
        break;
 80073b2:	bf00      	nop
 80073b4:	e00a      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        break;
 80073b6:	bf00      	nop
 80073b8:	e008      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        break;
 80073ba:	bf00      	nop
 80073bc:	e006      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        break;
 80073be:	bf00      	nop
 80073c0:	e004      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
        break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <DMA_CheckFifoParam+0xe8>
    break;
 80073ca:	bf00      	nop
    }
  }

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop

080073dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a38      	ldr	r2, [pc, #224]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a36      	ldr	r2, [pc, #216]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01d      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a35      	ldr	r2, [pc, #212]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a33      	ldr	r2, [pc, #204]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a32      	ldr	r2, [pc, #200]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a30      	ldr	r2, [pc, #192]	; (80074e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2f      	ldr	r2, [pc, #188]	; (80074e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01a      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	3b08      	subs	r3, #8
 800744c:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4b26      	ldr	r3, [pc, #152]	; (80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2201      	movs	r2, #1
 8007472:	409a      	lsls	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007478:	e024      	b.n	80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b10      	subs	r3, #16
 8007482:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d806      	bhi.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d902      	bls.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3308      	adds	r3, #8
 80074a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4b18      	ldr	r3, [pc, #96]	; (8007508 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	461a      	mov	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2201      	movs	r2, #1
 80074be:	409a      	lsls	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	58025408 	.word	0x58025408
 80074d4:	5802541c 	.word	0x5802541c
 80074d8:	58025430 	.word	0x58025430
 80074dc:	58025444 	.word	0x58025444
 80074e0:	58025458 	.word	0x58025458
 80074e4:	5802546c 	.word	0x5802546c
 80074e8:	58025480 	.word	0x58025480
 80074ec:	58025494 	.word	0x58025494
 80074f0:	cccccccd 	.word	0xcccccccd
 80074f4:	16009600 	.word	0x16009600
 80074f8:	58025880 	.word	0x58025880
 80074fc:	aaaaaaab 	.word	0xaaaaaaab
 8007500:	400204b8 	.word	0x400204b8
 8007504:	4002040f 	.word	0x4002040f
 8007508:	10008200 	.word	0x10008200
 800750c:	40020880 	.word	0x40020880

08007510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d04a      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d847      	bhi.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a25      	ldr	r2, [pc, #148]	; (80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d022      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a24      	ldr	r2, [pc, #144]	; (80075cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a22      	ldr	r2, [pc, #136]	; (80075d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d018      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d009      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d101      	bne.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007598:	671a      	str	r2, [r3, #112]	; 0x70
 800759a:	e009      	b.n	80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	58025408 	.word	0x58025408
 80075cc:	5802541c 	.word	0x5802541c
 80075d0:	58025430 	.word	0x58025430
 80075d4:	58025444 	.word	0x58025444
 80075d8:	58025458 	.word	0x58025458
 80075dc:	5802546c 	.word	0x5802546c
 80075e0:	58025480 	.word	0x58025480
 80075e4:	58025494 	.word	0x58025494
 80075e8:	1600963f 	.word	0x1600963f
 80075ec:	58025940 	.word	0x58025940
 80075f0:	1000823f 	.word	0x1000823f
 80075f4:	40020940 	.word	0x40020940

080075f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007606:	4b89      	ldr	r3, [pc, #548]	; (800782c <HAL_GPIO_Init+0x234>)
 8007608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800760a:	e194      	b.n	8007936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	2101      	movs	r1, #1
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	4013      	ands	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8186 	beq.w	8007930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	2b01      	cmp	r3, #1
 800762e:	d005      	beq.n	800763c <HAL_GPIO_Init+0x44>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d130      	bne.n	800769e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	2203      	movs	r2, #3
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	43db      	mvns	r3, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4013      	ands	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4313      	orrs	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007672:	2201      	movs	r2, #1
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	43db      	mvns	r3, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4013      	ands	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	f003 0201 	and.w	r2, r3, #1
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4313      	orrs	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d017      	beq.n	80076da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	2203      	movs	r2, #3
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43db      	mvns	r3, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d123      	bne.n	800772e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	08da      	lsrs	r2, r3, #3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3208      	adds	r2, #8
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	220f      	movs	r2, #15
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4313      	orrs	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	08da      	lsrs	r2, r3, #3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3208      	adds	r2, #8
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	2203      	movs	r2, #3
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f003 0203 	and.w	r2, r3, #3
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80e0 	beq.w	8007930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007770:	4b2f      	ldr	r3, [pc, #188]	; (8007830 <HAL_GPIO_Init+0x238>)
 8007772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007776:	4a2e      	ldr	r2, [pc, #184]	; (8007830 <HAL_GPIO_Init+0x238>)
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007780:	4b2b      	ldr	r3, [pc, #172]	; (8007830 <HAL_GPIO_Init+0x238>)
 8007782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800778e:	4a29      	ldr	r2, [pc, #164]	; (8007834 <HAL_GPIO_Init+0x23c>)
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	089b      	lsrs	r3, r3, #2
 8007794:	3302      	adds	r3, #2
 8007796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	220f      	movs	r2, #15
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	43db      	mvns	r3, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4013      	ands	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a20      	ldr	r2, [pc, #128]	; (8007838 <HAL_GPIO_Init+0x240>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d052      	beq.n	8007860 <HAL_GPIO_Init+0x268>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a1f      	ldr	r2, [pc, #124]	; (800783c <HAL_GPIO_Init+0x244>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d031      	beq.n	8007826 <HAL_GPIO_Init+0x22e>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <HAL_GPIO_Init+0x248>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d02b      	beq.n	8007822 <HAL_GPIO_Init+0x22a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <HAL_GPIO_Init+0x24c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d025      	beq.n	800781e <HAL_GPIO_Init+0x226>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <HAL_GPIO_Init+0x250>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01f      	beq.n	800781a <HAL_GPIO_Init+0x222>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <HAL_GPIO_Init+0x254>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d019      	beq.n	8007816 <HAL_GPIO_Init+0x21e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <HAL_GPIO_Init+0x258>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_GPIO_Init+0x21a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <HAL_GPIO_Init+0x25c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00d      	beq.n	800780e <HAL_GPIO_Init+0x216>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a18      	ldr	r2, [pc, #96]	; (8007858 <HAL_GPIO_Init+0x260>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d007      	beq.n	800780a <HAL_GPIO_Init+0x212>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a17      	ldr	r2, [pc, #92]	; (800785c <HAL_GPIO_Init+0x264>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d101      	bne.n	8007806 <HAL_GPIO_Init+0x20e>
 8007802:	2309      	movs	r3, #9
 8007804:	e02d      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 8007806:	230a      	movs	r3, #10
 8007808:	e02b      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 800780a:	2308      	movs	r3, #8
 800780c:	e029      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 800780e:	2307      	movs	r3, #7
 8007810:	e027      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 8007812:	2306      	movs	r3, #6
 8007814:	e025      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 8007816:	2305      	movs	r3, #5
 8007818:	e023      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 800781a:	2304      	movs	r3, #4
 800781c:	e021      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 800781e:	2303      	movs	r3, #3
 8007820:	e01f      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 8007822:	2302      	movs	r3, #2
 8007824:	e01d      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 8007826:	2301      	movs	r3, #1
 8007828:	e01b      	b.n	8007862 <HAL_GPIO_Init+0x26a>
 800782a:	bf00      	nop
 800782c:	58000080 	.word	0x58000080
 8007830:	58024400 	.word	0x58024400
 8007834:	58000400 	.word	0x58000400
 8007838:	58020000 	.word	0x58020000
 800783c:	58020400 	.word	0x58020400
 8007840:	58020800 	.word	0x58020800
 8007844:	58020c00 	.word	0x58020c00
 8007848:	58021000 	.word	0x58021000
 800784c:	58021400 	.word	0x58021400
 8007850:	58021800 	.word	0x58021800
 8007854:	58021c00 	.word	0x58021c00
 8007858:	58022000 	.word	0x58022000
 800785c:	58022400 	.word	0x58022400
 8007860:	2300      	movs	r3, #0
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	f002 0203 	and.w	r2, r2, #3
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	4093      	lsls	r3, r2
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007872:	4938      	ldr	r1, [pc, #224]	; (8007954 <HAL_GPIO_Init+0x35c>)
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	089b      	lsrs	r3, r3, #2
 8007878:	3302      	adds	r3, #2
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80078a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80078ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80078d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	4013      	ands	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	f47f ae63 	bne.w	800760c <HAL_GPIO_Init+0x14>
  }
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	3724      	adds	r7, #36	; 0x24
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	58000400 	.word	0x58000400

08007958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	887b      	ldrh	r3, [r7, #2]
 800796a:	4013      	ands	r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
 8007974:	e001      	b.n	800797a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	807b      	strh	r3, [r7, #2]
 8007994:	4613      	mov	r3, r2
 8007996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007998:	787b      	ldrb	r3, [r7, #1]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800799e:	887a      	ldrh	r2, [r7, #2]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80079a4:	e003      	b.n	80079ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80079a6:	887b      	ldrh	r3, [r7, #2]
 80079a8:	041a      	lsls	r2, r3, #16
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	619a      	str	r2, [r3, #24]
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07f      	b.n	8007ace <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa fb76 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2224      	movs	r2, #36	; 0x24
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a32:	609a      	str	r2, [r3, #8]
 8007a34:	e006      	b.n	8007a44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d104      	bne.n	8007a56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6859      	ldr	r1, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <HAL_I2C_Init+0x11c>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	02008000 	.word	0x02008000

08007adc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	460b      	mov	r3, r1
 8007aea:	817b      	strh	r3, [r7, #10]
 8007aec:	4613      	mov	r3, r2
 8007aee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	f040 80da 	bne.w	8007cb2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_I2C_Master_Transmit+0x30>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e0d3      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b14:	f7fa fed6 	bl	80028c4 <HAL_GetTick>
 8007b18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2319      	movs	r3, #25
 8007b20:	2201      	movs	r2, #1
 8007b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f9e6 	bl	8007ef8 <I2C_WaitOnFlagUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0be      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2221      	movs	r2, #33	; 0x21
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2210      	movs	r2, #16
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	893a      	ldrh	r2, [r7, #8]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2bff      	cmp	r3, #255	; 0xff
 8007b66:	d90e      	bls.n	8007b86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	8979      	ldrh	r1, [r7, #10]
 8007b76:	4b51      	ldr	r3, [pc, #324]	; (8007cbc <HAL_I2C_Master_Transmit+0x1e0>)
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 fbdc 	bl	800833c <I2C_TransferConfig>
 8007b84:	e06c      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	4b48      	ldr	r3, [pc, #288]	; (8007cbc <HAL_I2C_Master_Transmit+0x1e0>)
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fbcb 	bl	800833c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ba6:	e05b      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	6a39      	ldr	r1, [r7, #32]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f9e3 	bl	8007f78 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e07b      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d034      	beq.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d130      	bne.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2180      	movs	r1, #128	; 0x80
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f975 	bl	8007ef8 <I2C_WaitOnFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e04d      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2bff      	cmp	r3, #255	; 0xff
 8007c20:	d90e      	bls.n	8007c40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	8979      	ldrh	r1, [r7, #10]
 8007c30:	2300      	movs	r3, #0
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fb7f 	bl	800833c <I2C_TransferConfig>
 8007c3e:	e00f      	b.n	8007c60 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	8979      	ldrh	r1, [r7, #10]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fb6e 	bl	800833c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d19e      	bne.n	8007ba8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	6a39      	ldr	r1, [r7, #32]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f9c2 	bl	8007ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e01a      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2220      	movs	r2, #32
 8007c84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c92:	400b      	ands	r3, r1
 8007c94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e000      	b.n	8007cb4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	80002000 	.word	0x80002000
 8007cc0:	fe00e800 	.word	0xfe00e800

08007cc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	817b      	strh	r3, [r7, #10]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	f040 80db 	bne.w	8007e9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_I2C_Master_Receive+0x30>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e0d4      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cfc:	f7fa fde2 	bl	80028c4 <HAL_GetTick>
 8007d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2319      	movs	r3, #25
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f8f2 	bl	8007ef8 <I2C_WaitOnFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0bf      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2222      	movs	r2, #34	; 0x22
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2210      	movs	r2, #16
 8007d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	893a      	ldrh	r2, [r7, #8]
 8007d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2bff      	cmp	r3, #255	; 0xff
 8007d4e:	d90e      	bls.n	8007d6e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	8979      	ldrh	r1, [r7, #10]
 8007d5e:	4b52      	ldr	r3, [pc, #328]	; (8007ea8 <HAL_I2C_Master_Receive+0x1e4>)
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fae8 	bl	800833c <I2C_TransferConfig>
 8007d6c:	e06d      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	8979      	ldrh	r1, [r7, #10]
 8007d80:	4b49      	ldr	r3, [pc, #292]	; (8007ea8 <HAL_I2C_Master_Receive+0x1e4>)
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fad7 	bl	800833c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d8e:	e05c      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	6a39      	ldr	r1, [r7, #32]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f96b 	bl	8008070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e07c      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d034      	beq.n	8007e4a <HAL_I2C_Master_Receive+0x186>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d130      	bne.n	8007e4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2200      	movs	r2, #0
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f880 	bl	8007ef8 <I2C_WaitOnFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e04d      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2bff      	cmp	r3, #255	; 0xff
 8007e0a:	d90e      	bls.n	8007e2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	22ff      	movs	r2, #255	; 0xff
 8007e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	8979      	ldrh	r1, [r7, #10]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fa8a 	bl	800833c <I2C_TransferConfig>
 8007e28:	e00f      	b.n	8007e4a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	8979      	ldrh	r1, [r7, #10]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fa79 	bl	800833c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d19d      	bne.n	8007d90 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	6a39      	ldr	r1, [r7, #32]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f8cd 	bl	8007ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e01a      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6859      	ldr	r1, [r3, #4]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_I2C_Master_Receive+0x1e8>)
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	80002400 	.word	0x80002400
 8007eac:	fe00e800 	.word	0xfe00e800

08007eb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d007      	beq.n	8007eec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	619a      	str	r2, [r3, #24]
  }
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f08:	e022      	b.n	8007f50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f10:	d01e      	beq.n	8007f50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f12:	f7fa fcd7 	bl	80028c4 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d302      	bcc.n	8007f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d113      	bne.n	8007f50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2c:	f043 0220 	orr.w	r2, r3, #32
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e00f      	b.n	8007f70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d0cd      	beq.n	8007f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f84:	e02c      	b.n	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f8ea 	bl	8008164 <I2C_IsErrorOccurred>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e02a      	b.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fa0:	d01e      	beq.n	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa2:	f7fa fc8f 	bl	80028c4 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d302      	bcc.n	8007fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d113      	bne.n	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbc:	f043 0220 	orr.w	r2, r3, #32
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e007      	b.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d1cb      	bne.n	8007f86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008004:	e028      	b.n	8008058 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f8aa 	bl	8008164 <I2C_IsErrorOccurred>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e026      	b.n	8008068 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801a:	f7fa fc53 	bl	80028c4 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d113      	bne.n	8008058 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e007      	b.n	8008068 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b20      	cmp	r3, #32
 8008064:	d1cf      	bne.n	8008006 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800807c:	e064      	b.n	8008148 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f86e 	bl	8008164 <I2C_IsErrorOccurred>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e062      	b.n	8008158 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d138      	bne.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d105      	bne.n	80080ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e04e      	b.n	8008158 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d107      	bne.n	80080d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2210      	movs	r2, #16
 80080ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2204      	movs	r2, #4
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
 80080d6:	e002      	b.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2220      	movs	r2, #32
 80080e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6859      	ldr	r1, [r3, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80080f2:	400b      	ands	r3, r1
 80080f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e022      	b.n	8008158 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fa fbd7 	bl	80028c4 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10f      	bne.n	8008148 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812c:	f043 0220 	orr.w	r2, r3, #32
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e007      	b.n	8008158 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d193      	bne.n	800807e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	fe00e800 	.word	0xfe00e800

08008164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	; 0x28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	d075      	beq.n	800827c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2210      	movs	r2, #16
 8008196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008198:	e056      	b.n	8008248 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a0:	d052      	beq.n	8008248 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081a2:	f7fa fb8f 	bl	80028c4 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d302      	bcc.n	80081b8 <I2C_IsErrorOccurred+0x54>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d147      	bne.n	8008248 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081da:	d12e      	bne.n	800823a <I2C_IsErrorOccurred+0xd6>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081e2:	d02a      	beq.n	800823a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80081e4:	7cfb      	ldrb	r3, [r7, #19]
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d027      	beq.n	800823a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081fa:	f7fa fb63 	bl	80028c4 <HAL_GetTick>
 80081fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008200:	e01b      	b.n	800823a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008202:	f7fa fb5f 	bl	80028c4 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b19      	cmp	r3, #25
 800820e:	d914      	bls.n	800823a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	f043 0220 	orr.w	r2, r3, #32
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b20      	cmp	r3, #32
 8008246:	d1dc      	bne.n	8008202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d003      	beq.n	800825e <I2C_IsErrorOccurred+0xfa>
 8008256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800825a:	2b00      	cmp	r3, #0
 800825c:	d09d      	beq.n	800819a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800825e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2220      	movs	r2, #32
 800826c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f043 0304 	orr.w	r3, r3, #4
 8008274:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800829e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	f043 0308 	orr.w	r3, r3, #8
 80082b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	f043 0302 	orr.w	r3, r3, #2
 80082d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80082ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01c      	beq.n	800832c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7ff fddc 	bl	8007eb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6859      	ldr	r1, [r3, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <I2C_IsErrorOccurred+0x1d4>)
 8008304:	400b      	ands	r3, r1
 8008306:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	431a      	orrs	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800832c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008330:	4618      	mov	r0, r3
 8008332:	3728      	adds	r7, #40	; 0x28
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	fe00e800 	.word	0xfe00e800

0800833c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	607b      	str	r3, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	817b      	strh	r3, [r7, #10]
 800834a:	4613      	mov	r3, r2
 800834c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800834e:	897b      	ldrh	r3, [r7, #10]
 8008350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008354:	7a7b      	ldrb	r3, [r7, #9]
 8008356:	041b      	lsls	r3, r3, #16
 8008358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800835c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	4313      	orrs	r3, r2
 8008366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800836a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	0d5b      	lsrs	r3, r3, #21
 8008376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800837a:	4b08      	ldr	r3, [pc, #32]	; (800839c <I2C_TransferConfig+0x60>)
 800837c:	430b      	orrs	r3, r1
 800837e:	43db      	mvns	r3, r3
 8008380:	ea02 0103 	and.w	r1, r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	03ff63ff 	.word	0x03ff63ff

080083a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d138      	bne.n	8008428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e032      	b.n	800842a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2224      	movs	r2, #36	; 0x24
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0201 	bic.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0201 	orr.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b20      	cmp	r3, #32
 800844a:	d139      	bne.n	80084c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008456:	2302      	movs	r3, #2
 8008458:	e033      	b.n	80084c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2224      	movs	r2, #36	; 0x24
 8008466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	e000      	b.n	80084c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084c0:	2302      	movs	r3, #2
  }
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80084dc:	4b18      	ldr	r3, [pc, #96]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f023 0201 	bic.w	r2, r3, #1
 80084e4:	4916      	ldr	r1, [pc, #88]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80084ec:	4b14      	ldr	r3, [pc, #80]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4a13      	ldr	r2, [pc, #76]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084f2:	f023 0305 	bic.w	r3, r3, #5
 80084f6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	4a10      	ldr	r2, [pc, #64]	; (8008540 <HAL_PWR_EnterSTOPMode+0x70>)
 80084fe:	f023 0302 	bic.w	r3, r3, #2
 8008502:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <HAL_PWR_EnterSTOPMode+0x74>)
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <HAL_PWR_EnterSTOPMode+0x74>)
 800850a:	f043 0304 	orr.w	r3, r3, #4
 800850e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008510:	f3bf 8f4f 	dsb	sy
}
 8008514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008516:	f3bf 8f6f 	isb	sy
}
 800851a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8008522:	bf30      	wfi
 8008524:	e000      	b.n	8008528 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008526:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <HAL_PWR_EnterSTOPMode+0x74>)
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	4a05      	ldr	r2, [pc, #20]	; (8008544 <HAL_PWR_EnterSTOPMode+0x74>)
 800852e:	f023 0304 	bic.w	r3, r3, #4
 8008532:	6113      	str	r3, [r2, #16]
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	58024800 	.word	0x58024800
 8008544:	e000ed00 	.word	0xe000ed00

08008548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b04      	cmp	r3, #4
 800855a:	d00a      	beq.n	8008572 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d001      	beq.n	800856e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e01f      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	e01d      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f023 0207 	bic.w	r2, r3, #7
 800857a:	490f      	ldr	r1, [pc, #60]	; (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4313      	orrs	r3, r2
 8008580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008582:	f7fa f99f 	bl	80028c4 <HAL_GetTick>
 8008586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008588:	e009      	b.n	800859e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800858a:	f7fa f99b 	bl	80028c4 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008598:	d901      	bls.n	800859e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e007      	b.n	80085ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <HAL_PWREx_ConfigSupply+0x70>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085aa:	d1ee      	bne.n	800858a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	58024800 	.word	0x58024800

080085bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08c      	sub	sp, #48	; 0x30
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f000 bc1d 	b.w	8008e0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8087 	beq.w	80086ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085de:	4b99      	ldr	r3, [pc, #612]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085e8:	4b96      	ldr	r3, [pc, #600]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d007      	beq.n	8008604 <HAL_RCC_OscConfig+0x48>
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	2b18      	cmp	r3, #24
 80085f8:	d110      	bne.n	800861c <HAL_RCC_OscConfig+0x60>
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d10b      	bne.n	800861c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008604:	4b8f      	ldr	r3, [pc, #572]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d06c      	beq.n	80086ea <HAL_RCC_OscConfig+0x12e>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d168      	bne.n	80086ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e3f6      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d106      	bne.n	8008634 <HAL_RCC_OscConfig+0x78>
 8008626:	4b87      	ldr	r3, [pc, #540]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a86      	ldr	r2, [pc, #536]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800862c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e02e      	b.n	8008692 <HAL_RCC_OscConfig+0xd6>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10c      	bne.n	8008656 <HAL_RCC_OscConfig+0x9a>
 800863c:	4b81      	ldr	r3, [pc, #516]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a80      	ldr	r2, [pc, #512]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	4b7e      	ldr	r3, [pc, #504]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a7d      	ldr	r2, [pc, #500]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800864e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	e01d      	b.n	8008692 <HAL_RCC_OscConfig+0xd6>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800865e:	d10c      	bne.n	800867a <HAL_RCC_OscConfig+0xbe>
 8008660:	4b78      	ldr	r3, [pc, #480]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a77      	ldr	r2, [pc, #476]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	4b75      	ldr	r3, [pc, #468]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a74      	ldr	r2, [pc, #464]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	e00b      	b.n	8008692 <HAL_RCC_OscConfig+0xd6>
 800867a:	4b72      	ldr	r3, [pc, #456]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a71      	ldr	r2, [pc, #452]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b6f      	ldr	r3, [pc, #444]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a6e      	ldr	r2, [pc, #440]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800868c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d013      	beq.n	80086c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869a:	f7fa f913 	bl	80028c4 <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a2:	f7fa f90f 	bl	80028c4 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b64      	cmp	r3, #100	; 0x64
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e3aa      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086b4:	4b63      	ldr	r3, [pc, #396]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0f0      	beq.n	80086a2 <HAL_RCC_OscConfig+0xe6>
 80086c0:	e014      	b.n	80086ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c2:	f7fa f8ff 	bl	80028c4 <HAL_GetTick>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086ca:	f7fa f8fb 	bl	80028c4 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b64      	cmp	r3, #100	; 0x64
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e396      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086dc:	4b59      	ldr	r3, [pc, #356]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <HAL_RCC_OscConfig+0x10e>
 80086e8:	e000      	b.n	80086ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80cb 	beq.w	8008890 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086fa:	4b52      	ldr	r3, [pc, #328]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008702:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008704:	4b4f      	ldr	r3, [pc, #316]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <HAL_RCC_OscConfig+0x164>
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b18      	cmp	r3, #24
 8008714:	d156      	bne.n	80087c4 <HAL_RCC_OscConfig+0x208>
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d151      	bne.n	80087c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008720:	4b48      	ldr	r3, [pc, #288]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_RCC_OscConfig+0x17c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e368      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008738:	4b42      	ldr	r3, [pc, #264]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f023 0219 	bic.w	r2, r3, #25
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	493f      	ldr	r1, [pc, #252]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800874a:	f7fa f8bb 	bl	80028c4 <HAL_GetTick>
 800874e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008750:	e008      	b.n	8008764 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008752:	f7fa f8b7 	bl	80028c4 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e352      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008764:	4b37      	ldr	r3, [pc, #220]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0f0      	beq.n	8008752 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008770:	f7fa f8e8 	bl	8002944 <HAL_GetREVID>
 8008774:	4603      	mov	r3, r0
 8008776:	f241 0203 	movw	r2, #4099	; 0x1003
 800877a:	4293      	cmp	r3, r2
 800877c:	d817      	bhi.n	80087ae <HAL_RCC_OscConfig+0x1f2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b40      	cmp	r3, #64	; 0x40
 8008784:	d108      	bne.n	8008798 <HAL_RCC_OscConfig+0x1dc>
 8008786:	4b2f      	ldr	r3, [pc, #188]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800878e:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008796:	e07b      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008798:	4b2a      	ldr	r3, [pc, #168]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	4927      	ldr	r1, [pc, #156]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ac:	e070      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	061b      	lsls	r3, r3, #24
 80087bc:	4921      	ldr	r1, [pc, #132]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c2:	e065      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d048      	beq.n	800885e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f023 0219 	bic.w	r2, r3, #25
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	491a      	ldr	r1, [pc, #104]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087de:	f7fa f871 	bl	80028c4 <HAL_GetTick>
 80087e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087e6:	f7fa f86d 	bl	80028c4 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e308      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0f0      	beq.n	80087e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008804:	f7fa f89e 	bl	8002944 <HAL_GetREVID>
 8008808:	4603      	mov	r3, r0
 800880a:	f241 0203 	movw	r2, #4099	; 0x1003
 800880e:	4293      	cmp	r3, r2
 8008810:	d81a      	bhi.n	8008848 <HAL_RCC_OscConfig+0x28c>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d108      	bne.n	800882c <HAL_RCC_OscConfig+0x270>
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 8008824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008828:	6053      	str	r3, [r2, #4]
 800882a:	e031      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
 800882c:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	031b      	lsls	r3, r3, #12
 800883a:	4902      	ldr	r1, [pc, #8]	; (8008844 <HAL_RCC_OscConfig+0x288>)
 800883c:	4313      	orrs	r3, r2
 800883e:	604b      	str	r3, [r1, #4]
 8008840:	e026      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
 8008842:	bf00      	nop
 8008844:	58024400 	.word	0x58024400
 8008848:	4b9a      	ldr	r3, [pc, #616]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	4997      	ldr	r1, [pc, #604]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008858:	4313      	orrs	r3, r2
 800885a:	604b      	str	r3, [r1, #4]
 800885c:	e018      	b.n	8008890 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800885e:	4b95      	ldr	r3, [pc, #596]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a94      	ldr	r2, [pc, #592]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008864:	f023 0301 	bic.w	r3, r3, #1
 8008868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886a:	f7fa f82b 	bl	80028c4 <HAL_GetTick>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008872:	f7fa f827 	bl	80028c4 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e2c2      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008884:	4b8b      	ldr	r3, [pc, #556]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f0      	bne.n	8008872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80a9 	beq.w	80089f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800889e:	4b85      	ldr	r3, [pc, #532]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088a8:	4b82      	ldr	r3, [pc, #520]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d007      	beq.n	80088c4 <HAL_RCC_OscConfig+0x308>
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	2b18      	cmp	r3, #24
 80088b8:	d13a      	bne.n	8008930 <HAL_RCC_OscConfig+0x374>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d135      	bne.n	8008930 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088c4:	4b7b      	ldr	r3, [pc, #492]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCC_OscConfig+0x320>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b80      	cmp	r3, #128	; 0x80
 80088d6:	d001      	beq.n	80088dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e296      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088dc:	f7fa f832 	bl	8002944 <HAL_GetREVID>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d817      	bhi.n	800891a <HAL_RCC_OscConfig+0x35e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d108      	bne.n	8008904 <HAL_RCC_OscConfig+0x348>
 80088f2:	4b70      	ldr	r3, [pc, #448]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80088fa:	4a6e      	ldr	r2, [pc, #440]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008900:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008902:	e075      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008904:	4b6b      	ldr	r3, [pc, #428]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	069b      	lsls	r3, r3, #26
 8008912:	4968      	ldr	r1, [pc, #416]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008914:	4313      	orrs	r3, r2
 8008916:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008918:	e06a      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800891a:	4b66      	ldr	r3, [pc, #408]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	061b      	lsls	r3, r3, #24
 8008928:	4962      	ldr	r1, [pc, #392]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800892a:	4313      	orrs	r3, r2
 800892c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800892e:	e05f      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d042      	beq.n	80089be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008938:	4b5e      	ldr	r3, [pc, #376]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a5d      	ldr	r2, [pc, #372]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800893e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7f9 ffbe 	bl	80028c4 <HAL_GetTick>
 8008948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800894c:	f7f9 ffba 	bl	80028c4 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e255      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800895e:	4b55      	ldr	r3, [pc, #340]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800896a:	f7f9 ffeb 	bl	8002944 <HAL_GetREVID>
 800896e:	4603      	mov	r3, r0
 8008970:	f241 0203 	movw	r2, #4099	; 0x1003
 8008974:	4293      	cmp	r3, r2
 8008976:	d817      	bhi.n	80089a8 <HAL_RCC_OscConfig+0x3ec>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	2b20      	cmp	r3, #32
 800897e:	d108      	bne.n	8008992 <HAL_RCC_OscConfig+0x3d6>
 8008980:	4b4c      	ldr	r3, [pc, #304]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008988:	4a4a      	ldr	r2, [pc, #296]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 800898a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800898e:	6053      	str	r3, [r2, #4]
 8008990:	e02e      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
 8008992:	4b48      	ldr	r3, [pc, #288]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	069b      	lsls	r3, r3, #26
 80089a0:	4944      	ldr	r1, [pc, #272]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	604b      	str	r3, [r1, #4]
 80089a6:	e023      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
 80089a8:	4b42      	ldr	r3, [pc, #264]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	061b      	lsls	r3, r3, #24
 80089b6:	493f      	ldr	r1, [pc, #252]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60cb      	str	r3, [r1, #12]
 80089bc:	e018      	b.n	80089f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089be:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a3c      	ldr	r2, [pc, #240]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ca:	f7f9 ff7b 	bl	80028c4 <HAL_GetTick>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089d2:	f7f9 ff77 	bl	80028c4 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e212      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089e4:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f0      	bne.n	80089d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d036      	beq.n	8008a6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d019      	beq.n	8008a38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a04:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a08:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a0a:	f043 0301 	orr.w	r3, r3, #1
 8008a0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7f9 ff58 	bl	80028c4 <HAL_GetTick>
 8008a14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a18:	f7f9 ff54 	bl	80028c4 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e1ef      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a2a:	4b22      	ldr	r3, [pc, #136]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCC_OscConfig+0x45c>
 8008a36:	e018      	b.n	8008a6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a3e:	f023 0301 	bic.w	r3, r3, #1
 8008a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a44:	f7f9 ff3e 	bl	80028c4 <HAL_GetTick>
 8008a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a4c:	f7f9 ff3a 	bl	80028c4 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e1d5      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d039      	beq.n	8008aea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01c      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a0c      	ldr	r2, [pc, #48]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a8a:	f7f9 ff1b 	bl	80028c4 <HAL_GetTick>
 8008a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a92:	f7f9 ff17 	bl	80028c4 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e1b2      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCC_OscConfig+0x4d6>
 8008ab0:	e01b      	b.n	8008aea <HAL_RCC_OscConfig+0x52e>
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ab8:	4b9b      	ldr	r3, [pc, #620]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a9a      	ldr	r2, [pc, #616]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ac4:	f7f9 fefe 	bl	80028c4 <HAL_GetTick>
 8008ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008acc:	f7f9 fefa 	bl	80028c4 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e195      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ade:	4b92      	ldr	r3, [pc, #584]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f0      	bne.n	8008acc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8081 	beq.w	8008bfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008af8:	4b8c      	ldr	r3, [pc, #560]	; (8008d2c <HAL_RCC_OscConfig+0x770>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a8b      	ldr	r2, [pc, #556]	; (8008d2c <HAL_RCC_OscConfig+0x770>)
 8008afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b04:	f7f9 fede 	bl	80028c4 <HAL_GetTick>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b0c:	f7f9 feda 	bl	80028c4 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	; 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e175      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b1e:	4b83      	ldr	r3, [pc, #524]	; (8008d2c <HAL_RCC_OscConfig+0x770>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d106      	bne.n	8008b40 <HAL_RCC_OscConfig+0x584>
 8008b32:	4b7d      	ldr	r3, [pc, #500]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b36:	4a7c      	ldr	r2, [pc, #496]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b38:	f043 0301 	orr.w	r3, r3, #1
 8008b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3e:	e02d      	b.n	8008b9c <HAL_RCC_OscConfig+0x5e0>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <HAL_RCC_OscConfig+0x5a6>
 8008b48:	4b77      	ldr	r3, [pc, #476]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	4a76      	ldr	r2, [pc, #472]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
 8008b54:	4b74      	ldr	r3, [pc, #464]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	4a73      	ldr	r2, [pc, #460]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b5a:	f023 0304 	bic.w	r3, r3, #4
 8008b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b60:	e01c      	b.n	8008b9c <HAL_RCC_OscConfig+0x5e0>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d10c      	bne.n	8008b84 <HAL_RCC_OscConfig+0x5c8>
 8008b6a:	4b6f      	ldr	r3, [pc, #444]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	4a6e      	ldr	r2, [pc, #440]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b70:	f043 0304 	orr.w	r3, r3, #4
 8008b74:	6713      	str	r3, [r2, #112]	; 0x70
 8008b76:	4b6c      	ldr	r3, [pc, #432]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7a:	4a6b      	ldr	r2, [pc, #428]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b7c:	f043 0301 	orr.w	r3, r3, #1
 8008b80:	6713      	str	r3, [r2, #112]	; 0x70
 8008b82:	e00b      	b.n	8008b9c <HAL_RCC_OscConfig+0x5e0>
 8008b84:	4b68      	ldr	r3, [pc, #416]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	4a67      	ldr	r2, [pc, #412]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b90:	4b65      	ldr	r3, [pc, #404]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b94:	4a64      	ldr	r2, [pc, #400]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008b96:	f023 0304 	bic.w	r3, r3, #4
 8008b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d015      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba4:	f7f9 fe8e 	bl	80028c4 <HAL_GetTick>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008baa:	e00a      	b.n	8008bc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bac:	f7f9 fe8a 	bl	80028c4 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e123      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0ee      	beq.n	8008bac <HAL_RCC_OscConfig+0x5f0>
 8008bce:	e014      	b.n	8008bfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd0:	f7f9 fe78 	bl	80028c4 <HAL_GetTick>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bd6:	e00a      	b.n	8008bee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bd8:	f7f9 fe74 	bl	80028c4 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e10d      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bee:	4b4e      	ldr	r3, [pc, #312]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1ee      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8102 	beq.w	8008e08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c04:	4b48      	ldr	r3, [pc, #288]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c0c:	2b18      	cmp	r3, #24
 8008c0e:	f000 80bd 	beq.w	8008d8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	f040 809e 	bne.w	8008d58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c1c:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a41      	ldr	r2, [pc, #260]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7f9 fe4c 	bl	80028c4 <HAL_GetTick>
 8008c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c30:	f7f9 fe48 	bl	80028c4 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e0e3      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c42:	4b39      	ldr	r3, [pc, #228]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c4e:	4b36      	ldr	r3, [pc, #216]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c52:	4b37      	ldr	r3, [pc, #220]	; (8008d30 <HAL_RCC_OscConfig+0x774>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c5e:	0112      	lsls	r2, r2, #4
 8008c60:	430a      	orrs	r2, r1
 8008c62:	4931      	ldr	r1, [pc, #196]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	628b      	str	r3, [r1, #40]	; 0x28
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	3b01      	subs	r3, #1
 8008c78:	025b      	lsls	r3, r3, #9
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	3b01      	subs	r3, #1
 8008c84:	041b      	lsls	r3, r3, #16
 8008c86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	3b01      	subs	r3, #1
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c98:	4923      	ldr	r1, [pc, #140]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008c9e:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	4a21      	ldr	r2, [pc, #132]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008caa:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cae:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <HAL_RCC_OscConfig+0x778>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cb6:	00d2      	lsls	r2, r2, #3
 8008cb8:	491b      	ldr	r1, [pc, #108]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cbe:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	f023 020c 	bic.w	r2, r3, #12
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	4917      	ldr	r1, [pc, #92]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cd0:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	f023 0202 	bic.w	r2, r3, #2
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cdc:	4912      	ldr	r1, [pc, #72]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ce2:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	4a10      	ldr	r2, [pc, #64]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cee:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4a0d      	ldr	r2, [pc, #52]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008cfa:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a0a      	ldr	r2, [pc, #40]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008d06:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a07      	ldr	r2, [pc, #28]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <HAL_RCC_OscConfig+0x76c>)
 8008d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1e:	f7f9 fdd1 	bl	80028c4 <HAL_GetTick>
 8008d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d24:	e011      	b.n	8008d4a <HAL_RCC_OscConfig+0x78e>
 8008d26:	bf00      	nop
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	58024800 	.word	0x58024800
 8008d30:	fffffc0c 	.word	0xfffffc0c
 8008d34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d38:	f7f9 fdc4 	bl	80028c4 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e05f      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d4a:	4b32      	ldr	r3, [pc, #200]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0x77c>
 8008d56:	e057      	b.n	8008e08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d58:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7f9 fdae 	bl	80028c4 <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d6c:	f7f9 fdaa 	bl	80028c4 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e045      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d7e:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x7b0>
 8008d8a:	e03d      	b.n	8008e08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d8c:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d92:	4b20      	ldr	r3, [pc, #128]	; (8008e14 <HAL_RCC_OscConfig+0x858>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d031      	beq.n	8008e04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f003 0203 	and.w	r2, r3, #3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d12a      	bne.n	8008e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	091b      	lsrs	r3, r3, #4
 8008db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d122      	bne.n	8008e04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d11a      	bne.n	8008e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	0a5b      	lsrs	r3, r3, #9
 8008dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d111      	bne.n	8008e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	0c1b      	lsrs	r3, r3, #16
 8008de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d108      	bne.n	8008e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	0e1b      	lsrs	r3, r3, #24
 8008df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d001      	beq.n	8008e08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3730      	adds	r7, #48	; 0x30
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	58024400 	.word	0x58024400

08008e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e19c      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e2c:	4b8a      	ldr	r3, [pc, #552]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d910      	bls.n	8008e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3a:	4b87      	ldr	r3, [pc, #540]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f023 020f 	bic.w	r2, r3, #15
 8008e42:	4985      	ldr	r1, [pc, #532]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4a:	4b83      	ldr	r3, [pc, #524]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d001      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e184      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d010      	beq.n	8008e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691a      	ldr	r2, [r3, #16]
 8008e6c:	4b7b      	ldr	r3, [pc, #492]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d908      	bls.n	8008e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e78:	4b78      	ldr	r3, [pc, #480]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	4975      	ldr	r1, [pc, #468]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d010      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	4b70      	ldr	r3, [pc, #448]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d908      	bls.n	8008eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ea6:	4b6d      	ldr	r3, [pc, #436]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	496a      	ldr	r1, [pc, #424]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d010      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	4b64      	ldr	r3, [pc, #400]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d908      	bls.n	8008ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ed4:	4b61      	ldr	r3, [pc, #388]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	495e      	ldr	r1, [pc, #376]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d010      	beq.n	8008f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	4b59      	ldr	r3, [pc, #356]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d908      	bls.n	8008f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f02:	4b56      	ldr	r3, [pc, #344]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	4953      	ldr	r1, [pc, #332]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d010      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	4b4d      	ldr	r3, [pc, #308]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d908      	bls.n	8008f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f30:	4b4a      	ldr	r3, [pc, #296]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	f023 020f 	bic.w	r2, r3, #15
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4947      	ldr	r1, [pc, #284]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d055      	beq.n	8008ffa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f4e:	4b43      	ldr	r3, [pc, #268]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	4940      	ldr	r1, [pc, #256]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d107      	bne.n	8008f78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f68:	4b3c      	ldr	r3, [pc, #240]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d121      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e0f6      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f80:	4b36      	ldr	r3, [pc, #216]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d115      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0ea      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d107      	bne.n	8008fa8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f98:	4b30      	ldr	r3, [pc, #192]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d109      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e0de      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fa8:	4b2c      	ldr	r3, [pc, #176]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0d6      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fb8:	4b28      	ldr	r3, [pc, #160]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f023 0207 	bic.w	r2, r3, #7
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4925      	ldr	r1, [pc, #148]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fca:	f7f9 fc7b 	bl	80028c4 <HAL_GetTick>
 8008fce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd0:	e00a      	b.n	8008fe8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fd2:	f7f9 fc77 	bl	80028c4 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e0be      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d1eb      	bne.n	8008fd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d010      	beq.n	8009028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	4b14      	ldr	r3, [pc, #80]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	429a      	cmp	r2, r3
 8009014:	d208      	bcs.n	8009028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009016:	4b11      	ldr	r3, [pc, #68]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f023 020f 	bic.w	r2, r3, #15
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	490e      	ldr	r1, [pc, #56]	; (800905c <HAL_RCC_ClockConfig+0x244>)
 8009024:	4313      	orrs	r3, r2
 8009026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d214      	bcs.n	8009060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009036:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f023 020f 	bic.w	r2, r3, #15
 800903e:	4906      	ldr	r1, [pc, #24]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	4313      	orrs	r3, r2
 8009044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009046:	4b04      	ldr	r3, [pc, #16]	; (8009058 <HAL_RCC_ClockConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d005      	beq.n	8009060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e086      	b.n	8009166 <HAL_RCC_ClockConfig+0x34e>
 8009058:	52002000 	.word	0x52002000
 800905c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	4b3f      	ldr	r3, [pc, #252]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009078:	429a      	cmp	r2, r3
 800907a:	d208      	bcs.n	800908e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800907c:	4b3c      	ldr	r3, [pc, #240]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	4939      	ldr	r1, [pc, #228]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 800908a:	4313      	orrs	r3, r2
 800908c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d010      	beq.n	80090bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695a      	ldr	r2, [r3, #20]
 800909e:	4b34      	ldr	r3, [pc, #208]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d208      	bcs.n	80090bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090aa:	4b31      	ldr	r3, [pc, #196]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	492e      	ldr	r1, [pc, #184]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d010      	beq.n	80090ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	4b28      	ldr	r3, [pc, #160]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d208      	bcs.n	80090ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	4922      	ldr	r1, [pc, #136]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0320 	and.w	r3, r3, #32
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d010      	beq.n	8009118 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69da      	ldr	r2, [r3, #28]
 80090fa:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009102:	429a      	cmp	r2, r3
 8009104:	d208      	bcs.n	8009118 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009106:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	4917      	ldr	r1, [pc, #92]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 8009114:	4313      	orrs	r3, r2
 8009116:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009118:	f000 f834 	bl	8009184 <HAL_RCC_GetSysClockFreq>
 800911c:	4602      	mov	r2, r0
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	4912      	ldr	r1, [pc, #72]	; (8009174 <HAL_RCC_ClockConfig+0x35c>)
 800912a:	5ccb      	ldrb	r3, [r1, r3]
 800912c:	f003 031f 	and.w	r3, r3, #31
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009136:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <HAL_RCC_ClockConfig+0x358>)
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	4a0d      	ldr	r2, [pc, #52]	; (8009174 <HAL_RCC_ClockConfig+0x35c>)
 8009140:	5cd3      	ldrb	r3, [r2, r3]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
 800914c:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <HAL_RCC_ClockConfig+0x360>)
 800914e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009150:	4a0a      	ldr	r2, [pc, #40]	; (800917c <HAL_RCC_ClockConfig+0x364>)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009156:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_RCC_ClockConfig+0x368>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f7f9 fb68 	bl	8002830 <HAL_InitTick>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	58024400 	.word	0x58024400
 8009174:	0800fe00 	.word	0x0800fe00
 8009178:	24000028 	.word	0x24000028
 800917c:	24000024 	.word	0x24000024
 8009180:	2400002c 	.word	0x2400002c

08009184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009184:	b480      	push	{r7}
 8009186:	b089      	sub	sp, #36	; 0x24
 8009188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800918a:	4bb3      	ldr	r3, [pc, #716]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009192:	2b18      	cmp	r3, #24
 8009194:	f200 8155 	bhi.w	8009442 <HAL_RCC_GetSysClockFreq+0x2be>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	08009205 	.word	0x08009205
 80091a4:	08009443 	.word	0x08009443
 80091a8:	08009443 	.word	0x08009443
 80091ac:	08009443 	.word	0x08009443
 80091b0:	08009443 	.word	0x08009443
 80091b4:	08009443 	.word	0x08009443
 80091b8:	08009443 	.word	0x08009443
 80091bc:	08009443 	.word	0x08009443
 80091c0:	0800922b 	.word	0x0800922b
 80091c4:	08009443 	.word	0x08009443
 80091c8:	08009443 	.word	0x08009443
 80091cc:	08009443 	.word	0x08009443
 80091d0:	08009443 	.word	0x08009443
 80091d4:	08009443 	.word	0x08009443
 80091d8:	08009443 	.word	0x08009443
 80091dc:	08009443 	.word	0x08009443
 80091e0:	08009231 	.word	0x08009231
 80091e4:	08009443 	.word	0x08009443
 80091e8:	08009443 	.word	0x08009443
 80091ec:	08009443 	.word	0x08009443
 80091f0:	08009443 	.word	0x08009443
 80091f4:	08009443 	.word	0x08009443
 80091f8:	08009443 	.word	0x08009443
 80091fc:	08009443 	.word	0x08009443
 8009200:	08009237 	.word	0x08009237
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009204:	4b94      	ldr	r3, [pc, #592]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d009      	beq.n	8009224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009210:	4b91      	ldr	r3, [pc, #580]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	08db      	lsrs	r3, r3, #3
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	4a90      	ldr	r2, [pc, #576]	; (800945c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800921c:	fa22 f303 	lsr.w	r3, r2, r3
 8009220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009222:	e111      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009224:	4b8d      	ldr	r3, [pc, #564]	; (800945c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009226:	61bb      	str	r3, [r7, #24]
    break;
 8009228:	e10e      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800922a:	4b8d      	ldr	r3, [pc, #564]	; (8009460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800922c:	61bb      	str	r3, [r7, #24]
    break;
 800922e:	e10b      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009230:	4b8c      	ldr	r3, [pc, #560]	; (8009464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009232:	61bb      	str	r3, [r7, #24]
    break;
 8009234:	e108      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009236:	4b88      	ldr	r3, [pc, #544]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009240:	4b85      	ldr	r3, [pc, #532]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800924a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800924c:	4b82      	ldr	r3, [pc, #520]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009256:	4b80      	ldr	r3, [pc, #512]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925a:	08db      	lsrs	r3, r3, #3
 800925c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	fb02 f303 	mul.w	r3, r2, r3
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 80e1 	beq.w	800943c <HAL_RCC_GetSysClockFreq+0x2b8>
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b02      	cmp	r3, #2
 800927e:	f000 8083 	beq.w	8009388 <HAL_RCC_GetSysClockFreq+0x204>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b02      	cmp	r3, #2
 8009286:	f200 80a1 	bhi.w	80093cc <HAL_RCC_GetSysClockFreq+0x248>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <HAL_RCC_GetSysClockFreq+0x114>
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d056      	beq.n	8009344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009296:	e099      	b.n	80093cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009298:	4b6f      	ldr	r3, [pc, #444]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d02d      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a4:	4b6c      	ldr	r3, [pc, #432]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	08db      	lsrs	r3, r3, #3
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	4a6b      	ldr	r2, [pc, #428]	; (800945c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092b0:	fa22 f303 	lsr.w	r3, r2, r3
 80092b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ce:	4b62      	ldr	r3, [pc, #392]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092de:	ed97 6a02 	vldr	s12, [r7, #8]
 80092e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80092fe:	e087      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800946c <HAL_RCC_GetSysClockFreq+0x2e8>
 800930e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009312:	4b51      	ldr	r3, [pc, #324]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009322:	ed97 6a02 	vldr	s12, [r7, #8]
 8009326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800932a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009342:	e065      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009356:	4b40      	ldr	r3, [pc, #256]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009366:	ed97 6a02 	vldr	s12, [r7, #8]
 800936a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800936e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009386:	e043      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939a:	4b2f      	ldr	r3, [pc, #188]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ca:	e021      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093de:	4b1e      	ldr	r3, [pc, #120]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80093f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009410:	4b11      	ldr	r3, [pc, #68]	; (8009458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	0a5b      	lsrs	r3, r3, #9
 8009416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941a:	3301      	adds	r3, #1
 800941c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009428:	edd7 6a07 	vldr	s13, [r7, #28]
 800942c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009434:	ee17 3a90 	vmov	r3, s15
 8009438:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800943a:	e005      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	61bb      	str	r3, [r7, #24]
    break;
 8009440:	e002      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009444:	61bb      	str	r3, [r7, #24]
    break;
 8009446:	bf00      	nop
  }

  return sysclockfreq;
 8009448:	69bb      	ldr	r3, [r7, #24]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3724      	adds	r7, #36	; 0x24
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	58024400 	.word	0x58024400
 800945c:	03d09000 	.word	0x03d09000
 8009460:	003d0900 	.word	0x003d0900
 8009464:	017d7840 	.word	0x017d7840
 8009468:	46000000 	.word	0x46000000
 800946c:	4c742400 	.word	0x4c742400
 8009470:	4a742400 	.word	0x4a742400
 8009474:	4bbebc20 	.word	0x4bbebc20

08009478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800947e:	f7ff fe81 	bl	8009184 <HAL_RCC_GetSysClockFreq>
 8009482:	4602      	mov	r2, r0
 8009484:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	0a1b      	lsrs	r3, r3, #8
 800948a:	f003 030f 	and.w	r3, r3, #15
 800948e:	490f      	ldr	r1, [pc, #60]	; (80094cc <HAL_RCC_GetHCLKFreq+0x54>)
 8009490:	5ccb      	ldrb	r3, [r1, r3]
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	fa22 f303 	lsr.w	r3, r2, r3
 800949a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	4a09      	ldr	r2, [pc, #36]	; (80094cc <HAL_RCC_GetHCLKFreq+0x54>)
 80094a6:	5cd3      	ldrb	r3, [r2, r3]
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	fa22 f303 	lsr.w	r3, r2, r3
 80094b2:	4a07      	ldr	r2, [pc, #28]	; (80094d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80094b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094b6:	4a07      	ldr	r2, [pc, #28]	; (80094d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80094bc:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80094be:	681b      	ldr	r3, [r3, #0]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	58024400 	.word	0x58024400
 80094cc:	0800fe00 	.word	0x0800fe00
 80094d0:	24000028 	.word	0x24000028
 80094d4:	24000024 	.word	0x24000024

080094d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094dc:	f7ff ffcc 	bl	8009478 <HAL_RCC_GetHCLKFreq>
 80094e0:	4602      	mov	r2, r0
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	091b      	lsrs	r3, r3, #4
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	4904      	ldr	r1, [pc, #16]	; (8009500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094ee:	5ccb      	ldrb	r3, [r1, r3]
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	58024400 	.word	0x58024400
 8009500:	0800fe00 	.word	0x0800fe00

08009504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009508:	f7ff ffb6 	bl	8009478 <HAL_RCC_GetHCLKFreq>
 800950c:	4602      	mov	r2, r0
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	0a1b      	lsrs	r3, r3, #8
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	4904      	ldr	r1, [pc, #16]	; (800952c <HAL_RCC_GetPCLK2Freq+0x28>)
 800951a:	5ccb      	ldrb	r3, [r1, r3]
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009524:	4618      	mov	r0, r3
 8009526:	bd80      	pop	{r7, pc}
 8009528:	58024400 	.word	0x58024400
 800952c:	0800fe00 	.word	0x0800fe00

08009530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800953c:	2300      	movs	r3, #0
 800953e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d03f      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009554:	d02a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800955a:	d824      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800955c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009560:	d018      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009566:	d81e      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800956c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009570:	d007      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009572:	e018      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009574:	4ba3      	ldr	r3, [pc, #652]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	4aa2      	ldr	r2, [pc, #648]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800957a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800957e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009580:	e015      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3304      	adds	r3, #4
 8009586:	2102      	movs	r1, #2
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fff9 	bl	800b580 <RCCEx_PLL2_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009592:	e00c      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3324      	adds	r3, #36	; 0x24
 8009598:	2102      	movs	r1, #2
 800959a:	4618      	mov	r0, r3
 800959c:	f002 f8a2 	bl	800b6e4 <RCCEx_PLL3_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095a4:	e003      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]
      break;
 80095aa:	e000      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80095ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095b4:	4b93      	ldr	r3, [pc, #588]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c0:	4990      	ldr	r1, [pc, #576]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	650b      	str	r3, [r1, #80]	; 0x50
 80095c6:	e001      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d03d      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d826      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	080095fd 	.word	0x080095fd
 80095ec:	0800960b 	.word	0x0800960b
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	08009635 	.word	0x08009635
 80095f8:	08009635 	.word	0x08009635
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fc:	4b81      	ldr	r3, [pc, #516]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	4a80      	ldr	r2, [pc, #512]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009608:	e015      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3304      	adds	r3, #4
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f001 ffb5 	bl	800b580 <RCCEx_PLL2_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800961a:	e00c      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	2100      	movs	r1, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f002 f85e 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800962c:	e003      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
      break;
 8009632:	e000      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d109      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800963c:	4b71      	ldr	r3, [pc, #452]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800963e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009640:	f023 0207 	bic.w	r2, r3, #7
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	496e      	ldr	r1, [pc, #440]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800964a:	4313      	orrs	r3, r2
 800964c:	650b      	str	r3, [r1, #80]	; 0x50
 800964e:	e001      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800965c:	2b00      	cmp	r3, #0
 800965e:	d042      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009668:	d02b      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800966a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800966e:	d825      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009670:	2bc0      	cmp	r3, #192	; 0xc0
 8009672:	d028      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009674:	2bc0      	cmp	r3, #192	; 0xc0
 8009676:	d821      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009678:	2b80      	cmp	r3, #128	; 0x80
 800967a:	d016      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d81d      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009684:	2b40      	cmp	r3, #64	; 0x40
 8009686:	d007      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009688:	e018      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968a:	4b5e      	ldr	r3, [pc, #376]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a5d      	ldr	r2, [pc, #372]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009696:	e017      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 ff6e 	bl	800b580 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096a8:	e00e      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3324      	adds	r3, #36	; 0x24
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f002 f817 	bl	800b6e4 <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096ba:	e005      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
      break;
 80096c0:	e002      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80096c2:	bf00      	nop
 80096c4:	e000      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80096c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80096ce:	4b4d      	ldr	r3, [pc, #308]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	494a      	ldr	r1, [pc, #296]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	650b      	str	r3, [r1, #80]	; 0x50
 80096e0:	e001      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d049      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096fc:	d030      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80096fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009702:	d82a      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009704:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009708:	d02c      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800970a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800970e:	d824      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009714:	d018      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800971a:	d81e      	bhi.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009724:	d007      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009726:	e018      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009728:	4b36      	ldr	r3, [pc, #216]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	4a35      	ldr	r2, [pc, #212]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800972e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009734:	e017      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3304      	adds	r3, #4
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f001 ff1f 	bl	800b580 <RCCEx_PLL2_Config>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009746:	e00e      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3324      	adds	r3, #36	; 0x24
 800974c:	2100      	movs	r1, #0
 800974e:	4618      	mov	r0, r3
 8009750:	f001 ffc8 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009758:	e005      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]
      break;
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800976c:	4b25      	ldr	r3, [pc, #148]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800976e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009770:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800977a:	4922      	ldr	r1, [pc, #136]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800977c:	4313      	orrs	r3, r2
 800977e:	658b      	str	r3, [r1, #88]	; 0x58
 8009780:	e001      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800978e:	2b00      	cmp	r3, #0
 8009790:	d04b      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800979c:	d030      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800979e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097a2:	d82a      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097a8:	d02e      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80097aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097ae:	d824      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097b4:	d018      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80097b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097ba:	d81e      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80097c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097c4:	d007      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80097c6:	e018      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c8:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097cc:	4a0d      	ldr	r2, [pc, #52]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097d4:	e019      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3304      	adds	r3, #4
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fecf 	bl	800b580 <RCCEx_PLL2_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097e6:	e010      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3324      	adds	r3, #36	; 0x24
 80097ec:	2100      	movs	r1, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 ff78 	bl	800b6e4 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097f8:	e007      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
      break;
 80097fe:	e004      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009800:	bf00      	nop
 8009802:	e002      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009804:	58024400 	.word	0x58024400
      break;
 8009808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009810:	4b99      	ldr	r3, [pc, #612]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009814:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800981e:	4996      	ldr	r1, [pc, #600]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009820:	4313      	orrs	r3, r2
 8009822:	658b      	str	r3, [r1, #88]	; 0x58
 8009824:	e001      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d032      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983a:	2b30      	cmp	r3, #48	; 0x30
 800983c:	d01c      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800983e:	2b30      	cmp	r3, #48	; 0x30
 8009840:	d817      	bhi.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009842:	2b20      	cmp	r3, #32
 8009844:	d00c      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009846:	2b20      	cmp	r3, #32
 8009848:	d813      	bhi.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d016      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800984e:	2b10      	cmp	r3, #16
 8009850:	d10f      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009852:	4b89      	ldr	r3, [pc, #548]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4a88      	ldr	r2, [pc, #544]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800985e:	e00e      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	2102      	movs	r1, #2
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fe8a 	bl	800b580 <RCCEx_PLL2_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009870:	e005      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	75fb      	strb	r3, [r7, #23]
      break;
 8009876:	e002      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009878:	bf00      	nop
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800987c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009884:	4b7c      	ldr	r3, [pc, #496]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009890:	4979      	ldr	r1, [pc, #484]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009892:	4313      	orrs	r3, r2
 8009894:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009896:	e001      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d047      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b0:	d030      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b6:	d82a      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80098b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098bc:	d02c      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80098be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098c2:	d824      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80098c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098c8:	d018      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ce:	d81e      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d8:	d007      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80098da:	e018      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4b66      	ldr	r3, [pc, #408]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a65      	ldr	r2, [pc, #404]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098e8:	e017      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3304      	adds	r3, #4
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fe45 	bl	800b580 <RCCEx_PLL2_Config>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098fa:	e00e      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	2100      	movs	r1, #0
 8009902:	4618      	mov	r0, r3
 8009904:	f001 feee 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800990c:	e005      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
      break;
 8009912:	e002      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009914:	bf00      	nop
 8009916:	e000      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009920:	4b55      	ldr	r3, [pc, #340]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992c:	4952      	ldr	r1, [pc, #328]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800992e:	4313      	orrs	r3, r2
 8009930:	650b      	str	r3, [r1, #80]	; 0x50
 8009932:	e001      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d049      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800994c:	d02e      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800994e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009952:	d828      	bhi.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009958:	d02a      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800995a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800995e:	d822      	bhi.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009964:	d026      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800996a:	d81c      	bhi.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800996c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009970:	d010      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009976:	d816      	bhi.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01d      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800997c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009980:	d111      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3304      	adds	r3, #4
 8009986:	2101      	movs	r1, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fdf9 	bl	800b580 <RCCEx_PLL2_Config>
 800998e:	4603      	mov	r3, r0
 8009990:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009992:	e012      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3324      	adds	r3, #36	; 0x24
 8009998:	2101      	movs	r1, #1
 800999a:	4618      	mov	r0, r3
 800999c:	f001 fea2 	bl	800b6e4 <RCCEx_PLL3_Config>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80099a4:	e009      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
      break;
 80099aa:	e006      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80099ac:	bf00      	nop
 80099ae:	e004      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80099b0:	bf00      	nop
 80099b2:	e002      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80099b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80099c0:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099cc:	492a      	ldr	r1, [pc, #168]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	650b      	str	r3, [r1, #80]	; 0x50
 80099d2:	e001      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d04d      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099ee:	d02e      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80099f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099f4:	d828      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80099f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099fa:	d02a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80099fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a00:	d822      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a06:	d026      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009a08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a0c:	d81c      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a12:	d010      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a18:	d816      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01d      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a22:	d111      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3304      	adds	r3, #4
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fda8 	bl	800b580 <RCCEx_PLL2_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a34:	e012      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3324      	adds	r3, #36	; 0x24
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fe51 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a46:	e009      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4c:	e006      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a4e:	bf00      	nop
 8009a50:	e004      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10c      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a70:	4901      	ldr	r1, [pc, #4]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	658b      	str	r3, [r1, #88]	; 0x58
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d02f      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a94:	d00e      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a9a:	d814      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d015      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa4:	d10f      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa6:	4baf      	ldr	r3, [pc, #700]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	4aae      	ldr	r2, [pc, #696]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009ab2:	e00c      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fd60 	bl	800b580 <RCCEx_PLL2_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aca:	e000      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d109      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ad4:	4ba3      	ldr	r3, [pc, #652]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae0:	49a0      	ldr	r1, [pc, #640]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ae6:	e001      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d032      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d81b      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b3f 	.word	0x08009b3f
 8009b0c:	08009b19 	.word	0x08009b19
 8009b10:	08009b27 	.word	0x08009b27
 8009b14:	08009b3f 	.word	0x08009b3f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b18:	4b92      	ldr	r3, [pc, #584]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	4a91      	ldr	r2, [pc, #580]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b24:	e00c      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 fd27 	bl	800b580 <RCCEx_PLL2_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b46:	4b87      	ldr	r3, [pc, #540]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4a:	f023 0203 	bic.w	r2, r3, #3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	4984      	ldr	r1, [pc, #528]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b58:	e001      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8086 	beq.w	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b6c:	4b7e      	ldr	r3, [pc, #504]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a7d      	ldr	r2, [pc, #500]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b78:	f7f8 fea4 	bl	80028c4 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b7e:	e009      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b80:	f7f8 fea0 	bl	80028c4 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b64      	cmp	r3, #100	; 0x64
 8009b8c:	d902      	bls.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	75fb      	strb	r3, [r7, #23]
        break;
 8009b92:	e005      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b94:	4b74      	ldr	r3, [pc, #464]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0ef      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d166      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ba6:	4b6f      	ldr	r3, [pc, #444]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bb0:	4053      	eors	r3, r2
 8009bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d013      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bba:	4b6a      	ldr	r3, [pc, #424]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bc4:	4b67      	ldr	r3, [pc, #412]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc8:	4a66      	ldr	r2, [pc, #408]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bd0:	4b64      	ldr	r3, [pc, #400]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd4:	4a63      	ldr	r2, [pc, #396]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009bdc:	4a61      	ldr	r2, [pc, #388]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bec:	d115      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bee:	f7f8 fe69 	bl	80028c4 <HAL_GetTick>
 8009bf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bf4:	e00b      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bf6:	f7f8 fe65 	bl	80028c4 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d902      	bls.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8009c0c:	e005      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c0e:	4b55      	ldr	r3, [pc, #340]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0ed      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d126      	bne.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c2e:	d10d      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009c30:	4b4c      	ldr	r3, [pc, #304]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c3e:	0919      	lsrs	r1, r3, #4
 8009c40:	4b4a      	ldr	r3, [pc, #296]	; (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009c42:	400b      	ands	r3, r1
 8009c44:	4947      	ldr	r1, [pc, #284]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	610b      	str	r3, [r1, #16]
 8009c4a:	e005      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009c4c:	4b45      	ldr	r3, [pc, #276]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	4a44      	ldr	r2, [pc, #272]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c56:	6113      	str	r3, [r2, #16]
 8009c58:	4b42      	ldr	r3, [pc, #264]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c66:	493f      	ldr	r1, [pc, #252]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	670b      	str	r3, [r1, #112]	; 0x70
 8009c6c:	e004      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	75bb      	strb	r3, [r7, #22]
 8009c72:	e001      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8085 	beq.w	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c8a:	2b28      	cmp	r3, #40	; 0x28
 8009c8c:	d866      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009d71 	.word	0x08009d71
 8009c98:	08009d5d 	.word	0x08009d5d
 8009c9c:	08009d5d 	.word	0x08009d5d
 8009ca0:	08009d5d 	.word	0x08009d5d
 8009ca4:	08009d5d 	.word	0x08009d5d
 8009ca8:	08009d5d 	.word	0x08009d5d
 8009cac:	08009d5d 	.word	0x08009d5d
 8009cb0:	08009d5d 	.word	0x08009d5d
 8009cb4:	08009d39 	.word	0x08009d39
 8009cb8:	08009d5d 	.word	0x08009d5d
 8009cbc:	08009d5d 	.word	0x08009d5d
 8009cc0:	08009d5d 	.word	0x08009d5d
 8009cc4:	08009d5d 	.word	0x08009d5d
 8009cc8:	08009d5d 	.word	0x08009d5d
 8009ccc:	08009d5d 	.word	0x08009d5d
 8009cd0:	08009d5d 	.word	0x08009d5d
 8009cd4:	08009d4b 	.word	0x08009d4b
 8009cd8:	08009d5d 	.word	0x08009d5d
 8009cdc:	08009d5d 	.word	0x08009d5d
 8009ce0:	08009d5d 	.word	0x08009d5d
 8009ce4:	08009d5d 	.word	0x08009d5d
 8009ce8:	08009d5d 	.word	0x08009d5d
 8009cec:	08009d5d 	.word	0x08009d5d
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009d71 	.word	0x08009d71
 8009cf8:	08009d5d 	.word	0x08009d5d
 8009cfc:	08009d5d 	.word	0x08009d5d
 8009d00:	08009d5d 	.word	0x08009d5d
 8009d04:	08009d5d 	.word	0x08009d5d
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009d5d 	.word	0x08009d5d
 8009d10:	08009d5d 	.word	0x08009d5d
 8009d14:	08009d71 	.word	0x08009d71
 8009d18:	08009d5d 	.word	0x08009d5d
 8009d1c:	08009d5d 	.word	0x08009d5d
 8009d20:	08009d5d 	.word	0x08009d5d
 8009d24:	08009d5d 	.word	0x08009d5d
 8009d28:	08009d5d 	.word	0x08009d5d
 8009d2c:	08009d5d 	.word	0x08009d5d
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	08009d71 	.word	0x08009d71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fc1e 	bl	800b580 <RCCEx_PLL2_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d48:	e013      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3324      	adds	r3, #36	; 0x24
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fcc7 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d5a:	e00a      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d60:	e007      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400
 8009d68:	58024800 	.word	0x58024800
 8009d6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d109      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d78:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d84:	4993      	ldr	r1, [pc, #588]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	654b      	str	r3, [r1, #84]	; 0x54
 8009d8a:	e001      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d038      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	d821      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009def 	.word	0x08009def
 8009db0:	08009dc5 	.word	0x08009dc5
 8009db4:	08009dd7 	.word	0x08009dd7
 8009db8:	08009def 	.word	0x08009def
 8009dbc:	08009def 	.word	0x08009def
 8009dc0:	08009def 	.word	0x08009def
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fbd8 	bl	800b580 <RCCEx_PLL2_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009dd4:	e00c      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3324      	adds	r3, #36	; 0x24
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 fc81 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009de6:	e003      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
      break;
 8009dec:	e000      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009df6:	4b77      	ldr	r3, [pc, #476]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	f023 0207 	bic.w	r2, r3, #7
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e02:	4974      	ldr	r1, [pc, #464]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	654b      	str	r3, [r1, #84]	; 0x54
 8009e08:	e001      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d03a      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e20:	2b05      	cmp	r3, #5
 8009e22:	d821      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e6f 	.word	0x08009e6f
 8009e30:	08009e45 	.word	0x08009e45
 8009e34:	08009e57 	.word	0x08009e57
 8009e38:	08009e6f 	.word	0x08009e6f
 8009e3c:	08009e6f 	.word	0x08009e6f
 8009e40:	08009e6f 	.word	0x08009e6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2101      	movs	r1, #1
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fb98 	bl	800b580 <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e54:	e00c      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fc41 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e66:	e003      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	e000      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e76:	4b57      	ldr	r3, [pc, #348]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7a:	f023 0207 	bic.w	r2, r3, #7
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e84:	4953      	ldr	r1, [pc, #332]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	658b      	str	r3, [r1, #88]	; 0x58
 8009e8a:	e001      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d04b      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea6:	d02e      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009eac:	d828      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb2:	d02a      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb8:	d822      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ebe:	d026      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ec4:	d81c      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eca:	d010      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ed0:	d816      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01d      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eda:	d111      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 fb4c 	bl	800b580 <RCCEx_PLL2_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009eec:	e012      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3324      	adds	r3, #36	; 0x24
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fbf5 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009efe:	e009      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
      break;
 8009f04:	e006      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f06:	bf00      	nop
 8009f08:	e004      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f28:	492a      	ldr	r1, [pc, #168]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	654b      	str	r3, [r1, #84]	; 0x54
 8009f2e:	e001      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d04d      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f4a:	d02e      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009f4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f50:	d828      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f56:	d02a      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5c:	d822      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f62:	d026      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f68:	d81c      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f6e:	d010      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f74:	d816      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01d      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f7e:	d111      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3304      	adds	r3, #4
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 fafa 	bl	800b580 <RCCEx_PLL2_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009f90:	e012      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3324      	adds	r3, #36	; 0x24
 8009f96:	2102      	movs	r1, #2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 fba3 	bl	800b6e4 <RCCEx_PLL3_Config>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009fa2:	e009      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	e006      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009faa:	bf00      	nop
 8009fac:	e004      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009fae:	bf00      	nop
 8009fb0:	e002      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009fb2:	bf00      	nop
 8009fb4:	e000      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fcc:	4901      	ldr	r1, [pc, #4]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8009fd2:	e003      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d04b      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ff2:	d02e      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009ff4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ff8:	d828      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ffe:	d02a      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a004:	d822      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a006:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a00a:	d026      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a00c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a010:	d81c      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a016:	d010      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a01c:	d816      	bhi.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d01d      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a026:	d111      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f001 faa6 	bl	800b580 <RCCEx_PLL2_Config>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a038:	e012      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3324      	adds	r3, #36	; 0x24
 800a03e:	2102      	movs	r1, #2
 800a040:	4618      	mov	r0, r3
 800a042:	f001 fb4f 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a04a:	e009      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]
      break;
 800a050:	e006      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a052:	bf00      	nop
 800a054:	e004      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a056:	bf00      	nop
 800a058:	e002      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a05a:	bf00      	nop
 800a05c:	e000      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a066:	4b9d      	ldr	r3, [pc, #628]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a074:	4999      	ldr	r1, [pc, #612]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a076:	4313      	orrs	r3, r2
 800a078:	658b      	str	r3, [r1, #88]	; 0x58
 800a07a:	e001      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0308 	and.w	r3, r3, #8
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01a      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a096:	d10a      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	2102      	movs	r1, #2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 fb20 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a0ae:	4b8b      	ldr	r3, [pc, #556]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0bc:	4987      	ldr	r1, [pc, #540]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01a      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d10a      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3324      	adds	r3, #36	; 0x24
 800a0de:	2102      	movs	r1, #2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 faff 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0f0:	4b7a      	ldr	r3, [pc, #488]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0fe:	4977      	ldr	r1, [pc, #476]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a100:	4313      	orrs	r3, r2
 800a102:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d034      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a11a:	d01d      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a11c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a120:	d817      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12a:	d009      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a12c:	e011      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3304      	adds	r3, #4
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f001 fa23 	bl	800b580 <RCCEx_PLL2_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a13e:	e00c      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3324      	adds	r3, #36	; 0x24
 800a144:	2102      	movs	r1, #2
 800a146:	4618      	mov	r0, r3
 800a148:	f001 facc 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a150:	e003      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	75fb      	strb	r3, [r7, #23]
      break;
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a160:	4b5e      	ldr	r3, [pc, #376]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a16e:	495b      	ldr	r1, [pc, #364]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a170:	4313      	orrs	r3, r2
 800a172:	658b      	str	r3, [r1, #88]	; 0x58
 800a174:	e001      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d033      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a18c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a190:	d01c      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a196:	d816      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a19c:	d003      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a19e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1a2:	d007      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a1a4:	e00f      	b.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a6:	4b4d      	ldr	r3, [pc, #308]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	4a4c      	ldr	r2, [pc, #304]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a1b2:	e00c      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3324      	adds	r3, #36	; 0x24
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 fa92 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a1c4:	e003      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ca:	e000      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a1cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1d4:	4b41      	ldr	r3, [pc, #260]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1e2:	493e      	ldr	r1, [pc, #248]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	654b      	str	r3, [r1, #84]	; 0x54
 800a1e8:	e001      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d029      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a206:	d007      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a208:	e00f      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a20a:	4b34      	ldr	r3, [pc, #208]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4a33      	ldr	r2, [pc, #204]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a216:	e00b      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3304      	adds	r3, #4
 800a21c:	2102      	movs	r1, #2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f9ae 	bl	800b580 <RCCEx_PLL2_Config>
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a228:	e002      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
      break;
 800a22e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d109      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a242:	4926      	ldr	r1, [pc, #152]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a244:	4313      	orrs	r3, r2
 800a246:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a248:	e001      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3324      	adds	r3, #36	; 0x24
 800a25e:	2102      	movs	r1, #2
 800a260:	4618      	mov	r0, r3
 800a262:	f001 fa3f 	bl	800b6e4 <RCCEx_PLL3_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d033      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a284:	d017      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28a:	d811      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a290:	d013      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a296:	d80b      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d010      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d106      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a2:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a6:	4a0d      	ldr	r2, [pc, #52]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a2ae:	e007      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b4:	e004      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e002      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a2ba:	bf00      	nop
 800a2bc:	e000      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a2be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10c      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d2:	4902      	ldr	r1, [pc, #8]	; (800a2dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	654b      	str	r3, [r1, #84]	; 0x54
 800a2d8:	e004      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a2da:	bf00      	nop
 800a2dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d008      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a2f0:	4b31      	ldr	r3, [pc, #196]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fc:	492e      	ldr	r1, [pc, #184]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a30e:	4b2a      	ldr	r3, [pc, #168]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a31c:	4926      	ldr	r1, [pc, #152]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d008      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a32e:	4b22      	ldr	r3, [pc, #136]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a332:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a33a:	491f      	ldr	r1, [pc, #124]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a34c:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	4a19      	ldr	r2, [pc, #100]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a356:	6113      	str	r3, [r2, #16]
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a362:	4915      	ldr	r1, [pc, #84]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a364:	4313      	orrs	r3, r2
 800a366:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	da08      	bge.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a370:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a374:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a37c:	490e      	ldr	r1, [pc, #56]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a38e:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a392:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39c:	4906      	ldr	r1, [pc, #24]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e000      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	58024400 	.word	0x58024400

0800a3bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b090      	sub	sp, #64	; 0x40
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ca:	f040 8095 	bne.w	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a3ce:	4b97      	ldr	r3, [pc, #604]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	f200 8088 	bhi.w	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a3fd 	.word	0x0800a3fd
 800a3ec:	0800a425 	.word	0x0800a425
 800a3f0:	0800a44d 	.word	0x0800a44d
 800a3f4:	0800a4e9 	.word	0x0800a4e9
 800a3f8:	0800a475 	.word	0x0800a475
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3fc:	4b8b      	ldr	r3, [pc, #556]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a408:	d108      	bne.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 ff64 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a418:	f000 bc94 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a420:	f000 bc90 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a424:	4b81      	ldr	r3, [pc, #516]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a430:	d108      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a432:	f107 0318 	add.w	r3, r7, #24
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fca8 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a440:	f000 bc80 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a448:	f000 bc7c 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44c:	4b77      	ldr	r3, [pc, #476]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a458:	d108      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45a:	f107 030c 	add.w	r3, r7, #12
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fde8 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a468:	f000 bc6c 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a470:	f000 bc68 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a474:	4b6d      	ldr	r3, [pc, #436]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a47e:	4b6b      	ldr	r3, [pc, #428]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b04      	cmp	r3, #4
 800a488:	d10c      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a490:	4b66      	ldr	r3, [pc, #408]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	08db      	lsrs	r3, r3, #3
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	4a65      	ldr	r2, [pc, #404]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a49c:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a2:	e01f      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a4:	4b61      	ldr	r3, [pc, #388]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b0:	d106      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b8:	d102      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4ba:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4be:	e011      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4c0:	4b5a      	ldr	r3, [pc, #360]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4cc:	d106      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d4:	d102      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4d6:	4b58      	ldr	r3, [pc, #352]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4e0:	f000 bc30 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a4e4:	f000 bc2e 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4e8:	4b54      	ldr	r3, [pc, #336]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ec:	f000 bc2a 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4f4:	f000 bc26 	b.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4fe:	f040 809f 	bne.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a502:	4b4a      	ldr	r3, [pc, #296]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a506:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a50a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a512:	d04d      	beq.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51a:	f200 8084 	bhi.w	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	2bc0      	cmp	r3, #192	; 0xc0
 800a522:	d07d      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2bc0      	cmp	r3, #192	; 0xc0
 800a528:	d87d      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	2b80      	cmp	r3, #128	; 0x80
 800a52e:	d02d      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d877      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	2b40      	cmp	r3, #64	; 0x40
 800a540:	d012      	beq.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a542:	e070      	b.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a544:	4b39      	ldr	r3, [pc, #228]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a54c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a550:	d107      	bne.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fec0 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a560:	e3f0      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a566:	e3ed      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a568:	4b30      	ldr	r3, [pc, #192]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a574:	d107      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a576:	f107 0318 	add.w	r3, r7, #24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fc06 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a584:	e3de      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a58a:	e3db      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a58c:	4b27      	ldr	r3, [pc, #156]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a598:	d107      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a59a:	f107 030c 	add.w	r3, r7, #12
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fd48 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5a8:	e3cc      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ae:	e3c9      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5b0:	4b1e      	ldr	r3, [pc, #120]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5ba:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d10c      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	08db      	lsrs	r3, r3, #3
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	4a16      	ldr	r2, [pc, #88]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5de:	e01e      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ec:	d106      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5f4:	d102      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fa:	e010      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a608:	d106      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a610:	d102      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a612:	4b09      	ldr	r3, [pc, #36]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a614:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a616:	e002      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a61c:	e392      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a61e:	e391      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a620:	4b06      	ldr	r3, [pc, #24]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a624:	e38e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a62a:	e38b      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a62c:	58024400 	.word	0x58024400
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	017d7840 	.word	0x017d7840
 800a63c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a646:	f040 809c 	bne.w	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a64a:	4b9d      	ldr	r3, [pc, #628]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a652:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a65a:	d054      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a662:	f200 808b 	bhi.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a66c:	f000 8083 	beq.w	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a676:	f200 8081 	bhi.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a680:	d02f      	beq.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a688:	d878      	bhi.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a696:	d012      	beq.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a698:	e070      	b.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a69a:	4b89      	ldr	r3, [pc, #548]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6a6:	d107      	bne.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fe15 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6b6:	e345      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6bc:	e342      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6be:	4b80      	ldr	r3, [pc, #512]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ca:	d107      	bne.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6cc:	f107 0318 	add.w	r3, r7, #24
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fb5b 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6da:	e333      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e0:	e330      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6e2:	4b77      	ldr	r3, [pc, #476]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ee:	d107      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f0:	f107 030c 	add.w	r3, r7, #12
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fc9d 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6fe:	e321      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a704:	e31e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a706:	4b6e      	ldr	r3, [pc, #440]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a70a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a70e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a710:	4b6b      	ldr	r3, [pc, #428]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d10c      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a722:	4b67      	ldr	r3, [pc, #412]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	08db      	lsrs	r3, r3, #3
 800a728:	f003 0303 	and.w	r3, r3, #3
 800a72c:	4a65      	ldr	r2, [pc, #404]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a72e:	fa22 f303 	lsr.w	r3, r2, r3
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a734:	e01e      	b.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a736:	4b62      	ldr	r3, [pc, #392]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a742:	d106      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a74a:	d102      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a74c:	4b5e      	ldr	r3, [pc, #376]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a750:	e010      	b.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a752:	4b5b      	ldr	r3, [pc, #364]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a75e:	d106      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a766:	d102      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a768:	4b58      	ldr	r3, [pc, #352]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76c:	e002      	b.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a772:	e2e7      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a774:	e2e6      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a776:	4b56      	ldr	r3, [pc, #344]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a77a:	e2e3      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a780:	e2e0      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a788:	f040 80a7 	bne.w	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a78c:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a790:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a794:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a79c:	d055      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7a4:	f200 8096 	bhi.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7ae:	f000 8084 	beq.w	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7b8:	f200 808c 	bhi.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7c2:	d030      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ca:	f200 8083 	bhi.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d004      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7da:	d012      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a7dc:	e07a      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7de:	4b38      	ldr	r3, [pc, #224]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fd73 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7fa:	e2a3      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a800:	e2a0      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a802:	4b2f      	ldr	r3, [pc, #188]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a810:	f107 0318 	add.w	r3, r7, #24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fab9 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a81e:	e291      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a824:	e28e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a826:	4b26      	ldr	r3, [pc, #152]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a832:	d107      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a834:	f107 030c 	add.w	r3, r7, #12
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fbfb 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a842:	e27f      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a848:	e27c      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a84a:	4b1d      	ldr	r3, [pc, #116]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a84e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a852:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a854:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d10c      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a866:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	4a14      	ldr	r2, [pc, #80]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a872:	fa22 f303 	lsr.w	r3, r2, r3
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a878:	e01e      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a886:	d106      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a88e:	d102      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a890:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a894:	e010      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8a2:	d106      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8aa:	d102      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b0:	e002      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8b6:	e245      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8b8:	e244      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8ba:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8be:	e241      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a8c0:	58024400 	.word	0x58024400
 800a8c4:	03d09000 	.word	0x03d09000
 800a8c8:	003d0900 	.word	0x003d0900
 800a8cc:	017d7840 	.word	0x017d7840
 800a8d0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d8:	e234      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e0:	f040 809c 	bne.w	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a8e4:	4b9b      	ldr	r3, [pc, #620]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a8ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8f4:	d054      	beq.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8fc:	f200 808b 	bhi.w	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a906:	f000 8083 	beq.w	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a910:	f200 8081 	bhi.w	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a91a:	d02f      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a922:	d878      	bhi.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a930:	d012      	beq.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a932:	e070      	b.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a934:	4b87      	ldr	r3, [pc, #540]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a940:	d107      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fcc8 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a950:	e1f8      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a956:	e1f5      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a958:	4b7e      	ldr	r3, [pc, #504]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a964:	d107      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a966:	f107 0318 	add.w	r3, r7, #24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 fa0e 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a974:	e1e6      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a97a:	e1e3      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a97c:	4b75      	ldr	r3, [pc, #468]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a988:	d107      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a98a:	f107 030c 	add.w	r3, r7, #12
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fb50 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a998:	e1d4      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a99e:	e1d1      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9a0:	4b6c      	ldr	r3, [pc, #432]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9aa:	4b6a      	ldr	r3, [pc, #424]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0304 	and.w	r3, r3, #4
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d10c      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d109      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9bc:	4b65      	ldr	r3, [pc, #404]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	08db      	lsrs	r3, r3, #3
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	4a64      	ldr	r2, [pc, #400]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800a9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9ce:	e01e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9d0:	4b60      	ldr	r3, [pc, #384]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9dc:	d106      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9e4:	d102      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9e6:	4b5d      	ldr	r3, [pc, #372]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9ea:	e010      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9ec:	4b59      	ldr	r3, [pc, #356]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9f8:	d106      	bne.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa00:	d102      	bne.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa02:	4b57      	ldr	r3, [pc, #348]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa06:	e002      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa0c:	e19a      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa0e:	e199      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa10:	4b54      	ldr	r3, [pc, #336]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa14:	e196      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1a:	e193      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa22:	d173      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aa24:	4b4b      	ldr	r3, [pc, #300]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa34:	d02f      	beq.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa3c:	d863      	bhi.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa4a:	d012      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800aa4c:	e05b      	b.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa4e:	4b41      	ldr	r3, [pc, #260]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa5a:	d107      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5c:	f107 0318 	add.w	r3, r7, #24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 f993 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa6a:	e16b      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa70:	e168      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa72:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa7e:	d107      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa80:	f107 030c 	add.w	r3, r7, #12
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 fad5 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa8e:	e159      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa94:	e156      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa96:	4b2f      	ldr	r3, [pc, #188]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaa0:	4b2c      	ldr	r3, [pc, #176]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d10c      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800aaac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d109      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aab2:	4b28      	ldr	r3, [pc, #160]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	08db      	lsrs	r3, r3, #3
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aabe:	fa22 f303 	lsr.w	r3, r2, r3
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aac4:	e01e      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aac6:	4b23      	ldr	r3, [pc, #140]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad2:	d106      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800aad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aada:	d102      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aadc:	4b1f      	ldr	r3, [pc, #124]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae0:	e010      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aae2:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaee:	d106      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf6:	d102      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aaf8:	4b19      	ldr	r3, [pc, #100]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aafc:	e002      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab02:	e11f      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab04:	e11e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab0a:	e11b      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab12:	d13e      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ab14:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2a:	d01d      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ab2c:	e02e      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab3a:	d107      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fbcb 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab4a:	e0fb      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab50:	e0f8      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab52:	bf00      	nop
 800ab54:	58024400 	.word	0x58024400
 800ab58:	03d09000 	.word	0x03d09000
 800ab5c:	003d0900 	.word	0x003d0900
 800ab60:	017d7840 	.word	0x017d7840
 800ab64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab68:	4b79      	ldr	r3, [pc, #484]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab74:	d107      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab76:	f107 0318 	add.w	r3, r7, #24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 f906 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab84:	e0de      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab8a:	e0db      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab90:	e0d8      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab98:	f040 8085 	bne.w	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ab9c:	4b6c      	ldr	r3, [pc, #432]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800aba4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abac:	d06b      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abb4:	d874      	bhi.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abbc:	d056      	beq.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc4:	d86c      	bhi.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abcc:	d03b      	beq.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abd4:	d864      	bhi.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abdc:	d021      	beq.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe4:	d85c      	bhi.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abf2:	d004      	beq.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800abf4:	e054      	b.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800abf6:	f000 f8b3 	bl	800ad60 <HAL_RCCEx_GetD3PCLK1Freq>
 800abfa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800abfc:	e0a2      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abfe:	4b54      	ldr	r3, [pc, #336]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac0a:	d107      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac0c:	f107 0318 	add.w	r3, r7, #24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 f8bb 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac1a:	e093      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac20:	e090      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac22:	4b4b      	ldr	r3, [pc, #300]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac2e:	d107      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac30:	f107 030c 	add.w	r3, r7, #12
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 f9fd 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac3e:	e081      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac44:	e07e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac46:	4b42      	ldr	r3, [pc, #264]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d109      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac52:	4b3f      	ldr	r3, [pc, #252]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f003 0303 	and.w	r3, r3, #3
 800ac5c:	4a3d      	ldr	r2, [pc, #244]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ac5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac64:	e06e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac6a:	e06b      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac6c:	4b38      	ldr	r3, [pc, #224]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac78:	d102      	bne.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800ac7a:	4b37      	ldr	r3, [pc, #220]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ac7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac7e:	e061      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac84:	e05e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac86:	4b32      	ldr	r3, [pc, #200]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac92:	d102      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800ac94:	4b31      	ldr	r3, [pc, #196]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac98:	e054      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac9e:	e051      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aca4:	e04e      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acac:	d148      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800acae:	4b28      	ldr	r3, [pc, #160]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbe:	d02a      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acc6:	d838      	bhi.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acd4:	d00d      	beq.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800acd6:	e030      	b.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acd8:	4b1d      	ldr	r3, [pc, #116]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ace4:	d102      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800ace6:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acea:	e02b      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf0:	e028      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acf2:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acfe:	d107      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fae9 	bl	800b2dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad0e:	e019      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad14:	e016      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad16:	4b0e      	ldr	r3, [pc, #56]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad22:	d107      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad24:	f107 0318 	add.w	r3, r7, #24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 f82f 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad32:	e007      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad38:	e004      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad3e:	e001      	b.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3740      	adds	r7, #64	; 0x40
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	58024400 	.word	0x58024400
 800ad54:	03d09000 	.word	0x03d09000
 800ad58:	003d0900 	.word	0x003d0900
 800ad5c:	017d7840 	.word	0x017d7840

0800ad60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad64:	f7fe fb88 	bl	8009478 <HAL_RCC_GetHCLKFreq>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	4904      	ldr	r1, [pc, #16]	; (800ad88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad76:	5ccb      	ldrb	r3, [r1, r3]
 800ad78:	f003 031f 	and.w	r3, r3, #31
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	58024400 	.word	0x58024400
 800ad88:	0800fe00 	.word	0x0800fe00

0800ad8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b089      	sub	sp, #36	; 0x24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad94:	4ba1      	ldr	r3, [pc, #644]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad98:	f003 0303 	and.w	r3, r3, #3
 800ad9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ad9e:	4b9f      	ldr	r3, [pc, #636]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	0b1b      	lsrs	r3, r3, #12
 800ada4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ada8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adaa:	4b9c      	ldr	r3, [pc, #624]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	091b      	lsrs	r3, r3, #4
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800adb6:	4b99      	ldr	r3, [pc, #612]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adba:	08db      	lsrs	r3, r3, #3
 800adbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	fb02 f303 	mul.w	r3, r2, r3
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 8111 	beq.w	800affc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2b02      	cmp	r3, #2
 800adde:	f000 8083 	beq.w	800aee8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	f200 80a1 	bhi.w	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d056      	beq.n	800aea4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800adf6:	e099      	b.n	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf8:	4b88      	ldr	r3, [pc, #544]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d02d      	beq.n	800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae04:	4b85      	ldr	r3, [pc, #532]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	08db      	lsrs	r3, r3, #3
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	4a84      	ldr	r2, [pc, #528]	; (800b020 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
 800ae14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b7b      	ldr	r3, [pc, #492]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae5e:	e087      	b.n	800af70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b6a      	ldr	r3, [pc, #424]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea2:	e065      	b.n	800af70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aeb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb6:	4b59      	ldr	r3, [pc, #356]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aee6:	e043      	b.n	800af70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefa:	4b48      	ldr	r3, [pc, #288]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af2a:	e021      	b.n	800af70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3e:	4b37      	ldr	r3, [pc, #220]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800af70:	4b2a      	ldr	r3, [pc, #168]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af74:	0a5b      	lsrs	r3, r3, #9
 800af76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af96:	ee17 2a90 	vmov	r2, s15
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800af9e:	4b1f      	ldr	r3, [pc, #124]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa8:	ee07 3a90 	vmov	s15, r3
 800afac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc4:	ee17 2a90 	vmov	r2, s15
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800afcc:	4b13      	ldr	r3, [pc, #76]	; (800b01c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd0:	0e1b      	lsrs	r3, r3, #24
 800afd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff2:	ee17 2a90 	vmov	r2, s15
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800affa:	e008      	b.n	800b00e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	609a      	str	r2, [r3, #8]
}
 800b00e:	bf00      	nop
 800b010:	3724      	adds	r7, #36	; 0x24
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	58024400 	.word	0x58024400
 800b020:	03d09000 	.word	0x03d09000
 800b024:	46000000 	.word	0x46000000
 800b028:	4c742400 	.word	0x4c742400
 800b02c:	4a742400 	.word	0x4a742400
 800b030:	4bbebc20 	.word	0x4bbebc20

0800b034 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b034:	b480      	push	{r7}
 800b036:	b089      	sub	sp, #36	; 0x24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b03c:	4ba1      	ldr	r3, [pc, #644]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b040:	f003 0303 	and.w	r3, r3, #3
 800b044:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b046:	4b9f      	ldr	r3, [pc, #636]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	0d1b      	lsrs	r3, r3, #20
 800b04c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b050:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b052:	4b9c      	ldr	r3, [pc, #624]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b056:	0a1b      	lsrs	r3, r3, #8
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b05e:	4b99      	ldr	r3, [pc, #612]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b062:	08db      	lsrs	r3, r3, #3
 800b064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8111 	beq.w	800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	2b02      	cmp	r3, #2
 800b086:	f000 8083 	beq.w	800b190 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	f200 80a1 	bhi.w	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d003      	beq.n	800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d056      	beq.n	800b14c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b09e:	e099      	b.n	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a0:	4b88      	ldr	r3, [pc, #544]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0320 	and.w	r3, r3, #32
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d02d      	beq.n	800b108 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0ac:	4b85      	ldr	r3, [pc, #532]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	08db      	lsrs	r3, r3, #3
 800b0b2:	f003 0303 	and.w	r3, r3, #3
 800b0b6:	4a84      	ldr	r2, [pc, #528]	; (800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d6:	4b7b      	ldr	r3, [pc, #492]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b106:	e087      	b.n	800b218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	ee07 3a90 	vmov	s15, r3
 800b10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11a:	4b6a      	ldr	r3, [pc, #424]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b14a:	e065      	b.n	800b218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15e:	4b59      	ldr	r3, [pc, #356]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b172:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b18e:	e043      	b.n	800b218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a2:	4b48      	ldr	r3, [pc, #288]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1d2:	e021      	b.n	800b218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e6:	4b37      	ldr	r3, [pc, #220]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b216:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b218:	4b2a      	ldr	r3, [pc, #168]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21c:	0a5b      	lsrs	r3, r3, #9
 800b21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b22e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b232:	edd7 6a07 	vldr	s13, [r7, #28]
 800b236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b23a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b23e:	ee17 2a90 	vmov	r2, s15
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b246:	4b1f      	ldr	r3, [pc, #124]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	0c1b      	lsrs	r3, r3, #16
 800b24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b250:	ee07 3a90 	vmov	s15, r3
 800b254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b25c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b260:	edd7 6a07 	vldr	s13, [r7, #28]
 800b264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b26c:	ee17 2a90 	vmov	r2, s15
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b274:	4b13      	ldr	r3, [pc, #76]	; (800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	0e1b      	lsrs	r3, r3, #24
 800b27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29a:	ee17 2a90 	vmov	r2, s15
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	609a      	str	r2, [r3, #8]
}
 800b2b6:	bf00      	nop
 800b2b8:	3724      	adds	r7, #36	; 0x24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	58024400 	.word	0x58024400
 800b2c8:	03d09000 	.word	0x03d09000
 800b2cc:	46000000 	.word	0x46000000
 800b2d0:	4c742400 	.word	0x4c742400
 800b2d4:	4a742400 	.word	0x4a742400
 800b2d8:	4bbebc20 	.word	0x4bbebc20

0800b2dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b089      	sub	sp, #36	; 0x24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2e4:	4ba0      	ldr	r3, [pc, #640]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b2ee:	4b9e      	ldr	r3, [pc, #632]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	091b      	lsrs	r3, r3, #4
 800b2f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b2fa:	4b9b      	ldr	r3, [pc, #620]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b304:	4b98      	ldr	r3, [pc, #608]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	08db      	lsrs	r3, r3, #3
 800b30a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	fb02 f303 	mul.w	r3, r2, r3
 800b314:	ee07 3a90 	vmov	s15, r3
 800b318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 8111 	beq.w	800b54a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	f000 8083 	beq.w	800b436 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	2b02      	cmp	r3, #2
 800b334:	f200 80a1 	bhi.w	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d056      	beq.n	800b3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b344:	e099      	b.n	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b346:	4b88      	ldr	r3, [pc, #544]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d02d      	beq.n	800b3ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b352:	4b85      	ldr	r3, [pc, #532]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	08db      	lsrs	r3, r3, #3
 800b358:	f003 0303 	and.w	r3, r3, #3
 800b35c:	4a83      	ldr	r2, [pc, #524]	; (800b56c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b35e:	fa22 f303 	lsr.w	r3, r2, r3
 800b362:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	ee07 3a90 	vmov	s15, r3
 800b374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37c:	4b7a      	ldr	r3, [pc, #488]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b384:	ee07 3a90 	vmov	s15, r3
 800b388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b390:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b3ac:	e087      	b.n	800b4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b574 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c0:	4b69      	ldr	r3, [pc, #420]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3f0:	e065      	b.n	800b4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	ee07 3a90 	vmov	s15, r3
 800b3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b404:	4b58      	ldr	r3, [pc, #352]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b414:	ed97 6a03 	vldr	s12, [r7, #12]
 800b418:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b41c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b430:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b434:	e043      	b.n	800b4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b440:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b57c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b448:	4b47      	ldr	r3, [pc, #284]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b458:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b478:	e021      	b.n	800b4be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	ee07 3a90 	vmov	s15, r3
 800b480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b484:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b574 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48c:	4b36      	ldr	r3, [pc, #216]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b494:	ee07 3a90 	vmov	s15, r3
 800b498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b4be:	4b2a      	ldr	r3, [pc, #168]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c2:	0a5b      	lsrs	r3, r3, #9
 800b4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e4:	ee17 2a90 	vmov	r2, s15
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b4ec:	4b1e      	ldr	r3, [pc, #120]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	0c1b      	lsrs	r3, r3, #16
 800b4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b502:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b506:	edd7 6a07 	vldr	s13, [r7, #28]
 800b50a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b50e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b512:	ee17 2a90 	vmov	r2, s15
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b51a:	4b13      	ldr	r3, [pc, #76]	; (800b568 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	0e1b      	lsrs	r3, r3, #24
 800b520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b524:	ee07 3a90 	vmov	s15, r3
 800b528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b530:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b534:	edd7 6a07 	vldr	s13, [r7, #28]
 800b538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b53c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b540:	ee17 2a90 	vmov	r2, s15
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b548:	e008      	b.n	800b55c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	609a      	str	r2, [r3, #8]
}
 800b55c:	bf00      	nop
 800b55e:	3724      	adds	r7, #36	; 0x24
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	58024400 	.word	0x58024400
 800b56c:	03d09000 	.word	0x03d09000
 800b570:	46000000 	.word	0x46000000
 800b574:	4c742400 	.word	0x4c742400
 800b578:	4a742400 	.word	0x4a742400
 800b57c:	4bbebc20 	.word	0x4bbebc20

0800b580 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b58e:	4b53      	ldr	r3, [pc, #332]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b592:	f003 0303 	and.w	r3, r3, #3
 800b596:	2b03      	cmp	r3, #3
 800b598:	d101      	bne.n	800b59e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e099      	b.n	800b6d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b59e:	4b4f      	ldr	r3, [pc, #316]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a4e      	ldr	r2, [pc, #312]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b5a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b5a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5aa:	f7f7 f98b 	bl	80028c4 <HAL_GetTick>
 800b5ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5b0:	e008      	b.n	800b5c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b5b2:	f7f7 f987 	bl	80028c4 <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d901      	bls.n	800b5c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e086      	b.n	800b6d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5c4:	4b45      	ldr	r3, [pc, #276]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1f0      	bne.n	800b5b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5d0:	4b42      	ldr	r3, [pc, #264]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	031b      	lsls	r3, r3, #12
 800b5de:	493f      	ldr	r1, [pc, #252]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	628b      	str	r3, [r1, #40]	; 0x28
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	025b      	lsls	r3, r3, #9
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	041b      	lsls	r3, r3, #16
 800b602:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b606:	431a      	orrs	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	061b      	lsls	r3, r3, #24
 800b610:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b614:	4931      	ldr	r1, [pc, #196]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b616:	4313      	orrs	r3, r2
 800b618:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b61a:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	492d      	ldr	r1, [pc, #180]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b62c:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	f023 0220 	bic.w	r2, r3, #32
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	4928      	ldr	r1, [pc, #160]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b63e:	4b27      	ldr	r3, [pc, #156]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b642:	4a26      	ldr	r2, [pc, #152]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b644:	f023 0310 	bic.w	r3, r3, #16
 800b648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b64a:	4b24      	ldr	r3, [pc, #144]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b64c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b64e:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <RCCEx_PLL2_Config+0x160>)
 800b650:	4013      	ands	r3, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	69d2      	ldr	r2, [r2, #28]
 800b656:	00d2      	lsls	r2, r2, #3
 800b658:	4920      	ldr	r1, [pc, #128]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b65e:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	4a1e      	ldr	r2, [pc, #120]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b664:	f043 0310 	orr.w	r3, r3, #16
 800b668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b670:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	4a19      	ldr	r2, [pc, #100]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b67a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b67c:	e00f      	b.n	800b69e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d106      	bne.n	800b692 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b684:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	4a14      	ldr	r2, [pc, #80]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b68a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b68e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b690:	e005      	b.n	800b69e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b696:	4a11      	ldr	r2, [pc, #68]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b69c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a0e      	ldr	r2, [pc, #56]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b6a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b6a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6aa:	f7f7 f90b 	bl	80028c4 <HAL_GetTick>
 800b6ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6b0:	e008      	b.n	800b6c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b6b2:	f7f7 f907 	bl	80028c4 <HAL_GetTick>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d901      	bls.n	800b6c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e006      	b.n	800b6d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <RCCEx_PLL2_Config+0x15c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d0f0      	beq.n	800b6b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	58024400 	.word	0x58024400
 800b6e0:	ffff0007 	.word	0xffff0007

0800b6e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6f2:	4b53      	ldr	r3, [pc, #332]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f6:	f003 0303 	and.w	r3, r3, #3
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d101      	bne.n	800b702 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e099      	b.n	800b836 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b702:	4b4f      	ldr	r3, [pc, #316]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a4e      	ldr	r2, [pc, #312]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b70c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b70e:	f7f7 f8d9 	bl	80028c4 <HAL_GetTick>
 800b712:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b714:	e008      	b.n	800b728 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b716:	f7f7 f8d5 	bl	80028c4 <HAL_GetTick>
 800b71a:	4602      	mov	r2, r0
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	2b02      	cmp	r3, #2
 800b722:	d901      	bls.n	800b728 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e086      	b.n	800b836 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b728:	4b45      	ldr	r3, [pc, #276]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1f0      	bne.n	800b716 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b734:	4b42      	ldr	r3, [pc, #264]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b738:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	051b      	lsls	r3, r3, #20
 800b742:	493f      	ldr	r1, [pc, #252]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b744:	4313      	orrs	r3, r2
 800b746:	628b      	str	r3, [r1, #40]	; 0x28
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	3b01      	subs	r3, #1
 800b758:	025b      	lsls	r3, r3, #9
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	431a      	orrs	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	3b01      	subs	r3, #1
 800b764:	041b      	lsls	r3, r3, #16
 800b766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b76a:	431a      	orrs	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	3b01      	subs	r3, #1
 800b772:	061b      	lsls	r3, r3, #24
 800b774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b778:	4931      	ldr	r1, [pc, #196]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b77e:	4b30      	ldr	r3, [pc, #192]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	492d      	ldr	r1, [pc, #180]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b790:	4b2b      	ldr	r3, [pc, #172]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	4928      	ldr	r1, [pc, #160]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7a2:	4b27      	ldr	r3, [pc, #156]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	4a26      	ldr	r2, [pc, #152]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7ae:	4b24      	ldr	r3, [pc, #144]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7b2:	4b24      	ldr	r3, [pc, #144]	; (800b844 <RCCEx_PLL3_Config+0x160>)
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	69d2      	ldr	r2, [r2, #28]
 800b7ba:	00d2      	lsls	r2, r2, #3
 800b7bc:	4920      	ldr	r1, [pc, #128]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7c2:	4b1f      	ldr	r3, [pc, #124]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	4a1e      	ldr	r2, [pc, #120]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	4a19      	ldr	r2, [pc, #100]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7e0:	e00f      	b.n	800b802 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d106      	bne.n	800b7f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7e8:	4b15      	ldr	r3, [pc, #84]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	4a14      	ldr	r2, [pc, #80]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7f4:	e005      	b.n	800b802 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7f6:	4b12      	ldr	r3, [pc, #72]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	4a11      	ldr	r2, [pc, #68]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b7fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b802:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a0e      	ldr	r2, [pc, #56]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b80c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b80e:	f7f7 f859 	bl	80028c4 <HAL_GetTick>
 800b812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b814:	e008      	b.n	800b828 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b816:	f7f7 f855 	bl	80028c4 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	d901      	bls.n	800b828 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e006      	b.n	800b836 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b828:	4b05      	ldr	r3, [pc, #20]	; (800b840 <RCCEx_PLL3_Config+0x15c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0f0      	beq.n	800b816 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	58024400 	.word	0x58024400
 800b844:	ffff0007 	.word	0xffff0007

0800b848 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e0f1      	b.n	800ba3e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a78      	ldr	r2, [pc, #480]	; (800ba48 <HAL_SPI_Init+0x200>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00f      	beq.n	800b88a <HAL_SPI_Init+0x42>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a77      	ldr	r2, [pc, #476]	; (800ba4c <HAL_SPI_Init+0x204>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d00a      	beq.n	800b88a <HAL_SPI_Init+0x42>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a75      	ldr	r2, [pc, #468]	; (800ba50 <HAL_SPI_Init+0x208>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d005      	beq.n	800b88a <HAL_SPI_Init+0x42>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d901      	bls.n	800b88a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e0d9      	b.n	800ba3e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fd74 	bl	800c378 <SPI_GetPacketSize>
 800b890:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a6c      	ldr	r2, [pc, #432]	; (800ba48 <HAL_SPI_Init+0x200>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00c      	beq.n	800b8b6 <HAL_SPI_Init+0x6e>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a6a      	ldr	r2, [pc, #424]	; (800ba4c <HAL_SPI_Init+0x204>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d007      	beq.n	800b8b6 <HAL_SPI_Init+0x6e>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a69      	ldr	r2, [pc, #420]	; (800ba50 <HAL_SPI_Init+0x208>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d002      	beq.n	800b8b6 <HAL_SPI_Init+0x6e>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b08      	cmp	r3, #8
 800b8b4:	d811      	bhi.n	800b8da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8ba:	4a63      	ldr	r2, [pc, #396]	; (800ba48 <HAL_SPI_Init+0x200>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d009      	beq.n	800b8d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a61      	ldr	r2, [pc, #388]	; (800ba4c <HAL_SPI_Init+0x204>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d004      	beq.n	800b8d4 <HAL_SPI_Init+0x8c>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a60      	ldr	r2, [pc, #384]	; (800ba50 <HAL_SPI_Init+0x208>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d104      	bne.n	800b8de <HAL_SPI_Init+0x96>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b10      	cmp	r3, #16
 800b8d8:	d901      	bls.n	800b8de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e0af      	b.n	800ba3e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7f6 fc54 	bl	80021a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f022 0201 	bic.w	r2, r2, #1
 800b90e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b91a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b924:	d119      	bne.n	800b95a <HAL_SPI_Init+0x112>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b92e:	d103      	bne.n	800b938 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b934:	2b00      	cmp	r3, #0
 800b936:	d008      	beq.n	800b94a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10c      	bne.n	800b95a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b948:	d107      	bne.n	800b95a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	69da      	ldr	r2, [r3, #28]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b962:	431a      	orrs	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96c:	ea42 0103 	orr.w	r1, r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68da      	ldr	r2, [r3, #12]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	430a      	orrs	r2, r1
 800b97a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	431a      	orrs	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	431a      	orrs	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	431a      	orrs	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	431a      	orrs	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ba:	ea42 0103 	orr.w	r1, r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d113      	bne.n	800b9fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 0201 	bic.w	r2, r2, #1
 800ba08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	40013000 	.word	0x40013000
 800ba4c:	40003800 	.word	0x40003800
 800ba50:	40003c00 	.word	0x40003c00

0800ba54 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08a      	sub	sp, #40	; 0x28
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	4613      	mov	r3, r2
 800ba62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3330      	adds	r3, #48	; 0x30
 800ba6e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba78:	d112      	bne.n	800baa0 <HAL_SPI_Receive+0x4c>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10e      	bne.n	800baa0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2204      	movs	r2, #4
 800ba86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 f978 	bl	800bd8c <HAL_SPI_TransmitReceive>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	e16f      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d101      	bne.n	800baae <HAL_SPI_Receive+0x5a>
 800baaa:	2302      	movs	r3, #2
 800baac:	e168      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bab6:	f7f6 ff05 	bl	80028c4 <HAL_GetTick>
 800baba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d007      	beq.n	800bad8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bac8:	2302      	movs	r3, #2
 800baca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bad4:	7ffb      	ldrb	r3, [r7, #31]
 800bad6:	e153      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <HAL_SPI_Receive+0x90>
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d107      	bne.n	800baf4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800baf0:	7ffb      	ldrb	r3, [r7, #31]
 800baf2:	e145      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2204      	movs	r2, #4
 800baf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	88fa      	ldrh	r2, [r7, #6]
 800bb0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	88fa      	ldrh	r2, [r7, #6]
 800bb16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb44:	d107      	bne.n	800bb56 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb54:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4b8a      	ldr	r3, [pc, #552]	; (800bd88 <HAL_SPI_Receive+0x334>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	88f9      	ldrh	r1, [r7, #6]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	430b      	orrs	r3, r1
 800bb68:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb82:	d107      	bne.n	800bb94 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	d948      	bls.n	800bc2e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb9c:	e040      	b.n	800bc20 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	695a      	ldr	r2, [r3, #20]
 800bba4:	f248 0308 	movw	r3, #32776	; 0x8008
 800bba8:	4013      	ands	r3, r2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d014      	beq.n	800bbd8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bbb8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbbe:	1d1a      	adds	r2, r3, #4
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bbd6:	e023      	b.n	800bc20 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbd8:	f7f6 fe74 	bl	80028c4 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d803      	bhi.n	800bbf0 <HAL_SPI_Receive+0x19c>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbee:	d102      	bne.n	800bbf6 <HAL_SPI_Receive+0x1a2>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d114      	bne.n	800bc20 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 faf0 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e0af      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1b8      	bne.n	800bb9e <HAL_SPI_Receive+0x14a>
 800bc2c:	e095      	b.n	800bd5a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	2b07      	cmp	r3, #7
 800bc34:	f240 808b 	bls.w	800bd4e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc38:	e03f      	b.n	800bcba <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d114      	bne.n	800bc72 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	8812      	ldrh	r2, [r2, #0]
 800bc50:	b292      	uxth	r2, r2
 800bc52:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc58:	1c9a      	adds	r2, r3, #2
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc70:	e023      	b.n	800bcba <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc72:	f7f6 fe27 	bl	80028c4 <HAL_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d803      	bhi.n	800bc8a <HAL_SPI_Receive+0x236>
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc88:	d102      	bne.n	800bc90 <HAL_SPI_Receive+0x23c>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d114      	bne.n	800bcba <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f000 faa3 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e062      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1b9      	bne.n	800bc3a <HAL_SPI_Receive+0x1e6>
 800bcc6:	e048      	b.n	800bd5a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d117      	bne.n	800bd06 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bce2:	7812      	ldrb	r2, [r2, #0]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd04:	e023      	b.n	800bd4e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd06:	f7f6 fddd 	bl	80028c4 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d803      	bhi.n	800bd1e <HAL_SPI_Receive+0x2ca>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd1c:	d102      	bne.n	800bd24 <HAL_SPI_Receive+0x2d0>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d114      	bne.n	800bd4e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 fa59 	bl	800c1dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e018      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1b6      	bne.n	800bcc8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 fa3e 	bl	800c1dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e000      	b.n	800bd80 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800bd7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	ffff0000 	.word	0xffff0000

0800bd8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af02      	add	r7, sp, #8
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
 800bd98:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3320      	adds	r3, #32
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3330      	adds	r3, #48	; 0x30
 800bdae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <HAL_SPI_TransmitReceive+0x32>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e209      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdc6:	f7f6 fd7d 	bl	80028c4 <HAL_GetTick>
 800bdca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bdcc:	887b      	ldrh	r3, [r7, #2]
 800bdce:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bdd0:	887b      	ldrh	r3, [r7, #2]
 800bdd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdda:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bde2:	7efb      	ldrb	r3, [r7, #27]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d014      	beq.n	800be12 <HAL_SPI_TransmitReceive+0x86>
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdee:	d106      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bdf8:	7efb      	ldrb	r3, [r7, #27]
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d009      	beq.n	800be12 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bdfe:	2302      	movs	r3, #2
 800be00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be10:	e1df      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x98>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <HAL_SPI_TransmitReceive+0x98>
 800be1e:	887b      	ldrh	r3, [r7, #2]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d109      	bne.n	800be38 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be36:	e1cc      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b04      	cmp	r3, #4
 800be42:	d003      	beq.n	800be4c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2205      	movs	r2, #5
 800be48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	887a      	ldrh	r2, [r7, #2]
 800be5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	887a      	ldrh	r2, [r7, #2]
 800be66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	887a      	ldrh	r2, [r7, #2]
 800be74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	887a      	ldrh	r2, [r7, #2]
 800be7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	4b82      	ldr	r3, [pc, #520]	; (800c09c <HAL_SPI_TransmitReceive+0x310>)
 800be94:	4013      	ands	r3, r2
 800be96:	8879      	ldrh	r1, [r7, #2]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f042 0201 	orr.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800beb8:	d107      	bne.n	800beca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bec8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	2b0f      	cmp	r3, #15
 800bed0:	d970      	bls.n	800bfb4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bed2:	e068      	b.n	800bfa6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d11a      	bne.n	800bf18 <HAL_SPI_TransmitReceive+0x18c>
 800bee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6812      	ldr	r2, [r2, #0]
 800bef2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bef8:	1d1a      	adds	r2, r3, #4
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf16:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	695a      	ldr	r2, [r3, #20]
 800bf1e:	f248 0308 	movw	r3, #32776	; 0x8008
 800bf22:	4013      	ands	r3, r2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01a      	beq.n	800bf5e <HAL_SPI_TransmitReceive+0x1d2>
 800bf28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d017      	beq.n	800bf5e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bf38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf3e:	1d1a      	adds	r2, r3, #4
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf5e:	f7f6 fcb1 	bl	80028c4 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d803      	bhi.n	800bf76 <HAL_SPI_TransmitReceive+0x1ea>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf74:	d102      	bne.n	800bf7c <HAL_SPI_TransmitReceive+0x1f0>
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d114      	bne.n	800bfa6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f92d 	bl	800c1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e115      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d193      	bne.n	800bed4 <HAL_SPI_TransmitReceive+0x148>
 800bfac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d190      	bne.n	800bed4 <HAL_SPI_TransmitReceive+0x148>
 800bfb2:	e0e7      	b.n	800c184 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	2b07      	cmp	r3, #7
 800bfba:	f240 80dd 	bls.w	800c178 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfbe:	e066      	b.n	800c08e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	f003 0302 	and.w	r3, r3, #2
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d119      	bne.n	800c002 <HAL_SPI_TransmitReceive+0x276>
 800bfce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d016      	beq.n	800c002 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd8:	881a      	ldrh	r2, [r3, #0]
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfe2:	1c9a      	adds	r2, r3, #2
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c000:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d11a      	bne.n	800c046 <HAL_SPI_TransmitReceive+0x2ba>
 800c010:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c012:	2b00      	cmp	r3, #0
 800c014:	d017      	beq.n	800c046 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c01a:	6a3a      	ldr	r2, [r7, #32]
 800c01c:	8812      	ldrh	r2, [r2, #0]
 800c01e:	b292      	uxth	r2, r2
 800c020:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c026:	1c9a      	adds	r2, r3, #2
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c032:	b29b      	uxth	r3, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c044:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c046:	f7f6 fc3d 	bl	80028c4 <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c052:	429a      	cmp	r2, r3
 800c054:	d803      	bhi.n	800c05e <HAL_SPI_TransmitReceive+0x2d2>
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c05c:	d102      	bne.n	800c064 <HAL_SPI_TransmitReceive+0x2d8>
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	2b00      	cmp	r3, #0
 800c062:	d114      	bne.n	800c08e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 f8b9 	bl	800c1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e0a1      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c08e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c090:	2b00      	cmp	r3, #0
 800c092:	d195      	bne.n	800bfc0 <HAL_SPI_TransmitReceive+0x234>
 800c094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d192      	bne.n	800bfc0 <HAL_SPI_TransmitReceive+0x234>
 800c09a:	e073      	b.n	800c184 <HAL_SPI_TransmitReceive+0x3f8>
 800c09c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	f003 0302 	and.w	r3, r3, #2
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d11b      	bne.n	800c0e6 <HAL_SPI_TransmitReceive+0x35a>
 800c0ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d018      	beq.n	800c0e6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3320      	adds	r3, #32
 800c0be:	7812      	ldrb	r2, [r2, #0]
 800c0c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d11d      	bne.n	800c130 <HAL_SPI_TransmitReceive+0x3a4>
 800c0f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d01a      	beq.n	800c130 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c106:	7812      	ldrb	r2, [r2, #0]
 800c108:	b2d2      	uxtb	r2, r2
 800c10a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	3b01      	subs	r3, #1
 800c120:	b29a      	uxth	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c12e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c130:	f7f6 fbc8 	bl	80028c4 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d803      	bhi.n	800c148 <HAL_SPI_TransmitReceive+0x3bc>
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c146:	d102      	bne.n	800c14e <HAL_SPI_TransmitReceive+0x3c2>
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d114      	bne.n	800c178 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 f844 	bl	800c1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c174:	2303      	movs	r3, #3
 800c176:	e02c      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c178:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d190      	bne.n	800c0a0 <HAL_SPI_TransmitReceive+0x314>
 800c17e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d18d      	bne.n	800c0a0 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	2200      	movs	r2, #0
 800c18c:	2108      	movs	r1, #8
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f8c4 	bl	800c31c <SPI_WaitOnFlagUntilTimeout>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1a0:	f043 0220 	orr.w	r2, r3, #32
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 f816 	bl	800c1dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e001      	b.n	800c1d2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800c1ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3730      	adds	r7, #48	; 0x30
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop

0800c1dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0208 	orr.w	r2, r2, #8
 800c1fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0210 	orr.w	r2, r2, #16
 800c20a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0201 	bic.w	r2, r2, #1
 800c21a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6919      	ldr	r1, [r3, #16]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4b3c      	ldr	r3, [pc, #240]	; (800c318 <SPI_CloseTransfer+0x13c>)
 800c228:	400b      	ands	r3, r1
 800c22a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c23a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b04      	cmp	r3, #4
 800c246:	d014      	beq.n	800c272 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f003 0320 	and.w	r3, r3, #32
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00f      	beq.n	800c272 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	699a      	ldr	r2, [r3, #24]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f042 0220 	orr.w	r2, r2, #32
 800c270:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d014      	beq.n	800c2a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00f      	beq.n	800c2a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28e:	f043 0204 	orr.w	r2, r3, #4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	699a      	ldr	r2, [r3, #24]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2b8:	f043 0201 	orr.w	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00f      	beq.n	800c2fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2e2:	f043 0208 	orr.w	r2, r3, #8
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	fffffc90 	.word	0xfffffc90

0800c31c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c32c:	e010      	b.n	800c350 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c32e:	f7f6 fac9 	bl	80028c4 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d803      	bhi.n	800c346 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c344:	d102      	bne.n	800c34c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e00f      	b.n	800c370 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695a      	ldr	r2, [r3, #20]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	4013      	ands	r3, r2
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	bf0c      	ite	eq
 800c360:	2301      	moveq	r3, #1
 800c362:	2300      	movne	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d0df      	beq.n	800c32e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c384:	095b      	lsrs	r3, r3, #5
 800c386:	3301      	adds	r3, #1
 800c388:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	3301      	adds	r3, #1
 800c390:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	3307      	adds	r3, #7
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d109      	bne.n	800c3d8 <HAL_TIM_OC_Start_IT+0x28>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	bf14      	ite	ne
 800c3d0:	2301      	movne	r3, #1
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	e03c      	b.n	800c452 <HAL_TIM_OC_Start_IT+0xa2>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b04      	cmp	r3, #4
 800c3dc:	d109      	bne.n	800c3f2 <HAL_TIM_OC_Start_IT+0x42>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	bf14      	ite	ne
 800c3ea:	2301      	movne	r3, #1
 800c3ec:	2300      	moveq	r3, #0
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	e02f      	b.n	800c452 <HAL_TIM_OC_Start_IT+0xa2>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b08      	cmp	r3, #8
 800c3f6:	d109      	bne.n	800c40c <HAL_TIM_OC_Start_IT+0x5c>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b01      	cmp	r3, #1
 800c402:	bf14      	ite	ne
 800c404:	2301      	movne	r3, #1
 800c406:	2300      	moveq	r3, #0
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	e022      	b.n	800c452 <HAL_TIM_OC_Start_IT+0xa2>
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2b0c      	cmp	r3, #12
 800c410:	d109      	bne.n	800c426 <HAL_TIM_OC_Start_IT+0x76>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	bf14      	ite	ne
 800c41e:	2301      	movne	r3, #1
 800c420:	2300      	moveq	r3, #0
 800c422:	b2db      	uxtb	r3, r3
 800c424:	e015      	b.n	800c452 <HAL_TIM_OC_Start_IT+0xa2>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b10      	cmp	r3, #16
 800c42a:	d109      	bne.n	800c440 <HAL_TIM_OC_Start_IT+0x90>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b01      	cmp	r3, #1
 800c436:	bf14      	ite	ne
 800c438:	2301      	movne	r3, #1
 800c43a:	2300      	moveq	r3, #0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	e008      	b.n	800c452 <HAL_TIM_OC_Start_IT+0xa2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b01      	cmp	r3, #1
 800c44a:	bf14      	ite	ne
 800c44c:	2301      	movne	r3, #1
 800c44e:	2300      	moveq	r3, #0
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e0ec      	b.n	800c634 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d104      	bne.n	800c46a <HAL_TIM_OC_Start_IT+0xba>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2202      	movs	r2, #2
 800c464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c468:	e023      	b.n	800c4b2 <HAL_TIM_OC_Start_IT+0x102>
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	d104      	bne.n	800c47a <HAL_TIM_OC_Start_IT+0xca>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c478:	e01b      	b.n	800c4b2 <HAL_TIM_OC_Start_IT+0x102>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b08      	cmp	r3, #8
 800c47e:	d104      	bne.n	800c48a <HAL_TIM_OC_Start_IT+0xda>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c488:	e013      	b.n	800c4b2 <HAL_TIM_OC_Start_IT+0x102>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b0c      	cmp	r3, #12
 800c48e:	d104      	bne.n	800c49a <HAL_TIM_OC_Start_IT+0xea>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2202      	movs	r2, #2
 800c494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c498:	e00b      	b.n	800c4b2 <HAL_TIM_OC_Start_IT+0x102>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b10      	cmp	r3, #16
 800c49e:	d104      	bne.n	800c4aa <HAL_TIM_OC_Start_IT+0xfa>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4a8:	e003      	b.n	800c4b2 <HAL_TIM_OC_Start_IT+0x102>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b0c      	cmp	r3, #12
 800c4b6:	d841      	bhi.n	800c53c <HAL_TIM_OC_Start_IT+0x18c>
 800c4b8:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <HAL_TIM_OC_Start_IT+0x110>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4f5 	.word	0x0800c4f5
 800c4c4:	0800c53d 	.word	0x0800c53d
 800c4c8:	0800c53d 	.word	0x0800c53d
 800c4cc:	0800c53d 	.word	0x0800c53d
 800c4d0:	0800c507 	.word	0x0800c507
 800c4d4:	0800c53d 	.word	0x0800c53d
 800c4d8:	0800c53d 	.word	0x0800c53d
 800c4dc:	0800c53d 	.word	0x0800c53d
 800c4e0:	0800c519 	.word	0x0800c519
 800c4e4:	0800c53d 	.word	0x0800c53d
 800c4e8:	0800c53d 	.word	0x0800c53d
 800c4ec:	0800c53d 	.word	0x0800c53d
 800c4f0:	0800c52b 	.word	0x0800c52b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0202 	orr.w	r2, r2, #2
 800c502:	60da      	str	r2, [r3, #12]
      break;
 800c504:	e01d      	b.n	800c542 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68da      	ldr	r2, [r3, #12]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f042 0204 	orr.w	r2, r2, #4
 800c514:	60da      	str	r2, [r3, #12]
      break;
 800c516:	e014      	b.n	800c542 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68da      	ldr	r2, [r3, #12]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f042 0208 	orr.w	r2, r2, #8
 800c526:	60da      	str	r2, [r3, #12]
      break;
 800c528:	e00b      	b.n	800c542 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f042 0210 	orr.w	r2, r2, #16
 800c538:	60da      	str	r2, [r3, #12]
      break;
 800c53a:	e002      	b.n	800c542 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	73fb      	strb	r3, [r7, #15]
      break;
 800c540:	bf00      	nop
  }

  if (status == HAL_OK)
 800c542:	7bfb      	ldrb	r3, [r7, #15]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d174      	bne.n	800c632 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2201      	movs	r2, #1
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fea9 	bl	800d2a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a38      	ldr	r2, [pc, #224]	; (800c63c <HAL_TIM_OC_Start_IT+0x28c>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d013      	beq.n	800c588 <HAL_TIM_OC_Start_IT+0x1d8>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a36      	ldr	r2, [pc, #216]	; (800c640 <HAL_TIM_OC_Start_IT+0x290>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d00e      	beq.n	800c588 <HAL_TIM_OC_Start_IT+0x1d8>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a35      	ldr	r2, [pc, #212]	; (800c644 <HAL_TIM_OC_Start_IT+0x294>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d009      	beq.n	800c588 <HAL_TIM_OC_Start_IT+0x1d8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a33      	ldr	r2, [pc, #204]	; (800c648 <HAL_TIM_OC_Start_IT+0x298>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d004      	beq.n	800c588 <HAL_TIM_OC_Start_IT+0x1d8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a32      	ldr	r2, [pc, #200]	; (800c64c <HAL_TIM_OC_Start_IT+0x29c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d101      	bne.n	800c58c <HAL_TIM_OC_Start_IT+0x1dc>
 800c588:	2301      	movs	r3, #1
 800c58a:	e000      	b.n	800c58e <HAL_TIM_OC_Start_IT+0x1de>
 800c58c:	2300      	movs	r3, #0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d007      	beq.n	800c5a2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a25      	ldr	r2, [pc, #148]	; (800c63c <HAL_TIM_OC_Start_IT+0x28c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d022      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b4:	d01d      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a25      	ldr	r2, [pc, #148]	; (800c650 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d018      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a23      	ldr	r2, [pc, #140]	; (800c654 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d013      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a22      	ldr	r2, [pc, #136]	; (800c658 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00e      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a19      	ldr	r2, [pc, #100]	; (800c640 <HAL_TIM_OC_Start_IT+0x290>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d009      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a1e      	ldr	r2, [pc, #120]	; (800c65c <HAL_TIM_OC_Start_IT+0x2ac>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d004      	beq.n	800c5f2 <HAL_TIM_OC_Start_IT+0x242>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a15      	ldr	r2, [pc, #84]	; (800c644 <HAL_TIM_OC_Start_IT+0x294>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d115      	bne.n	800c61e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689a      	ldr	r2, [r3, #8]
 800c5f8:	4b19      	ldr	r3, [pc, #100]	; (800c660 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b06      	cmp	r3, #6
 800c602:	d015      	beq.n	800c630 <HAL_TIM_OC_Start_IT+0x280>
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60a:	d011      	beq.n	800c630 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f042 0201 	orr.w	r2, r2, #1
 800c61a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c61c:	e008      	b.n	800c630 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0201 	orr.w	r2, r2, #1
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	e000      	b.n	800c632 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c630:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c632:	7bfb      	ldrb	r3, [r7, #15]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	40010000 	.word	0x40010000
 800c640:	40010400 	.word	0x40010400
 800c644:	40014000 	.word	0x40014000
 800c648:	40014400 	.word	0x40014400
 800c64c:	40014800 	.word	0x40014800
 800c650:	40000400 	.word	0x40000400
 800c654:	40000800 	.word	0x40000800
 800c658:	40000c00 	.word	0x40000c00
 800c65c:	40001800 	.word	0x40001800
 800c660:	00010007 	.word	0x00010007

0800c664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e049      	b.n	800c70a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7f5 fe38 	bl	8002300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f000 fa90 	bl	800cbc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	f003 0302 	and.w	r3, r3, #2
 800c724:	2b02      	cmp	r3, #2
 800c726:	d122      	bne.n	800c76e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b02      	cmp	r3, #2
 800c734:	d11b      	bne.n	800c76e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f06f 0202 	mvn.w	r2, #2
 800c73e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	f003 0303 	and.w	r3, r3, #3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fa19 	bl	800cb8c <HAL_TIM_IC_CaptureCallback>
 800c75a:	e005      	b.n	800c768 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7f3 ff53 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fa1c 	bl	800cba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d122      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f003 0304 	and.w	r3, r3, #4
 800c786:	2b04      	cmp	r3, #4
 800c788:	d11b      	bne.n	800c7c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f06f 0204 	mvn.w	r2, #4
 800c792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f9ef 	bl	800cb8c <HAL_TIM_IC_CaptureCallback>
 800c7ae:	e005      	b.n	800c7bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7f3 ff29 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9f2 	bl	800cba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	f003 0308 	and.w	r3, r3, #8
 800c7cc:	2b08      	cmp	r3, #8
 800c7ce:	d122      	bne.n	800c816 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0308 	and.w	r3, r3, #8
 800c7da:	2b08      	cmp	r3, #8
 800c7dc:	d11b      	bne.n	800c816 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f06f 0208 	mvn.w	r2, #8
 800c7e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	f003 0303 	and.w	r3, r3, #3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f9c5 	bl	800cb8c <HAL_TIM_IC_CaptureCallback>
 800c802:	e005      	b.n	800c810 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f3 feff 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f9c8 	bl	800cba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b10      	cmp	r3, #16
 800c822:	d122      	bne.n	800c86a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f003 0310 	and.w	r3, r3, #16
 800c82e:	2b10      	cmp	r3, #16
 800c830:	d11b      	bne.n	800c86a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f06f 0210 	mvn.w	r2, #16
 800c83a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2208      	movs	r2, #8
 800c840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f99b 	bl	800cb8c <HAL_TIM_IC_CaptureCallback>
 800c856:	e005      	b.n	800c864 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7f3 fed5 	bl	8000608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f99e 	bl	800cba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b01      	cmp	r3, #1
 800c876:	d10e      	bne.n	800c896 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b01      	cmp	r3, #1
 800c884:	d107      	bne.n	800c896 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f06f 0201 	mvn.w	r2, #1
 800c88e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f971 	bl	800cb78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a0:	2b80      	cmp	r3, #128	; 0x80
 800c8a2:	d10e      	bne.n	800c8c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ae:	2b80      	cmp	r3, #128	; 0x80
 800c8b0:	d107      	bne.n	800c8c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fe2f 	bl	800d520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8d0:	d10e      	bne.n	800c8f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8dc:	2b80      	cmp	r3, #128	; 0x80
 800c8de:	d107      	bne.n	800c8f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fe22 	bl	800d534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	691b      	ldr	r3, [r3, #16]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fa:	2b40      	cmp	r3, #64	; 0x40
 800c8fc:	d10e      	bne.n	800c91c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c908:	2b40      	cmp	r3, #64	; 0x40
 800c90a:	d107      	bne.n	800c91c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f94c 	bl	800cbb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	2b20      	cmp	r3, #32
 800c928:	d10e      	bne.n	800c948 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	f003 0320 	and.w	r3, r3, #32
 800c934:	2b20      	cmp	r3, #32
 800c936:	d107      	bne.n	800c948 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f06f 0220 	mvn.w	r2, #32
 800c940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fde2 	bl	800d50c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c966:	2b01      	cmp	r3, #1
 800c968:	d101      	bne.n	800c96e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c96a:	2302      	movs	r3, #2
 800c96c:	e0ff      	b.n	800cb6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b14      	cmp	r3, #20
 800c97a:	f200 80f0 	bhi.w	800cb5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c97e:	a201      	add	r2, pc, #4	; (adr r2, 800c984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800c9d9 	.word	0x0800c9d9
 800c988:	0800cb5f 	.word	0x0800cb5f
 800c98c:	0800cb5f 	.word	0x0800cb5f
 800c990:	0800cb5f 	.word	0x0800cb5f
 800c994:	0800ca19 	.word	0x0800ca19
 800c998:	0800cb5f 	.word	0x0800cb5f
 800c99c:	0800cb5f 	.word	0x0800cb5f
 800c9a0:	0800cb5f 	.word	0x0800cb5f
 800c9a4:	0800ca5b 	.word	0x0800ca5b
 800c9a8:	0800cb5f 	.word	0x0800cb5f
 800c9ac:	0800cb5f 	.word	0x0800cb5f
 800c9b0:	0800cb5f 	.word	0x0800cb5f
 800c9b4:	0800ca9b 	.word	0x0800ca9b
 800c9b8:	0800cb5f 	.word	0x0800cb5f
 800c9bc:	0800cb5f 	.word	0x0800cb5f
 800c9c0:	0800cb5f 	.word	0x0800cb5f
 800c9c4:	0800cadd 	.word	0x0800cadd
 800c9c8:	0800cb5f 	.word	0x0800cb5f
 800c9cc:	0800cb5f 	.word	0x0800cb5f
 800c9d0:	0800cb5f 	.word	0x0800cb5f
 800c9d4:	0800cb1d 	.word	0x0800cb1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f98c 	bl	800ccfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	699a      	ldr	r2, [r3, #24]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f042 0208 	orr.w	r2, r2, #8
 800c9f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	699a      	ldr	r2, [r3, #24]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f022 0204 	bic.w	r2, r2, #4
 800ca02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6999      	ldr	r1, [r3, #24]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	691a      	ldr	r2, [r3, #16]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	619a      	str	r2, [r3, #24]
      break;
 800ca16:	e0a5      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f9fc 	bl	800ce1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	699a      	ldr	r2, [r3, #24]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	699a      	ldr	r2, [r3, #24]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6999      	ldr	r1, [r3, #24]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	021a      	lsls	r2, r3, #8
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	430a      	orrs	r2, r1
 800ca56:	619a      	str	r2, [r3, #24]
      break;
 800ca58:	e084      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68b9      	ldr	r1, [r7, #8]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fa65 	bl	800cf30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69da      	ldr	r2, [r3, #28]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f042 0208 	orr.w	r2, r2, #8
 800ca74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69da      	ldr	r2, [r3, #28]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f022 0204 	bic.w	r2, r2, #4
 800ca84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	69d9      	ldr	r1, [r3, #28]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	691a      	ldr	r2, [r3, #16]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	61da      	str	r2, [r3, #28]
      break;
 800ca98:	e064      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 facd 	bl	800d040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69da      	ldr	r2, [r3, #28]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	69da      	ldr	r2, [r3, #28]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	69d9      	ldr	r1, [r3, #28]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	021a      	lsls	r2, r3, #8
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	61da      	str	r2, [r3, #28]
      break;
 800cada:	e043      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68b9      	ldr	r1, [r7, #8]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 fb16 	bl	800d114 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f042 0208 	orr.w	r2, r2, #8
 800caf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 0204 	bic.w	r2, r2, #4
 800cb06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	691a      	ldr	r2, [r3, #16]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	430a      	orrs	r2, r1
 800cb18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb1a:	e023      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fb5a 	bl	800d1dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	021a      	lsls	r2, r3, #8
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	430a      	orrs	r2, r1
 800cb5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cb5c:	e002      	b.n	800cb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
      break;
 800cb62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop

0800cb78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a40      	ldr	r2, [pc, #256]	; (800ccdc <TIM_Base_SetConfig+0x114>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d013      	beq.n	800cc08 <TIM_Base_SetConfig+0x40>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe6:	d00f      	beq.n	800cc08 <TIM_Base_SetConfig+0x40>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a3d      	ldr	r2, [pc, #244]	; (800cce0 <TIM_Base_SetConfig+0x118>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d00b      	beq.n	800cc08 <TIM_Base_SetConfig+0x40>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a3c      	ldr	r2, [pc, #240]	; (800cce4 <TIM_Base_SetConfig+0x11c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d007      	beq.n	800cc08 <TIM_Base_SetConfig+0x40>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a3b      	ldr	r2, [pc, #236]	; (800cce8 <TIM_Base_SetConfig+0x120>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d003      	beq.n	800cc08 <TIM_Base_SetConfig+0x40>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a3a      	ldr	r2, [pc, #232]	; (800ccec <TIM_Base_SetConfig+0x124>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d108      	bne.n	800cc1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a2f      	ldr	r2, [pc, #188]	; (800ccdc <TIM_Base_SetConfig+0x114>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d01f      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc28:	d01b      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a2c      	ldr	r2, [pc, #176]	; (800cce0 <TIM_Base_SetConfig+0x118>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d017      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a2b      	ldr	r2, [pc, #172]	; (800cce4 <TIM_Base_SetConfig+0x11c>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d013      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <TIM_Base_SetConfig+0x120>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d00f      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a29      	ldr	r2, [pc, #164]	; (800ccec <TIM_Base_SetConfig+0x124>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d00b      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a28      	ldr	r2, [pc, #160]	; (800ccf0 <TIM_Base_SetConfig+0x128>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d007      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a27      	ldr	r2, [pc, #156]	; (800ccf4 <TIM_Base_SetConfig+0x12c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d003      	beq.n	800cc62 <TIM_Base_SetConfig+0x9a>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a26      	ldr	r2, [pc, #152]	; (800ccf8 <TIM_Base_SetConfig+0x130>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d108      	bne.n	800cc74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	689a      	ldr	r2, [r3, #8]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a10      	ldr	r2, [pc, #64]	; (800ccdc <TIM_Base_SetConfig+0x114>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d00f      	beq.n	800ccc0 <TIM_Base_SetConfig+0xf8>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a12      	ldr	r2, [pc, #72]	; (800ccec <TIM_Base_SetConfig+0x124>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d00b      	beq.n	800ccc0 <TIM_Base_SetConfig+0xf8>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a11      	ldr	r2, [pc, #68]	; (800ccf0 <TIM_Base_SetConfig+0x128>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d007      	beq.n	800ccc0 <TIM_Base_SetConfig+0xf8>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a10      	ldr	r2, [pc, #64]	; (800ccf4 <TIM_Base_SetConfig+0x12c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_Base_SetConfig+0xf8>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a0f      	ldr	r2, [pc, #60]	; (800ccf8 <TIM_Base_SetConfig+0x130>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d103      	bne.n	800ccc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	691a      	ldr	r2, [r3, #16]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	615a      	str	r2, [r3, #20]
}
 800ccce:	bf00      	nop
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	40010000 	.word	0x40010000
 800cce0:	40000400 	.word	0x40000400
 800cce4:	40000800 	.word	0x40000800
 800cce8:	40000c00 	.word	0x40000c00
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800

0800ccfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	f023 0201 	bic.w	r2, r3, #1
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4b37      	ldr	r3, [pc, #220]	; (800ce04 <TIM_OC1_SetConfig+0x108>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0303 	bic.w	r3, r3, #3
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f023 0302 	bic.w	r3, r3, #2
 800cd44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a2d      	ldr	r2, [pc, #180]	; (800ce08 <TIM_OC1_SetConfig+0x10c>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d00f      	beq.n	800cd78 <TIM_OC1_SetConfig+0x7c>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a2c      	ldr	r2, [pc, #176]	; (800ce0c <TIM_OC1_SetConfig+0x110>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00b      	beq.n	800cd78 <TIM_OC1_SetConfig+0x7c>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a2b      	ldr	r2, [pc, #172]	; (800ce10 <TIM_OC1_SetConfig+0x114>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <TIM_OC1_SetConfig+0x7c>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a2a      	ldr	r2, [pc, #168]	; (800ce14 <TIM_OC1_SetConfig+0x118>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_OC1_SetConfig+0x7c>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a29      	ldr	r2, [pc, #164]	; (800ce18 <TIM_OC1_SetConfig+0x11c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d10c      	bne.n	800cd92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f023 0308 	bic.w	r3, r3, #8
 800cd7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f023 0304 	bic.w	r3, r3, #4
 800cd90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a1c      	ldr	r2, [pc, #112]	; (800ce08 <TIM_OC1_SetConfig+0x10c>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d00f      	beq.n	800cdba <TIM_OC1_SetConfig+0xbe>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a1b      	ldr	r2, [pc, #108]	; (800ce0c <TIM_OC1_SetConfig+0x110>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d00b      	beq.n	800cdba <TIM_OC1_SetConfig+0xbe>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a1a      	ldr	r2, [pc, #104]	; (800ce10 <TIM_OC1_SetConfig+0x114>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d007      	beq.n	800cdba <TIM_OC1_SetConfig+0xbe>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a19      	ldr	r2, [pc, #100]	; (800ce14 <TIM_OC1_SetConfig+0x118>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d003      	beq.n	800cdba <TIM_OC1_SetConfig+0xbe>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a18      	ldr	r2, [pc, #96]	; (800ce18 <TIM_OC1_SetConfig+0x11c>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d111      	bne.n	800cdde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	693a      	ldr	r2, [r7, #16]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	621a      	str	r2, [r3, #32]
}
 800cdf8:	bf00      	nop
 800cdfa:	371c      	adds	r7, #28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	fffeff8f 	.word	0xfffeff8f
 800ce08:	40010000 	.word	0x40010000
 800ce0c:	40010400 	.word	0x40010400
 800ce10:	40014000 	.word	0x40014000
 800ce14:	40014400 	.word	0x40014400
 800ce18:	40014800 	.word	0x40014800

0800ce1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b087      	sub	sp, #28
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	f023 0210 	bic.w	r2, r3, #16
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4b34      	ldr	r3, [pc, #208]	; (800cf18 <TIM_OC2_SetConfig+0xfc>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	021b      	lsls	r3, r3, #8
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f023 0320 	bic.w	r3, r3, #32
 800ce66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	011b      	lsls	r3, r3, #4
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4a29      	ldr	r2, [pc, #164]	; (800cf1c <TIM_OC2_SetConfig+0x100>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d003      	beq.n	800ce84 <TIM_OC2_SetConfig+0x68>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a28      	ldr	r2, [pc, #160]	; (800cf20 <TIM_OC2_SetConfig+0x104>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d10d      	bne.n	800cea0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	011b      	lsls	r3, r3, #4
 800ce92:	697a      	ldr	r2, [r7, #20]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a1e      	ldr	r2, [pc, #120]	; (800cf1c <TIM_OC2_SetConfig+0x100>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d00f      	beq.n	800cec8 <TIM_OC2_SetConfig+0xac>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <TIM_OC2_SetConfig+0x104>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00b      	beq.n	800cec8 <TIM_OC2_SetConfig+0xac>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a1c      	ldr	r2, [pc, #112]	; (800cf24 <TIM_OC2_SetConfig+0x108>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d007      	beq.n	800cec8 <TIM_OC2_SetConfig+0xac>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a1b      	ldr	r2, [pc, #108]	; (800cf28 <TIM_OC2_SetConfig+0x10c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d003      	beq.n	800cec8 <TIM_OC2_SetConfig+0xac>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a1a      	ldr	r2, [pc, #104]	; (800cf2c <TIM_OC2_SetConfig+0x110>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d113      	bne.n	800cef0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ced6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	693a      	ldr	r2, [r7, #16]
 800cef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	621a      	str	r2, [r3, #32]
}
 800cf0a:	bf00      	nop
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	feff8fff 	.word	0xfeff8fff
 800cf1c:	40010000 	.word	0x40010000
 800cf20:	40010400 	.word	0x40010400
 800cf24:	40014000 	.word	0x40014000
 800cf28:	40014400 	.word	0x40014400
 800cf2c:	40014800 	.word	0x40014800

0800cf30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	4b33      	ldr	r3, [pc, #204]	; (800d028 <TIM_OC3_SetConfig+0xf8>)
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f023 0303 	bic.w	r3, r3, #3
 800cf66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a28      	ldr	r2, [pc, #160]	; (800d02c <TIM_OC3_SetConfig+0xfc>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d003      	beq.n	800cf96 <TIM_OC3_SetConfig+0x66>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a27      	ldr	r2, [pc, #156]	; (800d030 <TIM_OC3_SetConfig+0x100>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d10d      	bne.n	800cfb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	021b      	lsls	r3, r3, #8
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a1d      	ldr	r2, [pc, #116]	; (800d02c <TIM_OC3_SetConfig+0xfc>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d00f      	beq.n	800cfda <TIM_OC3_SetConfig+0xaa>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a1c      	ldr	r2, [pc, #112]	; (800d030 <TIM_OC3_SetConfig+0x100>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d00b      	beq.n	800cfda <TIM_OC3_SetConfig+0xaa>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a1b      	ldr	r2, [pc, #108]	; (800d034 <TIM_OC3_SetConfig+0x104>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d007      	beq.n	800cfda <TIM_OC3_SetConfig+0xaa>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <TIM_OC3_SetConfig+0x108>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d003      	beq.n	800cfda <TIM_OC3_SetConfig+0xaa>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a19      	ldr	r2, [pc, #100]	; (800d03c <TIM_OC3_SetConfig+0x10c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d113      	bne.n	800d002 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	011b      	lsls	r3, r3, #4
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	4313      	orrs	r3, r2
 800d000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	697a      	ldr	r2, [r7, #20]
 800d01a:	621a      	str	r2, [r3, #32]
}
 800d01c:	bf00      	nop
 800d01e:	371c      	adds	r7, #28
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	fffeff8f 	.word	0xfffeff8f
 800d02c:	40010000 	.word	0x40010000
 800d030:	40010400 	.word	0x40010400
 800d034:	40014000 	.word	0x40014000
 800d038:	40014400 	.word	0x40014400
 800d03c:	40014800 	.word	0x40014800

0800d040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d040:	b480      	push	{r7}
 800d042:	b087      	sub	sp, #28
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <TIM_OC4_SetConfig+0xbc>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d08a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	031b      	lsls	r3, r3, #12
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a19      	ldr	r2, [pc, #100]	; (800d100 <TIM_OC4_SetConfig+0xc0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d00f      	beq.n	800d0c0 <TIM_OC4_SetConfig+0x80>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a18      	ldr	r2, [pc, #96]	; (800d104 <TIM_OC4_SetConfig+0xc4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <TIM_OC4_SetConfig+0x80>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	; (800d108 <TIM_OC4_SetConfig+0xc8>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d007      	beq.n	800d0c0 <TIM_OC4_SetConfig+0x80>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a16      	ldr	r2, [pc, #88]	; (800d10c <TIM_OC4_SetConfig+0xcc>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d003      	beq.n	800d0c0 <TIM_OC4_SetConfig+0x80>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a15      	ldr	r2, [pc, #84]	; (800d110 <TIM_OC4_SetConfig+0xd0>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d109      	bne.n	800d0d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	019b      	lsls	r3, r3, #6
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	621a      	str	r2, [r3, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	feff8fff 	.word	0xfeff8fff
 800d100:	40010000 	.word	0x40010000
 800d104:	40010400 	.word	0x40010400
 800d108:	40014000 	.word	0x40014000
 800d10c:	40014400 	.word	0x40014400
 800d110:	40014800 	.word	0x40014800

0800d114 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4b21      	ldr	r3, [pc, #132]	; (800d1c4 <TIM_OC5_SetConfig+0xb0>)
 800d140:	4013      	ands	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d154:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	041b      	lsls	r3, r3, #16
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	4313      	orrs	r3, r2
 800d160:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a18      	ldr	r2, [pc, #96]	; (800d1c8 <TIM_OC5_SetConfig+0xb4>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d00f      	beq.n	800d18a <TIM_OC5_SetConfig+0x76>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a17      	ldr	r2, [pc, #92]	; (800d1cc <TIM_OC5_SetConfig+0xb8>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00b      	beq.n	800d18a <TIM_OC5_SetConfig+0x76>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a16      	ldr	r2, [pc, #88]	; (800d1d0 <TIM_OC5_SetConfig+0xbc>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d007      	beq.n	800d18a <TIM_OC5_SetConfig+0x76>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a15      	ldr	r2, [pc, #84]	; (800d1d4 <TIM_OC5_SetConfig+0xc0>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d003      	beq.n	800d18a <TIM_OC5_SetConfig+0x76>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4a14      	ldr	r2, [pc, #80]	; (800d1d8 <TIM_OC5_SetConfig+0xc4>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d109      	bne.n	800d19e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	695b      	ldr	r3, [r3, #20]
 800d196:	021b      	lsls	r3, r3, #8
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	621a      	str	r2, [r3, #32]
}
 800d1b8:	bf00      	nop
 800d1ba:	371c      	adds	r7, #28
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	fffeff8f 	.word	0xfffeff8f
 800d1c8:	40010000 	.word	0x40010000
 800d1cc:	40010400 	.word	0x40010400
 800d1d0:	40014000 	.word	0x40014000
 800d1d4:	40014400 	.word	0x40014400
 800d1d8:	40014800 	.word	0x40014800

0800d1dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4b22      	ldr	r3, [pc, #136]	; (800d290 <TIM_OC6_SetConfig+0xb4>)
 800d208:	4013      	ands	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	021b      	lsls	r3, r3, #8
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	4313      	orrs	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	051b      	lsls	r3, r3, #20
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	4313      	orrs	r3, r2
 800d22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a19      	ldr	r2, [pc, #100]	; (800d294 <TIM_OC6_SetConfig+0xb8>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00f      	beq.n	800d254 <TIM_OC6_SetConfig+0x78>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a18      	ldr	r2, [pc, #96]	; (800d298 <TIM_OC6_SetConfig+0xbc>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d00b      	beq.n	800d254 <TIM_OC6_SetConfig+0x78>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a17      	ldr	r2, [pc, #92]	; (800d29c <TIM_OC6_SetConfig+0xc0>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d007      	beq.n	800d254 <TIM_OC6_SetConfig+0x78>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a16      	ldr	r2, [pc, #88]	; (800d2a0 <TIM_OC6_SetConfig+0xc4>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d003      	beq.n	800d254 <TIM_OC6_SetConfig+0x78>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a15      	ldr	r2, [pc, #84]	; (800d2a4 <TIM_OC6_SetConfig+0xc8>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d109      	bne.n	800d268 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d25a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	029b      	lsls	r3, r3, #10
 800d262:	697a      	ldr	r2, [r7, #20]
 800d264:	4313      	orrs	r3, r2
 800d266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	621a      	str	r2, [r3, #32]
}
 800d282:	bf00      	nop
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	feff8fff 	.word	0xfeff8fff
 800d294:	40010000 	.word	0x40010000
 800d298:	40010400 	.word	0x40010400
 800d29c:	40014000 	.word	0x40014000
 800d2a0:	40014400 	.word	0x40014400
 800d2a4:	40014800 	.word	0x40014800

0800d2a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f003 031f 	and.w	r3, r3, #31
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6a1a      	ldr	r2, [r3, #32]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	401a      	ands	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6a1a      	ldr	r2, [r3, #32]
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f003 031f 	and.w	r3, r3, #31
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	621a      	str	r2, [r3, #32]
}
 800d2e6:	bf00      	nop
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d304:	2b01      	cmp	r3, #1
 800d306:	d101      	bne.n	800d30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d308:	2302      	movs	r3, #2
 800d30a:	e06d      	b.n	800d3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2202      	movs	r2, #2
 800d318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a30      	ldr	r2, [pc, #192]	; (800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d004      	beq.n	800d340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a2f      	ldr	r2, [pc, #188]	; (800d3f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d108      	bne.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4313      	orrs	r3, r2
 800d350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	4313      	orrs	r3, r2
 800d362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a20      	ldr	r2, [pc, #128]	; (800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d022      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d37e:	d01d      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a1d      	ldr	r2, [pc, #116]	; (800d3fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d018      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a1c      	ldr	r2, [pc, #112]	; (800d400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d013      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a1a      	ldr	r2, [pc, #104]	; (800d404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d00e      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d009      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a16      	ldr	r2, [pc, #88]	; (800d408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d004      	beq.n	800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a15      	ldr	r2, [pc, #84]	; (800d40c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d10c      	bne.n	800d3d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr
 800d3f4:	40010000 	.word	0x40010000
 800d3f8:	40010400 	.word	0x40010400
 800d3fc:	40000400 	.word	0x40000400
 800d400:	40000800 	.word	0x40000800
 800d404:	40000c00 	.word	0x40000c00
 800d408:	40001800 	.word	0x40001800
 800d40c:	40014000 	.word	0x40014000

0800d410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d424:	2b01      	cmp	r3, #1
 800d426:	d101      	bne.n	800d42c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d428:	2302      	movs	r3, #2
 800d42a:	e065      	b.n	800d4f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	4313      	orrs	r3, r2
 800d478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	4313      	orrs	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d492:	4313      	orrs	r3, r2
 800d494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	041b      	lsls	r3, r3, #16
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a16      	ldr	r2, [pc, #88]	; (800d504 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d004      	beq.n	800d4ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a14      	ldr	r2, [pc, #80]	; (800d508 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d115      	bne.n	800d4e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	051b      	lsls	r3, r3, #20
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	40010000 	.word	0x40010000
 800d508:	40010400 	.word	0x40010400

0800d50c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d101      	bne.n	800d55a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e042      	b.n	800d5e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7f4 ff89 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2224      	movs	r2, #36	; 0x24
 800d576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0201 	bic.w	r2, r2, #1
 800d588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fcd6 	bl	800df3c <UART_SetConfig>
 800d590:	4603      	mov	r3, r0
 800d592:	2b01      	cmp	r3, #1
 800d594:	d101      	bne.n	800d59a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e022      	b.n	800d5e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f001 fa32 	bl	800ea0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d5b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	689a      	ldr	r2, [r3, #8]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d5c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f042 0201 	orr.w	r2, r2, #1
 800d5d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f001 fab9 	bl	800eb50 <UART_CheckIdleState>
 800d5de:	4603      	mov	r3, r0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5fe:	2b20      	cmp	r3, #32
 800d600:	f040 8083 	bne.w	800d70a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <HAL_UART_Transmit+0x28>
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e07b      	b.n	800d70c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d101      	bne.n	800d622 <HAL_UART_Transmit+0x3a>
 800d61e:	2302      	movs	r3, #2
 800d620:	e074      	b.n	800d70c <HAL_UART_Transmit+0x124>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2201      	movs	r2, #1
 800d626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2221      	movs	r2, #33	; 0x21
 800d636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d63a:	f7f5 f943 	bl	80028c4 <HAL_GetTick>
 800d63e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	88fa      	ldrh	r2, [r7, #6]
 800d644:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	88fa      	ldrh	r2, [r7, #6]
 800d64c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d658:	d108      	bne.n	800d66c <HAL_UART_Transmit+0x84>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d104      	bne.n	800d66c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d662:	2300      	movs	r3, #0
 800d664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	61bb      	str	r3, [r7, #24]
 800d66a:	e003      	b.n	800d674 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d670:	2300      	movs	r3, #0
 800d672:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d67c:	e02c      	b.n	800d6d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2200      	movs	r2, #0
 800d686:	2180      	movs	r1, #128	; 0x80
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f001 faac 	bl	800ebe6 <UART_WaitOnFlagUntilTimeout>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e039      	b.n	800d70c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10b      	bne.n	800d6b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	3302      	adds	r3, #2
 800d6b2:	61bb      	str	r3, [r7, #24]
 800d6b4:	e007      	b.n	800d6c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	781a      	ldrb	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1cc      	bne.n	800d67e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2140      	movs	r1, #64	; 0x40
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f001 fa79 	bl	800ebe6 <UART_WaitOnFlagUntilTimeout>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	e006      	b.n	800d70c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2220      	movs	r2, #32
 800d702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	e000      	b.n	800d70c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d70a:	2302      	movs	r3, #2
  }
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3720      	adds	r7, #32
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b08a      	sub	sp, #40	; 0x28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4613      	mov	r3, r2
 800d720:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d728:	2b20      	cmp	r3, #32
 800d72a:	d142      	bne.n	800d7b2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <HAL_UART_Receive_IT+0x24>
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	e03b      	b.n	800d7b4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d742:	2b01      	cmp	r3, #1
 800d744:	d101      	bne.n	800d74a <HAL_UART_Receive_IT+0x36>
 800d746:	2302      	movs	r3, #2
 800d748:	e034      	b.n	800d7b4 <HAL_UART_Receive_IT+0xa0>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2200      	movs	r2, #0
 800d756:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a17      	ldr	r2, [pc, #92]	; (800d7bc <HAL_UART_Receive_IT+0xa8>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d01f      	beq.n	800d7a2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d018      	beq.n	800d7a2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	e853 3f00 	ldrex	r3, [r3]
 800d77c:	613b      	str	r3, [r7, #16]
   return(result);
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d784:	627b      	str	r3, [r7, #36]	; 0x24
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	461a      	mov	r2, r3
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	623b      	str	r3, [r7, #32]
 800d790:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d792:	69f9      	ldr	r1, [r7, #28]
 800d794:	6a3a      	ldr	r2, [r7, #32]
 800d796:	e841 2300 	strex	r3, r2, [r1]
 800d79a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1e6      	bne.n	800d770 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	68b9      	ldr	r1, [r7, #8]
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f001 fae5 	bl	800ed78 <UART_Start_Receive_IT>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	e000      	b.n	800d7b4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d7b2:	2302      	movs	r3, #2
  }
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3728      	adds	r7, #40	; 0x28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	58000c00 	.word	0x58000c00

0800d7c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b0ba      	sub	sp, #232	; 0xe8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d7e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d7ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d7f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d11b      	bne.n	800d834 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b00      	cmp	r3, #0
 800d806:	d015      	beq.n	800d834 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d80c:	f003 0320 	and.w	r3, r3, #32
 800d810:	2b00      	cmp	r3, #0
 800d812:	d105      	bne.n	800d820 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d009      	beq.n	800d834 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 835a 	beq.w	800dede <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	4798      	blx	r3
      }
      return;
 800d832:	e354      	b.n	800dede <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 811f 	beq.w	800da7c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d83e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d842:	4b8b      	ldr	r3, [pc, #556]	; (800da70 <HAL_UART_IRQHandler+0x2b0>)
 800d844:	4013      	ands	r3, r2
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d84a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d84e:	4b89      	ldr	r3, [pc, #548]	; (800da74 <HAL_UART_IRQHandler+0x2b4>)
 800d850:	4013      	ands	r3, r2
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 8112 	beq.w	800da7c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b00      	cmp	r3, #0
 800d862:	d011      	beq.n	800d888 <HAL_UART_IRQHandler+0xc8>
 800d864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00b      	beq.n	800d888 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2201      	movs	r2, #1
 800d876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d87e:	f043 0201 	orr.w	r2, r3, #1
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d88c:	f003 0302 	and.w	r3, r3, #2
 800d890:	2b00      	cmp	r3, #0
 800d892:	d011      	beq.n	800d8b8 <HAL_UART_IRQHandler+0xf8>
 800d894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00b      	beq.n	800d8b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2202      	movs	r2, #2
 800d8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ae:	f043 0204 	orr.w	r2, r3, #4
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d011      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x128>
 800d8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2204      	movs	r2, #4
 800d8d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8de:	f043 0202 	orr.w	r2, r3, #2
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8ec:	f003 0308 	and.w	r3, r3, #8
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d017      	beq.n	800d924 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f8:	f003 0320 	and.w	r3, r3, #32
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d105      	bne.n	800d90c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d900:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d904:	4b5a      	ldr	r3, [pc, #360]	; (800da70 <HAL_UART_IRQHandler+0x2b0>)
 800d906:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00b      	beq.n	800d924 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2208      	movs	r2, #8
 800d912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d91a:	f043 0208 	orr.w	r2, r3, #8
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d012      	beq.n	800d956 <HAL_UART_IRQHandler+0x196>
 800d930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00c      	beq.n	800d956 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d94c:	f043 0220 	orr.w	r2, r3, #32
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 82c0 	beq.w	800dee2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d966:	f003 0320 	and.w	r3, r3, #32
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d013      	beq.n	800d996 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d96e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	2b00      	cmp	r3, #0
 800d978:	d105      	bne.n	800d986 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d97e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d007      	beq.n	800d996 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d003      	beq.n	800d996 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d99c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9aa:	2b40      	cmp	r3, #64	; 0x40
 800d9ac:	d005      	beq.n	800d9ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d9ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d04f      	beq.n	800da5a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 fb06 	bl	800efcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ca:	2b40      	cmp	r3, #64	; 0x40
 800d9cc:	d141      	bne.n	800da52 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9dc:	e853 3f00 	ldrex	r3, [r3]
 800d9e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d9e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d9fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d9fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da0a:	e841 2300 	strex	r3, r2, [r1]
 800da0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1d9      	bne.n	800d9ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d013      	beq.n	800da4a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da26:	4a14      	ldr	r2, [pc, #80]	; (800da78 <HAL_UART_IRQHandler+0x2b8>)
 800da28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f8 f88a 	bl	8005b48 <HAL_DMA_Abort_IT>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d017      	beq.n	800da6a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800da44:	4610      	mov	r0, r2
 800da46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da48:	e00f      	b.n	800da6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa60 	bl	800df10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da50:	e00b      	b.n	800da6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fa5c 	bl	800df10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da58:	e007      	b.n	800da6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fa58 	bl	800df10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800da68:	e23b      	b.n	800dee2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da6a:	bf00      	nop
    return;
 800da6c:	e239      	b.n	800dee2 <HAL_UART_IRQHandler+0x722>
 800da6e:	bf00      	nop
 800da70:	10000001 	.word	0x10000001
 800da74:	04000120 	.word	0x04000120
 800da78:	0800f099 	.word	0x0800f099

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	2b01      	cmp	r3, #1
 800da82:	f040 81ce 	bne.w	800de22 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da8a:	f003 0310 	and.w	r3, r3, #16
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 81c7 	beq.w	800de22 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da98:	f003 0310 	and.w	r3, r3, #16
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 81c0 	beq.w	800de22 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2210      	movs	r2, #16
 800daa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab4:	2b40      	cmp	r3, #64	; 0x40
 800dab6:	f040 813b 	bne.w	800dd30 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a8b      	ldr	r2, [pc, #556]	; (800dcf0 <HAL_UART_IRQHandler+0x530>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d059      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a89      	ldr	r2, [pc, #548]	; (800dcf4 <HAL_UART_IRQHandler+0x534>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d053      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a87      	ldr	r2, [pc, #540]	; (800dcf8 <HAL_UART_IRQHandler+0x538>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d04d      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a85      	ldr	r2, [pc, #532]	; (800dcfc <HAL_UART_IRQHandler+0x53c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d047      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a83      	ldr	r2, [pc, #524]	; (800dd00 <HAL_UART_IRQHandler+0x540>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d041      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a81      	ldr	r2, [pc, #516]	; (800dd04 <HAL_UART_IRQHandler+0x544>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d03b      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a7f      	ldr	r2, [pc, #508]	; (800dd08 <HAL_UART_IRQHandler+0x548>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d035      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a7d      	ldr	r2, [pc, #500]	; (800dd0c <HAL_UART_IRQHandler+0x54c>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d02f      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a7b      	ldr	r2, [pc, #492]	; (800dd10 <HAL_UART_IRQHandler+0x550>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d029      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a79      	ldr	r2, [pc, #484]	; (800dd14 <HAL_UART_IRQHandler+0x554>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d023      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a77      	ldr	r2, [pc, #476]	; (800dd18 <HAL_UART_IRQHandler+0x558>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d01d      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a75      	ldr	r2, [pc, #468]	; (800dd1c <HAL_UART_IRQHandler+0x55c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d017      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a73      	ldr	r2, [pc, #460]	; (800dd20 <HAL_UART_IRQHandler+0x560>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d011      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a71      	ldr	r2, [pc, #452]	; (800dd24 <HAL_UART_IRQHandler+0x564>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d00b      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a6f      	ldr	r2, [pc, #444]	; (800dd28 <HAL_UART_IRQHandler+0x568>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d005      	beq.n	800db7a <HAL_UART_IRQHandler+0x3ba>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a6d      	ldr	r2, [pc, #436]	; (800dd2c <HAL_UART_IRQHandler+0x56c>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d105      	bne.n	800db86 <HAL_UART_IRQHandler+0x3c6>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	b29b      	uxth	r3, r3
 800db84:	e004      	b.n	800db90 <HAL_UART_IRQHandler+0x3d0>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 81a4 	beq.w	800dee6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dba4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	f080 819c 	bcs.w	800dee6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dbb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbbc:	69db      	ldr	r3, [r3, #28]
 800dbbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbc2:	f000 8086 	beq.w	800dcd2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbd2:	e853 3f00 	ldrex	r3, [r3]
 800dbd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dbda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dbf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dbfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc00:	e841 2300 	strex	r3, r2, [r1]
 800dc04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dc08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1da      	bne.n	800dbc6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3308      	adds	r3, #8
 800dc16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc1a:	e853 3f00 	ldrex	r3, [r3]
 800dc1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dc20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc22:	f023 0301 	bic.w	r3, r3, #1
 800dc26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3308      	adds	r3, #8
 800dc30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dc38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc40:	e841 2300 	strex	r3, r2, [r1]
 800dc44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dc46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e1      	bne.n	800dc10 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3308      	adds	r3, #8
 800dc52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc56:	e853 3f00 	ldrex	r3, [r3]
 800dc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3308      	adds	r3, #8
 800dc6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc70:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc78:	e841 2300 	strex	r3, r2, [r1]
 800dc7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1e3      	bne.n	800dc4c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2220      	movs	r2, #32
 800dc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9a:	e853 3f00 	ldrex	r3, [r3]
 800dc9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca2:	f023 0310 	bic.w	r3, r3, #16
 800dca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcbc:	e841 2300 	strex	r3, r2, [r1]
 800dcc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1e4      	bne.n	800dc92 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7f7 fc1d 	bl	800550c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f91c 	bl	800df24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcec:	e0fb      	b.n	800dee6 <HAL_UART_IRQHandler+0x726>
 800dcee:	bf00      	nop
 800dcf0:	40020010 	.word	0x40020010
 800dcf4:	40020028 	.word	0x40020028
 800dcf8:	40020040 	.word	0x40020040
 800dcfc:	40020058 	.word	0x40020058
 800dd00:	40020070 	.word	0x40020070
 800dd04:	40020088 	.word	0x40020088
 800dd08:	400200a0 	.word	0x400200a0
 800dd0c:	400200b8 	.word	0x400200b8
 800dd10:	40020410 	.word	0x40020410
 800dd14:	40020428 	.word	0x40020428
 800dd18:	40020440 	.word	0x40020440
 800dd1c:	40020458 	.word	0x40020458
 800dd20:	40020470 	.word	0x40020470
 800dd24:	40020488 	.word	0x40020488
 800dd28:	400204a0 	.word	0x400204a0
 800dd2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 80cc 	beq.w	800deea <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dd52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80c7 	beq.w	800deea <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	e853 3f00 	ldrex	r3, [r3]
 800dd68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd7e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd86:	e841 2300 	strex	r3, r2, [r1]
 800dd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e4      	bne.n	800dd5c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3308      	adds	r3, #8
 800dd98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	e853 3f00 	ldrex	r3, [r3]
 800dda0:	623b      	str	r3, [r7, #32]
   return(result);
 800dda2:	6a3a      	ldr	r2, [r7, #32]
 800dda4:	4b54      	ldr	r3, [pc, #336]	; (800def8 <HAL_UART_IRQHandler+0x738>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ddb6:	633a      	str	r2, [r7, #48]	; 0x30
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e3      	bne.n	800dd92 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	e853 3f00 	ldrex	r3, [r3]
 800ddea:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f023 0310 	bic.w	r3, r3, #16
 800ddf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de00:	61fb      	str	r3, [r7, #28]
 800de02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de04:	69b9      	ldr	r1, [r7, #24]
 800de06:	69fa      	ldr	r2, [r7, #28]
 800de08:	e841 2300 	strex	r3, r2, [r1]
 800de0c:	617b      	str	r3, [r7, #20]
   return(result);
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1e4      	bne.n	800ddde <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f882 	bl	800df24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de20:	e063      	b.n	800deea <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00e      	beq.n	800de4c <HAL_UART_IRQHandler+0x68c>
 800de2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d008      	beq.n	800de4c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800de42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 fdc5 	bl	800f9d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de4a:	e051      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800de4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de54:	2b00      	cmp	r3, #0
 800de56:	d014      	beq.n	800de82 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de60:	2b00      	cmp	r3, #0
 800de62:	d105      	bne.n	800de70 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de74:	2b00      	cmp	r3, #0
 800de76:	d03a      	beq.n	800deee <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	4798      	blx	r3
    }
    return;
 800de80:	e035      	b.n	800deee <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <HAL_UART_IRQHandler+0x6e2>
 800de8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 f912 	bl	800f0c4 <UART_EndTransmit_IT>
    return;
 800dea0:	e026      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <HAL_UART_IRQHandler+0x702>
 800deae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 fd9e 	bl	800f9fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dec0:	e016      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d010      	beq.n	800def0 <HAL_UART_IRQHandler+0x730>
 800dece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	da0c      	bge.n	800def0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 fd86 	bl	800f9e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dedc:	e008      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
      return;
 800dede:	bf00      	nop
 800dee0:	e006      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
    return;
 800dee2:	bf00      	nop
 800dee4:	e004      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
      return;
 800dee6:	bf00      	nop
 800dee8:	e002      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
      return;
 800deea:	bf00      	nop
 800deec:	e000      	b.n	800def0 <HAL_UART_IRQHandler+0x730>
    return;
 800deee:	bf00      	nop
  }
}
 800def0:	37e8      	adds	r7, #232	; 0xe8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	effffffe 	.word	0xeffffffe

0800defc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800df04:	bf00      	nop
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df40:	b092      	sub	sp, #72	; 0x48
 800df42:	af00      	add	r7, sp, #0
 800df44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df46:	2300      	movs	r3, #0
 800df48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	689a      	ldr	r2, [r3, #8]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	431a      	orrs	r2, r3
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	431a      	orrs	r2, r3
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	69db      	ldr	r3, [r3, #28]
 800df60:	4313      	orrs	r3, r2
 800df62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	4bbe      	ldr	r3, [pc, #760]	; (800e264 <UART_SetConfig+0x328>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	6812      	ldr	r2, [r2, #0]
 800df72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df74:	430b      	orrs	r3, r1
 800df76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	430a      	orrs	r2, r1
 800df8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4ab3      	ldr	r2, [pc, #716]	; (800e268 <UART_SetConfig+0x32c>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d004      	beq.n	800dfa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	689a      	ldr	r2, [r3, #8]
 800dfae:	4baf      	ldr	r3, [pc, #700]	; (800e26c <UART_SetConfig+0x330>)
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	6812      	ldr	r2, [r2, #0]
 800dfb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfb8:	430b      	orrs	r3, r1
 800dfba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc2:	f023 010f 	bic.w	r1, r3, #15
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4aa6      	ldr	r2, [pc, #664]	; (800e270 <UART_SetConfig+0x334>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d177      	bne.n	800e0cc <UART_SetConfig+0x190>
 800dfdc:	4ba5      	ldr	r3, [pc, #660]	; (800e274 <UART_SetConfig+0x338>)
 800dfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfe4:	2b28      	cmp	r3, #40	; 0x28
 800dfe6:	d86d      	bhi.n	800e0c4 <UART_SetConfig+0x188>
 800dfe8:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <UART_SetConfig+0xb4>)
 800dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfee:	bf00      	nop
 800dff0:	0800e095 	.word	0x0800e095
 800dff4:	0800e0c5 	.word	0x0800e0c5
 800dff8:	0800e0c5 	.word	0x0800e0c5
 800dffc:	0800e0c5 	.word	0x0800e0c5
 800e000:	0800e0c5 	.word	0x0800e0c5
 800e004:	0800e0c5 	.word	0x0800e0c5
 800e008:	0800e0c5 	.word	0x0800e0c5
 800e00c:	0800e0c5 	.word	0x0800e0c5
 800e010:	0800e09d 	.word	0x0800e09d
 800e014:	0800e0c5 	.word	0x0800e0c5
 800e018:	0800e0c5 	.word	0x0800e0c5
 800e01c:	0800e0c5 	.word	0x0800e0c5
 800e020:	0800e0c5 	.word	0x0800e0c5
 800e024:	0800e0c5 	.word	0x0800e0c5
 800e028:	0800e0c5 	.word	0x0800e0c5
 800e02c:	0800e0c5 	.word	0x0800e0c5
 800e030:	0800e0a5 	.word	0x0800e0a5
 800e034:	0800e0c5 	.word	0x0800e0c5
 800e038:	0800e0c5 	.word	0x0800e0c5
 800e03c:	0800e0c5 	.word	0x0800e0c5
 800e040:	0800e0c5 	.word	0x0800e0c5
 800e044:	0800e0c5 	.word	0x0800e0c5
 800e048:	0800e0c5 	.word	0x0800e0c5
 800e04c:	0800e0c5 	.word	0x0800e0c5
 800e050:	0800e0ad 	.word	0x0800e0ad
 800e054:	0800e0c5 	.word	0x0800e0c5
 800e058:	0800e0c5 	.word	0x0800e0c5
 800e05c:	0800e0c5 	.word	0x0800e0c5
 800e060:	0800e0c5 	.word	0x0800e0c5
 800e064:	0800e0c5 	.word	0x0800e0c5
 800e068:	0800e0c5 	.word	0x0800e0c5
 800e06c:	0800e0c5 	.word	0x0800e0c5
 800e070:	0800e0b5 	.word	0x0800e0b5
 800e074:	0800e0c5 	.word	0x0800e0c5
 800e078:	0800e0c5 	.word	0x0800e0c5
 800e07c:	0800e0c5 	.word	0x0800e0c5
 800e080:	0800e0c5 	.word	0x0800e0c5
 800e084:	0800e0c5 	.word	0x0800e0c5
 800e088:	0800e0c5 	.word	0x0800e0c5
 800e08c:	0800e0c5 	.word	0x0800e0c5
 800e090:	0800e0bd 	.word	0x0800e0bd
 800e094:	2301      	movs	r3, #1
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e222      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e09c:	2304      	movs	r3, #4
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a2:	e21e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0a4:	2308      	movs	r3, #8
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0aa:	e21a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0ac:	2310      	movs	r3, #16
 800e0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b2:	e216      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0b4:	2320      	movs	r3, #32
 800e0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ba:	e212      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0bc:	2340      	movs	r3, #64	; 0x40
 800e0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c2:	e20e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0c4:	2380      	movs	r3, #128	; 0x80
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ca:	e20a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a69      	ldr	r2, [pc, #420]	; (800e278 <UART_SetConfig+0x33c>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d130      	bne.n	800e138 <UART_SetConfig+0x1fc>
 800e0d6:	4b67      	ldr	r3, [pc, #412]	; (800e274 <UART_SetConfig+0x338>)
 800e0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	2b05      	cmp	r3, #5
 800e0e0:	d826      	bhi.n	800e130 <UART_SetConfig+0x1f4>
 800e0e2:	a201      	add	r2, pc, #4	; (adr r2, 800e0e8 <UART_SetConfig+0x1ac>)
 800e0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e109 	.word	0x0800e109
 800e0f0:	0800e111 	.word	0x0800e111
 800e0f4:	0800e119 	.word	0x0800e119
 800e0f8:	0800e121 	.word	0x0800e121
 800e0fc:	0800e129 	.word	0x0800e129
 800e100:	2300      	movs	r3, #0
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e1ec      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e108:	2304      	movs	r3, #4
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e1e8      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e110:	2308      	movs	r3, #8
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e1e4      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e118:	2310      	movs	r3, #16
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e1e0      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e120:	2320      	movs	r3, #32
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e1dc      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e128:	2340      	movs	r3, #64	; 0x40
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e1d8      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e130:	2380      	movs	r3, #128	; 0x80
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e1d4      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a4f      	ldr	r2, [pc, #316]	; (800e27c <UART_SetConfig+0x340>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d130      	bne.n	800e1a4 <UART_SetConfig+0x268>
 800e142:	4b4c      	ldr	r3, [pc, #304]	; (800e274 <UART_SetConfig+0x338>)
 800e144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e146:	f003 0307 	and.w	r3, r3, #7
 800e14a:	2b05      	cmp	r3, #5
 800e14c:	d826      	bhi.n	800e19c <UART_SetConfig+0x260>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0x218>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e16d 	.word	0x0800e16d
 800e158:	0800e175 	.word	0x0800e175
 800e15c:	0800e17d 	.word	0x0800e17d
 800e160:	0800e185 	.word	0x0800e185
 800e164:	0800e18d 	.word	0x0800e18d
 800e168:	0800e195 	.word	0x0800e195
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e1b6      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e1b2      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e17c:	2308      	movs	r3, #8
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e1ae      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e184:	2310      	movs	r3, #16
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e1aa      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e18c:	2320      	movs	r3, #32
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e1a6      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e1a2      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e19c:	2380      	movs	r3, #128	; 0x80
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e19e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a35      	ldr	r2, [pc, #212]	; (800e280 <UART_SetConfig+0x344>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d130      	bne.n	800e210 <UART_SetConfig+0x2d4>
 800e1ae:	4b31      	ldr	r3, [pc, #196]	; (800e274 <UART_SetConfig+0x338>)
 800e1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d826      	bhi.n	800e208 <UART_SetConfig+0x2cc>
 800e1ba:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <UART_SetConfig+0x284>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d9 	.word	0x0800e1d9
 800e1c4:	0800e1e1 	.word	0x0800e1e1
 800e1c8:	0800e1e9 	.word	0x0800e1e9
 800e1cc:	0800e1f1 	.word	0x0800e1f1
 800e1d0:	0800e1f9 	.word	0x0800e1f9
 800e1d4:	0800e201 	.word	0x0800e201
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e180      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e17c      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e178      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e174      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e170      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e200:	2340      	movs	r3, #64	; 0x40
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e16c      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e208:	2380      	movs	r3, #128	; 0x80
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e168      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a1b      	ldr	r2, [pc, #108]	; (800e284 <UART_SetConfig+0x348>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d142      	bne.n	800e2a0 <UART_SetConfig+0x364>
 800e21a:	4b16      	ldr	r3, [pc, #88]	; (800e274 <UART_SetConfig+0x338>)
 800e21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21e:	f003 0307 	and.w	r3, r3, #7
 800e222:	2b05      	cmp	r3, #5
 800e224:	d838      	bhi.n	800e298 <UART_SetConfig+0x35c>
 800e226:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <UART_SetConfig+0x2f0>)
 800e228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e24d 	.word	0x0800e24d
 800e234:	0800e255 	.word	0x0800e255
 800e238:	0800e25d 	.word	0x0800e25d
 800e23c:	0800e289 	.word	0x0800e289
 800e240:	0800e291 	.word	0x0800e291
 800e244:	2300      	movs	r3, #0
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e14a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e24c:	2304      	movs	r3, #4
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e146      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e142      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e25c:	2310      	movs	r3, #16
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e13e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e264:	cfff69f3 	.word	0xcfff69f3
 800e268:	58000c00 	.word	0x58000c00
 800e26c:	11fff4ff 	.word	0x11fff4ff
 800e270:	40011000 	.word	0x40011000
 800e274:	58024400 	.word	0x58024400
 800e278:	40004400 	.word	0x40004400
 800e27c:	40004800 	.word	0x40004800
 800e280:	40004c00 	.word	0x40004c00
 800e284:	40005000 	.word	0x40005000
 800e288:	2320      	movs	r3, #32
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e128      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e290:	2340      	movs	r3, #64	; 0x40
 800e292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e296:	e124      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e298:	2380      	movs	r3, #128	; 0x80
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e120      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4acb      	ldr	r2, [pc, #812]	; (800e5d4 <UART_SetConfig+0x698>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d176      	bne.n	800e398 <UART_SetConfig+0x45c>
 800e2aa:	4bcb      	ldr	r3, [pc, #812]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2b2:	2b28      	cmp	r3, #40	; 0x28
 800e2b4:	d86c      	bhi.n	800e390 <UART_SetConfig+0x454>
 800e2b6:	a201      	add	r2, pc, #4	; (adr r2, 800e2bc <UART_SetConfig+0x380>)
 800e2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2bc:	0800e361 	.word	0x0800e361
 800e2c0:	0800e391 	.word	0x0800e391
 800e2c4:	0800e391 	.word	0x0800e391
 800e2c8:	0800e391 	.word	0x0800e391
 800e2cc:	0800e391 	.word	0x0800e391
 800e2d0:	0800e391 	.word	0x0800e391
 800e2d4:	0800e391 	.word	0x0800e391
 800e2d8:	0800e391 	.word	0x0800e391
 800e2dc:	0800e369 	.word	0x0800e369
 800e2e0:	0800e391 	.word	0x0800e391
 800e2e4:	0800e391 	.word	0x0800e391
 800e2e8:	0800e391 	.word	0x0800e391
 800e2ec:	0800e391 	.word	0x0800e391
 800e2f0:	0800e391 	.word	0x0800e391
 800e2f4:	0800e391 	.word	0x0800e391
 800e2f8:	0800e391 	.word	0x0800e391
 800e2fc:	0800e371 	.word	0x0800e371
 800e300:	0800e391 	.word	0x0800e391
 800e304:	0800e391 	.word	0x0800e391
 800e308:	0800e391 	.word	0x0800e391
 800e30c:	0800e391 	.word	0x0800e391
 800e310:	0800e391 	.word	0x0800e391
 800e314:	0800e391 	.word	0x0800e391
 800e318:	0800e391 	.word	0x0800e391
 800e31c:	0800e379 	.word	0x0800e379
 800e320:	0800e391 	.word	0x0800e391
 800e324:	0800e391 	.word	0x0800e391
 800e328:	0800e391 	.word	0x0800e391
 800e32c:	0800e391 	.word	0x0800e391
 800e330:	0800e391 	.word	0x0800e391
 800e334:	0800e391 	.word	0x0800e391
 800e338:	0800e391 	.word	0x0800e391
 800e33c:	0800e381 	.word	0x0800e381
 800e340:	0800e391 	.word	0x0800e391
 800e344:	0800e391 	.word	0x0800e391
 800e348:	0800e391 	.word	0x0800e391
 800e34c:	0800e391 	.word	0x0800e391
 800e350:	0800e391 	.word	0x0800e391
 800e354:	0800e391 	.word	0x0800e391
 800e358:	0800e391 	.word	0x0800e391
 800e35c:	0800e389 	.word	0x0800e389
 800e360:	2301      	movs	r3, #1
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e0bc      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e368:	2304      	movs	r3, #4
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e0b8      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e370:	2308      	movs	r3, #8
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e0b4      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e378:	2310      	movs	r3, #16
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e0b0      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e380:	2320      	movs	r3, #32
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e0ac      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e388:	2340      	movs	r3, #64	; 0x40
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e0a8      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e390:	2380      	movs	r3, #128	; 0x80
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e0a4      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a8f      	ldr	r2, [pc, #572]	; (800e5dc <UART_SetConfig+0x6a0>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d130      	bne.n	800e404 <UART_SetConfig+0x4c8>
 800e3a2:	4b8d      	ldr	r3, [pc, #564]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3a6:	f003 0307 	and.w	r3, r3, #7
 800e3aa:	2b05      	cmp	r3, #5
 800e3ac:	d826      	bhi.n	800e3fc <UART_SetConfig+0x4c0>
 800e3ae:	a201      	add	r2, pc, #4	; (adr r2, 800e3b4 <UART_SetConfig+0x478>)
 800e3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b4:	0800e3cd 	.word	0x0800e3cd
 800e3b8:	0800e3d5 	.word	0x0800e3d5
 800e3bc:	0800e3dd 	.word	0x0800e3dd
 800e3c0:	0800e3e5 	.word	0x0800e3e5
 800e3c4:	0800e3ed 	.word	0x0800e3ed
 800e3c8:	0800e3f5 	.word	0x0800e3f5
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e086      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3d4:	2304      	movs	r3, #4
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e082      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3dc:	2308      	movs	r3, #8
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e07e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e07a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3ec:	2320      	movs	r3, #32
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e076      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3f4:	2340      	movs	r3, #64	; 0x40
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e072      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e3fc:	2380      	movs	r3, #128	; 0x80
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e06e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4a75      	ldr	r2, [pc, #468]	; (800e5e0 <UART_SetConfig+0x6a4>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d130      	bne.n	800e470 <UART_SetConfig+0x534>
 800e40e:	4b72      	ldr	r3, [pc, #456]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	2b05      	cmp	r3, #5
 800e418:	d826      	bhi.n	800e468 <UART_SetConfig+0x52c>
 800e41a:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <UART_SetConfig+0x4e4>)
 800e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e420:	0800e439 	.word	0x0800e439
 800e424:	0800e441 	.word	0x0800e441
 800e428:	0800e449 	.word	0x0800e449
 800e42c:	0800e451 	.word	0x0800e451
 800e430:	0800e459 	.word	0x0800e459
 800e434:	0800e461 	.word	0x0800e461
 800e438:	2300      	movs	r3, #0
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e050      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e440:	2304      	movs	r3, #4
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e04c      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e448:	2308      	movs	r3, #8
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e048      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e450:	2310      	movs	r3, #16
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e044      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e458:	2320      	movs	r3, #32
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e040      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e460:	2340      	movs	r3, #64	; 0x40
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e466:	e03c      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e468:	2380      	movs	r3, #128	; 0x80
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46e:	e038      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a5b      	ldr	r2, [pc, #364]	; (800e5e4 <UART_SetConfig+0x6a8>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d130      	bne.n	800e4dc <UART_SetConfig+0x5a0>
 800e47a:	4b57      	ldr	r3, [pc, #348]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e47e:	f003 0307 	and.w	r3, r3, #7
 800e482:	2b05      	cmp	r3, #5
 800e484:	d826      	bhi.n	800e4d4 <UART_SetConfig+0x598>
 800e486:	a201      	add	r2, pc, #4	; (adr r2, 800e48c <UART_SetConfig+0x550>)
 800e488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48c:	0800e4a5 	.word	0x0800e4a5
 800e490:	0800e4ad 	.word	0x0800e4ad
 800e494:	0800e4b5 	.word	0x0800e4b5
 800e498:	0800e4bd 	.word	0x0800e4bd
 800e49c:	0800e4c5 	.word	0x0800e4c5
 800e4a0:	0800e4cd 	.word	0x0800e4cd
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e01a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e016      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4b4:	2308      	movs	r3, #8
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e012      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4bc:	2310      	movs	r3, #16
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e00e      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4c4:	2320      	movs	r3, #32
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e00a      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4cc:	2340      	movs	r3, #64	; 0x40
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d2:	e006      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4da:	e002      	b.n	800e4e2 <UART_SetConfig+0x5a6>
 800e4dc:	2380      	movs	r3, #128	; 0x80
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a3f      	ldr	r2, [pc, #252]	; (800e5e4 <UART_SetConfig+0x6a8>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	f040 80f8 	bne.w	800e6de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e4ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4f2:	2b20      	cmp	r3, #32
 800e4f4:	dc46      	bgt.n	800e584 <UART_SetConfig+0x648>
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	f2c0 8082 	blt.w	800e600 <UART_SetConfig+0x6c4>
 800e4fc:	3b02      	subs	r3, #2
 800e4fe:	2b1e      	cmp	r3, #30
 800e500:	d87e      	bhi.n	800e600 <UART_SetConfig+0x6c4>
 800e502:	a201      	add	r2, pc, #4	; (adr r2, 800e508 <UART_SetConfig+0x5cc>)
 800e504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e508:	0800e58b 	.word	0x0800e58b
 800e50c:	0800e601 	.word	0x0800e601
 800e510:	0800e593 	.word	0x0800e593
 800e514:	0800e601 	.word	0x0800e601
 800e518:	0800e601 	.word	0x0800e601
 800e51c:	0800e601 	.word	0x0800e601
 800e520:	0800e5a3 	.word	0x0800e5a3
 800e524:	0800e601 	.word	0x0800e601
 800e528:	0800e601 	.word	0x0800e601
 800e52c:	0800e601 	.word	0x0800e601
 800e530:	0800e601 	.word	0x0800e601
 800e534:	0800e601 	.word	0x0800e601
 800e538:	0800e601 	.word	0x0800e601
 800e53c:	0800e601 	.word	0x0800e601
 800e540:	0800e5b3 	.word	0x0800e5b3
 800e544:	0800e601 	.word	0x0800e601
 800e548:	0800e601 	.word	0x0800e601
 800e54c:	0800e601 	.word	0x0800e601
 800e550:	0800e601 	.word	0x0800e601
 800e554:	0800e601 	.word	0x0800e601
 800e558:	0800e601 	.word	0x0800e601
 800e55c:	0800e601 	.word	0x0800e601
 800e560:	0800e601 	.word	0x0800e601
 800e564:	0800e601 	.word	0x0800e601
 800e568:	0800e601 	.word	0x0800e601
 800e56c:	0800e601 	.word	0x0800e601
 800e570:	0800e601 	.word	0x0800e601
 800e574:	0800e601 	.word	0x0800e601
 800e578:	0800e601 	.word	0x0800e601
 800e57c:	0800e601 	.word	0x0800e601
 800e580:	0800e5f3 	.word	0x0800e5f3
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d037      	beq.n	800e5f8 <UART_SetConfig+0x6bc>
 800e588:	e03a      	b.n	800e600 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e58a:	f7fc fbe9 	bl	800ad60 <HAL_RCCEx_GetD3PCLK1Freq>
 800e58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e590:	e03c      	b.n	800e60c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e596:	4618      	mov	r0, r3
 800e598:	f7fc fbf8 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a0:	e034      	b.n	800e60c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5a2:	f107 0318 	add.w	r3, r7, #24
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fc fd44 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b0:	e02c      	b.n	800e60c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5b2:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f003 0320 	and.w	r3, r3, #32
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d016      	beq.n	800e5ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5be:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <UART_SetConfig+0x69c>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	08db      	lsrs	r3, r3, #3
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	4a07      	ldr	r2, [pc, #28]	; (800e5e8 <UART_SetConfig+0x6ac>)
 800e5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5d0:	e01c      	b.n	800e60c <UART_SetConfig+0x6d0>
 800e5d2:	bf00      	nop
 800e5d4:	40011400 	.word	0x40011400
 800e5d8:	58024400 	.word	0x58024400
 800e5dc:	40007800 	.word	0x40007800
 800e5e0:	40007c00 	.word	0x40007c00
 800e5e4:	58000c00 	.word	0x58000c00
 800e5e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e5ec:	4b9d      	ldr	r3, [pc, #628]	; (800e864 <UART_SetConfig+0x928>)
 800e5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5f0:	e00c      	b.n	800e60c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5f2:	4b9d      	ldr	r3, [pc, #628]	; (800e868 <UART_SetConfig+0x92c>)
 800e5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5f6:	e009      	b.n	800e60c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5fe:	e005      	b.n	800e60c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e60a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 81de 	beq.w	800e9d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	4a94      	ldr	r2, [pc, #592]	; (800e86c <UART_SetConfig+0x930>)
 800e61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e61e:	461a      	mov	r2, r3
 800e620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e622:	fbb3 f3f2 	udiv	r3, r3, r2
 800e626:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	4613      	mov	r3, r2
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	4413      	add	r3, r2
 800e632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e634:	429a      	cmp	r2, r3
 800e636:	d305      	bcc.n	800e644 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e63e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e640:	429a      	cmp	r2, r3
 800e642:	d903      	bls.n	800e64c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e64a:	e1c1      	b.n	800e9d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e64e:	2200      	movs	r2, #0
 800e650:	60bb      	str	r3, [r7, #8]
 800e652:	60fa      	str	r2, [r7, #12]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	4a84      	ldr	r2, [pc, #528]	; (800e86c <UART_SetConfig+0x930>)
 800e65a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2200      	movs	r2, #0
 800e662:	603b      	str	r3, [r7, #0]
 800e664:	607a      	str	r2, [r7, #4]
 800e666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e66a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e66e:	f7f1 fe33 	bl	80002d8 <__aeabi_uldivmod>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	4610      	mov	r0, r2
 800e678:	4619      	mov	r1, r3
 800e67a:	f04f 0200 	mov.w	r2, #0
 800e67e:	f04f 0300 	mov.w	r3, #0
 800e682:	020b      	lsls	r3, r1, #8
 800e684:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e688:	0202      	lsls	r2, r0, #8
 800e68a:	6979      	ldr	r1, [r7, #20]
 800e68c:	6849      	ldr	r1, [r1, #4]
 800e68e:	0849      	lsrs	r1, r1, #1
 800e690:	2000      	movs	r0, #0
 800e692:	460c      	mov	r4, r1
 800e694:	4605      	mov	r5, r0
 800e696:	eb12 0804 	adds.w	r8, r2, r4
 800e69a:	eb43 0905 	adc.w	r9, r3, r5
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	469a      	mov	sl, r3
 800e6a6:	4693      	mov	fp, r2
 800e6a8:	4652      	mov	r2, sl
 800e6aa:	465b      	mov	r3, fp
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	f7f1 fe12 	bl	80002d8 <__aeabi_uldivmod>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6c2:	d308      	bcc.n	800e6d6 <UART_SetConfig+0x79a>
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6ca:	d204      	bcs.n	800e6d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6d2:	60da      	str	r2, [r3, #12]
 800e6d4:	e17c      	b.n	800e9d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e6dc:	e178      	b.n	800e9d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	69db      	ldr	r3, [r3, #28]
 800e6e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6e6:	f040 80c5 	bne.w	800e874 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e6ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6ee:	2b20      	cmp	r3, #32
 800e6f0:	dc48      	bgt.n	800e784 <UART_SetConfig+0x848>
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	db7b      	blt.n	800e7ee <UART_SetConfig+0x8b2>
 800e6f6:	2b20      	cmp	r3, #32
 800e6f8:	d879      	bhi.n	800e7ee <UART_SetConfig+0x8b2>
 800e6fa:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <UART_SetConfig+0x7c4>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e78b 	.word	0x0800e78b
 800e704:	0800e793 	.word	0x0800e793
 800e708:	0800e7ef 	.word	0x0800e7ef
 800e70c:	0800e7ef 	.word	0x0800e7ef
 800e710:	0800e79b 	.word	0x0800e79b
 800e714:	0800e7ef 	.word	0x0800e7ef
 800e718:	0800e7ef 	.word	0x0800e7ef
 800e71c:	0800e7ef 	.word	0x0800e7ef
 800e720:	0800e7ab 	.word	0x0800e7ab
 800e724:	0800e7ef 	.word	0x0800e7ef
 800e728:	0800e7ef 	.word	0x0800e7ef
 800e72c:	0800e7ef 	.word	0x0800e7ef
 800e730:	0800e7ef 	.word	0x0800e7ef
 800e734:	0800e7ef 	.word	0x0800e7ef
 800e738:	0800e7ef 	.word	0x0800e7ef
 800e73c:	0800e7ef 	.word	0x0800e7ef
 800e740:	0800e7bb 	.word	0x0800e7bb
 800e744:	0800e7ef 	.word	0x0800e7ef
 800e748:	0800e7ef 	.word	0x0800e7ef
 800e74c:	0800e7ef 	.word	0x0800e7ef
 800e750:	0800e7ef 	.word	0x0800e7ef
 800e754:	0800e7ef 	.word	0x0800e7ef
 800e758:	0800e7ef 	.word	0x0800e7ef
 800e75c:	0800e7ef 	.word	0x0800e7ef
 800e760:	0800e7ef 	.word	0x0800e7ef
 800e764:	0800e7ef 	.word	0x0800e7ef
 800e768:	0800e7ef 	.word	0x0800e7ef
 800e76c:	0800e7ef 	.word	0x0800e7ef
 800e770:	0800e7ef 	.word	0x0800e7ef
 800e774:	0800e7ef 	.word	0x0800e7ef
 800e778:	0800e7ef 	.word	0x0800e7ef
 800e77c:	0800e7ef 	.word	0x0800e7ef
 800e780:	0800e7e1 	.word	0x0800e7e1
 800e784:	2b40      	cmp	r3, #64	; 0x40
 800e786:	d02e      	beq.n	800e7e6 <UART_SetConfig+0x8aa>
 800e788:	e031      	b.n	800e7ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e78a:	f7fa fea5 	bl	80094d8 <HAL_RCC_GetPCLK1Freq>
 800e78e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e790:	e033      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e792:	f7fa feb7 	bl	8009504 <HAL_RCC_GetPCLK2Freq>
 800e796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e798:	e02f      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e79a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fc faf4 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a8:	e027      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7aa:	f107 0318 	add.w	r3, r7, #24
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fc fc40 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b8:	e01f      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7ba:	4b2d      	ldr	r3, [pc, #180]	; (800e870 <UART_SetConfig+0x934>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 0320 	and.w	r3, r3, #32
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d009      	beq.n	800e7da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e7c6:	4b2a      	ldr	r3, [pc, #168]	; (800e870 <UART_SetConfig+0x934>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	08db      	lsrs	r3, r3, #3
 800e7cc:	f003 0303 	and.w	r3, r3, #3
 800e7d0:	4a24      	ldr	r2, [pc, #144]	; (800e864 <UART_SetConfig+0x928>)
 800e7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e7d8:	e00f      	b.n	800e7fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e7da:	4b22      	ldr	r3, [pc, #136]	; (800e864 <UART_SetConfig+0x928>)
 800e7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7de:	e00c      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e7e0:	4b21      	ldr	r3, [pc, #132]	; (800e868 <UART_SetConfig+0x92c>)
 800e7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7e4:	e009      	b.n	800e7fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7ec:	e005      	b.n	800e7fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 80e7 	beq.w	800e9d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e806:	4a19      	ldr	r2, [pc, #100]	; (800e86c <UART_SetConfig+0x930>)
 800e808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e80c:	461a      	mov	r2, r3
 800e80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e810:	fbb3 f3f2 	udiv	r3, r3, r2
 800e814:	005a      	lsls	r2, r3, #1
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	085b      	lsrs	r3, r3, #1
 800e81c:	441a      	add	r2, r3
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	fbb2 f3f3 	udiv	r3, r2, r3
 800e826:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	2b0f      	cmp	r3, #15
 800e82c:	d916      	bls.n	800e85c <UART_SetConfig+0x920>
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e834:	d212      	bcs.n	800e85c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	b29b      	uxth	r3, r3
 800e83a:	f023 030f 	bic.w	r3, r3, #15
 800e83e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e842:	085b      	lsrs	r3, r3, #1
 800e844:	b29b      	uxth	r3, r3
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e84e:	4313      	orrs	r3, r2
 800e850:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e858:	60da      	str	r2, [r3, #12]
 800e85a:	e0b9      	b.n	800e9d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e862:	e0b5      	b.n	800e9d0 <UART_SetConfig+0xa94>
 800e864:	03d09000 	.word	0x03d09000
 800e868:	003d0900 	.word	0x003d0900
 800e86c:	0800fe18 	.word	0x0800fe18
 800e870:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e874:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e878:	2b20      	cmp	r3, #32
 800e87a:	dc49      	bgt.n	800e910 <UART_SetConfig+0x9d4>
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	db7c      	blt.n	800e97a <UART_SetConfig+0xa3e>
 800e880:	2b20      	cmp	r3, #32
 800e882:	d87a      	bhi.n	800e97a <UART_SetConfig+0xa3e>
 800e884:	a201      	add	r2, pc, #4	; (adr r2, 800e88c <UART_SetConfig+0x950>)
 800e886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88a:	bf00      	nop
 800e88c:	0800e917 	.word	0x0800e917
 800e890:	0800e91f 	.word	0x0800e91f
 800e894:	0800e97b 	.word	0x0800e97b
 800e898:	0800e97b 	.word	0x0800e97b
 800e89c:	0800e927 	.word	0x0800e927
 800e8a0:	0800e97b 	.word	0x0800e97b
 800e8a4:	0800e97b 	.word	0x0800e97b
 800e8a8:	0800e97b 	.word	0x0800e97b
 800e8ac:	0800e937 	.word	0x0800e937
 800e8b0:	0800e97b 	.word	0x0800e97b
 800e8b4:	0800e97b 	.word	0x0800e97b
 800e8b8:	0800e97b 	.word	0x0800e97b
 800e8bc:	0800e97b 	.word	0x0800e97b
 800e8c0:	0800e97b 	.word	0x0800e97b
 800e8c4:	0800e97b 	.word	0x0800e97b
 800e8c8:	0800e97b 	.word	0x0800e97b
 800e8cc:	0800e947 	.word	0x0800e947
 800e8d0:	0800e97b 	.word	0x0800e97b
 800e8d4:	0800e97b 	.word	0x0800e97b
 800e8d8:	0800e97b 	.word	0x0800e97b
 800e8dc:	0800e97b 	.word	0x0800e97b
 800e8e0:	0800e97b 	.word	0x0800e97b
 800e8e4:	0800e97b 	.word	0x0800e97b
 800e8e8:	0800e97b 	.word	0x0800e97b
 800e8ec:	0800e97b 	.word	0x0800e97b
 800e8f0:	0800e97b 	.word	0x0800e97b
 800e8f4:	0800e97b 	.word	0x0800e97b
 800e8f8:	0800e97b 	.word	0x0800e97b
 800e8fc:	0800e97b 	.word	0x0800e97b
 800e900:	0800e97b 	.word	0x0800e97b
 800e904:	0800e97b 	.word	0x0800e97b
 800e908:	0800e97b 	.word	0x0800e97b
 800e90c:	0800e96d 	.word	0x0800e96d
 800e910:	2b40      	cmp	r3, #64	; 0x40
 800e912:	d02e      	beq.n	800e972 <UART_SetConfig+0xa36>
 800e914:	e031      	b.n	800e97a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e916:	f7fa fddf 	bl	80094d8 <HAL_RCC_GetPCLK1Freq>
 800e91a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e91c:	e033      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e91e:	f7fa fdf1 	bl	8009504 <HAL_RCC_GetPCLK2Freq>
 800e922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e924:	e02f      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fc fa2e 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e934:	e027      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e936:	f107 0318 	add.w	r3, r7, #24
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fc fb7a 	bl	800b034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e944:	e01f      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e946:	4b2d      	ldr	r3, [pc, #180]	; (800e9fc <UART_SetConfig+0xac0>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f003 0320 	and.w	r3, r3, #32
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d009      	beq.n	800e966 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e952:	4b2a      	ldr	r3, [pc, #168]	; (800e9fc <UART_SetConfig+0xac0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	08db      	lsrs	r3, r3, #3
 800e958:	f003 0303 	and.w	r3, r3, #3
 800e95c:	4a28      	ldr	r2, [pc, #160]	; (800ea00 <UART_SetConfig+0xac4>)
 800e95e:	fa22 f303 	lsr.w	r3, r2, r3
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e964:	e00f      	b.n	800e986 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e966:	4b26      	ldr	r3, [pc, #152]	; (800ea00 <UART_SetConfig+0xac4>)
 800e968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e96a:	e00c      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e96c:	4b25      	ldr	r3, [pc, #148]	; (800ea04 <UART_SetConfig+0xac8>)
 800e96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e970:	e009      	b.n	800e986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e978:	e005      	b.n	800e986 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e97a:	2300      	movs	r3, #0
 800e97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e984:	bf00      	nop
    }

    if (pclk != 0U)
 800e986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d021      	beq.n	800e9d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e990:	4a1d      	ldr	r2, [pc, #116]	; (800ea08 <UART_SetConfig+0xacc>)
 800e992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e996:	461a      	mov	r2, r3
 800e998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	085b      	lsrs	r3, r3, #1
 800e9a4:	441a      	add	r2, r3
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	2b0f      	cmp	r3, #15
 800e9b4:	d909      	bls.n	800e9ca <UART_SetConfig+0xa8e>
 800e9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9bc:	d205      	bcs.n	800e9ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60da      	str	r2, [r3, #12]
 800e9c8:	e002      	b.n	800e9d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e9ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3748      	adds	r7, #72	; 0x48
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9fa:	bf00      	nop
 800e9fc:	58024400 	.word	0x58024400
 800ea00:	03d09000 	.word	0x03d09000
 800ea04:	003d0900 	.word	0x003d0900
 800ea08:	0800fe18 	.word	0x0800fe18

0800ea0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00a      	beq.n	800ea36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	430a      	orrs	r2, r1
 800ea34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3a:	f003 0302 	and.w	r3, r3, #2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00a      	beq.n	800ea58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5c:	f003 0304 	and.w	r3, r3, #4
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00a      	beq.n	800ea7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	430a      	orrs	r2, r1
 800ea78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7e:	f003 0308 	and.w	r3, r3, #8
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00a      	beq.n	800ea9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	430a      	orrs	r2, r1
 800ea9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa0:	f003 0310 	and.w	r3, r3, #16
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00a      	beq.n	800eabe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	430a      	orrs	r2, r1
 800eabc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00a      	beq.n	800eae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	430a      	orrs	r2, r1
 800eade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01a      	beq.n	800eb22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	430a      	orrs	r2, r1
 800eb00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb0a:	d10a      	bne.n	800eb22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	430a      	orrs	r2, r1
 800eb20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00a      	beq.n	800eb44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	430a      	orrs	r2, r1
 800eb42:	605a      	str	r2, [r3, #4]
  }
}
 800eb44:	bf00      	nop
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af02      	add	r7, sp, #8
 800eb56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb60:	f7f3 feb0 	bl	80028c4 <HAL_GetTick>
 800eb64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f003 0308 	and.w	r3, r3, #8
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d10e      	bne.n	800eb92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f82f 	bl	800ebe6 <UART_WaitOnFlagUntilTimeout>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e025      	b.n	800ebde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f003 0304 	and.w	r3, r3, #4
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	d10e      	bne.n	800ebbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 f819 	bl	800ebe6 <UART_WaitOnFlagUntilTimeout>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	e00f      	b.n	800ebde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2220      	movs	r2, #32
 800ebca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b09c      	sub	sp, #112	; 0x70
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	60f8      	str	r0, [r7, #12]
 800ebee:	60b9      	str	r1, [r7, #8]
 800ebf0:	603b      	str	r3, [r7, #0]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebf6:	e0a9      	b.n	800ed4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebfe:	f000 80a5 	beq.w	800ed4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec02:	f7f3 fe5f 	bl	80028c4 <HAL_GetTick>
 800ec06:	4602      	mov	r2, r0
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d302      	bcc.n	800ec18 <UART_WaitOnFlagUntilTimeout+0x32>
 800ec12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d140      	bne.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec20:	e853 3f00 	ldrex	r3, [r3]
 800ec24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ec26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec2c:	667b      	str	r3, [r7, #100]	; 0x64
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec3e:	e841 2300 	strex	r3, r2, [r1]
 800ec42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ec44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1e6      	bne.n	800ec18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	3308      	adds	r3, #8
 800ec50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec54:	e853 3f00 	ldrex	r3, [r3]
 800ec58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5c:	f023 0301 	bic.w	r3, r3, #1
 800ec60:	663b      	str	r3, [r7, #96]	; 0x60
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	3308      	adds	r3, #8
 800ec68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec6a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec72:	e841 2300 	strex	r3, r2, [r1]
 800ec76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1e5      	bne.n	800ec4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2220      	movs	r2, #32
 800ec82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e069      	b.n	800ed6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 0304 	and.w	r3, r3, #4
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d051      	beq.n	800ed4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecb6:	d149      	bne.n	800ed4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	e853 3f00 	ldrex	r3, [r3]
 800ecce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ecd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	461a      	mov	r2, r3
 800ecde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ece0:	637b      	str	r3, [r7, #52]	; 0x34
 800ece2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ece6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ece8:	e841 2300 	strex	r3, r2, [r1]
 800ecec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1e6      	bne.n	800ecc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	3308      	adds	r3, #8
 800ecfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	e853 3f00 	ldrex	r3, [r3]
 800ed02:	613b      	str	r3, [r7, #16]
   return(result);
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f023 0301 	bic.w	r3, r3, #1
 800ed0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3308      	adds	r3, #8
 800ed12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed14:	623a      	str	r2, [r7, #32]
 800ed16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed18:	69f9      	ldr	r1, [r7, #28]
 800ed1a:	6a3a      	ldr	r2, [r7, #32]
 800ed1c:	e841 2300 	strex	r3, r2, [r1]
 800ed20:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1e5      	bne.n	800ecf4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2220      	movs	r2, #32
 800ed2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2220      	movs	r2, #32
 800ed34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e010      	b.n	800ed6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	69da      	ldr	r2, [r3, #28]
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	4013      	ands	r3, r2
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	bf0c      	ite	eq
 800ed5c:	2301      	moveq	r3, #1
 800ed5e:	2300      	movne	r3, #0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	461a      	mov	r2, r3
 800ed64:	79fb      	ldrb	r3, [r7, #7]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	f43f af46 	beq.w	800ebf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3770      	adds	r7, #112	; 0x70
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b0a3      	sub	sp, #140	; 0x8c
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	4613      	mov	r3, r2
 800ed84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	88fa      	ldrh	r2, [r7, #6]
 800ed90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	88fa      	ldrh	r2, [r7, #6]
 800ed98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edaa:	d10e      	bne.n	800edca <UART_Start_Receive_IT+0x52>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d105      	bne.n	800edc0 <UART_Start_Receive_IT+0x48>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800edba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edbe:	e02d      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	22ff      	movs	r2, #255	; 0xff
 800edc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edc8:	e028      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10d      	bne.n	800edee <UART_Start_Receive_IT+0x76>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d104      	bne.n	800ede4 <UART_Start_Receive_IT+0x6c>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	22ff      	movs	r2, #255	; 0xff
 800edde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ede2:	e01b      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	227f      	movs	r2, #127	; 0x7f
 800ede8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edec:	e016      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edf6:	d10d      	bne.n	800ee14 <UART_Start_Receive_IT+0x9c>
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d104      	bne.n	800ee0a <UART_Start_Receive_IT+0x92>
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	227f      	movs	r2, #127	; 0x7f
 800ee04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee08:	e008      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	223f      	movs	r2, #63	; 0x3f
 800ee0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ee12:	e003      	b.n	800ee1c <UART_Start_Receive_IT+0xa4>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2222      	movs	r2, #34	; 0x22
 800ee28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3308      	adds	r3, #8
 800ee32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee36:	e853 3f00 	ldrex	r3, [r3]
 800ee3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ee3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee3e:	f043 0301 	orr.w	r3, r3, #1
 800ee42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ee50:	673a      	str	r2, [r7, #112]	; 0x70
 800ee52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ee56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee58:	e841 2300 	strex	r3, r2, [r1]
 800ee5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ee5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e3      	bne.n	800ee2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee6c:	d153      	bne.n	800ef16 <UART_Start_Receive_IT+0x19e>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee74:	88fa      	ldrh	r2, [r7, #6]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d34d      	bcc.n	800ef16 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee82:	d107      	bne.n	800ee94 <UART_Start_Receive_IT+0x11c>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d103      	bne.n	800ee94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4a4b      	ldr	r2, [pc, #300]	; (800efbc <UART_Start_Receive_IT+0x244>)
 800ee90:	671a      	str	r2, [r3, #112]	; 0x70
 800ee92:	e002      	b.n	800ee9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4a4a      	ldr	r2, [pc, #296]	; (800efc0 <UART_Start_Receive_IT+0x248>)
 800ee98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d01a      	beq.n	800eee0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeb2:	e853 3f00 	ldrex	r3, [r3]
 800eeb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eeb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eece:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eed2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eed4:	e841 2300 	strex	r3, r2, [r1]
 800eed8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eeda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d1e4      	bne.n	800eeaa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3308      	adds	r3, #8
 800eee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeea:	e853 3f00 	ldrex	r3, [r3]
 800eeee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eef6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3308      	adds	r3, #8
 800eefe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef00:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef08:	e841 2300 	strex	r3, r2, [r1]
 800ef0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1e5      	bne.n	800eee0 <UART_Start_Receive_IT+0x168>
 800ef14:	e04a      	b.n	800efac <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef1e:	d107      	bne.n	800ef30 <UART_Start_Receive_IT+0x1b8>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d103      	bne.n	800ef30 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	4a26      	ldr	r2, [pc, #152]	; (800efc4 <UART_Start_Receive_IT+0x24c>)
 800ef2c:	671a      	str	r2, [r3, #112]	; 0x70
 800ef2e:	e002      	b.n	800ef36 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4a25      	ldr	r2, [pc, #148]	; (800efc8 <UART_Start_Receive_IT+0x250>)
 800ef34:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d019      	beq.n	800ef7a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	e853 3f00 	ldrex	r3, [r3]
 800ef52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ef5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	461a      	mov	r2, r3
 800ef62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef64:	637b      	str	r3, [r7, #52]	; 0x34
 800ef66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef6c:	e841 2300 	strex	r3, r2, [r1]
 800ef70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1e6      	bne.n	800ef46 <UART_Start_Receive_IT+0x1ce>
 800ef78:	e018      	b.n	800efac <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	e853 3f00 	ldrex	r3, [r3]
 800ef86:	613b      	str	r3, [r7, #16]
   return(result);
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	f043 0320 	orr.w	r3, r3, #32
 800ef8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	461a      	mov	r2, r3
 800ef96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef98:	623b      	str	r3, [r7, #32]
 800ef9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9c:	69f9      	ldr	r1, [r7, #28]
 800ef9e:	6a3a      	ldr	r2, [r7, #32]
 800efa0:	e841 2300 	strex	r3, r2, [r1]
 800efa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1e6      	bne.n	800ef7a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	378c      	adds	r7, #140	; 0x8c
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	0800f6d5 	.word	0x0800f6d5
 800efc0:	0800f3dd 	.word	0x0800f3dd
 800efc4:	0800f27b 	.word	0x0800f27b
 800efc8:	0800f11b 	.word	0x0800f11b

0800efcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efcc:	b480      	push	{r7}
 800efce:	b095      	sub	sp, #84	; 0x54
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efdc:	e853 3f00 	ldrex	r3, [r3]
 800efe0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	461a      	mov	r2, r3
 800eff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eff2:	643b      	str	r3, [r7, #64]	; 0x40
 800eff4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800effa:	e841 2300 	strex	r3, r2, [r1]
 800effe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1e6      	bne.n	800efd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3308      	adds	r3, #8
 800f00c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	e853 3f00 	ldrex	r3, [r3]
 800f014:	61fb      	str	r3, [r7, #28]
   return(result);
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	4b1e      	ldr	r3, [pc, #120]	; (800f094 <UART_EndRxTransfer+0xc8>)
 800f01a:	4013      	ands	r3, r2
 800f01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3308      	adds	r3, #8
 800f024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f026:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f02e:	e841 2300 	strex	r3, r2, [r1]
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1e5      	bne.n	800f006 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d118      	bne.n	800f074 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	e853 3f00 	ldrex	r3, [r3]
 800f04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f023 0310 	bic.w	r3, r3, #16
 800f056:	647b      	str	r3, [r7, #68]	; 0x44
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	461a      	mov	r2, r3
 800f05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f060:	61bb      	str	r3, [r7, #24]
 800f062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f064:	6979      	ldr	r1, [r7, #20]
 800f066:	69ba      	ldr	r2, [r7, #24]
 800f068:	e841 2300 	strex	r3, r2, [r1]
 800f06c:	613b      	str	r3, [r7, #16]
   return(result);
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e6      	bne.n	800f042 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2220      	movs	r2, #32
 800f078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f088:	bf00      	nop
 800f08a:	3754      	adds	r7, #84	; 0x54
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	effffffe 	.word	0xeffffffe

0800f098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7fe ff2a 	bl	800df10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0bc:	bf00      	nop
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b088      	sub	sp, #32
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	e853 3f00 	ldrex	r3, [r3]
 800f0d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0e0:	61fb      	str	r3, [r7, #28]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	61bb      	str	r3, [r7, #24]
 800f0ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ee:	6979      	ldr	r1, [r7, #20]
 800f0f0:	69ba      	ldr	r2, [r7, #24]
 800f0f2:	e841 2300 	strex	r3, r2, [r1]
 800f0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e6      	bne.n	800f0cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2220      	movs	r2, #32
 800f102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7fe fef5 	bl	800defc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f112:	bf00      	nop
 800f114:	3720      	adds	r7, #32
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b096      	sub	sp, #88	; 0x58
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f128:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f132:	2b22      	cmp	r3, #34	; 0x22
 800f134:	f040 8095 	bne.w	800f262 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f142:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f146:	b2d9      	uxtb	r1, r3
 800f148:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f152:	400a      	ands	r2, r1
 800f154:	b2d2      	uxtb	r2, r2
 800f156:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f168:	b29b      	uxth	r3, r3
 800f16a:	3b01      	subs	r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d178      	bne.n	800f272 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	e853 3f00 	ldrex	r3, [r3]
 800f18c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f194:	653b      	str	r3, [r7, #80]	; 0x50
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	461a      	mov	r2, r3
 800f19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f19e:	647b      	str	r3, [r7, #68]	; 0x44
 800f1a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1a6:	e841 2300 	strex	r3, r2, [r1]
 800f1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1e6      	bne.n	800f180 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	3308      	adds	r3, #8
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	e853 3f00 	ldrex	r3, [r3]
 800f1c0:	623b      	str	r3, [r7, #32]
   return(result);
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	f023 0301 	bic.w	r3, r3, #1
 800f1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3308      	adds	r3, #8
 800f1d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1d2:	633a      	str	r2, [r7, #48]	; 0x30
 800f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1da:	e841 2300 	strex	r3, r2, [r1]
 800f1de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1e5      	bne.n	800f1b2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2220      	movs	r2, #32
 800f1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d12e      	bne.n	800f25a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	e853 3f00 	ldrex	r3, [r3]
 800f20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f023 0310 	bic.w	r3, r3, #16
 800f216:	64bb      	str	r3, [r7, #72]	; 0x48
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	461a      	mov	r2, r3
 800f21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f220:	61fb      	str	r3, [r7, #28]
 800f222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f224:	69b9      	ldr	r1, [r7, #24]
 800f226:	69fa      	ldr	r2, [r7, #28]
 800f228:	e841 2300 	strex	r3, r2, [r1]
 800f22c:	617b      	str	r3, [r7, #20]
   return(result);
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1e6      	bne.n	800f202 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	69db      	ldr	r3, [r3, #28]
 800f23a:	f003 0310 	and.w	r3, r3, #16
 800f23e:	2b10      	cmp	r3, #16
 800f240:	d103      	bne.n	800f24a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2210      	movs	r2, #16
 800f248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f250:	4619      	mov	r1, r3
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f7fe fe66 	bl	800df24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f258:	e00b      	b.n	800f272 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7f1 fd52 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 800f260:	e007      	b.n	800f272 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	699a      	ldr	r2, [r3, #24]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f042 0208 	orr.w	r2, r2, #8
 800f270:	619a      	str	r2, [r3, #24]
}
 800f272:	bf00      	nop
 800f274:	3758      	adds	r7, #88	; 0x58
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b096      	sub	sp, #88	; 0x58
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f292:	2b22      	cmp	r3, #34	; 0x22
 800f294:	f040 8095 	bne.w	800f3c2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f2a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f2ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f2b0:	4013      	ands	r3, r2
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2bc:	1c9a      	adds	r2, r3, #2
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d178      	bne.n	800f3d2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e8:	e853 3f00 	ldrex	r3, [r3]
 800f2ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2fe:	643b      	str	r3, [r7, #64]	; 0x40
 800f300:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f306:	e841 2300 	strex	r3, r2, [r1]
 800f30a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1e6      	bne.n	800f2e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	3308      	adds	r3, #8
 800f318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	e853 3f00 	ldrex	r3, [r3]
 800f320:	61fb      	str	r3, [r7, #28]
   return(result);
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	f023 0301 	bic.w	r3, r3, #1
 800f328:	64bb      	str	r3, [r7, #72]	; 0x48
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3308      	adds	r3, #8
 800f330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f332:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33a:	e841 2300 	strex	r3, r2, [r1]
 800f33e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	2b00      	cmp	r3, #0
 800f344:	d1e5      	bne.n	800f312 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2220      	movs	r2, #32
 800f34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d12e      	bne.n	800f3ba <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	e853 3f00 	ldrex	r3, [r3]
 800f36e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f023 0310 	bic.w	r3, r3, #16
 800f376:	647b      	str	r3, [r7, #68]	; 0x44
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	461a      	mov	r2, r3
 800f37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f380:	61bb      	str	r3, [r7, #24]
 800f382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f384:	6979      	ldr	r1, [r7, #20]
 800f386:	69ba      	ldr	r2, [r7, #24]
 800f388:	e841 2300 	strex	r3, r2, [r1]
 800f38c:	613b      	str	r3, [r7, #16]
   return(result);
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1e6      	bne.n	800f362 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	f003 0310 	and.w	r3, r3, #16
 800f39e:	2b10      	cmp	r3, #16
 800f3a0:	d103      	bne.n	800f3aa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2210      	movs	r2, #16
 800f3a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7fe fdb6 	bl	800df24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3b8:	e00b      	b.n	800f3d2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f1 fca2 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 800f3c0:	e007      	b.n	800f3d2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	699a      	ldr	r2, [r3, #24]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f042 0208 	orr.w	r2, r2, #8
 800f3d0:	619a      	str	r2, [r3, #24]
}
 800f3d2:	bf00      	nop
 800f3d4:	3758      	adds	r7, #88	; 0x58
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
	...

0800f3dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b0a6      	sub	sp, #152	; 0x98
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3ea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69db      	ldr	r3, [r3, #28]
 800f3f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f412:	2b22      	cmp	r3, #34	; 0x22
 800f414:	f040 814d 	bne.w	800f6b2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f41e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f422:	e0f4      	b.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f42e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f432:	b2d9      	uxtb	r1, r3
 800f434:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f43e:	400a      	ands	r2, r1
 800f440:	b2d2      	uxtb	r2, r2
 800f442:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f454:	b29b      	uxth	r3, r3
 800f456:	3b01      	subs	r3, #1
 800f458:	b29a      	uxth	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	69db      	ldr	r3, [r3, #28]
 800f466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f46a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f46e:	f003 0307 	and.w	r3, r3, #7
 800f472:	2b00      	cmp	r3, #0
 800f474:	d053      	beq.n	800f51e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d011      	beq.n	800f4a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00b      	beq.n	800f4a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2201      	movs	r2, #1
 800f494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49c:	f043 0201 	orr.w	r2, r3, #1
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d011      	beq.n	800f4d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f4b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4b6:	f003 0301 	and.w	r3, r3, #1
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00b      	beq.n	800f4d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4cc:	f043 0204 	orr.w	r2, r3, #4
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4da:	f003 0304 	and.w	r3, r3, #4
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d011      	beq.n	800f506 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f4e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00b      	beq.n	800f506 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4fc:	f043 0202 	orr.w	r2, r3, #2
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d006      	beq.n	800f51e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7fe fcfd 	bl	800df10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f524:	b29b      	uxth	r3, r3
 800f526:	2b00      	cmp	r3, #0
 800f528:	d171      	bne.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f532:	e853 3f00 	ldrex	r3, [r3]
 800f536:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f53a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f53e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f54c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f54e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f550:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f554:	e841 2300 	strex	r3, r2, [r1]
 800f558:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f55a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e4      	bne.n	800f52a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	3308      	adds	r3, #8
 800f566:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f56a:	e853 3f00 	ldrex	r3, [r3]
 800f56e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f572:	4b56      	ldr	r3, [pc, #344]	; (800f6cc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800f574:	4013      	ands	r3, r2
 800f576:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	3308      	adds	r3, #8
 800f57e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f580:	657a      	str	r2, [r7, #84]	; 0x54
 800f582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f588:	e841 2300 	strex	r3, r2, [r1]
 800f58c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f58e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1e5      	bne.n	800f560 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2220      	movs	r2, #32
 800f598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d12e      	bne.n	800f608 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	f023 0310 	bic.w	r3, r3, #16
 800f5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f5d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	f003 0310 	and.w	r3, r3, #16
 800f5ec:	2b10      	cmp	r3, #16
 800f5ee:	d103      	bne.n	800f5f8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2210      	movs	r2, #16
 800f5f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fe fc8f 	bl	800df24 <HAL_UARTEx_RxEventCallback>
 800f606:	e002      	b.n	800f60e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7f1 fb7b 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f60e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f612:	2b00      	cmp	r3, #0
 800f614:	d006      	beq.n	800f624 <UART_RxISR_8BIT_FIFOEN+0x248>
 800f616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f61a:	f003 0320 	and.w	r3, r3, #32
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f47f af00 	bne.w	800f424 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f62a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f62e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f632:	2b00      	cmp	r3, #0
 800f634:	d045      	beq.n	800f6c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f63c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f640:	429a      	cmp	r2, r3
 800f642:	d23e      	bcs.n	800f6c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3308      	adds	r3, #8
 800f64a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	e853 3f00 	ldrex	r3, [r3]
 800f652:	61fb      	str	r3, [r7, #28]
   return(result);
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f65a:	673b      	str	r3, [r7, #112]	; 0x70
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	3308      	adds	r3, #8
 800f662:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f664:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f66c:	e841 2300 	strex	r3, r2, [r1]
 800f670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1e5      	bne.n	800f644 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a15      	ldr	r2, [pc, #84]	; (800f6d0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f67c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	e853 3f00 	ldrex	r3, [r3]
 800f68a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	f043 0320 	orr.w	r3, r3, #32
 800f692:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	461a      	mov	r2, r3
 800f69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f69c:	61bb      	str	r3, [r7, #24]
 800f69e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a0:	6979      	ldr	r1, [r7, #20]
 800f6a2:	69ba      	ldr	r2, [r7, #24]
 800f6a4:	e841 2300 	strex	r3, r2, [r1]
 800f6a8:	613b      	str	r3, [r7, #16]
   return(result);
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e6      	bne.n	800f67e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6b0:	e007      	b.n	800f6c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	699a      	ldr	r2, [r3, #24]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f042 0208 	orr.w	r2, r2, #8
 800f6c0:	619a      	str	r2, [r3, #24]
}
 800f6c2:	bf00      	nop
 800f6c4:	3798      	adds	r7, #152	; 0x98
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	effffffe 	.word	0xeffffffe
 800f6d0:	0800f11b 	.word	0x0800f11b

0800f6d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b0a8      	sub	sp, #160	; 0xa0
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6e2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	69db      	ldr	r3, [r3, #28]
 800f6ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f70a:	2b22      	cmp	r3, #34	; 0x22
 800f70c:	f040 8151 	bne.w	800f9b2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f716:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f71a:	e0f8      	b.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f722:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f72a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f72e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f732:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f736:	4013      	ands	r3, r2
 800f738:	b29a      	uxth	r2, r3
 800f73a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f73e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f744:	1c9a      	adds	r2, r3, #2
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f750:	b29b      	uxth	r3, r3
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f766:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d053      	beq.n	800f81a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d011      	beq.n	800f7a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f77e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00b      	beq.n	800f7a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2201      	movs	r2, #1
 800f790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f798:	f043 0201 	orr.w	r2, r3, #1
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7a6:	f003 0302 	and.w	r3, r3, #2
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d011      	beq.n	800f7d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f7ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00b      	beq.n	800f7d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2202      	movs	r2, #2
 800f7c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7c8:	f043 0204 	orr.w	r2, r3, #4
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f7d6:	f003 0304 	and.w	r3, r3, #4
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d011      	beq.n	800f802 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f7de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7e2:	f003 0301 	and.w	r3, r3, #1
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00b      	beq.n	800f802 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2204      	movs	r2, #4
 800f7f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7f8:	f043 0202 	orr.w	r2, r3, #2
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d006      	beq.n	800f81a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7fe fb7f 	bl	800df10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f820:	b29b      	uxth	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d173      	bne.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f82e:	e853 3f00 	ldrex	r3, [r3]
 800f832:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f83a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f84a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f84e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f850:	e841 2300 	strex	r3, r2, [r1]
 800f854:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1e4      	bne.n	800f826 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	3308      	adds	r3, #8
 800f862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f866:	e853 3f00 	ldrex	r3, [r3]
 800f86a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f86e:	4b57      	ldr	r3, [pc, #348]	; (800f9cc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800f870:	4013      	ands	r3, r2
 800f872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3308      	adds	r3, #8
 800f87c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f880:	65ba      	str	r2, [r7, #88]	; 0x58
 800f882:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f888:	e841 2300 	strex	r3, r2, [r1]
 800f88c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1e3      	bne.n	800f85c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2220      	movs	r2, #32
 800f898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d12e      	bne.n	800f908 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b8:	e853 3f00 	ldrex	r3, [r3]
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	f023 0310 	bic.w	r3, r3, #16
 800f8c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8ce:	647b      	str	r3, [r7, #68]	; 0x44
 800f8d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8d6:	e841 2300 	strex	r3, r2, [r1]
 800f8da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1e6      	bne.n	800f8b0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	69db      	ldr	r3, [r3, #28]
 800f8e8:	f003 0310 	and.w	r3, r3, #16
 800f8ec:	2b10      	cmp	r3, #16
 800f8ee:	d103      	bne.n	800f8f8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2210      	movs	r2, #16
 800f8f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fe fb0f 	bl	800df24 <HAL_UARTEx_RxEventCallback>
 800f906:	e002      	b.n	800f90e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7f1 f9fb 	bl	8000d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f90e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f912:	2b00      	cmp	r3, #0
 800f914:	d006      	beq.n	800f924 <UART_RxISR_16BIT_FIFOEN+0x250>
 800f916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f91a:	f003 0320 	and.w	r3, r3, #32
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f47f aefc 	bne.w	800f71c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f92a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f92e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f932:	2b00      	cmp	r3, #0
 800f934:	d045      	beq.n	800f9c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f93c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f940:	429a      	cmp	r2, r3
 800f942:	d23e      	bcs.n	800f9c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	3308      	adds	r3, #8
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	e853 3f00 	ldrex	r3, [r3]
 800f952:	623b      	str	r3, [r7, #32]
   return(result);
 800f954:	6a3b      	ldr	r3, [r7, #32]
 800f956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f95a:	677b      	str	r3, [r7, #116]	; 0x74
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	3308      	adds	r3, #8
 800f962:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f964:	633a      	str	r2, [r7, #48]	; 0x30
 800f966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f96c:	e841 2300 	strex	r3, r2, [r1]
 800f970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1e5      	bne.n	800f944 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a15      	ldr	r2, [pc, #84]	; (800f9d0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f97c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	e853 3f00 	ldrex	r3, [r3]
 800f98a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f043 0320 	orr.w	r3, r3, #32
 800f992:	673b      	str	r3, [r7, #112]	; 0x70
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	461a      	mov	r2, r3
 800f99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f99c:	61fb      	str	r3, [r7, #28]
 800f99e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a0:	69b9      	ldr	r1, [r7, #24]
 800f9a2:	69fa      	ldr	r2, [r7, #28]
 800f9a4:	e841 2300 	strex	r3, r2, [r1]
 800f9a8:	617b      	str	r3, [r7, #20]
   return(result);
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1e6      	bne.n	800f97e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9b0:	e007      	b.n	800f9c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	699a      	ldr	r2, [r3, #24]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f042 0208 	orr.w	r2, r2, #8
 800f9c0:	619a      	str	r2, [r3, #24]
}
 800f9c2:	bf00      	nop
 800f9c4:	37a0      	adds	r7, #160	; 0xa0
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	effffffe 	.word	0xeffffffe
 800f9d0:	0800f27b 	.word	0x0800f27b

0800f9d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	1d3b      	adds	r3, r7, #4
 800fa1a:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d101      	bne.n	800fa30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800fa2c:	2302      	movs	r3, #2
 800fa2e:	e046      	b.n	800fabe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2224      	movs	r2, #36	; 0x24
 800fa3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f022 0201 	bic.w	r2, r2, #1
 800fa4e:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	430a      	orrs	r2, r1
 800fa62:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d105      	bne.n	800fa76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800fa6a:	1d3b      	adds	r3, r7, #4
 800fa6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	f000 f910 	bl	800fc96 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f042 0201 	orr.w	r2, r2, #1
 800fa84:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa86:	f7f2 ff1d 	bl	80028c4 <HAL_GetTick>
 800fa8a:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	2200      	movs	r2, #0
 800fa96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f7ff f8a3 	bl	800ebe6 <UART_WaitOnFlagUntilTimeout>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800faa6:	2303      	movs	r3, #3
 800faa8:	75fb      	strb	r3, [r7, #23]
 800faaa:	e003      	b.n	800fab4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2220      	movs	r2, #32
 800fab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800fac6:	b480      	push	{r7}
 800fac8:	b089      	sub	sp, #36	; 0x24
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d101      	bne.n	800fadc <HAL_UARTEx_EnableStopMode+0x16>
 800fad8:	2302      	movs	r3, #2
 800fada:	e021      	b.n	800fb20 <HAL_UARTEx_EnableStopMode+0x5a>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	e853 3f00 	ldrex	r3, [r3]
 800faf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	f043 0302 	orr.w	r3, r3, #2
 800faf8:	61fb      	str	r3, [r7, #28]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	461a      	mov	r2, r3
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	61bb      	str	r3, [r7, #24]
 800fb04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb06:	6979      	ldr	r1, [r7, #20]
 800fb08:	69ba      	ldr	r2, [r7, #24]
 800fb0a:	e841 2300 	strex	r3, r2, [r1]
 800fb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1e6      	bne.n	800fae4 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3724      	adds	r7, #36	; 0x24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d101      	bne.n	800fb42 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb3e:	2302      	movs	r3, #2
 800fb40:	e027      	b.n	800fb92 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2201      	movs	r2, #1
 800fb46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2224      	movs	r2, #36	; 0x24
 800fb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f022 0201 	bic.w	r2, r2, #1
 800fb68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2220      	movs	r2, #32
 800fb84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3714      	adds	r7, #20
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b084      	sub	sp, #16
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d101      	bne.n	800fbb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	e02d      	b.n	800fc12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2224      	movs	r2, #36	; 0x24
 800fbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f022 0201 	bic.w	r2, r2, #1
 800fbdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f872 	bl	800fcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	68fa      	ldr	r2, [r7, #12]
 800fbfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2220      	movs	r2, #32
 800fc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d101      	bne.n	800fc32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc2e:	2302      	movs	r3, #2
 800fc30:	e02d      	b.n	800fc8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2224      	movs	r2, #36	; 0x24
 800fc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f834 	bl	800fcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2220      	movs	r2, #32
 800fc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800fc96:	b480      	push	{r7}
 800fc98:	b085      	sub	sp, #20
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	60f8      	str	r0, [r7, #12]
 800fc9e:	1d3b      	adds	r3, r7, #4
 800fca0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	f023 0210 	bic.w	r2, r3, #16
 800fcae:	893b      	ldrh	r3, [r7, #8]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	430a      	orrs	r2, r1
 800fcb8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800fcc4:	7abb      	ldrb	r3, [r7, #10]
 800fcc6:	061a      	lsls	r2, r3, #24
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	430a      	orrs	r2, r1
 800fcce:	605a      	str	r2, [r3, #4]
}
 800fcd0:	bf00      	nop
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d108      	bne.n	800fcfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcfc:	e031      	b.n	800fd62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcfe:	2310      	movs	r3, #16
 800fd00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd02:	2310      	movs	r3, #16
 800fd04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	0e5b      	lsrs	r3, r3, #25
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	f003 0307 	and.w	r3, r3, #7
 800fd14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	0f5b      	lsrs	r3, r3, #29
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0307 	and.w	r3, r3, #7
 800fd24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd26:	7bbb      	ldrb	r3, [r7, #14]
 800fd28:	7b3a      	ldrb	r2, [r7, #12]
 800fd2a:	4911      	ldr	r1, [pc, #68]	; (800fd70 <UARTEx_SetNbDataToProcess+0x94>)
 800fd2c:	5c8a      	ldrb	r2, [r1, r2]
 800fd2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd32:	7b3a      	ldrb	r2, [r7, #12]
 800fd34:	490f      	ldr	r1, [pc, #60]	; (800fd74 <UARTEx_SetNbDataToProcess+0x98>)
 800fd36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd3c:	b29a      	uxth	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
 800fd46:	7b7a      	ldrb	r2, [r7, #13]
 800fd48:	4909      	ldr	r1, [pc, #36]	; (800fd70 <UARTEx_SetNbDataToProcess+0x94>)
 800fd4a:	5c8a      	ldrb	r2, [r1, r2]
 800fd4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd50:	7b7a      	ldrb	r2, [r7, #13]
 800fd52:	4908      	ldr	r1, [pc, #32]	; (800fd74 <UARTEx_SetNbDataToProcess+0x98>)
 800fd54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd56:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd5a:	b29a      	uxth	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd62:	bf00      	nop
 800fd64:	3714      	adds	r7, #20
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	0800fe30 	.word	0x0800fe30
 800fd74:	0800fe38 	.word	0x0800fe38

0800fd78 <__libc_init_array>:
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	4d0d      	ldr	r5, [pc, #52]	; (800fdb0 <__libc_init_array+0x38>)
 800fd7c:	4c0d      	ldr	r4, [pc, #52]	; (800fdb4 <__libc_init_array+0x3c>)
 800fd7e:	1b64      	subs	r4, r4, r5
 800fd80:	10a4      	asrs	r4, r4, #2
 800fd82:	2600      	movs	r6, #0
 800fd84:	42a6      	cmp	r6, r4
 800fd86:	d109      	bne.n	800fd9c <__libc_init_array+0x24>
 800fd88:	4d0b      	ldr	r5, [pc, #44]	; (800fdb8 <__libc_init_array+0x40>)
 800fd8a:	4c0c      	ldr	r4, [pc, #48]	; (800fdbc <__libc_init_array+0x44>)
 800fd8c:	f000 f820 	bl	800fdd0 <_init>
 800fd90:	1b64      	subs	r4, r4, r5
 800fd92:	10a4      	asrs	r4, r4, #2
 800fd94:	2600      	movs	r6, #0
 800fd96:	42a6      	cmp	r6, r4
 800fd98:	d105      	bne.n	800fda6 <__libc_init_array+0x2e>
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fda0:	4798      	blx	r3
 800fda2:	3601      	adds	r6, #1
 800fda4:	e7ee      	b.n	800fd84 <__libc_init_array+0xc>
 800fda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdaa:	4798      	blx	r3
 800fdac:	3601      	adds	r6, #1
 800fdae:	e7f2      	b.n	800fd96 <__libc_init_array+0x1e>
 800fdb0:	0800fe48 	.word	0x0800fe48
 800fdb4:	0800fe48 	.word	0x0800fe48
 800fdb8:	0800fe48 	.word	0x0800fe48
 800fdbc:	0800fe4c 	.word	0x0800fe4c

0800fdc0 <memset>:
 800fdc0:	4402      	add	r2, r0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d100      	bne.n	800fdca <memset+0xa>
 800fdc8:	4770      	bx	lr
 800fdca:	f803 1b01 	strb.w	r1, [r3], #1
 800fdce:	e7f9      	b.n	800fdc4 <memset+0x4>

0800fdd0 <_init>:
 800fdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd2:	bf00      	nop
 800fdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdd6:	bc08      	pop	{r3}
 800fdd8:	469e      	mov	lr, r3
 800fdda:	4770      	bx	lr

0800fddc <_fini>:
 800fddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdde:	bf00      	nop
 800fde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde2:	bc08      	pop	{r3}
 800fde4:	469e      	mov	lr, r3
 800fde6:	4770      	bx	lr
