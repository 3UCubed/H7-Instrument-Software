
DAC_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  24000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  24000050  08004ebc  00020050  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000148  08004ebc  00020148  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fba1  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020e2  00000000  00000000  0002fc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc0  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a99  00000000  00000000  00032b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000369cd  00000000  00000000  000335a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000112a8  00000000  00000000  00069f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ecad  00000000  00000000  0007b216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000039b4  00000000  00000000  001d9ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001dd878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000050 	.word	0x24000050
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e34 	.word	0x08004e34

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000054 	.word	0x24000054
 80002d4:	08004e34 	.word	0x08004e34

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 faf9 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f81b 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f91d 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ea:	f000 f8fb 	bl	80004e4 <MX_DMA_Init>
  MX_DAC1_Init();
 80002ee:	f000 f891 	bl	8000414 <MX_DAC1_Init>
  MX_TIM6_Init();
 80002f2:	f000 f8c1 	bl	8000478 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x38>)
 80002f8:	f004 fa74 	bl	80047e4 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 80002fc:	2300      	movs	r3, #0
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2310      	movs	r3, #16
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <main+0x3c>)
 8000304:	2100      	movs	r1, #0
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <main+0x40>)
 8000308:	f000 fcb4 	bl	8000c74 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030c:	e7fe      	b.n	800030c <main+0x34>
 800030e:	bf00      	nop
 8000310:	240000f8 	.word	0x240000f8
 8000314:	24000000 	.word	0x24000000
 8000318:	2400006c 	.word	0x2400006c

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09c      	sub	sp, #112	; 0x70
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000326:	224c      	movs	r2, #76	; 0x4c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 fd56 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2220      	movs	r2, #32
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fd50 	bl	8004ddc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800033c:	2002      	movs	r0, #2
 800033e:	f003 fa35 	bl	80037ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000342:	2300      	movs	r3, #0
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	4b31      	ldr	r3, [pc, #196]	; (800040c <SystemClock_Config+0xf0>)
 8000348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034a:	4a30      	ldr	r2, [pc, #192]	; (800040c <SystemClock_Config+0xf0>)
 800034c:	f023 0301 	bic.w	r3, r3, #1
 8000350:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000352:	4b2e      	ldr	r3, [pc, #184]	; (800040c <SystemClock_Config+0xf0>)
 8000354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <SystemClock_Config+0xf4>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <SystemClock_Config+0xf4>)
 8000366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <SystemClock_Config+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000378:	bf00      	nop
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <SystemClock_Config+0xf4>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000386:	d1f8      	bne.n	800037a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800038c:	2301      	movs	r3, #1
 800038e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2340      	movs	r3, #64	; 0x40
 8000392:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000398:	2300      	movs	r3, #0
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800039c:	2304      	movs	r3, #4
 800039e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003a0:	230c      	movs	r3, #12
 80003a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80003a4:	2304      	movs	r3, #4
 80003a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ac:	2302      	movs	r3, #2
 80003ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003b0:	230c      	movs	r3, #12
 80003b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fa2d 	bl	8003820 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003cc:	f000 f8c4 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	233f      	movs	r3, #63	; 0x3f
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2303      	movs	r3, #3
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 fe6d 	bl	80040d4 <HAL_RCC_ClockConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000400:	f000 f8aa 	bl	8000558 <Error_Handler>
  }
}
 8000404:	bf00      	nop
 8000406:	3770      	adds	r7, #112	; 0x70
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	58000400 	.word	0x58000400
 8000410:	58024800 	.word	0x58024800

08000414 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2224      	movs	r2, #36	; 0x24
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f004 fcdb 	bl	8004ddc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_DAC1_Init+0x5c>)
 8000428:	4a12      	ldr	r2, [pc, #72]	; (8000474 <MX_DAC1_Init+0x60>)
 800042a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800042c:	4810      	ldr	r0, [pc, #64]	; (8000470 <MX_DAC1_Init+0x5c>)
 800042e:	f000 fbfe 	bl	8000c2e <HAL_DAC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000438:	f000 f88e 	bl	8000558 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000440:	2316      	movs	r3, #22
 8000442:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000448:	2301      	movs	r3, #1
 800044a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_DAC1_Init+0x5c>)
 8000458:	f000 fd4a 	bl	8000ef0 <HAL_DAC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f879 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3728      	adds	r7, #40	; 0x28
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2400006c 	.word	0x2400006c
 8000474:	40007400 	.word	0x40007400

08000478 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_TIM6_Init+0x64>)
 800048a:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <MX_TIM6_Init+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_TIM6_Init+0x64>)
 8000490:	222f      	movs	r2, #47	; 0x2f
 8000492:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_TIM6_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3125;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_TIM6_Init+0x64>)
 800049c:	f640 4235 	movw	r2, #3125	; 0xc35
 80004a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_TIM6_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_TIM6_Init+0x64>)
 80004aa:	f004 f943 	bl	8004734 <HAL_TIM_Base_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80004b4:	f000 f850 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80004b8:	2310      	movs	r3, #16
 80004ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_TIM6_Init+0x64>)
 80004c6:	f004 fbdd 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f842 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	240000f8 	.word	0x240000f8
 80004e0:	40001000 	.word	0x40001000

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DMA_Init+0x3c>)
 80004ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MX_DMA_Init+0x3c>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_DMA_Init+0x3c>)
 80004fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2010      	movs	r0, #16
 800050e:	f000 fb5a 	bl	8000bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000512:	2010      	movs	r0, #16
 8000514:	f000 fb71 	bl	8000bfa <HAL_NVIC_EnableIRQ>

}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	58024400 	.word	0x58024400

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_GPIO_Init+0x30>)
 800052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <MX_GPIO_Init+0x30>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_GPIO_Init+0x30>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	58024400 	.word	0x58024400

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_MspInit+0x30>)
 800056c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <HAL_MspInit+0x30>)
 8000572:	f043 0302 	orr.w	r3, r3, #2
 8000576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_MspInit+0x30>)
 800057c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000580:	f003 0302 	and.w	r3, r3, #2
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58024400 	.word	0x58024400

08000598 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a34      	ldr	r2, [pc, #208]	; (8000688 <HAL_DAC_MspInit+0xf0>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d161      	bne.n	800067e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005c0:	4a32      	ldr	r2, [pc, #200]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005de:	4a2b      	ldr	r2, [pc, #172]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <HAL_DAC_MspInit+0xf4>)
 80005ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f6:	2310      	movs	r3, #16
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <HAL_DAC_MspInit+0xf8>)
 800060a:	f002 ff1f 	bl	800344c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <HAL_DAC_MspInit+0x100>)
 8000612:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000616:	2243      	movs	r2, #67	; 0x43
 8000618:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 800061c:	2240      	movs	r2, #64	; 0x40
 800061e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000638:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000644:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000654:	f000 fe22 	bl	800129c <HAL_DMA_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800065e:	f7ff ff7b 	bl	8000558 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_DAC_MspInit+0xfc>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2036      	movs	r0, #54	; 0x36
 8000674:	f000 faa7 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000678:	2036      	movs	r0, #54	; 0x36
 800067a:	f000 fabe 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800067e:	bf00      	nop
 8000680:	3728      	adds	r7, #40	; 0x28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40007400 	.word	0x40007400
 800068c:	58024400 	.word	0x58024400
 8000690:	58020000 	.word	0x58020000
 8000694:	24000080 	.word	0x24000080
 8000698:	40020088 	.word	0x40020088

0800069c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_TIM_Base_MspInit+0x48>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d116      	bne.n	80006dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_TIM_Base_MspInit+0x4c>)
 80006b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006b4:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <HAL_TIM_Base_MspInit+0x4c>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_TIM_Base_MspInit+0x4c>)
 80006c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2036      	movs	r0, #54	; 0x36
 80006d2:	f000 fa78 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006d6:	2036      	movs	r0, #54	; 0x36
 80006d8:	f000 fa8f 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40001000 	.word	0x40001000
 80006e8:	58024400 	.word	0x58024400

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <MemManage_Handler+0x4>

080006fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler+0x4>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <UsageFault_Handler+0x4>

0800070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f93e 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <DMA1_Stream5_IRQHandler+0x10>)
 8000746:	f001 fb6f 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	24000080 	.word	0x24000080

08000754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <TIM6_DAC_IRQHandler+0x14>)
 800075a:	f000 fb4b 	bl	8000df4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <TIM6_DAC_IRQHandler+0x18>)
 8000760:	f004 f8b0 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2400006c 	.word	0x2400006c
 800076c:	240000f8 	.word	0x240000f8

08000770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <SystemInit+0xe4>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a36      	ldr	r2, [pc, #216]	; (8000854 <SystemInit+0xe4>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <SystemInit+0xe8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	2b06      	cmp	r3, #6
 800078e:	d807      	bhi.n	80007a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <SystemInit+0xe8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f023 030f 	bic.w	r3, r3, #15
 8000798:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <SystemInit+0xe8>)
 800079a:	f043 0307 	orr.w	r3, r3, #7
 800079e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <SystemInit+0xec>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2d      	ldr	r2, [pc, #180]	; (800085c <SystemInit+0xec>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemInit+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <SystemInit+0xec>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4929      	ldr	r1, [pc, #164]	; (800085c <SystemInit+0xec>)
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SystemInit+0xf0>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemInit+0xe8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d007      	beq.n	80007da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <SystemInit+0xe8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f023 030f 	bic.w	r3, r3, #15
 80007d2:	4a21      	ldr	r2, [pc, #132]	; (8000858 <SystemInit+0xe8>)
 80007d4:	f043 0307 	orr.w	r3, r3, #7
 80007d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <SystemInit+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <SystemInit+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SystemInit+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <SystemInit+0xec>)
 80007ee:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <SystemInit+0xf4>)
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <SystemInit+0xec>)
 80007f4:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <SystemInit+0xf8>)
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <SystemInit+0xec>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <SystemInit+0xfc>)
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <SystemInit+0xec>)
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <SystemInit+0xec>)
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <SystemInit+0xfc>)
 8000808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <SystemInit+0xec>)
 800080c:	2200      	movs	r2, #0
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <SystemInit+0xec>)
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <SystemInit+0xfc>)
 8000814:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <SystemInit+0xec>)
 8000818:	2200      	movs	r2, #0
 800081a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SystemInit+0xec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <SystemInit+0xec>)
 8000822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <SystemInit+0xec>)
 800082a:	2200      	movs	r2, #0
 800082c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <SystemInit+0x100>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0x104>)
 8000834:	4013      	ands	r3, r2
 8000836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800083a:	d202      	bcs.n	8000842 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <SystemInit+0x108>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <SystemInit+0x10c>)
 8000844:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000848:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	52002000 	.word	0x52002000
 800085c:	58024400 	.word	0x58024400
 8000860:	eaf6ed7f 	.word	0xeaf6ed7f
 8000864:	02020200 	.word	0x02020200
 8000868:	01ff0000 	.word	0x01ff0000
 800086c:	01010280 	.word	0x01010280
 8000870:	5c001000 	.word	0x5c001000
 8000874:	ffff0000 	.word	0xffff0000
 8000878:	51008108 	.word	0x51008108
 800087c:	52004000 	.word	0x52004000

08000880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f7ff ff74 	bl	8000770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ae:	f004 fa9d 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b2:	f7ff fd11 	bl	80002d8 <main>
  bx  lr
 80008b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008c0:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 80008c4:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 80008c8:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 80008cc:	24000148 	.word	0x24000148

080008d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC3_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 f968 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008e0:	f003 fdae 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_Init+0x68>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	4913      	ldr	r1, [pc, #76]	; (8000940 <HAL_Init+0x6c>)
 80008f2:	5ccb      	ldrb	r3, [r1, r3]
 80008f4:	f003 031f 	and.w	r3, r3, #31
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_Init+0x68>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_Init+0x6c>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	f003 031f 	and.w	r3, r3, #31
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	fa22 f303 	lsr.w	r3, r2, r3
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_Init+0x70>)
 8000916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_Init+0x74>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f814 	bl	800094c <HAL_InitTick>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e002      	b.n	8000934 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800092e:	f7ff fe19 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58024400 	.word	0x58024400
 8000940:	08004e4c 	.word	0x08004e4c
 8000944:	24000044 	.word	0x24000044
 8000948:	24000040 	.word	0x24000040

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_InitTick+0x60>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e021      	b.n	80009a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_InitTick+0x64>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_InitTick+0x60>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f94d 	bl	8000c16 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 f917 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x68>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2400004c 	.word	0x2400004c
 80009b0:	24000040 	.word	0x24000040
 80009b4:	24000048 	.word	0x24000048

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2400004c 	.word	0x2400004c
 80009dc:	24000144 	.word	0x24000144

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	24000144 	.word	0x24000144

080009f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetREVID+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	0c1b      	lsrs	r3, r3, #16
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	5c001000 	.word	0x5c001000

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <__NVIC_SetPriorityGrouping+0x40>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x40>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	05fa0000 	.word	0x05fa0000

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff40 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff33 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa4 	bl	8000b6c <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e014      	b.n	8000c6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d105      	bne.n	8000c56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fca1 	bl	8000598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2202      	movs	r2, #2
 8000c5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e0a2      	b.n	8000dd2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <HAL_DAC_Start_DMA+0x24>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e09c      	b.n	8000dd2 <HAL_DAC_Start_DMA+0x15e>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d129      	bne.n	8000cfe <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4a4b      	ldr	r2, [pc, #300]	; (8000ddc <HAL_DAC_Start_DMA+0x168>)
 8000cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	; (8000de0 <HAL_DAC_Start_DMA+0x16c>)
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <HAL_DAC_Start_DMA+0x170>)
 8000cc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_DAC_Start_DMA+0x6c>
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d005      	beq.n	8000cea <HAL_DAC_Start_DMA+0x76>
 8000cde:	e009      	b.n	8000cf4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	613b      	str	r3, [r7, #16]
        break;
 8000ce8:	e033      	b.n	8000d52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	330c      	adds	r3, #12
 8000cf0:	613b      	str	r3, [r7, #16]
        break;
 8000cf2:	e02e      	b.n	8000d52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3310      	adds	r3, #16
 8000cfa:	613b      	str	r3, [r7, #16]
        break;
 8000cfc:	e029      	b.n	8000d52 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	4a39      	ldr	r2, [pc, #228]	; (8000de8 <HAL_DAC_Start_DMA+0x174>)
 8000d04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <HAL_DAC_Start_DMA+0x178>)
 8000d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	4a37      	ldr	r2, [pc, #220]	; (8000df0 <HAL_DAC_Start_DMA+0x17c>)
 8000d14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d24:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_DAC_Start_DMA+0xc0>
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d005      	beq.n	8000d3e <HAL_DAC_Start_DMA+0xca>
 8000d32:	e009      	b.n	8000d48 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3314      	adds	r3, #20
 8000d3a:	613b      	str	r3, [r7, #16]
        break;
 8000d3c:	e009      	b.n	8000d52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3318      	adds	r3, #24
 8000d44:	613b      	str	r3, [r7, #16]
        break;
 8000d46:	e004      	b.n	8000d52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	331c      	adds	r3, #28
 8000d4e:	613b      	str	r3, [r7, #16]
        break;
 8000d50:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d111      	bne.n	8000d7c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6898      	ldr	r0, [r3, #8]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	f000 fdef 	bl	8001954 <HAL_DMA_Start_IT>
 8000d76:	4603      	mov	r3, r0
 8000d78:	75fb      	strb	r3, [r7, #23]
 8000d7a:	e010      	b.n	8000d9e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	68d8      	ldr	r0, [r3, #12]
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	f000 fddd 	bl	8001954 <HAL_DMA_Start_IT>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2201      	movs	r2, #1
 8000db8:	409a      	lsls	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e005      	b.n	8000dd0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f043 0204 	orr.w	r2, r3, #4
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08001175 	.word	0x08001175
 8000de0:	08001197 	.word	0x08001197
 8000de4:	080011b3 	.word	0x080011b3
 8000de8:	08001231 	.word	0x08001231
 8000dec:	08001253 	.word	0x08001253
 8000df0:	0800126f 	.word	0x0800126f

08000df4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01d      	beq.n	8000e52 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d018      	beq.n	8000e52 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2204      	movs	r2, #4
 8000e24:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	f043 0201 	orr.w	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f845 	bl	8000edc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d01d      	beq.n	8000e98 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d018      	beq.n	8000e98 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f043 0202 	orr.w	r2, r3, #2
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000e90:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f9c2 	bl	800121c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_DAC_ConfigChannel+0x1e>
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e12a      	b.n	8001168 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	795b      	ldrb	r3, [r3, #5]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d101      	bne.n	8000f1e <HAL_DAC_ConfigChannel+0x2e>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e124      	b.n	8001168 <HAL_DAC_ConfigChannel+0x278>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2202      	movs	r2, #2
 8000f28:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d17a      	bne.n	8001028 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f32:	f7ff fd55 	bl	80009e0 <HAL_GetTick>
 8000f36:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d13d      	bne.n	8000fba <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f3e:	e018      	b.n	8000f72 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f40:	f7ff fd4e 	bl	80009e0 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d911      	bls.n	8000f72 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f54:	4b86      	ldr	r3, [pc, #536]	; (8001170 <HAL_DAC_ConfigChannel+0x280>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	f043 0208 	orr.w	r2, r3, #8
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e0fa      	b.n	8001168 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f78:	4b7d      	ldr	r3, [pc, #500]	; (8001170 <HAL_DAC_ConfigChannel+0x280>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1df      	bne.n	8000f40 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	6992      	ldr	r2, [r2, #24]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8a:	e020      	b.n	8000fce <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f8c:	f7ff fd28 	bl	80009e0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d90f      	bls.n	8000fba <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da0a      	bge.n	8000fba <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f043 0208 	orr.w	r2, r3, #8
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e0d6      	b.n	8001168 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dbe3      	blt.n	8000f8c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	6992      	ldr	r2, [r2, #24]
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	ea02 0103 	and.w	r1, r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	21ff      	movs	r1, #255	; 0xff
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	ea02 0103 	and.w	r1, r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	6a1a      	ldr	r2, [r3, #32]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	409a      	lsls	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d11d      	bne.n	800106c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001036:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001072:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
 8001094:	e00f      	b.n	80010b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d102      	bne.n	80010a4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800109e:	2301      	movs	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
 80010a2:	e008      	b.n	80010b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	e001      	b.n	80010b6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4313      	orrs	r3, r2
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	22c0      	movs	r2, #192	; 0xc0
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001168:	4618      	mov	r0, r3
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20008000 	.word	0x20008000

08001174 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff fe8c 	bl	8000ea0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	711a      	strb	r2, [r3, #4]
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff fe85 	bl	8000eb4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	711a      	strb	r2, [r3, #4]
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ffce 	bl	80011e0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	711a      	strb	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ffc7 	bl	80011f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	f043 0204 	orr.w	r2, r3, #4
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ffbd 	bl	8001208 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fb9c 	bl	80009e0 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e316      	b.n	80018e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a66      	ldr	r2, [pc, #408]	; (8001454 <HAL_DMA_Init+0x1b8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d04a      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_DMA_Init+0x1bc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d045      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_DMA_Init+0x1c0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d040      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a62      	ldr	r2, [pc, #392]	; (8001460 <HAL_DMA_Init+0x1c4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d03b      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a60      	ldr	r2, [pc, #384]	; (8001464 <HAL_DMA_Init+0x1c8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d036      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	; (8001468 <HAL_DMA_Init+0x1cc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d031      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5d      	ldr	r2, [pc, #372]	; (800146c <HAL_DMA_Init+0x1d0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d02c      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5c      	ldr	r2, [pc, #368]	; (8001470 <HAL_DMA_Init+0x1d4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d027      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_DMA_Init+0x1d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d022      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a59      	ldr	r2, [pc, #356]	; (8001478 <HAL_DMA_Init+0x1dc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d01d      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_DMA_Init+0x1e0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d018      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_DMA_Init+0x1e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <HAL_DMA_Init+0x1e8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00e      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_DMA_Init+0x1ec>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d009      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_DMA_Init+0x1f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d004      	beq.n	8001354 <HAL_DMA_Init+0xb8>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a50      	ldr	r2, [pc, #320]	; (8001490 <HAL_DMA_Init+0x1f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_DMA_Init+0xbc>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_DMA_Init+0xbe>
 8001358:	2300      	movs	r3, #0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 813b 	beq.w	80015d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a37      	ldr	r2, [pc, #220]	; (8001454 <HAL_DMA_Init+0x1b8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d04a      	beq.n	8001410 <HAL_DMA_Init+0x174>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a36      	ldr	r2, [pc, #216]	; (8001458 <HAL_DMA_Init+0x1bc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d045      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_DMA_Init+0x1c0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d040      	beq.n	8001410 <HAL_DMA_Init+0x174>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_DMA_Init+0x1c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d03b      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a31      	ldr	r2, [pc, #196]	; (8001464 <HAL_DMA_Init+0x1c8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d036      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_DMA_Init+0x1cc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d031      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2e      	ldr	r2, [pc, #184]	; (800146c <HAL_DMA_Init+0x1d0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02c      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_DMA_Init+0x1d4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d027      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <HAL_DMA_Init+0x1d8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d022      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2a      	ldr	r2, [pc, #168]	; (8001478 <HAL_DMA_Init+0x1dc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d01d      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_DMA_Init+0x1e0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d018      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_DMA_Init+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d013      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_DMA_Init+0x1e8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00e      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a24      	ldr	r2, [pc, #144]	; (8001488 <HAL_DMA_Init+0x1ec>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d009      	beq.n	8001410 <HAL_DMA_Init+0x174>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_DMA_Init+0x1f0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d004      	beq.n	8001410 <HAL_DMA_Init+0x174>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_DMA_Init+0x1f4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d108      	bne.n	8001422 <HAL_DMA_Init+0x186>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_DMA_Init+0x196>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001432:	e02f      	b.n	8001494 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001434:	f7ff fad4 	bl	80009e0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b05      	cmp	r3, #5
 8001440:	d928      	bls.n	8001494 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e246      	b.n	80018e2 <HAL_DMA_Init+0x646>
 8001454:	40020010 	.word	0x40020010
 8001458:	40020028 	.word	0x40020028
 800145c:	40020040 	.word	0x40020040
 8001460:	40020058 	.word	0x40020058
 8001464:	40020070 	.word	0x40020070
 8001468:	40020088 	.word	0x40020088
 800146c:	400200a0 	.word	0x400200a0
 8001470:	400200b8 	.word	0x400200b8
 8001474:	40020410 	.word	0x40020410
 8001478:	40020428 	.word	0x40020428
 800147c:	40020440 	.word	0x40020440
 8001480:	40020458 	.word	0x40020458
 8001484:	40020470 	.word	0x40020470
 8001488:	40020488 	.word	0x40020488
 800148c:	400204a0 	.word	0x400204a0
 8001490:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1c8      	bne.n	8001434 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_DMA_Init+0x420>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d107      	bne.n	80014f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4313      	orrs	r3, r2
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_DMA_Init+0x424>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <HAL_DMA_Init+0x428>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001504:	d328      	bcc.n	8001558 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b28      	cmp	r3, #40	; 0x28
 800150c:	d903      	bls.n	8001516 <HAL_DMA_Init+0x27a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b2e      	cmp	r3, #46	; 0x2e
 8001514:	d917      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b3e      	cmp	r3, #62	; 0x3e
 800151c:	d903      	bls.n	8001526 <HAL_DMA_Init+0x28a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b42      	cmp	r3, #66	; 0x42
 8001524:	d90f      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b46      	cmp	r3, #70	; 0x46
 800152c:	d903      	bls.n	8001536 <HAL_DMA_Init+0x29a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b48      	cmp	r3, #72	; 0x48
 8001534:	d907      	bls.n	8001546 <HAL_DMA_Init+0x2aa>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b4e      	cmp	r3, #78	; 0x4e
 800153c:	d905      	bls.n	800154a <HAL_DMA_Init+0x2ae>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b52      	cmp	r3, #82	; 0x52
 8001544:	d801      	bhi.n	800154a <HAL_DMA_Init+0x2ae>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_DMA_Init+0x2b0>
 800154a:	2300      	movs	r3, #0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001556:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 fdcf 	bl	8003138 <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e197      	b.n	80018e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f001 fd0a 	bl	8002fd4 <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e0cd      	b.n	8001772 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_DMA_Init+0x42c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a39      	ldr	r2, [pc, #228]	; (80016cc <HAL_DMA_Init+0x430>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01d      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_DMA_Init+0x434>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a36      	ldr	r2, [pc, #216]	; (80016d4 <HAL_DMA_Init+0x438>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <HAL_DMA_Init+0x43c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00e      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_DMA_Init+0x440>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d009      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_DMA_Init+0x444>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d004      	beq.n	8001626 <HAL_DMA_Init+0x38a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <HAL_DMA_Init+0x448>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_DMA_Init+0x38e>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_DMA_Init+0x390>
 800162a:	2300      	movs	r3, #0
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8097 	beq.w	8001760 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_DMA_Init+0x42c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d021      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_DMA_Init+0x430>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01c      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_DMA_Init+0x434>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d017      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_DMA_Init+0x438>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d012      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_DMA_Init+0x43c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_DMA_Init+0x440>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_DMA_Init+0x444>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Init+0x3e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_DMA_Init+0x448>)
 800167e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_DMA_Init+0x44c>)
 800169c:	4013      	ands	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	d021      	beq.n	80016ec <HAL_DMA_Init+0x450>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d102      	bne.n	80016b6 <HAL_DMA_Init+0x41a>
 80016b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b4:	e01b      	b.n	80016ee <HAL_DMA_Init+0x452>
 80016b6:	2300      	movs	r3, #0
 80016b8:	e019      	b.n	80016ee <HAL_DMA_Init+0x452>
 80016ba:	bf00      	nop
 80016bc:	fe10803f 	.word	0xfe10803f
 80016c0:	5c001000 	.word	0x5c001000
 80016c4:	ffff0000 	.word	0xffff0000
 80016c8:	58025408 	.word	0x58025408
 80016cc:	5802541c 	.word	0x5802541c
 80016d0:	58025430 	.word	0x58025430
 80016d4:	58025444 	.word	0x58025444
 80016d8:	58025458 	.word	0x58025458
 80016dc:	5802546c 	.word	0x5802546c
 80016e0:	58025480 	.word	0x58025480
 80016e4:	58025494 	.word	0x58025494
 80016e8:	fffe000f 	.word	0xfffe000f
 80016ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800170c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800171c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b6e      	ldr	r3, [pc, #440]	; (80018ec <HAL_DMA_Init+0x650>)
 8001734:	4413      	add	r3, r2
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_DMA_Init+0x654>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	009a      	lsls	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 fc45 	bl	8002fd4 <DMA_CalcBaseAndBitshift>
 800174a:	4603      	mov	r3, r0
 800174c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2201      	movs	r2, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e008      	b.n	8001772 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0b7      	b.n	80018e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_DMA_Init+0x658>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d072      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5d      	ldr	r2, [pc, #372]	; (80018f8 <HAL_DMA_Init+0x65c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d06d      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_DMA_Init+0x660>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d068      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_DMA_Init+0x664>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d063      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a59      	ldr	r2, [pc, #356]	; (8001904 <HAL_DMA_Init+0x668>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_DMA_Init+0x66c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d059      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a56      	ldr	r2, [pc, #344]	; (800190c <HAL_DMA_Init+0x670>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d054      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_DMA_Init+0x674>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d04f      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a53      	ldr	r2, [pc, #332]	; (8001914 <HAL_DMA_Init+0x678>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04a      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_DMA_Init+0x67c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_DMA_Init+0x680>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d040      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_DMA_Init+0x684>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d03b      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_DMA_Init+0x688>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_DMA_Init+0x68c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_DMA_Init+0x690>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d02c      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_DMA_Init+0x694>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_DMA_Init+0x698>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_DMA_Init+0x69c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01d      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a44      	ldr	r2, [pc, #272]	; (800193c <HAL_DMA_Init+0x6a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d018      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_DMA_Init+0x6a4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a41      	ldr	r2, [pc, #260]	; (8001944 <HAL_DMA_Init+0x6a8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_DMA_Init+0x6ac>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <HAL_DMA_Init+0x6b0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Init+0x5c6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3c      	ldr	r2, [pc, #240]	; (8001950 <HAL_DMA_Init+0x6b4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_DMA_Init+0x5ca>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_DMA_Init+0x5cc>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d032      	beq.n	80018d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f001 fcdf 	bl	8003230 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b80      	cmp	r3, #128	; 0x80
 8001878:	d102      	bne.n	8001880 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001894:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_DMA_Init+0x624>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d80c      	bhi.n	80018c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f001 fd5c 	bl	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e008      	b.n	80018d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	a7fdabf8 	.word	0xa7fdabf8
 80018f0:	cccccccd 	.word	0xcccccccd
 80018f4:	40020010 	.word	0x40020010
 80018f8:	40020028 	.word	0x40020028
 80018fc:	40020040 	.word	0x40020040
 8001900:	40020058 	.word	0x40020058
 8001904:	40020070 	.word	0x40020070
 8001908:	40020088 	.word	0x40020088
 800190c:	400200a0 	.word	0x400200a0
 8001910:	400200b8 	.word	0x400200b8
 8001914:	40020410 	.word	0x40020410
 8001918:	40020428 	.word	0x40020428
 800191c:	40020440 	.word	0x40020440
 8001920:	40020458 	.word	0x40020458
 8001924:	40020470 	.word	0x40020470
 8001928:	40020488 	.word	0x40020488
 800192c:	400204a0 	.word	0x400204a0
 8001930:	400204b8 	.word	0x400204b8
 8001934:	58025408 	.word	0x58025408
 8001938:	5802541c 	.word	0x5802541c
 800193c:	58025430 	.word	0x58025430
 8001940:	58025444 	.word	0x58025444
 8001944:	58025458 	.word	0x58025458
 8001948:	5802546c 	.word	0x5802546c
 800194c:	58025480 	.word	0x58025480
 8001950:	58025494 	.word	0x58025494

08001954 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e226      	b.n	8001dbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_DMA_Start_IT+0x2a>
 800197a:	2302      	movs	r3, #2
 800197c:	e21f      	b.n	8001dbe <HAL_DMA_Start_IT+0x46a>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	f040 820a 	bne.w	8001da8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a68      	ldr	r2, [pc, #416]	; (8001b48 <HAL_DMA_Start_IT+0x1f4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d04a      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a66      	ldr	r2, [pc, #408]	; (8001b4c <HAL_DMA_Start_IT+0x1f8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d045      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <HAL_DMA_Start_IT+0x1fc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d040      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a63      	ldr	r2, [pc, #396]	; (8001b54 <HAL_DMA_Start_IT+0x200>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d03b      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a62      	ldr	r2, [pc, #392]	; (8001b58 <HAL_DMA_Start_IT+0x204>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d036      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a60      	ldr	r2, [pc, #384]	; (8001b5c <HAL_DMA_Start_IT+0x208>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d031      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5f      	ldr	r2, [pc, #380]	; (8001b60 <HAL_DMA_Start_IT+0x20c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d02c      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_DMA_Start_IT+0x210>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d027      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_DMA_Start_IT+0x214>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <HAL_DMA_Start_IT+0x218>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01d      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_DMA_Start_IT+0x21c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d018      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_DMA_Start_IT+0x220>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <HAL_DMA_Start_IT+0x224>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00e      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_DMA_Start_IT+0x228>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_DMA_Start_IT+0x22c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_DMA_Start_IT+0xee>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_DMA_Start_IT+0x230>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d108      	bne.n	8001a54 <HAL_DMA_Start_IT+0x100>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_DMA_Start_IT+0x110>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f001 f906 	bl	8002c7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a34      	ldr	r2, [pc, #208]	; (8001b48 <HAL_DMA_Start_IT+0x1f4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d04a      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <HAL_DMA_Start_IT+0x1f8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d045      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_DMA_Start_IT+0x1fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d040      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <HAL_DMA_Start_IT+0x200>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d03b      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2e      	ldr	r2, [pc, #184]	; (8001b58 <HAL_DMA_Start_IT+0x204>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d036      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <HAL_DMA_Start_IT+0x208>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d031      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_DMA_Start_IT+0x20c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02c      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_DMA_Start_IT+0x210>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d027      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_DMA_Start_IT+0x214>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d022      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_DMA_Start_IT+0x218>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d01d      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_DMA_Start_IT+0x21c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d018      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_DMA_Start_IT+0x220>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_DMA_Start_IT+0x224>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00e      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <HAL_DMA_Start_IT+0x228>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d009      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_DMA_Start_IT+0x22c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_DMA_Start_IT+0x1bc>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_DMA_Start_IT+0x230>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_DMA_Start_IT+0x1c0>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_DMA_Start_IT+0x1c2>
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d036      	beq.n	8001b88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 021e 	bic.w	r2, r3, #30
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0216 	orr.w	r2, r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03e      	beq.n	8001bb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0208 	orr.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e035      	b.n	8001bb4 <HAL_DMA_Start_IT+0x260>
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	40020028 	.word	0x40020028
 8001b50:	40020040 	.word	0x40020040
 8001b54:	40020058 	.word	0x40020058
 8001b58:	40020070 	.word	0x40020070
 8001b5c:	40020088 	.word	0x40020088
 8001b60:	400200a0 	.word	0x400200a0
 8001b64:	400200b8 	.word	0x400200b8
 8001b68:	40020410 	.word	0x40020410
 8001b6c:	40020428 	.word	0x40020428
 8001b70:	40020440 	.word	0x40020440
 8001b74:	40020458 	.word	0x40020458
 8001b78:	40020470 	.word	0x40020470
 8001b7c:	40020488 	.word	0x40020488
 8001b80:	400204a0 	.word	0x400204a0
 8001b84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 020e 	bic.w	r2, r3, #14
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 020a 	orr.w	r2, r2, #10
 8001b9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0204 	orr.w	r2, r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a83      	ldr	r2, [pc, #524]	; (8001dc8 <HAL_DMA_Start_IT+0x474>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d072      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <HAL_DMA_Start_IT+0x478>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d06d      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a80      	ldr	r2, [pc, #512]	; (8001dd0 <HAL_DMA_Start_IT+0x47c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d068      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7f      	ldr	r2, [pc, #508]	; (8001dd4 <HAL_DMA_Start_IT+0x480>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d063      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7d      	ldr	r2, [pc, #500]	; (8001dd8 <HAL_DMA_Start_IT+0x484>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d05e      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7c      	ldr	r2, [pc, #496]	; (8001ddc <HAL_DMA_Start_IT+0x488>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d059      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_DMA_Start_IT+0x48c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d054      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <HAL_DMA_Start_IT+0x490>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04f      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_DMA_Start_IT+0x494>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d04a      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a76      	ldr	r2, [pc, #472]	; (8001dec <HAL_DMA_Start_IT+0x498>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d045      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a74      	ldr	r2, [pc, #464]	; (8001df0 <HAL_DMA_Start_IT+0x49c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d040      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a73      	ldr	r2, [pc, #460]	; (8001df4 <HAL_DMA_Start_IT+0x4a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d03b      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <HAL_DMA_Start_IT+0x4a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d036      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a70      	ldr	r2, [pc, #448]	; (8001dfc <HAL_DMA_Start_IT+0x4a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d031      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_DMA_Start_IT+0x4ac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02c      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6d      	ldr	r2, [pc, #436]	; (8001e04 <HAL_DMA_Start_IT+0x4b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d027      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6b      	ldr	r2, [pc, #428]	; (8001e08 <HAL_DMA_Start_IT+0x4b4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_DMA_Start_IT+0x4b8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01d      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_DMA_Start_IT+0x4bc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_DMA_Start_IT+0x4c0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a65      	ldr	r2, [pc, #404]	; (8001e18 <HAL_DMA_Start_IT+0x4c4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a64      	ldr	r2, [pc, #400]	; (8001e1c <HAL_DMA_Start_IT+0x4c8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a62      	ldr	r2, [pc, #392]	; (8001e20 <HAL_DMA_Start_IT+0x4cc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x350>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a61      	ldr	r2, [pc, #388]	; (8001e24 <HAL_DMA_Start_IT+0x4d0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Start_IT+0x354>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_Start_IT+0x356>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <HAL_DMA_Start_IT+0x474>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d04a      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <HAL_DMA_Start_IT+0x478>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d045      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_DMA_Start_IT+0x47c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d040      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <HAL_DMA_Start_IT+0x480>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d03b      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_DMA_Start_IT+0x484>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d036      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_DMA_Start_IT+0x488>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d031      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_DMA_Start_IT+0x48c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d02c      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_DMA_Start_IT+0x490>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d027      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_DMA_Start_IT+0x494>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d022      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_DMA_Start_IT+0x498>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01d      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <HAL_DMA_Start_IT+0x49c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_DMA_Start_IT+0x4a0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d013      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <HAL_DMA_Start_IT+0x4a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_DMA_Start_IT+0x4a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_DMA_Start_IT+0x4ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Start_IT+0x430>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_DMA_Start_IT+0x4b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d108      	bne.n	8001d96 <HAL_DMA_Start_IT+0x442>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e012      	b.n	8001dbc <HAL_DMA_Start_IT+0x468>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e009      	b.n	8001dbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40020010 	.word	0x40020010
 8001dcc:	40020028 	.word	0x40020028
 8001dd0:	40020040 	.word	0x40020040
 8001dd4:	40020058 	.word	0x40020058
 8001dd8:	40020070 	.word	0x40020070
 8001ddc:	40020088 	.word	0x40020088
 8001de0:	400200a0 	.word	0x400200a0
 8001de4:	400200b8 	.word	0x400200b8
 8001de8:	40020410 	.word	0x40020410
 8001dec:	40020428 	.word	0x40020428
 8001df0:	40020440 	.word	0x40020440
 8001df4:	40020458 	.word	0x40020458
 8001df8:	40020470 	.word	0x40020470
 8001dfc:	40020488 	.word	0x40020488
 8001e00:	400204a0 	.word	0x400204a0
 8001e04:	400204b8 	.word	0x400204b8
 8001e08:	58025408 	.word	0x58025408
 8001e0c:	5802541c 	.word	0x5802541c
 8001e10:	58025430 	.word	0x58025430
 8001e14:	58025444 	.word	0x58025444
 8001e18:	58025458 	.word	0x58025458
 8001e1c:	5802546c 	.word	0x5802546c
 8001e20:	58025480 	.word	0x58025480
 8001e24:	58025494 	.word	0x58025494

08001e28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_DMA_IRQHandler+0x1ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a67      	ldr	r2, [pc, #412]	; (8001fd8 <HAL_DMA_IRQHandler+0x1b0>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5f      	ldr	r2, [pc, #380]	; (8001fdc <HAL_DMA_IRQHandler+0x1b4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04a      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d045      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d040      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d03b      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a59      	ldr	r2, [pc, #356]	; (8001fec <HAL_DMA_IRQHandler+0x1c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d036      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d031      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d02c      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d027      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_DMA_IRQHandler+0x1d4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_DMA_IRQHandler+0x1d8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01d      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_DMA_IRQHandler+0x1dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <HAL_DMA_IRQHandler+0x1e0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a4d      	ldr	r2, [pc, #308]	; (800200c <HAL_DMA_IRQHandler+0x1e4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00e      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_DMA_IRQHandler+0x1e8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_DMA_IRQHandler+0x1ec>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_DMA_IRQHandler+0xd2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a48      	ldr	r2, [pc, #288]	; (8002018 <HAL_DMA_IRQHandler+0x1f0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_IRQHandler+0xd6>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_DMA_IRQHandler+0xd8>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 842b 	beq.w	800275c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2208      	movs	r2, #8
 8001f10:	409a      	lsls	r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80a2 	beq.w	8002060 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <HAL_DMA_IRQHandler+0x1b4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d04a      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d045      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d040      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d03b      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_DMA_IRQHandler+0x1c4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d036      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02c      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d027      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_DMA_IRQHandler+0x1d4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_DMA_IRQHandler+0x1d8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d01d      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_DMA_IRQHandler+0x1dc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_DMA_IRQHandler+0x1e0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_DMA_IRQHandler+0x1e4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_DMA_IRQHandler+0x1e8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_DMA_IRQHandler+0x1ec>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x194>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_DMA_IRQHandler+0x1f0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d12f      	bne.n	800201c <HAL_DMA_IRQHandler+0x1f4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	e02e      	b.n	8002030 <HAL_DMA_IRQHandler+0x208>
 8001fd2:	bf00      	nop
 8001fd4:	24000040 	.word	0x24000040
 8001fd8:	1b4e81b5 	.word	0x1b4e81b5
 8001fdc:	40020010 	.word	0x40020010
 8001fe0:	40020028 	.word	0x40020028
 8001fe4:	40020040 	.word	0x40020040
 8001fe8:	40020058 	.word	0x40020058
 8001fec:	40020070 	.word	0x40020070
 8001ff0:	40020088 	.word	0x40020088
 8001ff4:	400200a0 	.word	0x400200a0
 8001ff8:	400200b8 	.word	0x400200b8
 8001ffc:	40020410 	.word	0x40020410
 8002000:	40020428 	.word	0x40020428
 8002004:	40020440 	.word	0x40020440
 8002008:	40020458 	.word	0x40020458
 800200c:	40020470 	.word	0x40020470
 8002010:	40020488 	.word	0x40020488
 8002014:	400204a0 	.word	0x400204a0
 8002018:	400204b8 	.word	0x400204b8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0204 	bic.w	r2, r2, #4
 8002042:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2208      	movs	r2, #8
 800204e:	409a      	lsls	r2, r3
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06e      	beq.n	8002154 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_DMA_IRQHandler+0x3f8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04a      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a67      	ldr	r2, [pc, #412]	; (8002224 <HAL_DMA_IRQHandler+0x3fc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d045      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_DMA_IRQHandler+0x400>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a64      	ldr	r2, [pc, #400]	; (800222c <HAL_DMA_IRQHandler+0x404>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d03b      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_DMA_IRQHandler+0x408>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d036      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a61      	ldr	r2, [pc, #388]	; (8002234 <HAL_DMA_IRQHandler+0x40c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a60      	ldr	r2, [pc, #384]	; (8002238 <HAL_DMA_IRQHandler+0x410>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d02c      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_DMA_IRQHandler+0x414>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_DMA_IRQHandler+0x418>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_DMA_IRQHandler+0x41c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_DMA_IRQHandler+0x420>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_DMA_IRQHandler+0x424>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_DMA_IRQHandler+0x428>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_DMA_IRQHandler+0x42c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_DMA_IRQHandler+0x430>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2ee>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_DMA_IRQHandler+0x434>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10a      	bne.n	800212c <HAL_DMA_IRQHandler+0x304>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e003      	b.n	8002134 <HAL_DMA_IRQHandler+0x30c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2204      	movs	r2, #4
 800215e:	409a      	lsls	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808f 	beq.w	8002288 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_DMA_IRQHandler+0x3f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d04a      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <HAL_DMA_IRQHandler+0x3fc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d045      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_DMA_IRQHandler+0x400>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d040      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_DMA_IRQHandler+0x404>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d03b      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a26      	ldr	r2, [pc, #152]	; (8002230 <HAL_DMA_IRQHandler+0x408>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d036      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_DMA_IRQHandler+0x40c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d031      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <HAL_DMA_IRQHandler+0x410>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d02c      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_DMA_IRQHandler+0x414>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d027      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_DMA_IRQHandler+0x418>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_DMA_IRQHandler+0x41c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01d      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <HAL_DMA_IRQHandler+0x420>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d018      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_DMA_IRQHandler+0x424>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_DMA_IRQHandler+0x428>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_DMA_IRQHandler+0x42c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_DMA_IRQHandler+0x430>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_DMA_IRQHandler+0x3e2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_DMA_IRQHandler+0x434>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12a      	bne.n	8002260 <HAL_DMA_IRQHandler+0x438>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e023      	b.n	8002268 <HAL_DMA_IRQHandler+0x440>
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2204      	movs	r2, #4
 8002276:	409a      	lsls	r2, r3
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2210      	movs	r2, #16
 8002292:	409a      	lsls	r2, r3
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a6 	beq.w	80023ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a85      	ldr	r2, [pc, #532]	; (80024b8 <HAL_DMA_IRQHandler+0x690>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04a      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_DMA_IRQHandler+0x694>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d045      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a82      	ldr	r2, [pc, #520]	; (80024c0 <HAL_DMA_IRQHandler+0x698>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d040      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_DMA_IRQHandler+0x69c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d03b      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7f      	ldr	r2, [pc, #508]	; (80024c8 <HAL_DMA_IRQHandler+0x6a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d036      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7d      	ldr	r2, [pc, #500]	; (80024cc <HAL_DMA_IRQHandler+0x6a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7c      	ldr	r2, [pc, #496]	; (80024d0 <HAL_DMA_IRQHandler+0x6a8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d02c      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_DMA_IRQHandler+0x6ac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d027      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a79      	ldr	r2, [pc, #484]	; (80024d8 <HAL_DMA_IRQHandler+0x6b0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_DMA_IRQHandler+0x6b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a76      	ldr	r2, [pc, #472]	; (80024e0 <HAL_DMA_IRQHandler+0x6b8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d018      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a74      	ldr	r2, [pc, #464]	; (80024e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a73      	ldr	r2, [pc, #460]	; (80024e8 <HAL_DMA_IRQHandler+0x6c0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_DMA_IRQHandler+0x6c4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a70      	ldr	r2, [pc, #448]	; (80024f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_DMA_IRQHandler+0x516>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_DMA_IRQHandler+0x6cc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10a      	bne.n	8002354 <HAL_DMA_IRQHandler+0x52c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e009      	b.n	8002368 <HAL_DMA_IRQHandler+0x540>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03e      	beq.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2210      	movs	r2, #16
 8002376:	409a      	lsls	r2, r3
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d024      	beq.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e01f      	b.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01b      	beq.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
 80023ba:	e016      	b.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0208 	bic.w	r2, r2, #8
 80023d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2220      	movs	r2, #32
 80023f4:	409a      	lsls	r2, r3
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8110 	beq.w	8002620 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <HAL_DMA_IRQHandler+0x690>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <HAL_DMA_IRQHandler+0x694>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d045      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_DMA_IRQHandler+0x698>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d040      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <HAL_DMA_IRQHandler+0x69c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d03b      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_DMA_IRQHandler+0x6a0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d036      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_DMA_IRQHandler+0x6a4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d031      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_DMA_IRQHandler+0x6a8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02c      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_DMA_IRQHandler+0x6ac>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d027      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_DMA_IRQHandler+0x6b0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d022      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_DMA_IRQHandler+0x6b4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01d      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_DMA_IRQHandler+0x6b8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d018      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_DMA_IRQHandler+0x6c0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00e      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_DMA_IRQHandler+0x6c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x678>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_DMA_IRQHandler+0x6cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d12b      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x6d0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	e02a      	b.n	800250c <HAL_DMA_IRQHandler+0x6e4>
 80024b6:	bf00      	nop
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8087 	beq.w	8002620 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2220      	movs	r2, #32
 800251c:	409a      	lsls	r2, r3
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b04      	cmp	r3, #4
 800252c:	d139      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0216 	bic.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_DMA_IRQHandler+0x736>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	223f      	movs	r2, #63	; 0x3f
 8002578:	409a      	lsls	r2, r3
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 834a 	beq.w	8002c2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
          }
          return;
 80025a0:	e344      	b.n	8002c2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02c      	beq.n	8002620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
 80025ce:	e027      	b.n	8002620 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
 80025e0:	e01e      	b.n	8002620 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10f      	bne.n	8002610 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0210 	bic.w	r2, r2, #16
 80025fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8306 	beq.w	8002c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8088 	beq.w	8002748 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_DMA_IRQHandler+0xa08>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d04a      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_DMA_IRQHandler+0xa0c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d045      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	; (8002838 <HAL_DMA_IRQHandler+0xa10>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d040      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a76      	ldr	r2, [pc, #472]	; (800283c <HAL_DMA_IRQHandler+0xa14>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d03b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a74      	ldr	r2, [pc, #464]	; (8002840 <HAL_DMA_IRQHandler+0xa18>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d036      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_DMA_IRQHandler+0xa1c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d031      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_DMA_IRQHandler+0xa20>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02c      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	; (800284c <HAL_DMA_IRQHandler+0xa24>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d027      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_DMA_IRQHandler+0xa28>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d022      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <HAL_DMA_IRQHandler+0xa2c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d01d      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_DMA_IRQHandler+0xa30>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d018      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_DMA_IRQHandler+0xa34>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	; (8002860 <HAL_DMA_IRQHandler+0xa38>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00e      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a67      	ldr	r2, [pc, #412]	; (8002864 <HAL_DMA_IRQHandler+0xa3c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d009      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_DMA_IRQHandler+0xa40>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x8b8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a64      	ldr	r2, [pc, #400]	; (800286c <HAL_DMA_IRQHandler+0xa44>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d108      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x8ca>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e007      	b.n	8002702 <HAL_DMA_IRQHandler+0x8da>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	429a      	cmp	r2, r3
 800270c:	d307      	bcc.n	800271e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f2      	bne.n	8002702 <HAL_DMA_IRQHandler+0x8da>
 800271c:	e000      	b.n	8002720 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800271e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002736:	e003      	b.n	8002740 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8272 	beq.w	8002c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
 800275a:	e26c      	b.n	8002c36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a43      	ldr	r2, [pc, #268]	; (8002870 <HAL_DMA_IRQHandler+0xa48>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d022      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a42      	ldr	r2, [pc, #264]	; (8002874 <HAL_DMA_IRQHandler+0xa4c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d01d      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a40      	ldr	r2, [pc, #256]	; (8002878 <HAL_DMA_IRQHandler+0xa50>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d018      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3f      	ldr	r2, [pc, #252]	; (800287c <HAL_DMA_IRQHandler+0xa54>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3d      	ldr	r2, [pc, #244]	; (8002880 <HAL_DMA_IRQHandler+0xa58>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <HAL_DMA_IRQHandler+0xa5c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <HAL_DMA_IRQHandler+0xa60>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_IRQHandler+0x984>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <HAL_DMA_IRQHandler+0xa64>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x988>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_IRQHandler+0x98a>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 823f 	beq.w	8002c36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2204      	movs	r2, #4
 80027ca:	409a      	lsls	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80cd 	beq.w	8002970 <HAL_DMA_IRQHandler+0xb48>
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80c7 	beq.w	8002970 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2204      	movs	r2, #4
 80027ec:	409a      	lsls	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d049      	beq.n	8002890 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8210 	beq.w	8002c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002818:	e20a      	b.n	8002c30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8206 	beq.w	8002c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800282c:	e200      	b.n	8002c30 <HAL_DMA_IRQHandler+0xe08>
 800282e:	bf00      	nop
 8002830:	40020010 	.word	0x40020010
 8002834:	40020028 	.word	0x40020028
 8002838:	40020040 	.word	0x40020040
 800283c:	40020058 	.word	0x40020058
 8002840:	40020070 	.word	0x40020070
 8002844:	40020088 	.word	0x40020088
 8002848:	400200a0 	.word	0x400200a0
 800284c:	400200b8 	.word	0x400200b8
 8002850:	40020410 	.word	0x40020410
 8002854:	40020428 	.word	0x40020428
 8002858:	40020440 	.word	0x40020440
 800285c:	40020458 	.word	0x40020458
 8002860:	40020470 	.word	0x40020470
 8002864:	40020488 	.word	0x40020488
 8002868:	400204a0 	.word	0x400204a0
 800286c:	400204b8 	.word	0x400204b8
 8002870:	58025408 	.word	0x58025408
 8002874:	5802541c 	.word	0x5802541c
 8002878:	58025430 	.word	0x58025430
 800287c:	58025444 	.word	0x58025444
 8002880:	58025458 	.word	0x58025458
 8002884:	5802546c 	.word	0x5802546c
 8002888:	58025480 	.word	0x58025480
 800288c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d160      	bne.n	800295c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7f      	ldr	r2, [pc, #508]	; (8002a9c <HAL_DMA_IRQHandler+0xc74>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <HAL_DMA_IRQHandler+0xc78>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7c      	ldr	r2, [pc, #496]	; (8002aa4 <HAL_DMA_IRQHandler+0xc7c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7a      	ldr	r2, [pc, #488]	; (8002aa8 <HAL_DMA_IRQHandler+0xc80>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a79      	ldr	r2, [pc, #484]	; (8002aac <HAL_DMA_IRQHandler+0xc84>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a77      	ldr	r2, [pc, #476]	; (8002ab0 <HAL_DMA_IRQHandler+0xc88>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a76      	ldr	r2, [pc, #472]	; (8002ab4 <HAL_DMA_IRQHandler+0xc8c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a74      	ldr	r2, [pc, #464]	; (8002ab8 <HAL_DMA_IRQHandler+0xc90>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <HAL_DMA_IRQHandler+0xc94>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a71      	ldr	r2, [pc, #452]	; (8002ac0 <HAL_DMA_IRQHandler+0xc98>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a70      	ldr	r2, [pc, #448]	; (8002ac4 <HAL_DMA_IRQHandler+0xc9c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_DMA_IRQHandler+0xca0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6d      	ldr	r2, [pc, #436]	; (8002acc <HAL_DMA_IRQHandler+0xca4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a6b      	ldr	r2, [pc, #428]	; (8002ad0 <HAL_DMA_IRQHandler+0xca8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <HAL_DMA_IRQHandler+0xcac>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_IRQHandler+0xb12>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_DMA_IRQHandler+0xcb0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d108      	bne.n	800294c <HAL_DMA_IRQHandler+0xb24>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e007      	b.n	800295c <HAL_DMA_IRQHandler+0xb34>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8165 	beq.w	8002c30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800296e:	e15f      	b.n	8002c30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2202      	movs	r2, #2
 800297a:	409a      	lsls	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80c5 	beq.w	8002b10 <HAL_DMA_IRQHandler+0xce8>
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80bf 	beq.w	8002b10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2202      	movs	r2, #2
 800299c:	409a      	lsls	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d018      	beq.n	80029de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 813a 	beq.w	8002c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029c8:	e134      	b.n	8002c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8130 	beq.w	8002c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029dc:	e12a      	b.n	8002c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 8089 	bne.w	8002afc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_DMA_IRQHandler+0xc74>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_DMA_IRQHandler+0xc78>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_DMA_IRQHandler+0xc7c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_DMA_IRQHandler+0xc80>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_DMA_IRQHandler+0xc84>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <HAL_DMA_IRQHandler+0xc88>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <HAL_DMA_IRQHandler+0xc8c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_DMA_IRQHandler+0xc90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_DMA_IRQHandler+0xc94>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_DMA_IRQHandler+0xc98>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_DMA_IRQHandler+0xc9c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_DMA_IRQHandler+0xca0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_DMA_IRQHandler+0xca4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_DMA_IRQHandler+0xca8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_DMA_IRQHandler+0xcac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_IRQHandler+0xc62>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_DMA_IRQHandler+0xcb0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d128      	bne.n	8002adc <HAL_DMA_IRQHandler+0xcb4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0214 	bic.w	r2, r2, #20
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e027      	b.n	8002aec <HAL_DMA_IRQHandler+0xcc4>
 8002a9c:	40020010 	.word	0x40020010
 8002aa0:	40020028 	.word	0x40020028
 8002aa4:	40020040 	.word	0x40020040
 8002aa8:	40020058 	.word	0x40020058
 8002aac:	40020070 	.word	0x40020070
 8002ab0:	40020088 	.word	0x40020088
 8002ab4:	400200a0 	.word	0x400200a0
 8002ab8:	400200b8 	.word	0x400200b8
 8002abc:	40020410 	.word	0x40020410
 8002ac0:	40020428 	.word	0x40020428
 8002ac4:	40020440 	.word	0x40020440
 8002ac8:	40020458 	.word	0x40020458
 8002acc:	40020470 	.word	0x40020470
 8002ad0:	40020488 	.word	0x40020488
 8002ad4:	400204a0 	.word	0x400204a0
 8002ad8:	400204b8 	.word	0x400204b8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020a 	bic.w	r2, r2, #10
 8002aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8097 	beq.w	8002c34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b0e:	e091      	b.n	8002c34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2208      	movs	r2, #8
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8088 	beq.w	8002c36 <HAL_DMA_IRQHandler+0xe0e>
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8082 	beq.w	8002c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a41      	ldr	r2, [pc, #260]	; (8002c3c <HAL_DMA_IRQHandler+0xe14>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04a      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <HAL_DMA_IRQHandler+0xe18>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d045      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a3e      	ldr	r2, [pc, #248]	; (8002c44 <HAL_DMA_IRQHandler+0xe1c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d040      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <HAL_DMA_IRQHandler+0xe20>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d03b      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	; (8002c4c <HAL_DMA_IRQHandler+0xe24>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d036      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a39      	ldr	r2, [pc, #228]	; (8002c50 <HAL_DMA_IRQHandler+0xe28>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_DMA_IRQHandler+0xe2c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d02c      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <HAL_DMA_IRQHandler+0xe30>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d027      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <HAL_DMA_IRQHandler+0xe34>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a33      	ldr	r2, [pc, #204]	; (8002c60 <HAL_DMA_IRQHandler+0xe38>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <HAL_DMA_IRQHandler+0xe3c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a30      	ldr	r2, [pc, #192]	; (8002c68 <HAL_DMA_IRQHandler+0xe40>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <HAL_DMA_IRQHandler+0xe44>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <HAL_DMA_IRQHandler+0xe48>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <HAL_DMA_IRQHandler+0xe4c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xdaa>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <HAL_DMA_IRQHandler+0xe50>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <HAL_DMA_IRQHandler+0xdbc>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 021c 	bic.w	r2, r2, #28
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e007      	b.n	8002bf4 <HAL_DMA_IRQHandler+0xdcc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020e 	bic.w	r2, r2, #14
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e004      	b.n	8002c36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002c2c:	bf00      	nop
 8002c2e:	e002      	b.n	8002c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40020010 	.word	0x40020010
 8002c40:	40020028 	.word	0x40020028
 8002c44:	40020040 	.word	0x40020040
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	40020088 	.word	0x40020088
 8002c54:	400200a0 	.word	0x400200a0
 8002c58:	400200b8 	.word	0x400200b8
 8002c5c:	40020410 	.word	0x40020410
 8002c60:	40020428 	.word	0x40020428
 8002c64:	40020440 	.word	0x40020440
 8002c68:	40020458 	.word	0x40020458
 8002c6c:	40020470 	.word	0x40020470
 8002c70:	40020488 	.word	0x40020488
 8002c74:	400204a0 	.word	0x400204a0
 8002c78:	400204b8 	.word	0x400204b8

08002c7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <DMA_SetConfig+0x21c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d072      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a7d      	ldr	r2, [pc, #500]	; (8002e9c <DMA_SetConfig+0x220>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d06d      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7c      	ldr	r2, [pc, #496]	; (8002ea0 <DMA_SetConfig+0x224>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d068      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <DMA_SetConfig+0x228>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d063      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a79      	ldr	r2, [pc, #484]	; (8002ea8 <DMA_SetConfig+0x22c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d05e      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a77      	ldr	r2, [pc, #476]	; (8002eac <DMA_SetConfig+0x230>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d059      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a76      	ldr	r2, [pc, #472]	; (8002eb0 <DMA_SetConfig+0x234>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d054      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a74      	ldr	r2, [pc, #464]	; (8002eb4 <DMA_SetConfig+0x238>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d04f      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a73      	ldr	r2, [pc, #460]	; (8002eb8 <DMA_SetConfig+0x23c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04a      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a71      	ldr	r2, [pc, #452]	; (8002ebc <DMA_SetConfig+0x240>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d045      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a70      	ldr	r2, [pc, #448]	; (8002ec0 <DMA_SetConfig+0x244>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d040      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <DMA_SetConfig+0x248>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d03b      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6d      	ldr	r2, [pc, #436]	; (8002ec8 <DMA_SetConfig+0x24c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d036      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6b      	ldr	r2, [pc, #428]	; (8002ecc <DMA_SetConfig+0x250>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <DMA_SetConfig+0x254>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02c      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <DMA_SetConfig+0x258>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d027      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <DMA_SetConfig+0x25c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <DMA_SetConfig+0x260>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a64      	ldr	r2, [pc, #400]	; (8002ee0 <DMA_SetConfig+0x264>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a62      	ldr	r2, [pc, #392]	; (8002ee4 <DMA_SetConfig+0x268>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a61      	ldr	r2, [pc, #388]	; (8002ee8 <DMA_SetConfig+0x26c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <DMA_SetConfig+0x270>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5e      	ldr	r2, [pc, #376]	; (8002ef0 <DMA_SetConfig+0x274>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <DMA_SetConfig+0x10a>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <DMA_SetConfig+0x278>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <DMA_SetConfig+0x10e>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <DMA_SetConfig+0x110>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002daa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <DMA_SetConfig+0x21c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <DMA_SetConfig+0x220>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a36      	ldr	r2, [pc, #216]	; (8002ea0 <DMA_SetConfig+0x224>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <DMA_SetConfig+0x228>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <DMA_SetConfig+0x22c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <DMA_SetConfig+0x230>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <DMA_SetConfig+0x234>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <DMA_SetConfig+0x238>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2d      	ldr	r2, [pc, #180]	; (8002eb8 <DMA_SetConfig+0x23c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <DMA_SetConfig+0x240>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <DMA_SetConfig+0x244>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <DMA_SetConfig+0x248>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <DMA_SetConfig+0x24c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <DMA_SetConfig+0x250>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <DMA_SetConfig+0x254>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <DMA_SetConfig+0x1d0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <DMA_SetConfig+0x258>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <DMA_SetConfig+0x1d4>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <DMA_SetConfig+0x1d6>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d059      	beq.n	8002f0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	223f      	movs	r2, #63	; 0x3f
 8002e60:	409a      	lsls	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d138      	bne.n	8002ef8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e96:	e086      	b.n	8002fa6 <DMA_SetConfig+0x32a>
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	58025408 	.word	0x58025408
 8002edc:	5802541c 	.word	0x5802541c
 8002ee0:	58025430 	.word	0x58025430
 8002ee4:	58025444 	.word	0x58025444
 8002ee8:	58025458 	.word	0x58025458
 8002eec:	5802546c 	.word	0x5802546c
 8002ef0:	58025480 	.word	0x58025480
 8002ef4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	e04d      	b.n	8002fa6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <DMA_SetConfig+0x338>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <DMA_SetConfig+0x33c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <DMA_SetConfig+0x340>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <DMA_SetConfig+0x344>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <DMA_SetConfig+0x348>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <DMA_SetConfig+0x34c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <DMA_SetConfig+0x350>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <DMA_SetConfig+0x2de>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <DMA_SetConfig+0x354>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <DMA_SetConfig+0x2e2>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <DMA_SetConfig+0x2e4>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d108      	bne.n	8002f96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	60da      	str	r2, [r3, #12]
}
 8002f94:	e007      	b.n	8002fa6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	58025408 	.word	0x58025408
 8002fb8:	5802541c 	.word	0x5802541c
 8002fbc:	58025430 	.word	0x58025430
 8002fc0:	58025444 	.word	0x58025444
 8002fc4:	58025458 	.word	0x58025458
 8002fc8:	5802546c 	.word	0x5802546c
 8002fcc:	58025480 	.word	0x58025480
 8002fd0:	58025494 	.word	0x58025494

08002fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a42      	ldr	r2, [pc, #264]	; (80030ec <DMA_CalcBaseAndBitshift+0x118>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04a      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a41      	ldr	r2, [pc, #260]	; (80030f0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d045      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3f      	ldr	r2, [pc, #252]	; (80030f4 <DMA_CalcBaseAndBitshift+0x120>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d040      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3e      	ldr	r2, [pc, #248]	; (80030f8 <DMA_CalcBaseAndBitshift+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d03b      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <DMA_CalcBaseAndBitshift+0x128>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d036      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <DMA_CalcBaseAndBitshift+0x12c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d031      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a39      	ldr	r2, [pc, #228]	; (8003104 <DMA_CalcBaseAndBitshift+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02c      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a38      	ldr	r2, [pc, #224]	; (8003108 <DMA_CalcBaseAndBitshift+0x134>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d027      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a36      	ldr	r2, [pc, #216]	; (800310c <DMA_CalcBaseAndBitshift+0x138>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a35      	ldr	r2, [pc, #212]	; (8003110 <DMA_CalcBaseAndBitshift+0x13c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <DMA_CalcBaseAndBitshift+0x140>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a32      	ldr	r2, [pc, #200]	; (8003118 <DMA_CalcBaseAndBitshift+0x144>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a30      	ldr	r2, [pc, #192]	; (800311c <DMA_CalcBaseAndBitshift+0x148>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <DMA_CalcBaseAndBitshift+0x14c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <DMA_CalcBaseAndBitshift+0x150>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <DMA_CalcBaseAndBitshift+0xa8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <DMA_CalcBaseAndBitshift+0x154>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <DMA_CalcBaseAndBitshift+0xac>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <DMA_CalcBaseAndBitshift+0xae>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d024      	beq.n	80030d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3b10      	subs	r3, #16
 800308e:	4a27      	ldr	r2, [pc, #156]	; (800312c <DMA_CalcBaseAndBitshift+0x158>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <DMA_CalcBaseAndBitshift+0x15c>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d908      	bls.n	80030c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <DMA_CalcBaseAndBitshift+0x160>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	1d1a      	adds	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	; 0x58
 80030be:	e00d      	b.n	80030dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <DMA_CalcBaseAndBitshift+0x160>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6593      	str	r3, [r2, #88]	; 0x58
 80030ce:	e005      	b.n	80030dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	aaaaaaab 	.word	0xaaaaaaab
 8003130:	08004e5c 	.word	0x08004e5c
 8003134:	fffffc00 	.word	0xfffffc00

08003138 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d120      	bne.n	800318e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2b03      	cmp	r3, #3
 8003152:	d858      	bhi.n	8003206 <DMA_CheckFifoParam+0xce>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <DMA_CheckFifoParam+0x24>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	0800316d 	.word	0x0800316d
 8003160:	0800317f 	.word	0x0800317f
 8003164:	0800316d 	.word	0x0800316d
 8003168:	08003207 	.word	0x08003207
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d048      	beq.n	800320a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800317c:	e045      	b.n	800320a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003186:	d142      	bne.n	800320e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800318c:	e03f      	b.n	800320e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d123      	bne.n	80031e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	2b03      	cmp	r3, #3
 800319e:	d838      	bhi.n	8003212 <DMA_CheckFifoParam+0xda>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <DMA_CheckFifoParam+0x70>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031bf 	.word	0x080031bf
 80031b0:	080031b9 	.word	0x080031b9
 80031b4:	080031d1 	.word	0x080031d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
        break;
 80031bc:	e030      	b.n	8003220 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d025      	beq.n	8003216 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ce:	e022      	b.n	8003216 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031d8:	d11f      	bne.n	800321a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031de:	e01c      	b.n	800321a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d902      	bls.n	80031ee <DMA_CheckFifoParam+0xb6>
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80031ec:	e018      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
        break;
 80031f2:	e015      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
    break;
 8003204:	e00b      	b.n	800321e <DMA_CheckFifoParam+0xe6>
        break;
 8003206:	bf00      	nop
 8003208:	e00a      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        break;
 800320a:	bf00      	nop
 800320c:	e008      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        break;
 800320e:	bf00      	nop
 8003210:	e006      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        break;
 8003212:	bf00      	nop
 8003214:	e004      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
        break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <DMA_CheckFifoParam+0xe8>
    break;
 800321e:	bf00      	nop
    }
  }

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a38      	ldr	r2, [pc, #224]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a36      	ldr	r2, [pc, #216]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a33      	ldr	r2, [pc, #204]	; (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a32      	ldr	r2, [pc, #200]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a30      	ldr	r2, [pc, #192]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01a      	beq.n	80032ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b08      	subs	r3, #8
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a24      	ldr	r2, [pc, #144]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032cc:	e024      	b.n	8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3b10      	subs	r3, #16
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d806      	bhi.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d902      	bls.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3308      	adds	r3, #8
 80032f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003308:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	58025408 	.word	0x58025408
 8003328:	5802541c 	.word	0x5802541c
 800332c:	58025430 	.word	0x58025430
 8003330:	58025444 	.word	0x58025444
 8003334:	58025458 	.word	0x58025458
 8003338:	5802546c 	.word	0x5802546c
 800333c:	58025480 	.word	0x58025480
 8003340:	58025494 	.word	0x58025494
 8003344:	cccccccd 	.word	0xcccccccd
 8003348:	16009600 	.word	0x16009600
 800334c:	58025880 	.word	0x58025880
 8003350:	aaaaaaab 	.word	0xaaaaaaab
 8003354:	400204b8 	.word	0x400204b8
 8003358:	4002040f 	.word	0x4002040f
 800335c:	10008200 	.word	0x10008200
 8003360:	40020880 	.word	0x40020880

08003364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d04a      	beq.n	8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d847      	bhi.n	8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a24      	ldr	r2, [pc, #144]	; (8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	461a      	mov	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80033ec:	671a      	str	r2, [r3, #112]	; 0x70
 80033ee:	e009      	b.n	8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003402:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	58025408 	.word	0x58025408
 8003420:	5802541c 	.word	0x5802541c
 8003424:	58025430 	.word	0x58025430
 8003428:	58025444 	.word	0x58025444
 800342c:	58025458 	.word	0x58025458
 8003430:	5802546c 	.word	0x5802546c
 8003434:	58025480 	.word	0x58025480
 8003438:	58025494 	.word	0x58025494
 800343c:	1600963f 	.word	0x1600963f
 8003440:	58025940 	.word	0x58025940
 8003444:	1000823f 	.word	0x1000823f
 8003448:	40020940 	.word	0x40020940

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_GPIO_Init+0x234>)
 800345c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800345e:	e194      	b.n	800378a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8186 	beq.w	8003784 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d005      	beq.n	8003490 <HAL_GPIO_Init+0x44>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d130      	bne.n	80034f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034c6:	2201      	movs	r2, #1
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 0201 	and.w	r2, r3, #1
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d017      	beq.n	800352e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	2203      	movs	r2, #3
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d123      	bne.n	8003582 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	08da      	lsrs	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0203 	and.w	r2, r3, #3
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80e0 	beq.w	8003784 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_GPIO_Init+0x238>)
 80035c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035ca:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <HAL_GPIO_Init+0x238>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_GPIO_Init+0x238>)
 80035d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035e2:	4a29      	ldr	r2, [pc, #164]	; (8003688 <HAL_GPIO_Init+0x23c>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_GPIO_Init+0x240>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d052      	beq.n	80036b4 <HAL_GPIO_Init+0x268>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_GPIO_Init+0x244>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_GPIO_Init+0x22e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_GPIO_Init+0x248>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <HAL_GPIO_Init+0x22a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_GPIO_Init+0x24c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d025      	beq.n	8003672 <HAL_GPIO_Init+0x226>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_GPIO_Init+0x250>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01f      	beq.n	800366e <HAL_GPIO_Init+0x222>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_GPIO_Init+0x254>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d019      	beq.n	800366a <HAL_GPIO_Init+0x21e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_GPIO_Init+0x258>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_GPIO_Init+0x21a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_GPIO_Init+0x25c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00d      	beq.n	8003662 <HAL_GPIO_Init+0x216>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_GPIO_Init+0x260>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <HAL_GPIO_Init+0x212>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_GPIO_Init+0x264>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_GPIO_Init+0x20e>
 8003656:	2309      	movs	r3, #9
 8003658:	e02d      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800365a:	230a      	movs	r3, #10
 800365c:	e02b      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800365e:	2308      	movs	r3, #8
 8003660:	e029      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 8003662:	2307      	movs	r3, #7
 8003664:	e027      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 8003666:	2306      	movs	r3, #6
 8003668:	e025      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800366a:	2305      	movs	r3, #5
 800366c:	e023      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800366e:	2304      	movs	r3, #4
 8003670:	e021      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 8003672:	2303      	movs	r3, #3
 8003674:	e01f      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 8003676:	2302      	movs	r3, #2
 8003678:	e01d      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800367a:	2301      	movs	r3, #1
 800367c:	e01b      	b.n	80036b6 <HAL_GPIO_Init+0x26a>
 800367e:	bf00      	nop
 8003680:	58000080 	.word	0x58000080
 8003684:	58024400 	.word	0x58024400
 8003688:	58000400 	.word	0x58000400
 800368c:	58020000 	.word	0x58020000
 8003690:	58020400 	.word	0x58020400
 8003694:	58020800 	.word	0x58020800
 8003698:	58020c00 	.word	0x58020c00
 800369c:	58021000 	.word	0x58021000
 80036a0:	58021400 	.word	0x58021400
 80036a4:	58021800 	.word	0x58021800
 80036a8:	58021c00 	.word	0x58021c00
 80036ac:	58022000 	.word	0x58022000
 80036b0:	58022400 	.word	0x58022400
 80036b4:	2300      	movs	r3, #0
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f002 0203 	and.w	r2, r2, #3
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	4093      	lsls	r3, r2
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c6:	4938      	ldr	r1, [pc, #224]	; (80037a8 <HAL_GPIO_Init+0x35c>)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	3302      	adds	r3, #2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f ae63 	bne.w	8003460 <HAL_GPIO_Init+0x14>
  }
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3724      	adds	r7, #36	; 0x24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	58000400 	.word	0x58000400

080037ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_PWREx_ConfigSupply+0x70>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d00a      	beq.n	80037d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_PWREx_ConfigSupply+0x70>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e01f      	b.n	8003812 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e01d      	b.n	8003812 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_PWREx_ConfigSupply+0x70>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	490f      	ldr	r1, [pc, #60]	; (800381c <HAL_PWREx_ConfigSupply+0x70>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037e6:	f7fd f8fb 	bl	80009e0 <HAL_GetTick>
 80037ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037ec:	e009      	b.n	8003802 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ee:	f7fd f8f7 	bl	80009e0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037fc:	d901      	bls.n	8003802 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e007      	b.n	8003812 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_PWREx_ConfigSupply+0x70>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	d1ee      	bne.n	80037ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	58024800 	.word	0x58024800

08003820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f000 bc48 	b.w	80040c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8088 	beq.w	8003952 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384c:	4b96      	ldr	r3, [pc, #600]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	2b10      	cmp	r3, #16
 8003856:	d007      	beq.n	8003868 <HAL_RCC_OscConfig+0x48>
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	2b18      	cmp	r3, #24
 800385c:	d111      	bne.n	8003882 <HAL_RCC_OscConfig+0x62>
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d06d      	beq.n	8003950 <HAL_RCC_OscConfig+0x130>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d169      	bne.n	8003950 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f000 bc21 	b.w	80040c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x7a>
 800388c:	4b86      	ldr	r3, [pc, #536]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a85      	ldr	r2, [pc, #532]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e02e      	b.n	80038f8 <HAL_RCC_OscConfig+0xd8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x9c>
 80038a2:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a80      	ldr	r2, [pc, #512]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xd8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0xc0>
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a74      	ldr	r2, [pc, #464]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xd8>
 80038e0:	4b71      	ldr	r3, [pc, #452]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a70      	ldr	r2, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6d      	ldr	r2, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd f86e 	bl	80009e0 <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd f86a 	bl	80009e0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e3d4      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xe8>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd f85a 	bl	80009e0 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd f856 	bl	80009e0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e3c0      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x110>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80ca 	beq.w	8003af4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003968:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800396a:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_RCC_OscConfig+0x166>
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2b18      	cmp	r3, #24
 800397a:	d156      	bne.n	8003a2a <HAL_RCC_OscConfig+0x20a>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d151      	bne.n	8003a2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003986:	4b48      	ldr	r3, [pc, #288]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x17e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e392      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800399e:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0219 	bic.w	r2, r3, #25
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	493f      	ldr	r1, [pc, #252]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd f816 	bl	80009e0 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fd f812 	bl	80009e0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e37c      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d6:	f7fd f80f 	bl	80009f8 <HAL_GetREVID>
 80039da:	4603      	mov	r3, r0
 80039dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d817      	bhi.n	8003a14 <HAL_RCC_OscConfig+0x1f4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d108      	bne.n	80039fe <HAL_RCC_OscConfig+0x1de>
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039fc:	e07a      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	031b      	lsls	r3, r3, #12
 8003a0c:	4926      	ldr	r1, [pc, #152]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a12:	e06f      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	e064      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d047      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 0219 	bic.w	r2, r3, #25
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fc ffcc 	bl	80009e0 <HAL_GetTick>
 8003a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fc ffc8 	bl	80009e0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e332      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	f7fc ffc5 	bl	80009f8 <HAL_GetREVID>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d819      	bhi.n	8003aac <HAL_RCC_OscConfig+0x28c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d108      	bne.n	8003a92 <HAL_RCC_OscConfig+0x272>
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a88:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	6053      	str	r3, [r2, #4]
 8003a90:	e030      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	031b      	lsls	r3, r3, #12
 8003aa0:	4901      	ldr	r1, [pc, #4]	; (8003aa8 <HAL_RCC_OscConfig+0x288>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
 8003aa6:	e025      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	4b9a      	ldr	r3, [pc, #616]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	4997      	ldr	r1, [pc, #604]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
 8003ac0:	e018      	b.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b95      	ldr	r3, [pc, #596]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a94      	ldr	r2, [pc, #592]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fc ff87 	bl	80009e0 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fc ff83 	bl	80009e0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e2ed      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae8:	4b8b      	ldr	r3, [pc, #556]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a9 	beq.w	8003c54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b02:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b0c:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d007      	beq.n	8003b28 <HAL_RCC_OscConfig+0x308>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b18      	cmp	r3, #24
 8003b1c:	d13a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x374>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d135      	bne.n	8003b94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b28:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x320>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e2c1      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b40:	f7fc ff5a 	bl	80009f8 <HAL_GetREVID>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d817      	bhi.n	8003b7e <HAL_RCC_OscConfig+0x35e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x348>
 8003b56:	4b70      	ldr	r3, [pc, #448]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b5e:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b66:	e075      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b68:	4b6b      	ldr	r3, [pc, #428]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	069b      	lsls	r3, r3, #26
 8003b76:	4968      	ldr	r1, [pc, #416]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b7c:	e06a      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7e:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	061b      	lsls	r3, r3, #24
 8003b8c:	4962      	ldr	r1, [pc, #392]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b92:	e05f      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d042      	beq.n	8003c22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fc ff1a 	bl	80009e0 <HAL_GetTick>
 8003bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bb0:	f7fc ff16 	bl	80009e0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e280      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bce:	f7fc ff13 	bl	80009f8 <HAL_GetREVID>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d817      	bhi.n	8003c0c <HAL_RCC_OscConfig+0x3ec>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d108      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3d6>
 8003be4:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bec:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bf2:	6053      	str	r3, [r2, #4]
 8003bf4:	e02e      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
 8003bf6:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	069b      	lsls	r3, r3, #26
 8003c04:	4944      	ldr	r1, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
 8003c0a:	e023      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	493f      	ldr	r1, [pc, #252]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
 8003c20:	e018      	b.n	8003c54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3c      	ldr	r2, [pc, #240]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fc fed7 	bl	80009e0 <HAL_GetTick>
 8003c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c36:	f7fc fed3 	bl	80009e0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e23d      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c48:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d036      	beq.n	8003cce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d019      	beq.n	8003c9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c68:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fc feb4 	bl	80009e0 <HAL_GetTick>
 8003c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fc feb0 	bl	80009e0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e21a      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x45c>
 8003c9a:	e018      	b.n	8003cce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fc fe9a 	bl	80009e0 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fc fe96 	bl	80009e0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e200      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d039      	beq.n	8003d4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cee:	f7fc fe77 	bl	80009e0 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf6:	f7fc fe73 	bl	80009e0 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1dd      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x4d6>
 8003d14:	e01b      	b.n	8003d4e <HAL_RCC_OscConfig+0x52e>
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d1c:	4b9b      	ldr	r3, [pc, #620]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a9a      	ldr	r2, [pc, #616]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d28:	f7fc fe5a 	bl	80009e0 <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d30:	f7fc fe56 	bl	80009e0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1c0      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d42:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8081 	beq.w	8003e5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d5c:	4b8c      	ldr	r3, [pc, #560]	; (8003f90 <HAL_RCC_OscConfig+0x770>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a8b      	ldr	r2, [pc, #556]	; (8003f90 <HAL_RCC_OscConfig+0x770>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fc fe3a 	bl	80009e0 <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fc fe36 	bl	80009e0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1a0      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d82:	4b83      	ldr	r3, [pc, #524]	; (8003f90 <HAL_RCC_OscConfig+0x770>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d106      	bne.n	8003da4 <HAL_RCC_OscConfig+0x584>
 8003d96:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e02d      	b.n	8003e00 <HAL_RCC_OscConfig+0x5e0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x5a6>
 8003dac:	4b77      	ldr	r3, [pc, #476]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a76      	ldr	r2, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b74      	ldr	r3, [pc, #464]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a73      	ldr	r2, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	f023 0304 	bic.w	r3, r3, #4
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e01c      	b.n	8003e00 <HAL_RCC_OscConfig+0x5e0>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c8>
 8003dce:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a6e      	ldr	r2, [pc, #440]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dda:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0x5e0>
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a64      	ldr	r2, [pc, #400]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fc fdea 	bl	80009e0 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fc fde6 	bl	80009e0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e14e      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e26:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ee      	beq.n	8003e10 <HAL_RCC_OscConfig+0x5f0>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fc fdd4 	bl	80009e0 <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fc fdd0 	bl	80009e0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e138      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e52:	4b4e      	ldr	r3, [pc, #312]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ee      	bne.n	8003e3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 812d 	beq.w	80040c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e70:	2b18      	cmp	r3, #24
 8003e72:	f000 80bd 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	f040 809e 	bne.w	8003fbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a41      	ldr	r2, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fc fda8 	bl	80009e0 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fc fda4 	bl	80009e0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e10e      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCC_OscConfig+0x774>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	4931      	ldr	r1, [pc, #196]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	628b      	str	r3, [r1, #40]	; 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	3b01      	subs	r3, #1
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003efc:	4923      	ldr	r1, [pc, #140]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_RCC_OscConfig+0x778>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	491b      	ldr	r1, [pc, #108]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f023 020c 	bic.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f023 0202 	bic.w	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0x76c>)
 8003f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fc fd2d 	bl	80009e0 <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f88:	e011      	b.n	8003fae <HAL_RCC_OscConfig+0x78e>
 8003f8a:	bf00      	nop
 8003f8c:	58024400 	.word	0x58024400
 8003f90:	58024800 	.word	0x58024800
 8003f94:	fffffc0c 	.word	0xfffffc0c
 8003f98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fc fd20 	bl	80009e0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e08a      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fae:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x77c>
 8003fba:	e082      	b.n	80040c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fc fd0a 	bl	80009e0 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fc fd06 	bl	80009e0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e070      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x7b0>
 8003fee:	e068      	b.n	80040c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ff0:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b01      	cmp	r3, #1
 8004002:	d031      	beq.n	8004068 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0203 	and.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d12a      	bne.n	8004068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d122      	bne.n	8004068 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d11a      	bne.n	8004068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	0a5b      	lsrs	r3, r3, #9
 8004036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d111      	bne.n	8004068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e02b      	b.n	80040c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004076:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	d01f      	beq.n	80040c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a11      	ldr	r2, [pc, #68]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800408e:	f7fc fca7 	bl	80009e0 <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004094:	bf00      	nop
 8004096:	f7fc fca3 	bl	80009e0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	4293      	cmp	r3, r2
 80040a0:	d0f9      	beq.n	8004096 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCC_OscConfig+0x8b0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ae:	00d2      	lsls	r2, r2, #3
 80040b0:	4906      	ldr	r1, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_RCC_OscConfig+0x8ac>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	58024400 	.word	0x58024400
 80040d0:	ffff0007 	.word	0xffff0007

080040d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e19c      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b8a      	ldr	r3, [pc, #552]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b87      	ldr	r3, [pc, #540]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 020f 	bic.w	r2, r3, #15
 80040fe:	4985      	ldr	r1, [pc, #532]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b83      	ldr	r3, [pc, #524]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e184      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	4b7b      	ldr	r3, [pc, #492]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004130:	429a      	cmp	r2, r3
 8004132:	d908      	bls.n	8004146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004134:	4b78      	ldr	r3, [pc, #480]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4975      	ldr	r1, [pc, #468]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004142:	4313      	orrs	r3, r2
 8004144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	4b70      	ldr	r3, [pc, #448]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800415e:	429a      	cmp	r2, r3
 8004160:	d908      	bls.n	8004174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004162:	4b6d      	ldr	r3, [pc, #436]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	496a      	ldr	r1, [pc, #424]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	4b64      	ldr	r3, [pc, #400]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800418c:	429a      	cmp	r2, r3
 800418e:	d908      	bls.n	80041a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004190:	4b61      	ldr	r3, [pc, #388]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	495e      	ldr	r1, [pc, #376]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	4b59      	ldr	r3, [pc, #356]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d908      	bls.n	80041d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041be:	4b56      	ldr	r3, [pc, #344]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4953      	ldr	r1, [pc, #332]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b4d      	ldr	r3, [pc, #308]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d908      	bls.n	80041fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b4a      	ldr	r3, [pc, #296]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f023 020f 	bic.w	r2, r3, #15
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4947      	ldr	r1, [pc, #284]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d055      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800420a:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4940      	ldr	r1, [pc, #256]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004218:	4313      	orrs	r3, r2
 800421a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d107      	bne.n	8004234 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004224:	4b3c      	ldr	r3, [pc, #240]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d121      	bne.n	8004274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0f6      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d107      	bne.n	800424c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d115      	bne.n	8004274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0ea      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004254:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0de      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0d6      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f023 0207 	bic.w	r2, r3, #7
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4925      	ldr	r1, [pc, #148]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fc fbab 	bl	80009e0 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428e:	f7fc fba7 	bl	80009e0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0be      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a4:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d1eb      	bne.n	800428e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d208      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f023 020f 	bic.w	r2, r3, #15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	490e      	ldr	r1, [pc, #56]	; (8004318 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d214      	bcs.n	800431c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 020f 	bic.w	r2, r3, #15
 80042fa:	4906      	ldr	r1, [pc, #24]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e086      	b.n	8004422 <HAL_RCC_ClockConfig+0x34e>
 8004314:	52002000 	.word	0x52002000
 8004318:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	4b3f      	ldr	r3, [pc, #252]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004334:	429a      	cmp	r2, r3
 8004336:	d208      	bcs.n	800434a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004338:	4b3c      	ldr	r3, [pc, #240]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4939      	ldr	r1, [pc, #228]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 8004346:	4313      	orrs	r3, r2
 8004348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	4b34      	ldr	r3, [pc, #208]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004362:	429a      	cmp	r2, r3
 8004364:	d208      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	492e      	ldr	r1, [pc, #184]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 8004374:	4313      	orrs	r3, r2
 8004376:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	4922      	ldr	r1, [pc, #136]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043c2:	4b1a      	ldr	r3, [pc, #104]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4917      	ldr	r1, [pc, #92]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043d4:	f000 f834 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	4912      	ldr	r1, [pc, #72]	; (8004430 <HAL_RCC_ClockConfig+0x35c>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCC_ClockConfig+0x358>)
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <HAL_RCC_ClockConfig+0x35c>)
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x360>)
 800440a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x364>)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x368>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fa98 	bl	800094c <HAL_InitTick>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	58024400 	.word	0x58024400
 8004430:	08004e4c 	.word	0x08004e4c
 8004434:	24000044 	.word	0x24000044
 8004438:	24000040 	.word	0x24000040
 800443c:	24000048 	.word	0x24000048

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004446:	4bb3      	ldr	r3, [pc, #716]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800444e:	2b18      	cmp	r3, #24
 8004450:	f200 8155 	bhi.w	80046fe <HAL_RCC_GetSysClockFreq+0x2be>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	080044c1 	.word	0x080044c1
 8004460:	080046ff 	.word	0x080046ff
 8004464:	080046ff 	.word	0x080046ff
 8004468:	080046ff 	.word	0x080046ff
 800446c:	080046ff 	.word	0x080046ff
 8004470:	080046ff 	.word	0x080046ff
 8004474:	080046ff 	.word	0x080046ff
 8004478:	080046ff 	.word	0x080046ff
 800447c:	080044e7 	.word	0x080044e7
 8004480:	080046ff 	.word	0x080046ff
 8004484:	080046ff 	.word	0x080046ff
 8004488:	080046ff 	.word	0x080046ff
 800448c:	080046ff 	.word	0x080046ff
 8004490:	080046ff 	.word	0x080046ff
 8004494:	080046ff 	.word	0x080046ff
 8004498:	080046ff 	.word	0x080046ff
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080046ff 	.word	0x080046ff
 80044a4:	080046ff 	.word	0x080046ff
 80044a8:	080046ff 	.word	0x080046ff
 80044ac:	080046ff 	.word	0x080046ff
 80044b0:	080046ff 	.word	0x080046ff
 80044b4:	080046ff 	.word	0x080046ff
 80044b8:	080046ff 	.word	0x080046ff
 80044bc:	080044f3 	.word	0x080044f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c0:	4b94      	ldr	r3, [pc, #592]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044cc:	4b91      	ldr	r3, [pc, #580]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	4a90      	ldr	r2, [pc, #576]	; (8004718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044de:	e111      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044e0:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e2:	61bb      	str	r3, [r7, #24]
      break;
 80044e4:	e10e      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044e6:	4b8d      	ldr	r3, [pc, #564]	; (800471c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044e8:	61bb      	str	r3, [r7, #24]
      break;
 80044ea:	e10b      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044ec:	4b8c      	ldr	r3, [pc, #560]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044ee:	61bb      	str	r3, [r7, #24]
      break;
 80044f0:	e108      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044fc:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004506:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004508:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004512:	4b80      	ldr	r3, [pc, #512]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80e1 	beq.w	80046f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b02      	cmp	r3, #2
 800453a:	f000 8083 	beq.w	8004644 <HAL_RCC_GetSysClockFreq+0x204>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f200 80a1 	bhi.w	8004688 <HAL_RCC_GetSysClockFreq+0x248>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x114>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d056      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004552:	e099      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004554:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02d      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004560:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	4a6b      	ldr	r2, [pc, #428]	; (8004718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
 8004570:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a02 	vldr	s12, [r7, #8]
 800459e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045ba:	e087      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045fe:	e065      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800472c <HAL_RCC_GetSysClockFreq+0x2ec>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004642:	e043      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004686:	e021      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a26 	vldr	s13, [pc, #152]	; 800472c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	0a5b      	lsrs	r3, r3, #9
 80046d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d6:	3301      	adds	r3, #1
 80046d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	ee07 3a90 	vmov	s15, r3
 80046e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f0:	ee17 3a90 	vmov	r3, s15
 80046f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004700:	61bb      	str	r3, [r7, #24]
      break;
 8004702:	bf00      	nop
  }

  return sysclockfreq;
 8004704:	69bb      	ldr	r3, [r7, #24]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3724      	adds	r7, #36	; 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
 8004718:	03d09000 	.word	0x03d09000
 800471c:	003d0900 	.word	0x003d0900
 8004720:	017d7840 	.word	0x017d7840
 8004724:	46000000 	.word	0x46000000
 8004728:	4c742400 	.word	0x4c742400
 800472c:	4a742400 	.word	0x4a742400
 8004730:	4bbebc20 	.word	0x4bbebc20

08004734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e049      	b.n	80047da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fb ff9e 	bl	800069c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f000 f9e0 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d001      	beq.n	80047fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e04c      	b.n	8004896 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <HAL_TIM_Base_Start+0xc0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d01d      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <HAL_TIM_Base_Start+0xc4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <HAL_TIM_Base_Start+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_TIM_Base_Start+0xcc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_TIM_Base_Start+0xd0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_TIM_Base_Start+0xd4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_Base_Start+0x70>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_TIM_Base_Start+0xd8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d115      	bne.n	8004880 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_TIM_Base_Start+0xdc>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b06      	cmp	r3, #6
 8004864:	d015      	beq.n	8004892 <HAL_TIM_Base_Start+0xae>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d011      	beq.n	8004892 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e008      	b.n	8004892 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e000      	b.n	8004894 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40001800 	.word	0x40001800
 80048bc:	40014000 	.word	0x40014000
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f3 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8e5 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8f6 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0204 	mvn.w	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8cd 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8bf 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8d0 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0208 	mvn.w	r2, #8
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8a7 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f899 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8aa 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f881 	bl	8004afa <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f873 	bl	8004ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f884 	bl	8004b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f851 	bl	8004ad2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9ab 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f9a3 	bl	8004dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f83e 	bl	8004b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0220 	mvn.w	r2, #32
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f96b 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a46      	ldr	r2, [pc, #280]	; (8004c64 <TIM_Base_SetConfig+0x12c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a43      	ldr	r2, [pc, #268]	; (8004c68 <TIM_Base_SetConfig+0x130>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <TIM_Base_SetConfig+0x134>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a41      	ldr	r2, [pc, #260]	; (8004c70 <TIM_Base_SetConfig+0x138>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <TIM_Base_SetConfig+0x13c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a35      	ldr	r2, [pc, #212]	; (8004c64 <TIM_Base_SetConfig+0x12c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d01b      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <TIM_Base_SetConfig+0x130>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a31      	ldr	r2, [pc, #196]	; (8004c6c <TIM_Base_SetConfig+0x134>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <TIM_Base_SetConfig+0x138>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <TIM_Base_SetConfig+0x13c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <TIM_Base_SetConfig+0x140>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <TIM_Base_SetConfig+0x144>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <TIM_Base_SetConfig+0x148>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_Base_SetConfig+0x12c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0xf8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <TIM_Base_SetConfig+0x13c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0xf8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <TIM_Base_SetConfig+0x140>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0xf8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_Base_SetConfig+0x144>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0xf8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <TIM_Base_SetConfig+0x148>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d103      	bne.n	8004c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]
  }
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e06d      	b.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d108      	bne.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d01d      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10c      	bne.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40001800 	.word	0x40001800
 8004d9c:	40014000 	.word	0x40014000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <memset>:
 8004ddc:	4402      	add	r2, r0
 8004dde:	4603      	mov	r3, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f000 f818 	bl	8004e34 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08004e64 	.word	0x08004e64
 8004e28:	08004e64 	.word	0x08004e64
 8004e2c:	08004e64 	.word	0x08004e64
 8004e30:	08004e68 	.word	0x08004e68

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
