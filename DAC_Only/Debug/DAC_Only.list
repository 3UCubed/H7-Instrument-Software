
DAC_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f48  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  24000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  24000050  08005250  00020050  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000148  08005250  00020148  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010671  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ffc  00000000  00000000  000306ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc8  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ce0  00000000  00000000  000334b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000368e9  00000000  00000000  00034198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000113e8  00000000  00000000  0006aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e8bc  00000000  00000000  0007be69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001da725  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000039d4  00000000  00000000  001da778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000050 	.word	0x24000050
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080051c8 	.word	0x080051c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000054 	.word	0x24000054
 80002d4:	080051c8 	.word	0x080051c8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fb1f 	bl	8000920 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002e2:	f000 f941 	bl	8000568 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f81b 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f923 	bl	8000534 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ee:	f000 f901 	bl	80004f4 <MX_DMA_Init>
  MX_DAC1_Init();
 80002f2:	f000 f87f 	bl	80003f4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80002f6:	f000 f8af 	bl	8000458 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80002fa:	4806      	ldr	r0, [pc, #24]	; (8000314 <main+0x3c>)
 80002fc:	f004 faa6 	bl	800484c <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000300:	2300      	movs	r3, #0
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2310      	movs	r3, #16
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <main+0x40>)
 8000308:	2100      	movs	r1, #0
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <main+0x44>)
 800030c:	f000 fd50 	bl	8000db0 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000310:	e7fe      	b.n	8000310 <main+0x38>
 8000312:	bf00      	nop
 8000314:	240000f8 	.word	0x240000f8
 8000318:	24000000 	.word	0x24000000
 800031c:	2400006c 	.word	0x2400006c

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	224c      	movs	r2, #76	; 0x4c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f004 ff42 	bl	80051b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f004 ff3c 	bl	80051b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000340:	2002      	movs	r0, #2
 8000342:	f003 fa67 	bl	8003814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <SystemClock_Config+0xcc>)
 800034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034e:	4a27      	ldr	r2, [pc, #156]	; (80003ec <SystemClock_Config+0xcc>)
 8000350:	f023 0301 	bic.w	r3, r3, #1
 8000354:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemClock_Config+0xcc>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <SystemClock_Config+0xd0>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemClock_Config+0xd0>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <SystemClock_Config+0xd0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800037c:	bf00      	nop
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <SystemClock_Config+0xd0>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800038a:	d1f8      	bne.n	800037e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	2302      	movs	r3, #2
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000390:	2301      	movs	r3, #1
 8000392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2340      	movs	r3, #64	; 0x40
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 fa71 	bl	8003888 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003ac:	f000 f908 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	233f      	movs	r3, #63	; 0x3f
 80003b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2101      	movs	r1, #1
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 feb1 	bl	800413c <HAL_RCC_ClockConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003e0:	f000 f8ee 	bl	80005c0 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3770      	adds	r7, #112	; 0x70
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	58000400 	.word	0x58000400
 80003f0:	58024800 	.word	0x58024800

080003f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2224      	movs	r2, #36	; 0x24
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f004 fed9 	bl	80051b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_DAC1_Init+0x5c>)
 8000408:	4a12      	ldr	r2, [pc, #72]	; (8000454 <MX_DAC1_Init+0x60>)
 800040a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800040c:	4810      	ldr	r0, [pc, #64]	; (8000450 <MX_DAC1_Init+0x5c>)
 800040e:	f000 fcad 	bl	8000d6c <HAL_DAC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000418:	f000 f8d2 	bl	80005c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000420:	230a      	movs	r3, #10
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000428:	2301      	movs	r3, #1
 800042a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_DAC1_Init+0x5c>)
 8000438:	f000 fd98 	bl	8000f6c <HAL_DAC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f8bd 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	3728      	adds	r7, #40	; 0x28
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2400006c 	.word	0x2400006c
 8000454:	40007400 	.word	0x40007400

08000458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000480:	223f      	movs	r2, #63	; 0x3f
 8000482:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <MX_TIM2_Init+0x98>)
 800048c:	f640 4234 	movw	r2, #3124	; 0xc34
 8000490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_TIM2_Init+0x98>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800049e:	4814      	ldr	r0, [pc, #80]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004a0:	f004 f97c 	bl	800479c <HAL_TIM_Base_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004aa:	f000 f889 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004bc:	f004 fb3e 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004c6:	f000 f87b 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004ca:	2320      	movs	r3, #32
 80004cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4619      	mov	r1, r3
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004d8:	f004 fd9e 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004e2:	f000 f86d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	240000f8 	.word	0x240000f8

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_DMA_Init+0x3c>)
 80004fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <MX_DMA_Init+0x3c>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_DMA_Init+0x3c>)
 800050c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2010      	movs	r0, #16
 800051e:	f000 fb78 	bl	8000c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000522:	2010      	movs	r0, #16
 8000524:	f000 fb8f 	bl	8000c46 <HAL_NVIC_EnableIRQ>

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	58024400 	.word	0x58024400

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_GPIO_Init+0x30>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <MX_GPIO_Init+0x30>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_GPIO_Init+0x30>)
 800054c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	58024400 	.word	0x58024400

08000568 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800057a:	f000 fb7f 	bl	8000c7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800057e:	2301      	movs	r3, #1
 8000580:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000582:	2300      	movs	r3, #0
 8000584:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800058a:	231f      	movs	r3, #31
 800058c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800058e:	2387      	movs	r3, #135	; 0x87
 8000590:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000592:	2300      	movs	r3, #0
 8000594:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000596:	2300      	movs	r3, #0
 8000598:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800059a:	2301      	movs	r3, #1
 800059c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800059e:	2301      	movs	r3, #1
 80005a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fb9d 	bl	8000cec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005b2:	2004      	movs	r0, #4
 80005b4:	f000 fb7a 	bl	8000cac <HAL_MPU_Enable>

}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_MspInit+0x30>)
 80005d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <HAL_MspInit+0x30>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_MspInit+0x30>)
 80005e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	58024400 	.word	0x58024400

08000600 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <HAL_DAC_MspInit+0xe0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d159      	bne.n	80006d6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 8000624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000628:	4a2e      	ldr	r2, [pc, #184]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 800062a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800062e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <HAL_DAC_MspInit+0xe4>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065e:	2310      	movs	r3, #16
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	481d      	ldr	r0, [pc, #116]	; (80006e8 <HAL_DAC_MspInit+0xe8>)
 8000672:	f002 ff1f 	bl	80034b4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <HAL_DAC_MspInit+0xec>)
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <HAL_DAC_MspInit+0xf0>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_DAC_MspInit+0xec>)
 800067e:	2243      	movs	r2, #67	; 0x43
 8000680:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_DAC_MspInit+0xec>)
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_DAC_MspInit+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_DAC_MspInit+0xec>)
 8000690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000694:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_DAC_MspInit+0xec>)
 8000698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800069c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006bc:	f000 fe22 	bl	8001304 <HAL_DMA_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80006c6:	f7ff ff7b 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_DAC_MspInit+0xec>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40007400 	.word	0x40007400
 80006e4:	58024400 	.word	0x58024400
 80006e8:	58020000 	.word	0x58020000
 80006ec:	24000080 	.word	0x24000080
 80006f0:	40020088 	.word	0x40020088

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000704:	d116      	bne.n	8000734 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <HAL_TIM_Base_MspInit+0x48>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_TIM_Base_MspInit+0x48>)
 8000718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	201c      	movs	r0, #28
 800072a:	f000 fa72 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800072e:	201c      	movs	r0, #28
 8000730:	f000 fa89 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58024400 	.word	0x58024400

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f93a 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <DMA1_Stream5_IRQHandler+0x10>)
 800079a:	f001 fb79 	bl	8001e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	24000080 	.word	0x24000080

080007a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <TIM2_IRQHandler+0x10>)
 80007ae:	f004 f8bd 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	240000f8 	.word	0x240000f8

080007bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c0:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <SystemInit+0xe4>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a36      	ldr	r2, [pc, #216]	; (80008a0 <SystemInit+0xe4>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <SystemInit+0xe8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	2b06      	cmp	r3, #6
 80007da:	d807      	bhi.n	80007ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemInit+0xe8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f023 030f 	bic.w	r3, r3, #15
 80007e4:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <SystemInit+0xe8>)
 80007e6:	f043 0307 	orr.w	r3, r3, #7
 80007ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <SystemInit+0xec>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <SystemInit+0xec>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SystemInit+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <SystemInit+0xec>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4929      	ldr	r1, [pc, #164]	; (80008a8 <SystemInit+0xec>)
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <SystemInit+0xf0>)
 8000806:	4013      	ands	r3, r2
 8000808:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <SystemInit+0xe8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d007      	beq.n	8000826 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <SystemInit+0xe8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f023 030f 	bic.w	r3, r3, #15
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemInit+0xe8>)
 8000820:	f043 0307 	orr.w	r3, r3, #7
 8000824:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <SystemInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <SystemInit+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <SystemInit+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <SystemInit+0xec>)
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <SystemInit+0xf4>)
 800083c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <SystemInit+0xec>)
 8000840:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <SystemInit+0xf8>)
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <SystemInit+0xec>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <SystemInit+0xfc>)
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <SystemInit+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <SystemInit+0xec>)
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <SystemInit+0xfc>)
 8000854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <SystemInit+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <SystemInit+0xec>)
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <SystemInit+0xfc>)
 8000860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SystemInit+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <SystemInit+0xec>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <SystemInit+0xec>)
 800086e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <SystemInit+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <SystemInit+0x100>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <SystemInit+0x104>)
 8000880:	4013      	ands	r3, r2
 8000882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000886:	d202      	bcs.n	800088e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <SystemInit+0x108>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <SystemInit+0x10c>)
 8000890:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000894:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	52002000 	.word	0x52002000
 80008a8:	58024400 	.word	0x58024400
 80008ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80008b0:	02020200 	.word	0x02020200
 80008b4:	01ff0000 	.word	0x01ff0000
 80008b8:	01010280 	.word	0x01010280
 80008bc:	5c001000 	.word	0x5c001000
 80008c0:	ffff0000 	.word	0xffff0000
 80008c4:	51008108 	.word	0x51008108
 80008c8:	52004000 	.word	0x52004000

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d0:	f7ff ff74 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	; (8000918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f004 fc39 	bl	8005170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fceb 	bl	80002d8 <main>
  bx  lr
 8000902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000904:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000908:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800090c:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8000910:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 8000914:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8000918:	24000148 	.word	0x24000148

0800091c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC3_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000926:	2003      	movs	r0, #3
 8000928:	f000 f968 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800092c:	f003 fdbc 	bl	80044a8 <HAL_RCC_GetSysClockFreq>
 8000930:	4602      	mov	r2, r0
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_Init+0x68>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	4913      	ldr	r1, [pc, #76]	; (800098c <HAL_Init+0x6c>)
 800093e:	5ccb      	ldrb	r3, [r1, r3]
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	fa22 f303 	lsr.w	r3, r2, r3
 8000948:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_Init+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_Init+0x6c>)
 8000954:	5cd3      	ldrb	r3, [r2, r3]
 8000956:	f003 031f 	and.w	r3, r3, #31
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	fa22 f303 	lsr.w	r3, r2, r3
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_Init+0x70>)
 8000962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_Init+0x74>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f814 	bl	8000998 <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e002      	b.n	8000980 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff fe27 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	58024400 	.word	0x58024400
 800098c:	080051e0 	.word	0x080051e0
 8000990:	24000044 	.word	0x24000044
 8000994:	24000040 	.word	0x24000040

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_InitTick+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e021      	b.n	80009f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_InitTick+0x64>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f94d 	bl	8000c62 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 f917 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x68>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400004c 	.word	0x2400004c
 80009fc:	24000040 	.word	0x24000040
 8000a00:	24000048 	.word	0x24000048

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2400004c 	.word	0x2400004c
 8000a28:	24000144 	.word	0x24000144

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	24000144 	.word	0x24000144

08000a44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetREVID+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	5c001000 	.word	0x5c001000

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	05fa0000 	.word	0x05fa0000

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff29 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff40 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff90 	bl	8000b50 <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5f 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff33 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa4 	bl	8000bb8 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c80:	f3bf 8f5f 	dmb	sy
}
 8000c84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_MPU_Disable+0x28>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_MPU_Disable+0x28>)
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c90:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_MPU_Disable+0x2c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	e000ed90 	.word	0xe000ed90

08000cac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_MPU_Enable+0x38>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_MPU_Enable+0x3c>)
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_MPU_Enable+0x3c>)
 8000cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cca:	f3bf 8f4f 	dsb	sy
}
 8000cce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd0:	f3bf 8f6f 	isb	sy
}
 8000cd4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed90 	.word	0xe000ed90
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	785a      	ldrb	r2, [r3, #1]
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_MPU_ConfigRegion+0x7c>)
 8000cfa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_MPU_ConfigRegion+0x7c>)
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_MPU_ConfigRegion+0x7c>)
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_MPU_ConfigRegion+0x7c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7b1b      	ldrb	r3, [r3, #12]
 8000d14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7adb      	ldrb	r3, [r3, #11]
 8000d1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7a9b      	ldrb	r3, [r3, #10]
 8000d22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b5b      	ldrb	r3, [r3, #13]
 8000d2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7b9b      	ldrb	r3, [r3, #14]
 8000d32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7bdb      	ldrb	r3, [r3, #15]
 8000d3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7a5b      	ldrb	r3, [r3, #9]
 8000d42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7a1b      	ldrb	r3, [r3, #8]
 8000d4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d58:	6113      	str	r3, [r2, #16]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed90 	.word	0xe000ed90

08000d6c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e014      	b.n	8000da8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	791b      	ldrb	r3, [r3, #4]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fc36 	bl	8000600 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0a2      	b.n	8000f0e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	795b      	ldrb	r3, [r3, #5]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_DAC_Start_DMA+0x24>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e09c      	b.n	8000f0e <HAL_DAC_Start_DMA+0x15e>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2202      	movs	r2, #2
 8000dde:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d129      	bne.n	8000e3a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_DAC_Start_DMA+0x168>)
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	4a4a      	ldr	r2, [pc, #296]	; (8000f1c <HAL_DAC_Start_DMA+0x16c>)
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a49      	ldr	r2, [pc, #292]	; (8000f20 <HAL_DAC_Start_DMA+0x170>)
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e0c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_DAC_Start_DMA+0x6c>
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d005      	beq.n	8000e26 <HAL_DAC_Start_DMA+0x76>
 8000e1a:	e009      	b.n	8000e30 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3308      	adds	r3, #8
 8000e22:	613b      	str	r3, [r7, #16]
        break;
 8000e24:	e033      	b.n	8000e8e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	330c      	adds	r3, #12
 8000e2c:	613b      	str	r3, [r7, #16]
        break;
 8000e2e:	e02e      	b.n	8000e8e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3310      	adds	r3, #16
 8000e36:	613b      	str	r3, [r7, #16]
        break;
 8000e38:	e029      	b.n	8000e8e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <HAL_DAC_Start_DMA+0x174>)
 8000e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_DAC_Start_DMA+0x178>)
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <HAL_DAC_Start_DMA+0x17c>)
 8000e50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_DAC_Start_DMA+0xc0>
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d005      	beq.n	8000e7a <HAL_DAC_Start_DMA+0xca>
 8000e6e:	e009      	b.n	8000e84 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3314      	adds	r3, #20
 8000e76:	613b      	str	r3, [r7, #16]
        break;
 8000e78:	e009      	b.n	8000e8e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3318      	adds	r3, #24
 8000e80:	613b      	str	r3, [r7, #16]
        break;
 8000e82:	e004      	b.n	8000e8e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	331c      	adds	r3, #28
 8000e8a:	613b      	str	r3, [r7, #16]
        break;
 8000e8c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d111      	bne.n	8000eb8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6898      	ldr	r0, [r3, #8]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	f000 fd85 	bl	80019bc <HAL_DMA_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	75fb      	strb	r3, [r7, #23]
 8000eb6:	e010      	b.n	8000eda <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	68d8      	ldr	r0, [r3, #12]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	f000 fd73 	bl	80019bc <HAL_DMA_Start_IT>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e005      	b.n	8000f0c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	f043 0204 	orr.w	r2, r3, #4
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	080011f1 	.word	0x080011f1
 8000f1c:	08001213 	.word	0x08001213
 8000f20:	0800122f 	.word	0x0800122f
 8000f24:	08001299 	.word	0x08001299
 8000f28:	080012bb 	.word	0x080012bb
 8000f2c:	080012d7 	.word	0x080012d7

08000f30 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <HAL_DAC_ConfigChannel+0x1e>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e12a      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	795b      	ldrb	r3, [r3, #5]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_DAC_ConfigChannel+0x2e>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e124      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x278>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d17a      	bne.n	80010a4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000fae:	f7ff fd3d 	bl	8000a2c <HAL_GetTick>
 8000fb2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d13d      	bne.n	8001036 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fba:	e018      	b.n	8000fee <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000fbc:	f7ff fd36 	bl	8000a2c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d911      	bls.n	8000fee <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd0:	4b86      	ldr	r3, [pc, #536]	; (80011ec <HAL_DAC_ConfigChannel+0x280>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00a      	beq.n	8000fee <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f043 0208 	orr.w	r2, r3, #8
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e0fa      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff4:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <HAL_DAC_ConfigChannel+0x280>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1df      	bne.n	8000fbc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	6992      	ldr	r2, [r2, #24]
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
 8001006:	e020      	b.n	800104a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001008:	f7ff fd10 	bl	8000a2c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d90f      	bls.n	8001036 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101c:	2b00      	cmp	r3, #0
 800101e:	da0a      	bge.n	8001036 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	f043 0208 	orr.w	r2, r3, #8
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2203      	movs	r2, #3
 8001030:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e0d6      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	2b00      	cmp	r3, #0
 800103e:	dbe3      	blt.n	8001008 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	6992      	ldr	r2, [r2, #24]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	ea02 0103 	and.w	r1, r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	69da      	ldr	r2, [r3, #28]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	409a      	lsls	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	21ff      	movs	r1, #255	; 0xff
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	ea02 0103 	and.w	r1, r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d11d      	bne.n	80010e8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2207      	movs	r2, #7
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	e00f      	b.n	8001132 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d102      	bne.n	8001120 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800111a:	2301      	movs	r3, #1
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
 800111e:	e008      	b.n	8001132 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
 800112c:	e001      	b.n	8001132 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	4313      	orrs	r3, r2
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43da      	mvns	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	400a      	ands	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	f640 72fe 	movw	r2, #4094	; 0xffe
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6819      	ldr	r1, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	22c0      	movs	r2, #192	; 0xc0
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80011e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20008000 	.word	0x20008000

080011f0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fe96 	bl	8000f30 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2201      	movs	r2, #1
 8001208:	711a      	strb	r2, [r3, #4]
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff fe8f 	bl	8000f44 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f043 0204 	orr.w	r2, r3, #4
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff fe85 	bl	8000f58 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	711a      	strb	r2, [r3, #4]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff ffd8 	bl	800125c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2201      	movs	r2, #1
 80012b0:	711a      	strb	r2, [r3, #4]
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ffd1 	bl	8001270 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f043 0204 	orr.w	r2, r3, #4
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff ffc7 	bl	8001284 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	711a      	strb	r2, [r3, #4]
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fb8e 	bl	8000a2c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e316      	b.n	800194a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <HAL_DMA_Init+0x1b8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d04a      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_DMA_Init+0x1bc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d045      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a63      	ldr	r2, [pc, #396]	; (80014c4 <HAL_DMA_Init+0x1c0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d040      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <HAL_DMA_Init+0x1c4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d03b      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a60      	ldr	r2, [pc, #384]	; (80014cc <HAL_DMA_Init+0x1c8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d036      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <HAL_DMA_Init+0x1cc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d031      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a5d      	ldr	r2, [pc, #372]	; (80014d4 <HAL_DMA_Init+0x1d0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02c      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <HAL_DMA_Init+0x1d4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d027      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_DMA_Init+0x1d8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d022      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a59      	ldr	r2, [pc, #356]	; (80014e0 <HAL_DMA_Init+0x1dc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d01d      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <HAL_DMA_Init+0x1e0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d018      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_DMA_Init+0x1e4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_DMA_Init+0x1e8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00e      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_DMA_Init+0x1ec>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d009      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_DMA_Init+0x1f0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d004      	beq.n	80013bc <HAL_DMA_Init+0xb8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_DMA_Init+0x1f4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d101      	bne.n	80013c0 <HAL_DMA_Init+0xbc>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_DMA_Init+0xbe>
 80013c0:	2300      	movs	r3, #0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 813b 	beq.w	800163e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a37      	ldr	r2, [pc, #220]	; (80014bc <HAL_DMA_Init+0x1b8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d04a      	beq.n	8001478 <HAL_DMA_Init+0x174>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <HAL_DMA_Init+0x1bc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d045      	beq.n	8001478 <HAL_DMA_Init+0x174>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a34      	ldr	r2, [pc, #208]	; (80014c4 <HAL_DMA_Init+0x1c0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d040      	beq.n	8001478 <HAL_DMA_Init+0x174>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_DMA_Init+0x1c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d03b      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_DMA_Init+0x1c8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d036      	beq.n	8001478 <HAL_DMA_Init+0x174>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a30      	ldr	r2, [pc, #192]	; (80014d0 <HAL_DMA_Init+0x1cc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d031      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <HAL_DMA_Init+0x1d0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d02c      	beq.n	8001478 <HAL_DMA_Init+0x174>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_DMA_Init+0x1d4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d027      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <HAL_DMA_Init+0x1d8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d022      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <HAL_DMA_Init+0x1dc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d01d      	beq.n	8001478 <HAL_DMA_Init+0x174>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_DMA_Init+0x1e0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d018      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_DMA_Init+0x1e4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d013      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <HAL_DMA_Init+0x1e8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00e      	beq.n	8001478 <HAL_DMA_Init+0x174>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_DMA_Init+0x1ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d009      	beq.n	8001478 <HAL_DMA_Init+0x174>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_DMA_Init+0x1f0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d004      	beq.n	8001478 <HAL_DMA_Init+0x174>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_DMA_Init+0x1f4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d108      	bne.n	800148a <HAL_DMA_Init+0x186>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e007      	b.n	800149a <HAL_DMA_Init+0x196>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800149a:	e02f      	b.n	80014fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149c:	f7ff fac6 	bl	8000a2c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d928      	bls.n	80014fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e246      	b.n	800194a <HAL_DMA_Init+0x646>
 80014bc:	40020010 	.word	0x40020010
 80014c0:	40020028 	.word	0x40020028
 80014c4:	40020040 	.word	0x40020040
 80014c8:	40020058 	.word	0x40020058
 80014cc:	40020070 	.word	0x40020070
 80014d0:	40020088 	.word	0x40020088
 80014d4:	400200a0 	.word	0x400200a0
 80014d8:	400200b8 	.word	0x400200b8
 80014dc:	40020410 	.word	0x40020410
 80014e0:	40020428 	.word	0x40020428
 80014e4:	40020440 	.word	0x40020440
 80014e8:	40020458 	.word	0x40020458
 80014ec:	40020470 	.word	0x40020470
 80014f0:	40020488 	.word	0x40020488
 80014f4:	400204a0 	.word	0x400204a0
 80014f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1c8      	bne.n	800149c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4b83      	ldr	r3, [pc, #524]	; (8001724 <HAL_DMA_Init+0x420>)
 8001516:	4013      	ands	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001522:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2b04      	cmp	r3, #4
 800154e:	d107      	bne.n	8001560 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4313      	orrs	r3, r2
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_DMA_Init+0x424>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b71      	ldr	r3, [pc, #452]	; (800172c <HAL_DMA_Init+0x428>)
 8001566:	4013      	ands	r3, r2
 8001568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800156c:	d328      	bcc.n	80015c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b28      	cmp	r3, #40	; 0x28
 8001574:	d903      	bls.n	800157e <HAL_DMA_Init+0x27a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b2e      	cmp	r3, #46	; 0x2e
 800157c:	d917      	bls.n	80015ae <HAL_DMA_Init+0x2aa>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b3e      	cmp	r3, #62	; 0x3e
 8001584:	d903      	bls.n	800158e <HAL_DMA_Init+0x28a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b42      	cmp	r3, #66	; 0x42
 800158c:	d90f      	bls.n	80015ae <HAL_DMA_Init+0x2aa>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b46      	cmp	r3, #70	; 0x46
 8001594:	d903      	bls.n	800159e <HAL_DMA_Init+0x29a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b48      	cmp	r3, #72	; 0x48
 800159c:	d907      	bls.n	80015ae <HAL_DMA_Init+0x2aa>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b4e      	cmp	r3, #78	; 0x4e
 80015a4:	d905      	bls.n	80015b2 <HAL_DMA_Init+0x2ae>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b52      	cmp	r3, #82	; 0x52
 80015ac:	d801      	bhi.n	80015b2 <HAL_DMA_Init+0x2ae>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_DMA_Init+0x2b0>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f023 0307 	bic.w	r3, r3, #7
 80015d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d117      	bne.n	800161a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00e      	beq.n	800161a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 fdcf 	bl	80031a0 <DMA_CheckFifoParam>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e197      	b.n	800194a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 fd0a 	bl	800303c <DMA_CalcBaseAndBitshift>
 8001628:	4603      	mov	r3, r0
 800162a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	223f      	movs	r2, #63	; 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e0cd      	b.n	80017da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_DMA_Init+0x42c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d022      	beq.n	800168e <HAL_DMA_Init+0x38a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_DMA_Init+0x430>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01d      	beq.n	800168e <HAL_DMA_Init+0x38a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_DMA_Init+0x434>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d018      	beq.n	800168e <HAL_DMA_Init+0x38a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a36      	ldr	r2, [pc, #216]	; (800173c <HAL_DMA_Init+0x438>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_DMA_Init+0x38a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a35      	ldr	r2, [pc, #212]	; (8001740 <HAL_DMA_Init+0x43c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00e      	beq.n	800168e <HAL_DMA_Init+0x38a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a33      	ldr	r2, [pc, #204]	; (8001744 <HAL_DMA_Init+0x440>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d009      	beq.n	800168e <HAL_DMA_Init+0x38a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_DMA_Init+0x444>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d004      	beq.n	800168e <HAL_DMA_Init+0x38a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_DMA_Init+0x448>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Init+0x38e>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_DMA_Init+0x390>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_DMA_Init+0x42c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d021      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_DMA_Init+0x430>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01c      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_DMA_Init+0x434>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d017      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_DMA_Init+0x438>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d012      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_DMA_Init+0x43c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_DMA_Init+0x440>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d008      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_DMA_Init+0x444>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_Init+0x3e4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_DMA_Init+0x448>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_DMA_Init+0x44c>)
 8001706:	4013      	ands	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d020      	beq.n	8001754 <HAL_DMA_Init+0x450>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	d102      	bne.n	8001720 <HAL_DMA_Init+0x41c>
 800171a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171e:	e01a      	b.n	8001756 <HAL_DMA_Init+0x452>
 8001720:	2300      	movs	r3, #0
 8001722:	e018      	b.n	8001756 <HAL_DMA_Init+0x452>
 8001724:	fe10803f 	.word	0xfe10803f
 8001728:	5c001000 	.word	0x5c001000
 800172c:	ffff0000 	.word	0xffff0000
 8001730:	58025408 	.word	0x58025408
 8001734:	5802541c 	.word	0x5802541c
 8001738:	58025430 	.word	0x58025430
 800173c:	58025444 	.word	0x58025444
 8001740:	58025458 	.word	0x58025458
 8001744:	5802546c 	.word	0x5802546c
 8001748:	58025480 	.word	0x58025480
 800174c:	58025494 	.word	0x58025494
 8001750:	fffe000f 	.word	0xfffe000f
 8001754:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800175c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800176c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800177c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001784:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_DMA_Init+0x650>)
 800179c:	4413      	add	r3, r2
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_DMA_Init+0x654>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	009a      	lsls	r2, r3, #2
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 fc45 	bl	800303c <DMA_CalcBaseAndBitshift>
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2201      	movs	r2, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e008      	b.n	80017da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0b7      	b.n	800194a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5f      	ldr	r2, [pc, #380]	; (800195c <HAL_DMA_Init+0x658>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d072      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_DMA_Init+0x65c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d06d      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_DMA_Init+0x660>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d068      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_DMA_Init+0x664>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d063      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a59      	ldr	r2, [pc, #356]	; (800196c <HAL_DMA_Init+0x668>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d05e      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a57      	ldr	r2, [pc, #348]	; (8001970 <HAL_DMA_Init+0x66c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d059      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a56      	ldr	r2, [pc, #344]	; (8001974 <HAL_DMA_Init+0x670>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d054      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_DMA_Init+0x674>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d04f      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a53      	ldr	r2, [pc, #332]	; (800197c <HAL_DMA_Init+0x678>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d04a      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <HAL_DMA_Init+0x67c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d045      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a50      	ldr	r2, [pc, #320]	; (8001984 <HAL_DMA_Init+0x680>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d040      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_DMA_Init+0x684>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d03b      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a4d      	ldr	r2, [pc, #308]	; (800198c <HAL_DMA_Init+0x688>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d036      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a4b      	ldr	r2, [pc, #300]	; (8001990 <HAL_DMA_Init+0x68c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d031      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_DMA_Init+0x690>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d02c      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <HAL_DMA_Init+0x694>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d027      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a47      	ldr	r2, [pc, #284]	; (800199c <HAL_DMA_Init+0x698>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d022      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <HAL_DMA_Init+0x69c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01d      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a44      	ldr	r2, [pc, #272]	; (80019a4 <HAL_DMA_Init+0x6a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d018      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_DMA_Init+0x6a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a41      	ldr	r2, [pc, #260]	; (80019ac <HAL_DMA_Init+0x6a8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00e      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_DMA_Init+0x6ac>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d009      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_DMA_Init+0x6b0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d004      	beq.n	80018ca <HAL_DMA_Init+0x5c6>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_DMA_Init+0x6b4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_DMA_Init+0x5ca>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_DMA_Init+0x5cc>
 80018ce:	2300      	movs	r3, #0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d032      	beq.n	800193a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 fcdf 	bl	8003298 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b80      	cmp	r3, #128	; 0x80
 80018e0:	d102      	bne.n	80018e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d010      	beq.n	8001928 <HAL_DMA_Init+0x624>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b08      	cmp	r3, #8
 800190c:	d80c      	bhi.n	8001928 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f001 fd5c 	bl	80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	e008      	b.n	800193a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	a7fdabf8 	.word	0xa7fdabf8
 8001958:	cccccccd 	.word	0xcccccccd
 800195c:	40020010 	.word	0x40020010
 8001960:	40020028 	.word	0x40020028
 8001964:	40020040 	.word	0x40020040
 8001968:	40020058 	.word	0x40020058
 800196c:	40020070 	.word	0x40020070
 8001970:	40020088 	.word	0x40020088
 8001974:	400200a0 	.word	0x400200a0
 8001978:	400200b8 	.word	0x400200b8
 800197c:	40020410 	.word	0x40020410
 8001980:	40020428 	.word	0x40020428
 8001984:	40020440 	.word	0x40020440
 8001988:	40020458 	.word	0x40020458
 800198c:	40020470 	.word	0x40020470
 8001990:	40020488 	.word	0x40020488
 8001994:	400204a0 	.word	0x400204a0
 8001998:	400204b8 	.word	0x400204b8
 800199c:	58025408 	.word	0x58025408
 80019a0:	5802541c 	.word	0x5802541c
 80019a4:	58025430 	.word	0x58025430
 80019a8:	58025444 	.word	0x58025444
 80019ac:	58025458 	.word	0x58025458
 80019b0:	5802546c 	.word	0x5802546c
 80019b4:	58025480 	.word	0x58025480
 80019b8:	58025494 	.word	0x58025494

080019bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e226      	b.n	8001e26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA_Start_IT+0x2a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e21f      	b.n	8001e26 <HAL_DMA_Start_IT+0x46a>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 820a 	bne.w	8001e10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a68      	ldr	r2, [pc, #416]	; (8001bb0 <HAL_DMA_Start_IT+0x1f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d04a      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <HAL_DMA_Start_IT+0x1f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d045      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_DMA_Start_IT+0x1fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d040      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_DMA_Start_IT+0x200>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d03b      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_DMA_Start_IT+0x204>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d036      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_DMA_Start_IT+0x208>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d031      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_DMA_Start_IT+0x20c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d02c      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5d      	ldr	r2, [pc, #372]	; (8001bcc <HAL_DMA_Start_IT+0x210>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d027      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <HAL_DMA_Start_IT+0x214>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5a      	ldr	r2, [pc, #360]	; (8001bd4 <HAL_DMA_Start_IT+0x218>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01d      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <HAL_DMA_Start_IT+0x21c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d018      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a57      	ldr	r2, [pc, #348]	; (8001bdc <HAL_DMA_Start_IT+0x220>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_DMA_Start_IT+0x224>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00e      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_DMA_Start_IT+0x228>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d009      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <HAL_DMA_Start_IT+0x22c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <HAL_DMA_Start_IT+0xee>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_DMA_Start_IT+0x230>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_DMA_Start_IT+0x100>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e007      	b.n	8001acc <HAL_DMA_Start_IT+0x110>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f001 f906 	bl	8002ce4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_DMA_Start_IT+0x1f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d04a      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a33      	ldr	r2, [pc, #204]	; (8001bb4 <HAL_DMA_Start_IT+0x1f8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d045      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_DMA_Start_IT+0x1fc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d040      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_DMA_Start_IT+0x200>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d03b      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <HAL_DMA_Start_IT+0x204>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d036      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <HAL_DMA_Start_IT+0x208>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d031      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <HAL_DMA_Start_IT+0x20c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d02c      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2a      	ldr	r2, [pc, #168]	; (8001bcc <HAL_DMA_Start_IT+0x210>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d027      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <HAL_DMA_Start_IT+0x214>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d022      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <HAL_DMA_Start_IT+0x218>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d01d      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_DMA_Start_IT+0x21c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d018      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <HAL_DMA_Start_IT+0x220>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <HAL_DMA_Start_IT+0x224>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00e      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_DMA_Start_IT+0x228>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_DMA_Start_IT+0x22c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_Start_IT+0x1bc>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_DMA_Start_IT+0x230>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_DMA_Start_IT+0x1c0>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_Start_IT+0x1c2>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d036      	beq.n	8001bf0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 021e 	bic.w	r2, r3, #30
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0216 	orr.w	r2, r2, #22
 8001b94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03e      	beq.n	8001c1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0208 	orr.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e035      	b.n	8001c1c <HAL_DMA_Start_IT+0x260>
 8001bb0:	40020010 	.word	0x40020010
 8001bb4:	40020028 	.word	0x40020028
 8001bb8:	40020040 	.word	0x40020040
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	40020070 	.word	0x40020070
 8001bc4:	40020088 	.word	0x40020088
 8001bc8:	400200a0 	.word	0x400200a0
 8001bcc:	400200b8 	.word	0x400200b8
 8001bd0:	40020410 	.word	0x40020410
 8001bd4:	40020428 	.word	0x40020428
 8001bd8:	40020440 	.word	0x40020440
 8001bdc:	40020458 	.word	0x40020458
 8001be0:	40020470 	.word	0x40020470
 8001be4:	40020488 	.word	0x40020488
 8001be8:	400204a0 	.word	0x400204a0
 8001bec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 020e 	bic.w	r2, r3, #14
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 020a 	orr.w	r2, r2, #10
 8001c02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0204 	orr.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a83      	ldr	r2, [pc, #524]	; (8001e30 <HAL_DMA_Start_IT+0x474>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d072      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a82      	ldr	r2, [pc, #520]	; (8001e34 <HAL_DMA_Start_IT+0x478>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d06d      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a80      	ldr	r2, [pc, #512]	; (8001e38 <HAL_DMA_Start_IT+0x47c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d068      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7f      	ldr	r2, [pc, #508]	; (8001e3c <HAL_DMA_Start_IT+0x480>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d063      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7d      	ldr	r2, [pc, #500]	; (8001e40 <HAL_DMA_Start_IT+0x484>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d05e      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7c      	ldr	r2, [pc, #496]	; (8001e44 <HAL_DMA_Start_IT+0x488>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d059      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <HAL_DMA_Start_IT+0x48c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d054      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a79      	ldr	r2, [pc, #484]	; (8001e4c <HAL_DMA_Start_IT+0x490>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04f      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_DMA_Start_IT+0x494>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a76      	ldr	r2, [pc, #472]	; (8001e54 <HAL_DMA_Start_IT+0x498>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a74      	ldr	r2, [pc, #464]	; (8001e58 <HAL_DMA_Start_IT+0x49c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a73      	ldr	r2, [pc, #460]	; (8001e5c <HAL_DMA_Start_IT+0x4a0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a71      	ldr	r2, [pc, #452]	; (8001e60 <HAL_DMA_Start_IT+0x4a4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a70      	ldr	r2, [pc, #448]	; (8001e64 <HAL_DMA_Start_IT+0x4a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_DMA_Start_IT+0x4ac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6d      	ldr	r2, [pc, #436]	; (8001e6c <HAL_DMA_Start_IT+0x4b0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6b      	ldr	r2, [pc, #428]	; (8001e70 <HAL_DMA_Start_IT+0x4b4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_DMA_Start_IT+0x4b8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a68      	ldr	r2, [pc, #416]	; (8001e78 <HAL_DMA_Start_IT+0x4bc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_DMA_Start_IT+0x4c0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_DMA_Start_IT+0x4c4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	; (8001e84 <HAL_DMA_Start_IT+0x4c8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a62      	ldr	r2, [pc, #392]	; (8001e88 <HAL_DMA_Start_IT+0x4cc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Start_IT+0x350>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_DMA_Start_IT+0x4d0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Start_IT+0x354>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_Start_IT+0x356>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01a      	beq.n	8001d4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_DMA_Start_IT+0x474>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d04a      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <HAL_DMA_Start_IT+0x478>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d045      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_DMA_Start_IT+0x47c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d040      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_DMA_Start_IT+0x480>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d03b      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_DMA_Start_IT+0x484>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d036      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <HAL_DMA_Start_IT+0x488>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d031      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_DMA_Start_IT+0x48c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02c      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_DMA_Start_IT+0x490>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d027      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_DMA_Start_IT+0x494>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d022      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <HAL_DMA_Start_IT+0x498>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d01d      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_DMA_Start_IT+0x49c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d018      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <HAL_DMA_Start_IT+0x4a0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <HAL_DMA_Start_IT+0x4a4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00e      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_DMA_Start_IT+0x4a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <HAL_DMA_Start_IT+0x4ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_DMA_Start_IT+0x430>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <HAL_DMA_Start_IT+0x4b0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <HAL_DMA_Start_IT+0x442>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e012      	b.n	8001e24 <HAL_DMA_Start_IT+0x468>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e009      	b.n	8001e24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020010 	.word	0x40020010
 8001e34:	40020028 	.word	0x40020028
 8001e38:	40020040 	.word	0x40020040
 8001e3c:	40020058 	.word	0x40020058
 8001e40:	40020070 	.word	0x40020070
 8001e44:	40020088 	.word	0x40020088
 8001e48:	400200a0 	.word	0x400200a0
 8001e4c:	400200b8 	.word	0x400200b8
 8001e50:	40020410 	.word	0x40020410
 8001e54:	40020428 	.word	0x40020428
 8001e58:	40020440 	.word	0x40020440
 8001e5c:	40020458 	.word	0x40020458
 8001e60:	40020470 	.word	0x40020470
 8001e64:	40020488 	.word	0x40020488
 8001e68:	400204a0 	.word	0x400204a0
 8001e6c:	400204b8 	.word	0x400204b8
 8001e70:	58025408 	.word	0x58025408
 8001e74:	5802541c 	.word	0x5802541c
 8001e78:	58025430 	.word	0x58025430
 8001e7c:	58025444 	.word	0x58025444
 8001e80:	58025458 	.word	0x58025458
 8001e84:	5802546c 	.word	0x5802546c
 8001e88:	58025480 	.word	0x58025480
 8001e8c:	58025494 	.word	0x58025494

08001e90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e9c:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_DMA_IRQHandler+0x1ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_DMA_IRQHandler+0x1b0>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5f      	ldr	r2, [pc, #380]	; (8002044 <HAL_DMA_IRQHandler+0x1b4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d04a      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_DMA_IRQHandler+0x1b8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d045      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_DMA_IRQHandler+0x1bc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d040      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5a      	ldr	r2, [pc, #360]	; (8002050 <HAL_DMA_IRQHandler+0x1c0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d03b      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <HAL_DMA_IRQHandler+0x1c4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d036      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_DMA_IRQHandler+0x1c8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d031      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_DMA_IRQHandler+0x1cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d02c      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_DMA_IRQHandler+0x1d0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d027      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_DMA_IRQHandler+0x1d4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_DMA_IRQHandler+0x1d8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01d      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_DMA_IRQHandler+0x1dc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d018      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_DMA_IRQHandler+0x1e0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_DMA_IRQHandler+0x1e4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	; (8002078 <HAL_DMA_IRQHandler+0x1e8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_DMA_IRQHandler+0x1ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_DMA_IRQHandler+0x1f0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_IRQHandler+0xd6>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_DMA_IRQHandler+0xd8>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 842b 	beq.w	80027c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2208      	movs	r2, #8
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80a2 	beq.w	80020c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <HAL_DMA_IRQHandler+0x1b4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d04a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <HAL_DMA_IRQHandler+0x1b8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d045      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <HAL_DMA_IRQHandler+0x1bc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d040      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_DMA_IRQHandler+0x1c0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d03b      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_DMA_IRQHandler+0x1c4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d036      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <HAL_DMA_IRQHandler+0x1c8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_DMA_IRQHandler+0x1cc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02c      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_DMA_IRQHandler+0x1d0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d027      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_DMA_IRQHandler+0x1d4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d022      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_DMA_IRQHandler+0x1d8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d01d      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_DMA_IRQHandler+0x1dc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d018      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_DMA_IRQHandler+0x1e0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_DMA_IRQHandler+0x1e4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00e      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_DMA_IRQHandler+0x1e8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_DMA_IRQHandler+0x1ec>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_DMA_IRQHandler+0x1f0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d12f      	bne.n	8002084 <HAL_DMA_IRQHandler+0x1f4>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e02e      	b.n	8002098 <HAL_DMA_IRQHandler+0x208>
 800203a:	bf00      	nop
 800203c:	24000040 	.word	0x24000040
 8002040:	1b4e81b5 	.word	0x1b4e81b5
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2208      	movs	r2, #8
 80020b6:	409a      	lsls	r2, r3
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06e      	beq.n	80021bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a69      	ldr	r2, [pc, #420]	; (8002288 <HAL_DMA_IRQHandler+0x3f8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04a      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_DMA_IRQHandler+0x3fc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d045      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_DMA_IRQHandler+0x400>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_DMA_IRQHandler+0x404>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d03b      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a63      	ldr	r2, [pc, #396]	; (8002298 <HAL_DMA_IRQHandler+0x408>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d036      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a61      	ldr	r2, [pc, #388]	; (800229c <HAL_DMA_IRQHandler+0x40c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_DMA_IRQHandler+0x410>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d02c      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5e      	ldr	r2, [pc, #376]	; (80022a4 <HAL_DMA_IRQHandler+0x414>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d027      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5d      	ldr	r2, [pc, #372]	; (80022a8 <HAL_DMA_IRQHandler+0x418>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_DMA_IRQHandler+0x41c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01d      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5a      	ldr	r2, [pc, #360]	; (80022b0 <HAL_DMA_IRQHandler+0x420>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_DMA_IRQHandler+0x424>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_DMA_IRQHandler+0x428>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_DMA_IRQHandler+0x42c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_DMA_IRQHandler+0x430>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <HAL_DMA_IRQHandler+0x434>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10a      	bne.n	8002194 <HAL_DMA_IRQHandler+0x304>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e003      	b.n	800219c <HAL_DMA_IRQHandler+0x30c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2204      	movs	r2, #4
 80021c6:	409a      	lsls	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 808f 	beq.w	80022f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <HAL_DMA_IRQHandler+0x3f8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04a      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2a      	ldr	r2, [pc, #168]	; (800228c <HAL_DMA_IRQHandler+0x3fc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d045      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a29      	ldr	r2, [pc, #164]	; (8002290 <HAL_DMA_IRQHandler+0x400>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d040      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_DMA_IRQHandler+0x404>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d03b      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_DMA_IRQHandler+0x408>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d036      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <HAL_DMA_IRQHandler+0x40c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_DMA_IRQHandler+0x410>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d02c      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_DMA_IRQHandler+0x414>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d027      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_DMA_IRQHandler+0x418>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_DMA_IRQHandler+0x41c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_DMA_IRQHandler+0x420>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_DMA_IRQHandler+0x424>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_DMA_IRQHandler+0x428>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a18      	ldr	r2, [pc, #96]	; (80022bc <HAL_DMA_IRQHandler+0x42c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_DMA_IRQHandler+0x430>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_DMA_IRQHandler+0x434>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12a      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x438>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e023      	b.n	80022d0 <HAL_DMA_IRQHandler+0x440>
 8002288:	40020010 	.word	0x40020010
 800228c:	40020028 	.word	0x40020028
 8002290:	40020040 	.word	0x40020040
 8002294:	40020058 	.word	0x40020058
 8002298:	40020070 	.word	0x40020070
 800229c:	40020088 	.word	0x40020088
 80022a0:	400200a0 	.word	0x400200a0
 80022a4:	400200b8 	.word	0x400200b8
 80022a8:	40020410 	.word	0x40020410
 80022ac:	40020428 	.word	0x40020428
 80022b0:	40020440 	.word	0x40020440
 80022b4:	40020458 	.word	0x40020458
 80022b8:	40020470 	.word	0x40020470
 80022bc:	40020488 	.word	0x40020488
 80022c0:	400204a0 	.word	0x400204a0
 80022c4:	400204b8 	.word	0x400204b8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2204      	movs	r2, #4
 80022de:	409a      	lsls	r2, r3
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2210      	movs	r2, #16
 80022fa:	409a      	lsls	r2, r3
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a6 	beq.w	8002452 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a85      	ldr	r2, [pc, #532]	; (8002520 <HAL_DMA_IRQHandler+0x690>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	; (8002524 <HAL_DMA_IRQHandler+0x694>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_DMA_IRQHandler+0x698>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a80      	ldr	r2, [pc, #512]	; (800252c <HAL_DMA_IRQHandler+0x69c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7f      	ldr	r2, [pc, #508]	; (8002530 <HAL_DMA_IRQHandler+0x6a0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <HAL_DMA_IRQHandler+0x6a4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <HAL_DMA_IRQHandler+0x6a8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7a      	ldr	r2, [pc, #488]	; (800253c <HAL_DMA_IRQHandler+0x6ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a79      	ldr	r2, [pc, #484]	; (8002540 <HAL_DMA_IRQHandler+0x6b0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_DMA_IRQHandler+0x6b4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a76      	ldr	r2, [pc, #472]	; (8002548 <HAL_DMA_IRQHandler+0x6b8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a74      	ldr	r2, [pc, #464]	; (800254c <HAL_DMA_IRQHandler+0x6bc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_DMA_IRQHandler+0x6c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_DMA_IRQHandler+0x6c4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_DMA_IRQHandler+0x6c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	; (800255c <HAL_DMA_IRQHandler+0x6cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10a      	bne.n	80023bc <HAL_DMA_IRQHandler+0x52c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e009      	b.n	80023d0 <HAL_DMA_IRQHandler+0x540>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d03e      	beq.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2210      	movs	r2, #16
 80023de:	409a      	lsls	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d024      	beq.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
 8002410:	e01f      	b.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01b      	beq.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
 8002422:	e016      	b.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2220      	movs	r2, #32
 800245c:	409a      	lsls	r2, r3
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8110 	beq.w	8002688 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_DMA_IRQHandler+0x690>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_DMA_IRQHandler+0x694>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d045      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_DMA_IRQHandler+0x698>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d040      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_DMA_IRQHandler+0x69c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d03b      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_DMA_IRQHandler+0x6a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d036      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_DMA_IRQHandler+0x6a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_DMA_IRQHandler+0x6a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_DMA_IRQHandler+0x6ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_DMA_IRQHandler+0x6b0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_DMA_IRQHandler+0x6b4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01d      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_DMA_IRQHandler+0x6b8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_DMA_IRQHandler+0x6bc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_DMA_IRQHandler+0x6c0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_DMA_IRQHandler+0x6c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_DMA_IRQHandler+0x6c8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_DMA_IRQHandler+0x6cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d12b      	bne.n	8002560 <HAL_DMA_IRQHandler+0x6d0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e02a      	b.n	8002574 <HAL_DMA_IRQHandler+0x6e4>
 800251e:	bf00      	nop
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8087 	beq.w	8002688 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2220      	movs	r2, #32
 8002584:	409a      	lsls	r2, r3
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b04      	cmp	r3, #4
 8002594:	d139      	bne.n	800260a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0216 	bic.w	r2, r2, #22
 80025a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x736>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0208 	bic.w	r2, r2, #8
 80025d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	223f      	movs	r2, #63	; 0x3f
 80025e0:	409a      	lsls	r2, r3
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 834a 	beq.w	8002c94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
          }
          return;
 8002608:	e344      	b.n	8002c94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d018      	beq.n	800264a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e027      	b.n	8002688 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d023      	beq.n	8002688 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e01e      	b.n	8002688 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0210 	bic.w	r2, r2, #16
 8002666:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8306 	beq.w	8002c9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8088 	beq.w	80027b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a7a      	ldr	r2, [pc, #488]	; (8002898 <HAL_DMA_IRQHandler+0xa08>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d04a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a79      	ldr	r2, [pc, #484]	; (800289c <HAL_DMA_IRQHandler+0xa0c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d045      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a77      	ldr	r2, [pc, #476]	; (80028a0 <HAL_DMA_IRQHandler+0xa10>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d040      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <HAL_DMA_IRQHandler+0xa14>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d03b      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a74      	ldr	r2, [pc, #464]	; (80028a8 <HAL_DMA_IRQHandler+0xa18>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_DMA_IRQHandler+0xa1c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_DMA_IRQHandler+0xa20>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a70      	ldr	r2, [pc, #448]	; (80028b4 <HAL_DMA_IRQHandler+0xa24>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d027      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_DMA_IRQHandler+0xa28>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6d      	ldr	r2, [pc, #436]	; (80028bc <HAL_DMA_IRQHandler+0xa2c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d01d      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_DMA_IRQHandler+0xa30>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_DMA_IRQHandler+0xa34>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_DMA_IRQHandler+0xa38>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_DMA_IRQHandler+0xa3c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_DMA_IRQHandler+0xa40>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a64      	ldr	r2, [pc, #400]	; (80028d4 <HAL_DMA_IRQHandler+0xa44>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <HAL_DMA_IRQHandler+0x8ca>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e007      	b.n	800276a <HAL_DMA_IRQHandler+0x8da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	429a      	cmp	r2, r3
 8002774:	d307      	bcc.n	8002786 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f2      	bne.n	800276a <HAL_DMA_IRQHandler+0x8da>
 8002784:	e000      	b.n	8002788 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002786:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800279e:	e003      	b.n	80027a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8272 	beq.w	8002c9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e26c      	b.n	8002c9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <HAL_DMA_IRQHandler+0xa48>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a42      	ldr	r2, [pc, #264]	; (80028dc <HAL_DMA_IRQHandler+0xa4c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_DMA_IRQHandler+0xa50>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_DMA_IRQHandler+0xa54>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3d      	ldr	r2, [pc, #244]	; (80028e8 <HAL_DMA_IRQHandler+0xa58>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3c      	ldr	r2, [pc, #240]	; (80028ec <HAL_DMA_IRQHandler+0xa5c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_DMA_IRQHandler+0xa60>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_IRQHandler+0x984>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <HAL_DMA_IRQHandler+0xa64>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_DMA_IRQHandler+0x988>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_DMA_IRQHandler+0x98a>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 823f 	beq.w	8002c9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2204      	movs	r2, #4
 8002832:	409a      	lsls	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80cd 	beq.w	80029d8 <HAL_DMA_IRQHandler+0xb48>
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80c7 	beq.w	80029d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d049      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8210 	beq.w	8002c98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002880:	e20a      	b.n	8002c98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8206 	beq.w	8002c98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002894:	e200      	b.n	8002c98 <HAL_DMA_IRQHandler+0xe08>
 8002896:	bf00      	nop
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
 80028a0:	40020040 	.word	0x40020040
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40020070 	.word	0x40020070
 80028ac:	40020088 	.word	0x40020088
 80028b0:	400200a0 	.word	0x400200a0
 80028b4:	400200b8 	.word	0x400200b8
 80028b8:	40020410 	.word	0x40020410
 80028bc:	40020428 	.word	0x40020428
 80028c0:	40020440 	.word	0x40020440
 80028c4:	40020458 	.word	0x40020458
 80028c8:	40020470 	.word	0x40020470
 80028cc:	40020488 	.word	0x40020488
 80028d0:	400204a0 	.word	0x400204a0
 80028d4:	400204b8 	.word	0x400204b8
 80028d8:	58025408 	.word	0x58025408
 80028dc:	5802541c 	.word	0x5802541c
 80028e0:	58025430 	.word	0x58025430
 80028e4:	58025444 	.word	0x58025444
 80028e8:	58025458 	.word	0x58025458
 80028ec:	5802546c 	.word	0x5802546c
 80028f0:	58025480 	.word	0x58025480
 80028f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d160      	bne.n	80029c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_DMA_IRQHandler+0xc74>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04a      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a7d      	ldr	r2, [pc, #500]	; (8002b08 <HAL_DMA_IRQHandler+0xc78>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d045      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7c      	ldr	r2, [pc, #496]	; (8002b0c <HAL_DMA_IRQHandler+0xc7c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d040      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <HAL_DMA_IRQHandler+0xc80>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d03b      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <HAL_DMA_IRQHandler+0xc84>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d036      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a77      	ldr	r2, [pc, #476]	; (8002b18 <HAL_DMA_IRQHandler+0xc88>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d031      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a76      	ldr	r2, [pc, #472]	; (8002b1c <HAL_DMA_IRQHandler+0xc8c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d02c      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a74      	ldr	r2, [pc, #464]	; (8002b20 <HAL_DMA_IRQHandler+0xc90>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d027      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a73      	ldr	r2, [pc, #460]	; (8002b24 <HAL_DMA_IRQHandler+0xc94>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d022      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a71      	ldr	r2, [pc, #452]	; (8002b28 <HAL_DMA_IRQHandler+0xc98>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a70      	ldr	r2, [pc, #448]	; (8002b2c <HAL_DMA_IRQHandler+0xc9c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d018      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_DMA_IRQHandler+0xca0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6d      	ldr	r2, [pc, #436]	; (8002b34 <HAL_DMA_IRQHandler+0xca4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6b      	ldr	r2, [pc, #428]	; (8002b38 <HAL_DMA_IRQHandler+0xca8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <HAL_DMA_IRQHandler+0xcac>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a68      	ldr	r2, [pc, #416]	; (8002b40 <HAL_DMA_IRQHandler+0xcb0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <HAL_DMA_IRQHandler+0xb24>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e007      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb34>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0204 	bic.w	r2, r2, #4
 80029c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8165 	beq.w	8002c98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029d6:	e15f      	b.n	8002c98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2202      	movs	r2, #2
 80029e2:	409a      	lsls	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c5 	beq.w	8002b78 <HAL_DMA_IRQHandler+0xce8>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80bf 	beq.w	8002b78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2202      	movs	r2, #2
 8002a04:	409a      	lsls	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 813a 	beq.w	8002c9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a30:	e134      	b.n	8002c9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8130 	beq.w	8002c9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a44:	e12a      	b.n	8002c9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8089 	bne.w	8002b64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <HAL_DMA_IRQHandler+0xc74>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d04a      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_DMA_IRQHandler+0xc78>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d045      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_DMA_IRQHandler+0xc7c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d040      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_DMA_IRQHandler+0xc80>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d03b      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <HAL_DMA_IRQHandler+0xc84>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d036      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_DMA_IRQHandler+0xc88>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_DMA_IRQHandler+0xc8c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d02c      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_DMA_IRQHandler+0xc90>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d027      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_DMA_IRQHandler+0xc94>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_DMA_IRQHandler+0xc98>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_DMA_IRQHandler+0xc9c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_DMA_IRQHandler+0xca0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_DMA_IRQHandler+0xca4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_DMA_IRQHandler+0xca8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_DMA_IRQHandler+0xcac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xc62>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_DMA_IRQHandler+0xcb0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d128      	bne.n	8002b44 <HAL_DMA_IRQHandler+0xcb4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0214 	bic.w	r2, r2, #20
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e027      	b.n	8002b54 <HAL_DMA_IRQHandler+0xcc4>
 8002b04:	40020010 	.word	0x40020010
 8002b08:	40020028 	.word	0x40020028
 8002b0c:	40020040 	.word	0x40020040
 8002b10:	40020058 	.word	0x40020058
 8002b14:	40020070 	.word	0x40020070
 8002b18:	40020088 	.word	0x40020088
 8002b1c:	400200a0 	.word	0x400200a0
 8002b20:	400200b8 	.word	0x400200b8
 8002b24:	40020410 	.word	0x40020410
 8002b28:	40020428 	.word	0x40020428
 8002b2c:	40020440 	.word	0x40020440
 8002b30:	40020458 	.word	0x40020458
 8002b34:	40020470 	.word	0x40020470
 8002b38:	40020488 	.word	0x40020488
 8002b3c:	400204a0 	.word	0x400204a0
 8002b40:	400204b8 	.word	0x400204b8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 020a 	bic.w	r2, r2, #10
 8002b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b76:	e091      	b.n	8002c9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8088 	beq.w	8002c9e <HAL_DMA_IRQHandler+0xe0e>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8082 	beq.w	8002c9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_DMA_IRQHandler+0xe14>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04a      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3f      	ldr	r2, [pc, #252]	; (8002ca8 <HAL_DMA_IRQHandler+0xe18>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d045      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <HAL_DMA_IRQHandler+0xe1c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d040      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a3c      	ldr	r2, [pc, #240]	; (8002cb0 <HAL_DMA_IRQHandler+0xe20>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d03b      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_DMA_IRQHandler+0xe24>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d036      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <HAL_DMA_IRQHandler+0xe28>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_DMA_IRQHandler+0xe2c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02c      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a36      	ldr	r2, [pc, #216]	; (8002cc0 <HAL_DMA_IRQHandler+0xe30>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d027      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a35      	ldr	r2, [pc, #212]	; (8002cc4 <HAL_DMA_IRQHandler+0xe34>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d022      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a33      	ldr	r2, [pc, #204]	; (8002cc8 <HAL_DMA_IRQHandler+0xe38>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01d      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <HAL_DMA_IRQHandler+0xe3c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	; (8002cd0 <HAL_DMA_IRQHandler+0xe40>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_DMA_IRQHandler+0xe44>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_DMA_IRQHandler+0xe48>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <HAL_DMA_IRQHandler+0xe4c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_DMA_IRQHandler+0xe50>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <HAL_DMA_IRQHandler+0xdbc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 021c 	bic.w	r2, r2, #28
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <HAL_DMA_IRQHandler+0xdcc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020e 	bic.w	r2, r2, #14
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	e004      	b.n	8002c9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002c94:	bf00      	nop
 8002c96:	e002      	b.n	8002c9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8

08002ce4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7f      	ldr	r2, [pc, #508]	; (8002f00 <DMA_SetConfig+0x21c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d072      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7d      	ldr	r2, [pc, #500]	; (8002f04 <DMA_SetConfig+0x220>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d06d      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <DMA_SetConfig+0x224>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d068      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <DMA_SetConfig+0x228>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d063      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a79      	ldr	r2, [pc, #484]	; (8002f10 <DMA_SetConfig+0x22c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d05e      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <DMA_SetConfig+0x230>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d059      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a76      	ldr	r2, [pc, #472]	; (8002f18 <DMA_SetConfig+0x234>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d054      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a74      	ldr	r2, [pc, #464]	; (8002f1c <DMA_SetConfig+0x238>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04f      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a73      	ldr	r2, [pc, #460]	; (8002f20 <DMA_SetConfig+0x23c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d04a      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a71      	ldr	r2, [pc, #452]	; (8002f24 <DMA_SetConfig+0x240>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d045      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a70      	ldr	r2, [pc, #448]	; (8002f28 <DMA_SetConfig+0x244>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d040      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6e      	ldr	r2, [pc, #440]	; (8002f2c <DMA_SetConfig+0x248>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d03b      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6d      	ldr	r2, [pc, #436]	; (8002f30 <DMA_SetConfig+0x24c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d036      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6b      	ldr	r2, [pc, #428]	; (8002f34 <DMA_SetConfig+0x250>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d031      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <DMA_SetConfig+0x254>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d02c      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	; (8002f3c <DMA_SetConfig+0x258>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d027      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <DMA_SetConfig+0x25c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <DMA_SetConfig+0x260>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01d      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a64      	ldr	r2, [pc, #400]	; (8002f48 <DMA_SetConfig+0x264>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a62      	ldr	r2, [pc, #392]	; (8002f4c <DMA_SetConfig+0x268>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a61      	ldr	r2, [pc, #388]	; (8002f50 <DMA_SetConfig+0x26c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5f      	ldr	r2, [pc, #380]	; (8002f54 <DMA_SetConfig+0x270>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5e      	ldr	r2, [pc, #376]	; (8002f58 <DMA_SetConfig+0x274>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <DMA_SetConfig+0x10a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <DMA_SetConfig+0x278>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <DMA_SetConfig+0x10e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <DMA_SetConfig+0x110>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <DMA_SetConfig+0x21c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d04a      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <DMA_SetConfig+0x220>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d045      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <DMA_SetConfig+0x224>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d040      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <DMA_SetConfig+0x228>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d03b      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <DMA_SetConfig+0x22c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d036      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <DMA_SetConfig+0x230>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d031      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <DMA_SetConfig+0x234>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02c      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <DMA_SetConfig+0x238>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d027      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <DMA_SetConfig+0x23c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d022      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2c      	ldr	r2, [pc, #176]	; (8002f24 <DMA_SetConfig+0x240>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d01d      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <DMA_SetConfig+0x244>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d018      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <DMA_SetConfig+0x248>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <DMA_SetConfig+0x24c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00e      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <DMA_SetConfig+0x250>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <DMA_SetConfig+0x254>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <DMA_SetConfig+0x1d0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <DMA_SetConfig+0x258>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <DMA_SetConfig+0x1d4>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <DMA_SetConfig+0x1d6>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d059      	beq.n	8002f72 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	223f      	movs	r2, #63	; 0x3f
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002edc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d138      	bne.n	8002f60 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002efe:	e086      	b.n	800300e <DMA_SetConfig+0x32a>
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
 8002f40:	58025408 	.word	0x58025408
 8002f44:	5802541c 	.word	0x5802541c
 8002f48:	58025430 	.word	0x58025430
 8002f4c:	58025444 	.word	0x58025444
 8002f50:	58025458 	.word	0x58025458
 8002f54:	5802546c 	.word	0x5802546c
 8002f58:	58025480 	.word	0x58025480
 8002f5c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
}
 8002f70:	e04d      	b.n	800300e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a29      	ldr	r2, [pc, #164]	; (800301c <DMA_SetConfig+0x338>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a27      	ldr	r2, [pc, #156]	; (8003020 <DMA_SetConfig+0x33c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a26      	ldr	r2, [pc, #152]	; (8003024 <DMA_SetConfig+0x340>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <DMA_SetConfig+0x344>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a23      	ldr	r2, [pc, #140]	; (800302c <DMA_SetConfig+0x348>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a21      	ldr	r2, [pc, #132]	; (8003030 <DMA_SetConfig+0x34c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a20      	ldr	r2, [pc, #128]	; (8003034 <DMA_SetConfig+0x350>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <DMA_SetConfig+0x2de>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <DMA_SetConfig+0x354>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <DMA_SetConfig+0x2e2>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <DMA_SetConfig+0x2e4>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d108      	bne.n	8002ffe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
}
 8002ffc:	e007      	b.n	800300e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	58025408 	.word	0x58025408
 8003020:	5802541c 	.word	0x5802541c
 8003024:	58025430 	.word	0x58025430
 8003028:	58025444 	.word	0x58025444
 800302c:	58025458 	.word	0x58025458
 8003030:	5802546c 	.word	0x5802546c
 8003034:	58025480 	.word	0x58025480
 8003038:	58025494 	.word	0x58025494

0800303c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a42      	ldr	r2, [pc, #264]	; (8003154 <DMA_CalcBaseAndBitshift+0x118>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d04a      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a41      	ldr	r2, [pc, #260]	; (8003158 <DMA_CalcBaseAndBitshift+0x11c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d045      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3f      	ldr	r2, [pc, #252]	; (800315c <DMA_CalcBaseAndBitshift+0x120>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d040      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3e      	ldr	r2, [pc, #248]	; (8003160 <DMA_CalcBaseAndBitshift+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d03b      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <DMA_CalcBaseAndBitshift+0x128>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d036      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <DMA_CalcBaseAndBitshift+0x12c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d031      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a39      	ldr	r2, [pc, #228]	; (800316c <DMA_CalcBaseAndBitshift+0x130>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02c      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a38      	ldr	r2, [pc, #224]	; (8003170 <DMA_CalcBaseAndBitshift+0x134>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d027      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <DMA_CalcBaseAndBitshift+0x138>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d022      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a35      	ldr	r2, [pc, #212]	; (8003178 <DMA_CalcBaseAndBitshift+0x13c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d01d      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <DMA_CalcBaseAndBitshift+0x140>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d018      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a32      	ldr	r2, [pc, #200]	; (8003180 <DMA_CalcBaseAndBitshift+0x144>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a30      	ldr	r2, [pc, #192]	; (8003184 <DMA_CalcBaseAndBitshift+0x148>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <DMA_CalcBaseAndBitshift+0x14c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	; (800318c <DMA_CalcBaseAndBitshift+0x150>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xa8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <DMA_CalcBaseAndBitshift+0x154>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <DMA_CalcBaseAndBitshift+0xac>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <DMA_CalcBaseAndBitshift+0xae>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d024      	beq.n	8003138 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3b10      	subs	r3, #16
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <DMA_CalcBaseAndBitshift+0x158>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	4a24      	ldr	r2, [pc, #144]	; (8003198 <DMA_CalcBaseAndBitshift+0x15c>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d908      	bls.n	8003128 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <DMA_CalcBaseAndBitshift+0x160>)
 800311e:	4013      	ands	r3, r2
 8003120:	1d1a      	adds	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	659a      	str	r2, [r3, #88]	; 0x58
 8003126:	e00d      	b.n	8003144 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <DMA_CalcBaseAndBitshift+0x160>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	e005      	b.n	8003144 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
 8003194:	aaaaaaab 	.word	0xaaaaaaab
 8003198:	080051f0 	.word	0x080051f0
 800319c:	fffffc00 	.word	0xfffffc00

080031a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d120      	bne.n	80031f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d858      	bhi.n	800326e <DMA_CheckFifoParam+0xce>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x24>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031e7 	.word	0x080031e7
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	0800326f 	.word	0x0800326f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d048      	beq.n	8003272 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031e4:	e045      	b.n	8003272 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ee:	d142      	bne.n	8003276 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031f4:	e03f      	b.n	8003276 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d123      	bne.n	8003248 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b03      	cmp	r3, #3
 8003206:	d838      	bhi.n	800327a <DMA_CheckFifoParam+0xda>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <DMA_CheckFifoParam+0x70>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003221 	.word	0x08003221
 8003214:	08003227 	.word	0x08003227
 8003218:	08003221 	.word	0x08003221
 800321c:	08003239 	.word	0x08003239
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
        break;
 8003224:	e030      	b.n	8003288 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d025      	beq.n	800327e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003236:	e022      	b.n	800327e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003240:	d11f      	bne.n	8003282 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003246:	e01c      	b.n	8003282 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <DMA_CheckFifoParam+0xb6>
 8003250:	2b03      	cmp	r3, #3
 8003252:	d003      	beq.n	800325c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003254:	e018      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
        break;
 800325a:	e015      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
    break;
 800326c:	e00b      	b.n	8003286 <DMA_CheckFifoParam+0xe6>
        break;
 800326e:	bf00      	nop
 8003270:	e00a      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        break;
 8003272:	bf00      	nop
 8003274:	e008      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        break;
 8003276:	bf00      	nop
 8003278:	e006      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        break;
 800327a:	bf00      	nop
 800327c:	e004      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
        break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
    break;
 8003286:	bf00      	nop
    }
  }

  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a38      	ldr	r2, [pc, #224]	; (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a36      	ldr	r2, [pc, #216]	; (8003390 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a35      	ldr	r2, [pc, #212]	; (8003394 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a33      	ldr	r2, [pc, #204]	; (8003398 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a32      	ldr	r2, [pc, #200]	; (800339c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a30      	ldr	r2, [pc, #192]	; (80033a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01a      	beq.n	8003336 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b08      	subs	r3, #8
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003324:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003334:	e024      	b.n	8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3b10      	subs	r3, #16
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d806      	bhi.n	800335e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d902      	bls.n	800335e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3308      	adds	r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003370:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	58025408 	.word	0x58025408
 8003390:	5802541c 	.word	0x5802541c
 8003394:	58025430 	.word	0x58025430
 8003398:	58025444 	.word	0x58025444
 800339c:	58025458 	.word	0x58025458
 80033a0:	5802546c 	.word	0x5802546c
 80033a4:	58025480 	.word	0x58025480
 80033a8:	58025494 	.word	0x58025494
 80033ac:	cccccccd 	.word	0xcccccccd
 80033b0:	16009600 	.word	0x16009600
 80033b4:	58025880 	.word	0x58025880
 80033b8:	aaaaaaab 	.word	0xaaaaaaab
 80033bc:	400204b8 	.word	0x400204b8
 80033c0:	4002040f 	.word	0x4002040f
 80033c4:	10008200 	.word	0x10008200
 80033c8:	40020880 	.word	0x40020880

080033cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d04a      	beq.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d847      	bhi.n	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a25      	ldr	r2, [pc, #148]	; (8003484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a24      	ldr	r2, [pc, #144]	; (8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01d      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	; (800348c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a21      	ldr	r2, [pc, #132]	; (8003490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003454:	671a      	str	r2, [r3, #112]	; 0x70
 8003456:	e009      	b.n	800346c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800346a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	2201      	movs	r2, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	58025408 	.word	0x58025408
 8003488:	5802541c 	.word	0x5802541c
 800348c:	58025430 	.word	0x58025430
 8003490:	58025444 	.word	0x58025444
 8003494:	58025458 	.word	0x58025458
 8003498:	5802546c 	.word	0x5802546c
 800349c:	58025480 	.word	0x58025480
 80034a0:	58025494 	.word	0x58025494
 80034a4:	1600963f 	.word	0x1600963f
 80034a8:	58025940 	.word	0x58025940
 80034ac:	1000823f 	.word	0x1000823f
 80034b0:	40020940 	.word	0x40020940

080034b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_GPIO_Init+0x234>)
 80034c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034c6:	e194      	b.n	80037f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8186 	beq.w	80037ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d005      	beq.n	80034f8 <HAL_GPIO_Init+0x44>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d130      	bne.n	800355a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352e:	2201      	movs	r2, #1
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0201 	and.w	r2, r3, #1
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b03      	cmp	r3, #3
 8003564:	d017      	beq.n	8003596 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d123      	bne.n	80035ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	69b9      	ldr	r1, [r7, #24]
 80035e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80e0 	beq.w	80037ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x238>)
 800362e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003632:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <HAL_GPIO_Init+0x238>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_GPIO_Init+0x238>)
 800363e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <HAL_GPIO_Init+0x23c>)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_GPIO_Init+0x240>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d052      	beq.n	800371c <HAL_GPIO_Init+0x268>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_GPIO_Init+0x244>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d031      	beq.n	80036e2 <HAL_GPIO_Init+0x22e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_GPIO_Init+0x248>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02b      	beq.n	80036de <HAL_GPIO_Init+0x22a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_GPIO_Init+0x24c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d025      	beq.n	80036da <HAL_GPIO_Init+0x226>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_GPIO_Init+0x250>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01f      	beq.n	80036d6 <HAL_GPIO_Init+0x222>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_GPIO_Init+0x254>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x21e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_GPIO_Init+0x258>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x21a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_GPIO_Init+0x25c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x216>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_GPIO_Init+0x260>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x212>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_GPIO_Init+0x264>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x20e>
 80036be:	2309      	movs	r3, #9
 80036c0:	e02d      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036c2:	230a      	movs	r3, #10
 80036c4:	e02b      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e029      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036ca:	2307      	movs	r3, #7
 80036cc:	e027      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036ce:	2306      	movs	r3, #6
 80036d0:	e025      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036d2:	2305      	movs	r3, #5
 80036d4:	e023      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036d6:	2304      	movs	r3, #4
 80036d8:	e021      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036da:	2303      	movs	r3, #3
 80036dc:	e01f      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e01d      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01b      	b.n	800371e <HAL_GPIO_Init+0x26a>
 80036e6:	bf00      	nop
 80036e8:	58000080 	.word	0x58000080
 80036ec:	58024400 	.word	0x58024400
 80036f0:	58000400 	.word	0x58000400
 80036f4:	58020000 	.word	0x58020000
 80036f8:	58020400 	.word	0x58020400
 80036fc:	58020800 	.word	0x58020800
 8003700:	58020c00 	.word	0x58020c00
 8003704:	58021000 	.word	0x58021000
 8003708:	58021400 	.word	0x58021400
 800370c:	58021800 	.word	0x58021800
 8003710:	58021c00 	.word	0x58021c00
 8003714:	58022000 	.word	0x58022000
 8003718:	58022400 	.word	0x58022400
 800371c:	2300      	movs	r3, #0
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	f002 0203 	and.w	r2, r2, #3
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	4093      	lsls	r3, r2
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372e:	4938      	ldr	r1, [pc, #224]	; (8003810 <HAL_GPIO_Init+0x35c>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f ae63 	bne.w	80034c8 <HAL_GPIO_Init+0x14>
  }
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	58000400 	.word	0x58000400

08003814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00a      	beq.n	800383e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e01f      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e01d      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	490f      	ldr	r1, [pc, #60]	; (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800384e:	f7fd f8ed 	bl	8000a2c <HAL_GetTick>
 8003852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003854:	e009      	b.n	800386a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003856:	f7fd f8e9 	bl	8000a2c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003864:	d901      	bls.n	800386a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003876:	d1ee      	bne.n	8003856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	58024800 	.word	0x58024800

08003888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f000 bc48 	b.w	800412c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8088 	beq.w	80039ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	4b99      	ldr	r3, [pc, #612]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b4:	4b96      	ldr	r3, [pc, #600]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d007      	beq.n	80038d0 <HAL_RCC_OscConfig+0x48>
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b18      	cmp	r3, #24
 80038c4:	d111      	bne.n	80038ea <HAL_RCC_OscConfig+0x62>
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	4b8f      	ldr	r3, [pc, #572]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d06d      	beq.n	80039b8 <HAL_RCC_OscConfig+0x130>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d169      	bne.n	80039b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f000 bc21 	b.w	800412c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x7a>
 80038f4:	4b86      	ldr	r3, [pc, #536]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a85      	ldr	r2, [pc, #532]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x9c>
 800390a:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a80      	ldr	r2, [pc, #512]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b7e      	ldr	r3, [pc, #504]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7d      	ldr	r2, [pc, #500]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xc0>
 800392e:	4b78      	ldr	r3, [pc, #480]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a77      	ldr	r2, [pc, #476]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a74      	ldr	r2, [pc, #464]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003948:	4b71      	ldr	r3, [pc, #452]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a70      	ldr	r2, [pc, #448]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b6e      	ldr	r3, [pc, #440]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6d      	ldr	r2, [pc, #436]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd f860 	bl	8000a2c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd f85c 	bl	8000a2c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e3d4      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd f84c 	bl	8000a2c <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fd f848 	bl	8000a2c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e3c0      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039aa:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x110>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80ca 	beq.w	8003b5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c8:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039d2:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_RCC_OscConfig+0x166>
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b18      	cmp	r3, #24
 80039e2:	d156      	bne.n	8003a92 <HAL_RCC_OscConfig+0x20a>
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d151      	bne.n	8003a92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ee:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e392      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0219 	bic.w	r2, r3, #25
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	493f      	ldr	r1, [pc, #252]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd f808 	bl	8000a2c <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fd f804 	bl	8000a2c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e37c      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	f7fd f801 	bl	8000a44 <HAL_GetREVID>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d817      	bhi.n	8003a7c <HAL_RCC_OscConfig+0x1f4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d108      	bne.n	8003a66 <HAL_RCC_OscConfig+0x1de>
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a64:	e07a      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	031b      	lsls	r3, r3, #12
 8003a74:	4926      	ldr	r1, [pc, #152]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7a:	e06f      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	4921      	ldr	r1, [pc, #132]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a90:	e064      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d047      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0219 	bic.w	r2, r3, #25
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	491a      	ldr	r1, [pc, #104]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fc ffbe 	bl	8000a2c <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fc ffba 	bl	8000a2c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e332      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	f7fc ffb7 	bl	8000a44 <HAL_GetREVID>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d819      	bhi.n	8003b14 <HAL_RCC_OscConfig+0x28c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d108      	bne.n	8003afa <HAL_RCC_OscConfig+0x272>
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003af0:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af6:	6053      	str	r3, [r2, #4]
 8003af8:	e030      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	031b      	lsls	r3, r3, #12
 8003b08:	4901      	ldr	r1, [pc, #4]	; (8003b10 <HAL_RCC_OscConfig+0x288>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
 8003b0e:	e025      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
 8003b10:	58024400 	.word	0x58024400
 8003b14:	4b9a      	ldr	r3, [pc, #616]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	4997      	ldr	r1, [pc, #604]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	e018      	b.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b95      	ldr	r3, [pc, #596]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a94      	ldr	r2, [pc, #592]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fc ff79 	bl	8000a2c <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fc ff75 	bl	8000a2c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e2ed      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b50:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a9 	beq.w	8003cbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b74:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d007      	beq.n	8003b90 <HAL_RCC_OscConfig+0x308>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b18      	cmp	r3, #24
 8003b84:	d13a      	bne.n	8003bfc <HAL_RCC_OscConfig+0x374>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d135      	bne.n	8003bfc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x320>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e2c1      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba8:	f7fc ff4c 	bl	8000a44 <HAL_GetREVID>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d817      	bhi.n	8003be6 <HAL_RCC_OscConfig+0x35e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x348>
 8003bbe:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bce:	e075      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd0:	4b6b      	ldr	r3, [pc, #428]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	069b      	lsls	r3, r3, #26
 8003bde:	4968      	ldr	r1, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be4:	e06a      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be6:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	4962      	ldr	r1, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfa:	e05f      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d042      	beq.n	8003c8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c04:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fc ff0c 	bl	8000a2c <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c18:	f7fc ff08 	bl	8000a2c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e280      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2a:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c36:	f7fc ff05 	bl	8000a44 <HAL_GetREVID>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d817      	bhi.n	8003c74 <HAL_RCC_OscConfig+0x3ec>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d108      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3d6>
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c54:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c5a:	6053      	str	r3, [r2, #4]
 8003c5c:	e02e      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
 8003c5e:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	069b      	lsls	r3, r3, #26
 8003c6c:	4944      	ldr	r1, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
 8003c72:	e023      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	493f      	ldr	r1, [pc, #252]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e018      	b.n	8003cbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fc fec9 	bl	8000a2c <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c9e:	f7fc fec5 	bl	8000a2c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e23d      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d036      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d019      	beq.n	8003d04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fc fea6 	bl	8000a2c <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fc fea2 	bl	8000a2c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e21a      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x45c>
 8003d02:	e018      	b.n	8003d36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fc fe8c 	bl	8000a2c <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fc fe88 	bl	8000a2c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e200      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d039      	beq.n	8003db6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d56:	f7fc fe69 	bl	8000a2c <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5e:	f7fc fe65 	bl	8000a2c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1dd      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_RCC_OscConfig+0x4f8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
 8003d7c:	e01b      	b.n	8003db6 <HAL_RCC_OscConfig+0x52e>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d84:	4b9b      	ldr	r3, [pc, #620]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a9a      	ldr	r2, [pc, #616]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d90:	f7fc fe4c 	bl	8000a2c <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d98:	f7fc fe48 	bl	8000a2c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1c0      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003daa:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8081 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <HAL_RCC_OscConfig+0x770>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a8b      	ldr	r2, [pc, #556]	; (8003ff8 <HAL_RCC_OscConfig+0x770>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd0:	f7fc fe2c 	bl	8000a2c <HAL_GetTick>
 8003dd4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7fc fe28 	bl	8000a2c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1a0      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dea:	4b83      	ldr	r3, [pc, #524]	; (8003ff8 <HAL_RCC_OscConfig+0x770>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x584>
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e02d      	b.n	8003e68 <HAL_RCC_OscConfig+0x5e0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x5a6>
 8003e14:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a76      	ldr	r2, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x5e0>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5c8>
 8003e36:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a6b      	ldr	r2, [pc, #428]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0x5e0>
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	4b65      	ldr	r3, [pc, #404]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a64      	ldr	r2, [pc, #400]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e62:	f023 0304 	bic.w	r3, r3, #4
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fc fddc 	bl	8000a2c <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fc fdd8 	bl	8000a2c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e14e      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8e:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0ee      	beq.n	8003e78 <HAL_RCC_OscConfig+0x5f0>
 8003e9a:	e014      	b.n	8003ec6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fc fdc6 	bl	8000a2c <HAL_GetTick>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fc fdc2 	bl	8000a2c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e138      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ee      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 812d 	beq.w	800412a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ed0:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed8:	2b18      	cmp	r3, #24
 8003eda:	f000 80bd 	beq.w	8004058 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	f040 809e 	bne.w	8004024 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a41      	ldr	r2, [pc, #260]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fc fd9a 	bl	8000a2c <HAL_GetTick>
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fc fd96 	bl	8000a2c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e10e      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x774>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f2a:	0112      	lsls	r2, r2, #4
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4931      	ldr	r1, [pc, #196]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	628b      	str	r3, [r1, #40]	; 0x28
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	3b01      	subs	r3, #1
 8003f44:	025b      	lsls	r3, r3, #9
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	061b      	lsls	r3, r3, #24
 8003f60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f64:	4923      	ldr	r1, [pc, #140]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	491b      	ldr	r1, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f023 020c 	bic.w	r2, r3, #12
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4917      	ldr	r1, [pc, #92]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f023 0202 	bic.w	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fc fd1f 	bl	8000a2c <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ff0:	e011      	b.n	8004016 <HAL_RCC_OscConfig+0x78e>
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	58024800 	.word	0x58024800
 8003ffc:	fffffc0c 	.word	0xfffffc0c
 8004000:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fc fd12 	bl	8000a2c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e08a      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x77c>
 8004022:	e082      	b.n	800412a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a42      	ldr	r2, [pc, #264]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fc fcfc 	bl	8000a2c <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fc fcf8 	bl	8000a2c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e070      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x7b0>
 8004056:	e068      	b.n	800412a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004058:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800405e:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b01      	cmp	r3, #1
 800406a:	d031      	beq.n	80040d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f003 0203 	and.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d12a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d122      	bne.n	80040d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0e1b      	lsrs	r3, r3, #24
 80040c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e02b      	b.n	800412c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d01f      	beq.n	800412a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040f6:	f7fc fc99 	bl	8000a2c <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040fc:	bf00      	nop
 80040fe:	f7fc fc95 	bl	8000a2c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	4293      	cmp	r3, r2
 8004108:	d0f9      	beq.n	80040fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_RCC_OscConfig+0x8b0>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004116:	00d2      	lsls	r2, r2, #3
 8004118:	4906      	ldr	r1, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 800411a:	4313      	orrs	r3, r2
 800411c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_RCC_OscConfig+0x8ac>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3730      	adds	r7, #48	; 0x30
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58024400 	.word	0x58024400
 8004138:	ffff0007 	.word	0xffff0007

0800413c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e19c      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b8a      	ldr	r3, [pc, #552]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d910      	bls.n	8004180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b87      	ldr	r3, [pc, #540]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	4985      	ldr	r1, [pc, #532]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b83      	ldr	r3, [pc, #524]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e184      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800419c:	4b78      	ldr	r3, [pc, #480]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4975      	ldr	r1, [pc, #468]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	496a      	ldr	r1, [pc, #424]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041f8:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	495e      	ldr	r1, [pc, #376]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d010      	beq.n	8004238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004222:	429a      	cmp	r2, r3
 8004224:	d908      	bls.n	8004238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004226:	4b56      	ldr	r3, [pc, #344]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	4953      	ldr	r1, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004234:	4313      	orrs	r3, r2
 8004236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	4b4d      	ldr	r3, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	429a      	cmp	r2, r3
 8004252:	d908      	bls.n	8004266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f023 020f 	bic.w	r2, r3, #15
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4947      	ldr	r1, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004262:	4313      	orrs	r3, r2
 8004264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d055      	beq.n	800431e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004272:	4b43      	ldr	r3, [pc, #268]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4940      	ldr	r1, [pc, #256]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004280:	4313      	orrs	r3, r2
 8004282:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d107      	bne.n	800429c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800428c:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d121      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0f6      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d115      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0ea      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0de      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0d6      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f023 0207 	bic.w	r2, r3, #7
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4925      	ldr	r1, [pc, #148]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ee:	f7fc fb9d 	bl	8000a2c <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f4:	e00a      	b.n	800430c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f6:	f7fc fb99 	bl	8000a2c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0be      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	429a      	cmp	r2, r3
 800431c:	d1eb      	bne.n	80042f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	429a      	cmp	r2, r3
 8004338:	d208      	bcs.n	800434c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f023 020f 	bic.w	r2, r3, #15
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x244>)
 8004348:	4313      	orrs	r3, r2
 800434a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d214      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	4906      	ldr	r1, [pc, #24]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_ClockConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e086      	b.n	800448a <HAL_RCC_ClockConfig+0x34e>
 800437c:	52002000 	.word	0x52002000
 8004380:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800439c:	429a      	cmp	r2, r3
 800439e:	d208      	bcs.n	80043b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043a0:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	4939      	ldr	r1, [pc, #228]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d208      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	492e      	ldr	r1, [pc, #184]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d208      	bcs.n	800440e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4922      	ldr	r1, [pc, #136]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 800440a:	4313      	orrs	r3, r2
 800440c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004426:	429a      	cmp	r2, r3
 8004428:	d208      	bcs.n	800443c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4917      	ldr	r1, [pc, #92]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 8004438:	4313      	orrs	r3, r2
 800443a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800443c:	f000 f834 	bl	80044a8 <HAL_RCC_GetSysClockFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	4912      	ldr	r1, [pc, #72]	; (8004498 <HAL_RCC_ClockConfig+0x35c>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_RCC_ClockConfig+0x358>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <HAL_RCC_ClockConfig+0x35c>)
 8004464:	5cd3      	ldrb	r3, [r2, r3]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x360>)
 8004472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004474:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x364>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_RCC_ClockConfig+0x368>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc fa8a 	bl	8000998 <HAL_InitTick>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	58024400 	.word	0x58024400
 8004498:	080051e0 	.word	0x080051e0
 800449c:	24000044 	.word	0x24000044
 80044a0:	24000040 	.word	0x24000040
 80044a4:	24000048 	.word	0x24000048

080044a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ae:	4bb3      	ldr	r3, [pc, #716]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b6:	2b18      	cmp	r3, #24
 80044b8:	f200 8155 	bhi.w	8004766 <HAL_RCC_GetSysClockFreq+0x2be>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	08004529 	.word	0x08004529
 80044c8:	08004767 	.word	0x08004767
 80044cc:	08004767 	.word	0x08004767
 80044d0:	08004767 	.word	0x08004767
 80044d4:	08004767 	.word	0x08004767
 80044d8:	08004767 	.word	0x08004767
 80044dc:	08004767 	.word	0x08004767
 80044e0:	08004767 	.word	0x08004767
 80044e4:	0800454f 	.word	0x0800454f
 80044e8:	08004767 	.word	0x08004767
 80044ec:	08004767 	.word	0x08004767
 80044f0:	08004767 	.word	0x08004767
 80044f4:	08004767 	.word	0x08004767
 80044f8:	08004767 	.word	0x08004767
 80044fc:	08004767 	.word	0x08004767
 8004500:	08004767 	.word	0x08004767
 8004504:	08004555 	.word	0x08004555
 8004508:	08004767 	.word	0x08004767
 800450c:	08004767 	.word	0x08004767
 8004510:	08004767 	.word	0x08004767
 8004514:	08004767 	.word	0x08004767
 8004518:	08004767 	.word	0x08004767
 800451c:	08004767 	.word	0x08004767
 8004520:	08004767 	.word	0x08004767
 8004524:	0800455b 	.word	0x0800455b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004528:	4b94      	ldr	r3, [pc, #592]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004534:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	4a90      	ldr	r2, [pc, #576]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004546:	e111      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004548:	4b8d      	ldr	r3, [pc, #564]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800454a:	61bb      	str	r3, [r7, #24]
      break;
 800454c:	e10e      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800454e:	4b8d      	ldr	r3, [pc, #564]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004550:	61bb      	str	r3, [r7, #24]
      break;
 8004552:	e10b      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004554:	4b8c      	ldr	r3, [pc, #560]	; (8004788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004556:	61bb      	str	r3, [r7, #24]
      break;
 8004558:	e108      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800455a:	4b88      	ldr	r3, [pc, #544]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004564:	4b85      	ldr	r3, [pc, #532]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004570:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800457a:	4b80      	ldr	r3, [pc, #512]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80e1 	beq.w	8004760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	f000 8083 	beq.w	80046ac <HAL_RCC_GetSysClockFreq+0x204>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f200 80a1 	bhi.w	80046f0 <HAL_RCC_GetSysClockFreq+0x248>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x114>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d056      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ba:	e099      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02d      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045c8:	4b6c      	ldr	r3, [pc, #432]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	08db      	lsrs	r3, r3, #3
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	4a6b      	ldr	r2, [pc, #428]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f2:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004602:	ed97 6a02 	vldr	s12, [r7, #8]
 8004606:	eddf 5a61 	vldr	s11, [pc, #388]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e4>
 800460a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004622:	e087      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004646:	ed97 6a02 	vldr	s12, [r7, #8]
 800464a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e4>
 800464e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004662:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004666:	e065      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004794 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467a:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	ed97 6a02 	vldr	s12, [r7, #8]
 800468e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046aa:	e043      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004798 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ee:	e021      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004794 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a02 	vldr	s12, [r7, #8]
 8004716:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e4>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004732:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	0a5b      	lsrs	r3, r3, #9
 800473a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473e:	3301      	adds	r3, #1
 8004740:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800474c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004758:	ee17 3a90 	vmov	r3, s15
 800475c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800475e:	e005      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
      break;
 8004764:	e002      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004768:	61bb      	str	r3, [r7, #24]
      break;
 800476a:	bf00      	nop
  }

  return sysclockfreq;
 800476c:	69bb      	ldr	r3, [r7, #24]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	; 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	58024400 	.word	0x58024400
 8004780:	03d09000 	.word	0x03d09000
 8004784:	003d0900 	.word	0x003d0900
 8004788:	017d7840 	.word	0x017d7840
 800478c:	46000000 	.word	0x46000000
 8004790:	4c742400 	.word	0x4c742400
 8004794:	4a742400 	.word	0x4a742400
 8004798:	4bbebc20 	.word	0x4bbebc20

0800479c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e049      	b.n	8004842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fb ff96 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fad8 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d001      	beq.n	8004864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e04c      	b.n	80048fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_TIM_Base_Start+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d022      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d01d      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a22      	ldr	r2, [pc, #136]	; (8004910 <HAL_TIM_Base_Start+0xc4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d018      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a21      	ldr	r2, [pc, #132]	; (8004914 <HAL_TIM_Base_Start+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_TIM_Base_Start+0xcc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <HAL_TIM_Base_Start+0xd0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_TIM_Base_Start+0xd4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_Base_Start+0x70>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1b      	ldr	r2, [pc, #108]	; (8004924 <HAL_TIM_Base_Start+0xd8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d115      	bne.n	80048e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_TIM_Base_Start+0xdc>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d015      	beq.n	80048fa <HAL_TIM_Base_Start+0xae>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d011      	beq.n	80048fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e008      	b.n	80048fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e000      	b.n	80048fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40010400 	.word	0x40010400
 8004920:	40001800 	.word	0x40001800
 8004924:	40014000 	.word	0x40014000
 8004928:	00010007 	.word	0x00010007

0800492c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0202 	mvn.w	r2, #2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9ec 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9de 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9ef 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0204 	mvn.w	r2, #4
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9c6 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9b8 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f9c9 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0208 	mvn.w	r2, #8
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9a0 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f992 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f9a3 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f97a 	bl	8004d54 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f96c 	bl	8004d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f97d 	bl	8004d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0201 	mvn.w	r2, #1
 8004a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f94a 	bl	8004d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb41 	bl	8005148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb39 	bl	800515c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f937 	bl	8004d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0220 	mvn.w	r2, #32
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fb01 	bl	8005134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_ConfigClockSource+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0dc      	b.n	8004d12 <HAL_TIM_ConfigClockSource+0x1d6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4b6a      	ldr	r3, [pc, #424]	; (8004d1c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a64      	ldr	r2, [pc, #400]	; (8004d20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f000 80a9 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b94:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f200 80ae 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b9c:	4a61      	ldr	r2, [pc, #388]	; (8004d24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f000 80a1 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ba4:	4a5f      	ldr	r2, [pc, #380]	; (8004d24 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f200 80a6 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bac:	4a5e      	ldr	r2, [pc, #376]	; (8004d28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	f000 8099 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	; (8004d28 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	f200 809e 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bc0:	f000 8091 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bc8:	f200 8096 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd0:	f000 8089 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd8:	f200 808e 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d03e      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0x124>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	f200 8087 	bhi.w	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	f000 8086 	beq.w	8004cfe <HAL_TIM_ConfigClockSource+0x1c2>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d87f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d01a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0xf6>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d87b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d050      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x16a>
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d877      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d03c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x14a>
 8004c0c:	2b50      	cmp	r3, #80	; 0x50
 8004c0e:	d873      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d058      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x18a>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d86f      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d064      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d86b      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d060      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d867      	bhi.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d05a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c30:	e062      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f000 f9c9 	bl	8004fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e04f      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f000 f9b2 	bl	8004fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c82:	609a      	str	r2, [r3, #8]
      break;
 8004c84:	e03c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 f922 	bl	8004edc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2150      	movs	r1, #80	; 0x50
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f97c 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e02c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 f941 	bl	8004f3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2160      	movs	r1, #96	; 0x60
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f96c 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e01c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 f902 	bl	8004edc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f95c 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f000 f953 	bl	8004f9c <TIM_ITRx_SetConfig>
      break;
 8004cf6:	e003      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	ffceff88 	.word	0xffceff88
 8004d20:	00100040 	.word	0x00100040
 8004d24:	00100030 	.word	0x00100030
 8004d28:	00100020 	.word	0x00100020

08004d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a46      	ldr	r2, [pc, #280]	; (8004ebc <TIM_Base_SetConfig+0x12c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d00f      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a43      	ldr	r2, [pc, #268]	; (8004ec0 <TIM_Base_SetConfig+0x130>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a42      	ldr	r2, [pc, #264]	; (8004ec4 <TIM_Base_SetConfig+0x134>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a41      	ldr	r2, [pc, #260]	; (8004ec8 <TIM_Base_SetConfig+0x138>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a40      	ldr	r2, [pc, #256]	; (8004ecc <TIM_Base_SetConfig+0x13c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <TIM_Base_SetConfig+0x12c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01f      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d01b      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <TIM_Base_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d017      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <TIM_Base_SetConfig+0x134>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <TIM_Base_SetConfig+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <TIM_Base_SetConfig+0x13c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2e      	ldr	r2, [pc, #184]	; (8004ed0 <TIM_Base_SetConfig+0x140>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <TIM_Base_SetConfig+0x144>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <TIM_Base_SetConfig+0x148>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <TIM_Base_SetConfig+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00f      	beq.n	8004e88 <TIM_Base_SetConfig+0xf8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <TIM_Base_SetConfig+0x13c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <TIM_Base_SetConfig+0xf8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <TIM_Base_SetConfig+0x140>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0xf8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <TIM_Base_SetConfig+0x144>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0xf8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <TIM_Base_SetConfig+0x148>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d103      	bne.n	8004e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d105      	bne.n	8004eae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	611a      	str	r2, [r3, #16]
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40010400 	.word	0x40010400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 030a 	bic.w	r3, r3, #10
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0210 	bic.w	r2, r3, #16
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <TIM_ITRx_SetConfig+0x38>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f043 0307 	orr.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	ffcfff8f 	.word	0xffcfff8f

08004fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e06d      	b.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800506a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d01d      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40001800 	.word	0x40001800
 8005130:	40014000 	.word	0x40014000

08005134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <__libc_init_array>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	4d0d      	ldr	r5, [pc, #52]	; (80051a8 <__libc_init_array+0x38>)
 8005174:	4c0d      	ldr	r4, [pc, #52]	; (80051ac <__libc_init_array+0x3c>)
 8005176:	1b64      	subs	r4, r4, r5
 8005178:	10a4      	asrs	r4, r4, #2
 800517a:	2600      	movs	r6, #0
 800517c:	42a6      	cmp	r6, r4
 800517e:	d109      	bne.n	8005194 <__libc_init_array+0x24>
 8005180:	4d0b      	ldr	r5, [pc, #44]	; (80051b0 <__libc_init_array+0x40>)
 8005182:	4c0c      	ldr	r4, [pc, #48]	; (80051b4 <__libc_init_array+0x44>)
 8005184:	f000 f820 	bl	80051c8 <_init>
 8005188:	1b64      	subs	r4, r4, r5
 800518a:	10a4      	asrs	r4, r4, #2
 800518c:	2600      	movs	r6, #0
 800518e:	42a6      	cmp	r6, r4
 8005190:	d105      	bne.n	800519e <__libc_init_array+0x2e>
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	f855 3b04 	ldr.w	r3, [r5], #4
 8005198:	4798      	blx	r3
 800519a:	3601      	adds	r6, #1
 800519c:	e7ee      	b.n	800517c <__libc_init_array+0xc>
 800519e:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a2:	4798      	blx	r3
 80051a4:	3601      	adds	r6, #1
 80051a6:	e7f2      	b.n	800518e <__libc_init_array+0x1e>
 80051a8:	080051f8 	.word	0x080051f8
 80051ac:	080051f8 	.word	0x080051f8
 80051b0:	080051f8 	.word	0x080051f8
 80051b4:	080051fc 	.word	0x080051fc

080051b8 <memset>:
 80051b8:	4402      	add	r2, r0
 80051ba:	4603      	mov	r3, r0
 80051bc:	4293      	cmp	r3, r2
 80051be:	d100      	bne.n	80051c2 <memset+0xa>
 80051c0:	4770      	bx	lr
 80051c2:	f803 1b01 	strb.w	r1, [r3], #1
 80051c6:	e7f9      	b.n	80051bc <memset+0x4>

080051c8 <_init>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr

080051d4 <_fini>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr
